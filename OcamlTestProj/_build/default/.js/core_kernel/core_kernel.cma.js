(function(joo_global_object)
   {"use strict";
    var
     runtime=joo_global_object.jsoo_runtime,
     caml_ba_get_1=runtime.caml_ba_get_1,
     caml_ba_set_1=runtime.caml_ba_set_1,
     caml_bytes_unsafe_set=runtime.caml_bytes_unsafe_set,
     caml_check_bound=runtime.caml_check_bound,
     caml_compare=runtime.caml_compare,
     caml_fresh_oo_id=runtime.caml_fresh_oo_id,
     caml_int_compare=runtime.caml_int_compare,
     caml_list_of_js_array=runtime.caml_list_of_js_array,
     caml_log10_float=runtime.caml_log10_float,
     caml_ml_string_length=runtime.caml_ml_string_length,
     caml_obj_tag=runtime.caml_obj_tag,
     caml_register_global=runtime.caml_register_global,
     caml_string_compare=runtime.caml_string_compare,
     caml_string_get=runtime.caml_string_get,
     caml_string_notequal=runtime.caml_string_notequal,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes,
     caml_string_unsafe_get=runtime.caml_string_unsafe_get,
     caml_sys_argv=runtime.caml_sys_argv,
     caml_trampoline=runtime.caml_trampoline,
     caml_trampoline_return=runtime.caml_trampoline_return,
     caml_update_dummy=runtime.caml_update_dummy,
     caml_wrap_exception=runtime.caml_wrap_exception;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5
              ?f(a0,a1,a2,a3,a4)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4])}
    function caml_call6(f,a0,a1,a2,a3,a4,a5)
     {return f.length == 6
              ?f(a0,a1,a2,a3,a4,a5)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5])}
    function caml_call7(f,a0,a1,a2,a3,a4,a5,a6)
     {return f.length == 7
              ?f(a0,a1,a2,a3,a4,a5,a6)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6])}
    function caml_call8(f,a0,a1,a2,a3,a4,a5,a6,a7)
     {return f.length == 8
              ?f(a0,a1,a2,a3,a4,a5,a6,a7)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6,a7])}
    function caml_call9(f,a0,a1,a2,a3,a4,a5,a6,a7,a8)
     {return f.length == 9
              ?f(a0,a1,a2,a3,a4,a5,a6,a7,a8)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6,a7,a8])}
    function caml_call17
     (f,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16)
     {return f.length == 17
              ?f(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16)
              :runtime.caml_call_gen
                (f,
                 [a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_sexp_opaque$0=caml_string_of_jsbytes("sexp_opaque"),
     cst_Core_kernel_Import=caml_string_of_jsbytes("Core_kernel__Import"),
     cst_core_kernel=caml_string_of_jsbytes("core_kernel"),
     cst_src_import_ml=caml_string_of_jsbytes("src/import.ml"),
     cst=caml_string_of_jsbytes(""),
     cst_core_kernel$0=caml_string_of_jsbytes("core_kernel"),
     cst_a=caml_string_of_jsbytes("a"),
     cst_src_import_ml_75_24=caml_string_of_jsbytes("src/import.ml:75:24"),
     cst_a$0=caml_string_of_jsbytes("a"),
     cst_sexp_opaque=caml_string_of_jsbytes("sexp_opaque"),
     cst_src_import_ml_75_2=caml_string_of_jsbytes("src/import.ml:75:2"),
     name=caml_string_of_jsbytes("src/import.ml.sexp_opaque"),
     cst_TESTING_FRAMEWORK=caml_string_of_jsbytes("TESTING_FRAMEWORK"),
     cst_core_kernel$1=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Import$0=caml_string_of_jsbytes("Core_kernel__Import"),
     cst_Sexpable_Of_stringable_t_o=
      caml_string_of_jsbytes
       ("Sexpable.Of_stringable.t_of_sexp expected an atom, but got a list"),
     cst_Core_kernel_Sexpable=caml_string_of_jsbytes("Core_kernel__Sexpable"),
     cst_core_kernel$2=caml_string_of_jsbytes("core_kernel"),
     cst_src_sexpable_ml=caml_string_of_jsbytes("src/sexpable.ml"),
     cst$0=caml_string_of_jsbytes(""),
     cst_core_kernel$3=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$4=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Sexpable$0=
      caml_string_of_jsbytes("Core_kernel__Sexpable"),
     cst_Core_kernel_Binable_intf=
      caml_string_of_jsbytes("Core_kernel__Binable_intf"),
     cst_core_kernel$5=caml_string_of_jsbytes("core_kernel"),
     cst_src_binable_intf_ml=caml_string_of_jsbytes("src/binable_intf.ml"),
     cst$1=caml_string_of_jsbytes(""),
     cst_core_kernel$6=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$7=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Binable_intf$0=
      caml_string_of_jsbytes("Core_kernel__Binable_intf"),
     cst_t$9=caml_string_of_jsbytes("t"),
     cst_src_binable0_ml_227_2=caml_string_of_jsbytes("src/binable0.ml:227:2"),
     cst_t$10=caml_string_of_jsbytes("t"),
     cst_t$7=caml_string_of_jsbytes("t"),
     cst_src_binable0_ml_139_10=
      caml_string_of_jsbytes("src/binable0.ml:139:10"),
     cst_t$8=caml_string_of_jsbytes("t"),
     cst_Of_binable$0=caml_string_of_jsbytes("Of_binable"),
     cst_t$5=caml_string_of_jsbytes("t"),
     cst_src_binable0_ml_120_10=
      caml_string_of_jsbytes("src/binable0.ml:120:10"),
     cst_t$6=caml_string_of_jsbytes("t"),
     cst_Of_binable=caml_string_of_jsbytes("Of_binable"),
     cst_src_binable0_ml_Stable_Of_$0=
      caml_string_of_jsbytes("src/binable0.ml.Stable.Of_sexpable.V2.t"),
     cst_t$2=caml_string_of_jsbytes("t"),
     cst_List$0=caml_string_of_jsbytes("List"),
     cst_Atom$0=caml_string_of_jsbytes("Atom"),
     cst_t$3=caml_string_of_jsbytes("t"),
     cst_src_binable0_ml_103_10=
      caml_string_of_jsbytes("src/binable0.ml:103:10"),
     cst_t$4=caml_string_of_jsbytes("t"),
     cst_src_binable0_ml_Stable_Of_=
      caml_string_of_jsbytes("src/binable0.ml.Stable.Of_sexpable.V1.t"),
     cst_t=caml_string_of_jsbytes("t"),
     cst_List=caml_string_of_jsbytes("List"),
     cst_Atom=caml_string_of_jsbytes("Atom"),
     cst_t$0=caml_string_of_jsbytes("t"),
     cst_src_binable0_ml_88_10=caml_string_of_jsbytes("src/binable0.ml:88:10"),
     cst_t$1=caml_string_of_jsbytes("t"),
     cst_Core_kernel_Binable0=caml_string_of_jsbytes("Core_kernel__Binable0"),
     cst_core_kernel$8=caml_string_of_jsbytes("core_kernel"),
     cst_src_binable0_ml=caml_string_of_jsbytes("src/binable0.ml"),
     cst$2=caml_string_of_jsbytes(""),
     cst_core_kernel$9=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$10=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Binable0$0=
      caml_string_of_jsbytes("Core_kernel__Binable0"),
     cst_Core_kernel_Printf=caml_string_of_jsbytes("Core_kernel__Printf"),
     cst_core_kernel$11=caml_string_of_jsbytes("core_kernel"),
     cst_src_printf_ml=caml_string_of_jsbytes("src/printf.ml"),
     cst$3=caml_string_of_jsbytes(""),
     cst_core_kernel$12=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$13=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Printf$0=caml_string_of_jsbytes("Core_kernel__Printf"),
     cst_perms$0=caml_string_of_jsbytes("perms"),
     cst_t$32=caml_string_of_jsbytes("t"),
     cst_t$29=caml_string_of_jsbytes("t"),
     cst_src_perms_ml_108_2=caml_string_of_jsbytes("src/perms.ml:108:2"),
     cst_t$30=caml_string_of_jsbytes("t"),
     cst_t$28=caml_string_of_jsbytes("t"),
     cst_a$3=caml_string_of_jsbytes("a"),
     cst_src_perms_ml_84_20=caml_string_of_jsbytes("src/perms.ml:84:20"),
     cst_a$4=caml_string_of_jsbytes("a"),
     cst_t$27=caml_string_of_jsbytes("t"),
     cst_src_perms_ml_84_8=caml_string_of_jsbytes("src/perms.ml:84:8"),
     tp_loc$9=caml_string_of_jsbytes("src/perms.ml.Types.Upper_bound.t"),
     cst_Who_can_write$6=caml_string_of_jsbytes("Who_can_write"),
     cst_Who_can_write$7=caml_string_of_jsbytes("Who_can_write"),
     err$3=[2,caml_string_of_jsbytes("src/perms.ml.Types.Upper_bound.t")],
     cst_t$26=caml_string_of_jsbytes("t"),
     err$2=[2,caml_string_of_jsbytes("src/perms.ml.Types.Read_write.t")],
     cst_Who_can_write$3=caml_string_of_jsbytes("Who_can_write"),
     cst_Who_can_write$4=caml_string_of_jsbytes("Who_can_write"),
     err$1=[2,caml_string_of_jsbytes("src/perms.ml.Types.Immutable.t")],
     cst_Who_can_write$0=caml_string_of_jsbytes("Who_can_write"),
     cst_Who_can_write$1=caml_string_of_jsbytes("Who_can_write"),
     err$0=[2,caml_string_of_jsbytes("src/perms.ml.Types.Write.t")],
     cst_Read$0=caml_string_of_jsbytes("Read"),
     cst_Read$1=caml_string_of_jsbytes("Read"),
     err=[2,caml_string_of_jsbytes("src/perms.ml.Types.Read.t")],
     cst_hash_called_on_the_type_t_$0=
      caml_string_of_jsbytes
       ("hash called on the type t, which is abstract in an implementation."),
     cst_t$16=caml_string_of_jsbytes("t"),
     cst_src_perms_ml_Types_Me_t$1=
      caml_string_of_jsbytes("src/perms.ml.Types.Me.t"),
     cst_src_perms_ml_Types_Me_t$0=
      caml_string_of_jsbytes("src/perms.ml.Types.Me.t"),
     cst_src_perms_ml_Types_Me_t=
      caml_string_of_jsbytes("src/perms.ml.Types.Me.t"),
     cst_hash_called_on_the_type_t_=
      caml_string_of_jsbytes
       ("hash called on the type t, which is abstract in an implementation."),
     cst_t$13=caml_string_of_jsbytes("t"),
     cst_src_perms_ml_Types_Nobody_$1=
      caml_string_of_jsbytes("src/perms.ml.Types.Nobody.t"),
     cst_src_perms_ml_Types_Nobody_$0=
      caml_string_of_jsbytes("src/perms.ml.Types.Nobody.t"),
     cst_src_perms_ml_Types_Nobody_=
      caml_string_of_jsbytes("src/perms.ml.Types.Nobody.t"),
     cst_Core_kernel_Perms=caml_string_of_jsbytes("Core_kernel__Perms"),
     cst_core_kernel$14=caml_string_of_jsbytes("core_kernel"),
     cst_src_perms_ml=caml_string_of_jsbytes("src/perms.ml"),
     cst$4=caml_string_of_jsbytes(""),
     cst_core_kernel$15=caml_string_of_jsbytes("core_kernel"),
     cst_t$11=caml_string_of_jsbytes("t"),
     cst_src_perms_ml_9_4=caml_string_of_jsbytes("src/perms.ml:9:4"),
     cst_t$12=caml_string_of_jsbytes("t"),
     tp_loc=caml_string_of_jsbytes("src/perms.ml.Types.Nobody.t"),
     name$0=caml_string_of_jsbytes("Nobody"),
     cst_t$14=caml_string_of_jsbytes("t"),
     cst_src_perms_ml_15_4=caml_string_of_jsbytes("src/perms.ml:15:4"),
     cst_t$15=caml_string_of_jsbytes("t"),
     tp_loc$0=caml_string_of_jsbytes("src/perms.ml.Types.Me.t"),
     name$1=caml_string_of_jsbytes("Me"),
     cst_Read=caml_string_of_jsbytes("Read"),
     cst_src_perms_ml_21_13=caml_string_of_jsbytes("src/perms.ml:21:13"),
     cst_t$17=caml_string_of_jsbytes("t"),
     cst_src_perms_ml_21_4=caml_string_of_jsbytes("src/perms.ml:21:4"),
     cst_t$18=caml_string_of_jsbytes("t"),
     tp_loc$1=caml_string_of_jsbytes("src/perms.ml.Types.Read.t"),
     tp_loc$2=caml_string_of_jsbytes("src/perms.ml.Types.Read.t"),
     name$2=caml_string_of_jsbytes("Read"),
     cst_Who_can_write=caml_string_of_jsbytes("Who_can_write"),
     cst_src_perms_ml_27_13=caml_string_of_jsbytes("src/perms.ml:27:13"),
     cst_t$19=caml_string_of_jsbytes("t"),
     cst_src_perms_ml_27_4=caml_string_of_jsbytes("src/perms.ml:27:4"),
     cst_t$20=caml_string_of_jsbytes("t"),
     tp_loc$3=caml_string_of_jsbytes("src/perms.ml.Types.Write.t"),
     tp_loc$4=caml_string_of_jsbytes("src/perms.ml.Types.Write.t"),
     name$3=caml_string_of_jsbytes("Write"),
     cst_Who_can_write$2=caml_string_of_jsbytes("Who_can_write"),
     cst_src_perms_ml_34_8=caml_string_of_jsbytes("src/perms.ml:34:8"),
     cst_src_perms_ml_34_6=caml_string_of_jsbytes("src/perms.ml:34:6"),
     cst_t$21=caml_string_of_jsbytes("t"),
     cst_src_perms_ml_33_4=caml_string_of_jsbytes("src/perms.ml:33:4"),
     cst_t$22=caml_string_of_jsbytes("t"),
     tp_loc$5=caml_string_of_jsbytes("src/perms.ml.Types.Immutable.t"),
     tp_loc$6=caml_string_of_jsbytes("src/perms.ml.Types.Immutable.t"),
     name$4=caml_string_of_jsbytes("Immutable"),
     cst_src_perms_ml_45_8=caml_string_of_jsbytes("src/perms.ml:45:8"),
     cst_src_perms_ml_44_8=caml_string_of_jsbytes("src/perms.ml:44:8"),
     cst_src_perms_ml_44_6=caml_string_of_jsbytes("src/perms.ml:44:6"),
     cst_t$23=caml_string_of_jsbytes("t"),
     cst_src_perms_ml_43_4=caml_string_of_jsbytes("src/perms.ml:43:4"),
     cst_t$24=caml_string_of_jsbytes("t"),
     tp_loc$7=caml_string_of_jsbytes("src/perms.ml.Types.Read_write.t"),
     name$5=caml_string_of_jsbytes("Read_write"),
     cst_a$1=caml_string_of_jsbytes("a"),
     cst_src_perms_ml_55_26=caml_string_of_jsbytes("src/perms.ml:55:26"),
     cst_Who_can_write$5=caml_string_of_jsbytes("Who_can_write"),
     cst_src_perms_ml_54_8=caml_string_of_jsbytes("src/perms.ml:54:8"),
     cst_src_perms_ml_54_6=caml_string_of_jsbytes("src/perms.ml:54:6"),
     cst_a$2=caml_string_of_jsbytes("a"),
     cst_t$25=caml_string_of_jsbytes("t"),
     cst_src_perms_ml_53_4=caml_string_of_jsbytes("src/perms.ml:53:4"),
     tp_loc$8=caml_string_of_jsbytes("src/perms.ml.Types.Upper_bound.t"),
     name$6=caml_string_of_jsbytes("Upper_bound"),
     cst_nobody=caml_string_of_jsbytes("nobody"),
     cst_src_perms_ml_122_4=caml_string_of_jsbytes("src/perms.ml:122:4"),
     cst_nobody$0=caml_string_of_jsbytes("nobody"),
     cst_me=caml_string_of_jsbytes("me"),
     cst_src_perms_ml_123_4=caml_string_of_jsbytes("src/perms.ml:123:4"),
     cst_me$0=caml_string_of_jsbytes("me"),
     cst_a$5=caml_string_of_jsbytes("a"),
     cst_src_perms_ml_128_18=caml_string_of_jsbytes("src/perms.ml:128:18"),
     cst_a$6=caml_string_of_jsbytes("a"),
     cst_t$31=caml_string_of_jsbytes("t"),
     cst_src_perms_ml_128_6=caml_string_of_jsbytes("src/perms.ml:128:6"),
     cst_read=caml_string_of_jsbytes("read"),
     cst_src_perms_ml_135_4=caml_string_of_jsbytes("src/perms.ml:135:4"),
     cst_read$0=caml_string_of_jsbytes("read"),
     cst_immutable=caml_string_of_jsbytes("immutable"),
     cst_src_perms_ml_137_4=caml_string_of_jsbytes("src/perms.ml:137:4"),
     cst_immutable$0=caml_string_of_jsbytes("immutable"),
     cst_read_write=caml_string_of_jsbytes("read_write"),
     cst_src_perms_ml_138_4=caml_string_of_jsbytes("src/perms.ml:138:4"),
     cst_read_write$0=caml_string_of_jsbytes("read_write"),
     cst_a$7=caml_string_of_jsbytes("a"),
     cst_src_perms_ml_139_20=caml_string_of_jsbytes("src/perms.ml:139:20"),
     cst_a$8=caml_string_of_jsbytes("a"),
     cst_perms=caml_string_of_jsbytes("perms"),
     cst_src_perms_ml_139_4=caml_string_of_jsbytes("src/perms.ml:139:4"),
     cst_core_kernel$16=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Perms$0=caml_string_of_jsbytes("Core_kernel__Perms"),
     cst_Core_kernel_Binary_searcha=
      caml_string_of_jsbytes("Core_kernel__Binary_searchable_intf"),
     cst_core_kernel$17=caml_string_of_jsbytes("core_kernel"),
     cst_src_binary_searchable_intf=
      caml_string_of_jsbytes("src/binary_searchable_intf.ml"),
     cst$5=caml_string_of_jsbytes(""),
     cst_core_kernel$18=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$19=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Binary_searcha$0=
      caml_string_of_jsbytes("Core_kernel__Binary_searchable_intf"),
     cst_Core_kernel_Binary_searcha$1=
      caml_string_of_jsbytes("Core_kernel__Binary_searchable"),
     cst_core_kernel$20=caml_string_of_jsbytes("core_kernel"),
     cst_src_binary_searchable_ml=
      caml_string_of_jsbytes("src/binary_searchable.ml"),
     cst$6=caml_string_of_jsbytes(""),
     cst_core_kernel$21=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$22=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Binary_searcha$2=
      caml_string_of_jsbytes("Core_kernel__Binary_searchable"),
     cst_Core_kernel_Blit_intf=
      caml_string_of_jsbytes("Core_kernel__Blit_intf"),
     cst_core_kernel$23=caml_string_of_jsbytes("core_kernel"),
     cst_src_blit_intf_ml=caml_string_of_jsbytes("src/blit_intf.ml"),
     cst$7=caml_string_of_jsbytes(""),
     cst_core_kernel$24=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$25=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Blit_intf$0=
      caml_string_of_jsbytes("Core_kernel__Blit_intf"),
     cst_Core_kernel_Blit=caml_string_of_jsbytes("Core_kernel__Blit"),
     cst_core_kernel$26=caml_string_of_jsbytes("core_kernel"),
     cst_src_blit_ml=caml_string_of_jsbytes("src/blit.ml"),
     cst$8=caml_string_of_jsbytes(""),
     cst_core_kernel$27=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$28=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Blit$0=caml_string_of_jsbytes("Core_kernel__Blit"),
     cst_Core_kernel_Comparator=
      caml_string_of_jsbytes("Core_kernel__Comparator"),
     cst_core_kernel$29=caml_string_of_jsbytes("core_kernel"),
     cst_src_comparator_ml=caml_string_of_jsbytes("src/comparator.ml"),
     cst$9=caml_string_of_jsbytes(""),
     cst_core_kernel$30=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$31=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Comparator$0=
      caml_string_of_jsbytes("Core_kernel__Comparator"),
     cst_Error$0=caml_string_of_jsbytes("Error"),
     cst_Ok$0=caml_string_of_jsbytes("Ok"),
     cst_error=caml_string_of_jsbytes("error"),
     cst_ok=caml_string_of_jsbytes("ok"),
     cst_Error$1=caml_string_of_jsbytes("Error"),
     cst_Ok$1=caml_string_of_jsbytes("Ok"),
     cst_error$0=caml_string_of_jsbytes("error"),
     cst_ok$0=caml_string_of_jsbytes("ok"),
     cst_src_result_ml_Stable_V1_t=
      caml_string_of_jsbytes("src/result.ml.Stable.V1.t"),
     cst_t$34=caml_string_of_jsbytes("t"),
     cst_Core_kernel_Result=caml_string_of_jsbytes("Core_kernel__Result"),
     cst_core_kernel$32=caml_string_of_jsbytes("core_kernel"),
     cst_src_result_ml=caml_string_of_jsbytes("src/result.ml"),
     cst$10=caml_string_of_jsbytes(""),
     cst_core_kernel$33=caml_string_of_jsbytes("core_kernel"),
     cst_b=caml_string_of_jsbytes("b"),
     cst_src_result_ml_8_17=caml_string_of_jsbytes("src/result.ml:8:17"),
     cst_Error=caml_string_of_jsbytes("Error"),
     cst_a$9=caml_string_of_jsbytes("a"),
     cst_src_result_ml_7_14=caml_string_of_jsbytes("src/result.ml:7:14"),
     cst_Ok=caml_string_of_jsbytes("Ok"),
     cst_b$0=caml_string_of_jsbytes("b"),
     cst_a$10=caml_string_of_jsbytes("a"),
     cst_t$33=caml_string_of_jsbytes("t"),
     cst_src_result_ml_6_4=caml_string_of_jsbytes("src/result.ml:6:4"),
     tp_loc$10=caml_string_of_jsbytes("src/result.ml.Stable.V1.t"),
     cst_t$35=caml_string_of_jsbytes("t"),
     cst_src_result_ml_19_4=caml_string_of_jsbytes("src/result.ml:19:4"),
     cst_t$36=caml_string_of_jsbytes("t"),
     tests=
      [0,
       [0,
        [0,caml_string_of_jsbytes("foo")],
        caml_string_of_jsbytes("(Ok foo)"),
        caml_string_of_jsbytes("\0\x03foo")],
       [0,
        [0,
         [1,7],
         caml_string_of_jsbytes("(Error 7)"),
         caml_string_of_jsbytes("\x01\x07")],
        0]],
     cst_core_kernel$34=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Result$0=caml_string_of_jsbytes("Core_kernel__Result"),
     cst_Core_kernel_Stable_module_=
      caml_string_of_jsbytes("Core_kernel__Stable_module_types"),
     cst_core_kernel$35=caml_string_of_jsbytes("core_kernel"),
     cst_src_stable_module_types_ml=
      caml_string_of_jsbytes("src/stable_module_types.ml"),
     cst$11=caml_string_of_jsbytes(""),
     cst_core_kernel$36=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$37=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Stable_module_$0=
      caml_string_of_jsbytes("Core_kernel__Stable_module_types"),
     cst_Core_kernel_Stable_unit_te=
      caml_string_of_jsbytes("Core_kernel__Stable_unit_test_intf"),
     cst_core_kernel$38=caml_string_of_jsbytes("core_kernel"),
     cst_src_stable_unit_test_intf_=
      caml_string_of_jsbytes("src/stable_unit_test_intf.ml"),
     cst$12=caml_string_of_jsbytes(""),
     cst_core_kernel$39=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$40=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Stable_unit_te$0=
      caml_string_of_jsbytes("Core_kernel__Stable_unit_test_intf"),
     cst_Core_kernel_Container_intf=
      caml_string_of_jsbytes("Core_kernel__Container_intf"),
     cst_core_kernel$41=caml_string_of_jsbytes("core_kernel"),
     cst_src_container_intf_ml=caml_string_of_jsbytes("src/container_intf.ml"),
     cst$13=caml_string_of_jsbytes(""),
     cst_core_kernel$42=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$43=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Container_intf$0=
      caml_string_of_jsbytes("Core_kernel__Container_intf"),
     cst_Core_kernel_Container=
      caml_string_of_jsbytes("Core_kernel__Container"),
     cst_core_kernel$44=caml_string_of_jsbytes("core_kernel"),
     cst_src_container_ml=caml_string_of_jsbytes("src/container.ml"),
     cst$14=caml_string_of_jsbytes(""),
     cst_core_kernel$45=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$46=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Container$0=
      caml_string_of_jsbytes("Core_kernel__Container"),
     cst_Core_kernel_Deprecate_pipe=
      caml_string_of_jsbytes("Core_kernel__Deprecate_pipe_bang"),
     cst_core_kernel$47=caml_string_of_jsbytes("core_kernel"),
     cst_src_deprecate_pipe_bang_ml=
      caml_string_of_jsbytes("src/deprecate_pipe_bang.ml"),
     cst$15=caml_string_of_jsbytes(""),
     cst_core_kernel$48=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$49=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Deprecate_pipe$0=
      caml_string_of_jsbytes("Core_kernel__Deprecate_pipe_bang"),
     cst_Core_kernel_Fn=caml_string_of_jsbytes("Core_kernel__Fn"),
     cst_core_kernel$50=caml_string_of_jsbytes("core_kernel"),
     cst_src_fn_ml=caml_string_of_jsbytes("src/fn.ml"),
     cst$16=caml_string_of_jsbytes(""),
     cst_core_kernel$51=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$52=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Fn$0=caml_string_of_jsbytes("Core_kernel__Fn"),
     cst_Core_kernel_Ordered_collec=
      caml_string_of_jsbytes("Core_kernel__Ordered_collection_common"),
     cst_core_kernel$53=caml_string_of_jsbytes("core_kernel"),
     cst_src_ordered_collection_com=
      caml_string_of_jsbytes("src/ordered_collection_common.ml"),
     cst$17=caml_string_of_jsbytes(""),
     cst_core_kernel$54=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$55=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Ordered_collec$0=
      caml_string_of_jsbytes("Core_kernel__Ordered_collection_common"),
     cst_src_sequence_ml_Merge_with=
      caml_string_of_jsbytes
       ("src/sequence.ml.Merge_with_duplicates_element.t"),
     cst_t$42=caml_string_of_jsbytes("t"),
     cst_src_sequence_ml_Step_t=
      caml_string_of_jsbytes("src/sequence.ml.Step.t"),
     cst_t$40=caml_string_of_jsbytes("t"),
     cst_t$38=caml_string_of_jsbytes("t"),
     cst_Core_kernel_Sequence=caml_string_of_jsbytes("Core_kernel__Sequence"),
     cst_core_kernel$56=caml_string_of_jsbytes("core_kernel"),
     cst_src_sequence_ml=caml_string_of_jsbytes("src/sequence.ml"),
     cst$18=caml_string_of_jsbytes(""),
     cst_core_kernel$57=caml_string_of_jsbytes("core_kernel"),
     cst_a$11=caml_string_of_jsbytes("a"),
     cst_src_sequence_ml_6_18=caml_string_of_jsbytes("src/sequence.ml:6:18"),
     cst_a$12=caml_string_of_jsbytes("a"),
     cst_t$37=caml_string_of_jsbytes("t"),
     cst_src_sequence_ml_6_6=caml_string_of_jsbytes("src/sequence.ml:6:6"),
     cst_s=caml_string_of_jsbytes("s"),
     cst_src_sequence_ml_21_20=caml_string_of_jsbytes("src/sequence.ml:21:20"),
     cst_a$13=caml_string_of_jsbytes("a"),
     cst_src_sequence_ml_21_15=caml_string_of_jsbytes("src/sequence.ml:21:15"),
     cst_Yield=caml_string_of_jsbytes("Yield"),
     cst_s$0=caml_string_of_jsbytes("s"),
     cst_src_sequence_ml_20_14=caml_string_of_jsbytes("src/sequence.ml:20:14"),
     cst_Skip=caml_string_of_jsbytes("Skip"),
     cst_s$1=caml_string_of_jsbytes("s"),
     cst_a$14=caml_string_of_jsbytes("a"),
     cst_t$39=caml_string_of_jsbytes("t"),
     cst_src_sequence_ml_18_2=caml_string_of_jsbytes("src/sequence.ml:18:2"),
     cst_b$1=caml_string_of_jsbytes("b"),
     cst_src_sequence_ml_31_19=caml_string_of_jsbytes("src/sequence.ml:31:19"),
     cst_a$15=caml_string_of_jsbytes("a"),
     cst_src_sequence_ml_31_14=caml_string_of_jsbytes("src/sequence.ml:31:14"),
     cst_Both=caml_string_of_jsbytes("Both"),
     cst_b$2=caml_string_of_jsbytes("b"),
     cst_src_sequence_ml_30_15=caml_string_of_jsbytes("src/sequence.ml:30:15"),
     cst_Right=caml_string_of_jsbytes("Right"),
     cst_a$16=caml_string_of_jsbytes("a"),
     cst_src_sequence_ml_29_14=caml_string_of_jsbytes("src/sequence.ml:29:14"),
     cst_Left=caml_string_of_jsbytes("Left"),
     cst_b$3=caml_string_of_jsbytes("b"),
     cst_a$17=caml_string_of_jsbytes("a"),
     cst_t$41=caml_string_of_jsbytes("t"),
     cst_src_sequence_ml_28_2=caml_string_of_jsbytes("src/sequence.ml:28:2"),
     cst_core_kernel$58=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Sequence$0=
      caml_string_of_jsbytes("Core_kernel__Sequence"),
     cst_t$54=caml_string_of_jsbytes("t"),
     cst_t$52=caml_string_of_jsbytes("t"),
     cst_t$50=caml_string_of_jsbytes("t"),
     cst_t$44=caml_string_of_jsbytes("t"),
     cst_Core_kernel_Array=caml_string_of_jsbytes("Core_kernel__Array"),
     cst_core_kernel$59=caml_string_of_jsbytes("core_kernel"),
     cst_src_array_ml=caml_string_of_jsbytes("src/array.ml"),
     cst$19=caml_string_of_jsbytes(""),
     cst_core_kernel$60=caml_string_of_jsbytes("core_kernel"),
     cst_a$18=caml_string_of_jsbytes("a"),
     cst_src_array_ml_12_12=caml_string_of_jsbytes("src/array.ml:12:12"),
     cst_a$19=caml_string_of_jsbytes("a"),
     cst_t$43=caml_string_of_jsbytes("t"),
     cst_src_array_ml_12_0=caml_string_of_jsbytes("src/array.ml:12:0"),
     name$7=caml_string_of_jsbytes("src/array.ml.t"),
     cst_t$45=caml_string_of_jsbytes("t_"),
     cst_src_array_ml_40_4=caml_string_of_jsbytes("src/array.ml:40:4"),
     cst_t$46=caml_string_of_jsbytes("t_"),
     cst_t$47=caml_string_of_jsbytes("t_"),
     cst_src_array_ml_75_4=caml_string_of_jsbytes("src/array.ml:75:4"),
     cst_t$48=caml_string_of_jsbytes("t_"),
     cst_a$20=caml_string_of_jsbytes("a"),
     cst_src_array_ml_332_25=caml_string_of_jsbytes("src/array.ml:332:25"),
     cst_perms$1=caml_string_of_jsbytes("perms"),
     cst_a$21=caml_string_of_jsbytes("a"),
     cst_t$49=caml_string_of_jsbytes("t"),
     cst_src_array_ml_332_2=caml_string_of_jsbytes("src/array.ml:332:2"),
     name$8=caml_string_of_jsbytes("src/array.ml.Permissioned.t"),
     cst_perms$2=caml_string_of_jsbytes("perms"),
     cst_t$51=caml_string_of_jsbytes("t"),
     cst_src_array_ml_337_4=caml_string_of_jsbytes("src/array.ml:337:4"),
     cst_perms$3=caml_string_of_jsbytes("perms"),
     cst_t$53=caml_string_of_jsbytes("t"),
     cst_src_array_ml_343_4=caml_string_of_jsbytes("src/array.ml:343:4"),
     cst_t$55=caml_string_of_jsbytes("t"),
     cst_src_array_ml_451_2=caml_string_of_jsbytes("src/array.ml:451:2"),
     cst_t$56=caml_string_of_jsbytes("t"),
     cst_t$57=caml_string_of_jsbytes("t"),
     cst_src_array_ml_457_2=caml_string_of_jsbytes("src/array.ml:457:2"),
     cst_t$58=caml_string_of_jsbytes("t"),
     cst_core_kernel$61=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Array$0=caml_string_of_jsbytes("Core_kernel__Array"),
     cst_First$2=caml_string_of_jsbytes("First"),
     cst_Second$2=caml_string_of_jsbytes("Second"),
     cst_First$0=caml_string_of_jsbytes("First"),
     cst_Second$0=caml_string_of_jsbytes("Second"),
     cst_first=caml_string_of_jsbytes("first"),
     cst_second=caml_string_of_jsbytes("second"),
     cst_First$1=caml_string_of_jsbytes("First"),
     cst_Second$1=caml_string_of_jsbytes("Second"),
     cst_first$0=caml_string_of_jsbytes("first"),
     cst_second$0=caml_string_of_jsbytes("second"),
     cst_src_either_ml_Stable_V1_t=
      caml_string_of_jsbytes("src/either.ml.Stable.V1.t"),
     cst_t$60=caml_string_of_jsbytes("t"),
     cst_Core_kernel_Either=caml_string_of_jsbytes("Core_kernel__Either"),
     cst_core_kernel$62=caml_string_of_jsbytes("core_kernel"),
     cst_src_either_ml=caml_string_of_jsbytes("src/either.ml"),
     cst$20=caml_string_of_jsbytes(""),
     cst_core_kernel$63=caml_string_of_jsbytes("core_kernel"),
     cst_s$2=caml_string_of_jsbytes("s"),
     cst_src_either_ml_5_18=caml_string_of_jsbytes("src/either.ml:5:18"),
     cst_Second=caml_string_of_jsbytes("Second"),
     cst_f=caml_string_of_jsbytes("f"),
     cst_src_either_ml_4_17=caml_string_of_jsbytes("src/either.ml:4:17"),
     cst_First=caml_string_of_jsbytes("First"),
     cst_s$3=caml_string_of_jsbytes("s"),
     cst_f$0=caml_string_of_jsbytes("f"),
     cst_t$59=caml_string_of_jsbytes("t"),
     cst_src_either_ml_3_4=caml_string_of_jsbytes("src/either.ml:3:4"),
     tp_loc$11=caml_string_of_jsbytes("src/either.ml.Stable.V1.t"),
     name$9=caml_string_of_jsbytes("src/either.ml.Stable.V1.t"),
     cst_core_kernel$64=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Either$0=caml_string_of_jsbytes("Core_kernel__Either"),
     cst_Core_kernel_Info_intf=
      caml_string_of_jsbytes("Core_kernel__Info_intf"),
     cst_core_kernel$65=caml_string_of_jsbytes("core_kernel"),
     cst_src_info_intf_ml=caml_string_of_jsbytes("src/info_intf.ml"),
     cst$21=caml_string_of_jsbytes(""),
     cst_core_kernel$66=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$67=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Info_intf$0=
      caml_string_of_jsbytes("Core_kernel__Info_intf"),
     cst_pos_bol$0=caml_string_of_jsbytes("pos_bol"),
     cst_pos_cnum$0=caml_string_of_jsbytes("pos_cnum"),
     cst_pos_fname$0=caml_string_of_jsbytes("pos_fname"),
     cst_pos_lnum$0=caml_string_of_jsbytes("pos_lnum"),
     cst_pos_cnum$1=caml_string_of_jsbytes("pos_cnum"),
     cst_pos_bol$1=caml_string_of_jsbytes("pos_bol"),
     cst_pos_lnum$1=caml_string_of_jsbytes("pos_lnum"),
     cst_pos_fname$1=caml_string_of_jsbytes("pos_fname"),
     cst_src_source_code_position0_$1=
      caml_string_of_jsbytes("src/source_code_position0.ml.Stable.V1.t"),
     cst_Core_kernel_Source_code_po=
      caml_string_of_jsbytes("Core_kernel__Source_code_position0"),
     cst_core_kernel$68=caml_string_of_jsbytes("core_kernel"),
     cst_src_source_code_position0_=
      caml_string_of_jsbytes("src/source_code_position0.ml"),
     cst$22=caml_string_of_jsbytes(""),
     cst_core_kernel$69=caml_string_of_jsbytes("core_kernel"),
     cst_pos_cnum=caml_string_of_jsbytes("pos_cnum"),
     cst_pos_bol=caml_string_of_jsbytes("pos_bol"),
     cst_pos_lnum=caml_string_of_jsbytes("pos_lnum"),
     cst_pos_fname=caml_string_of_jsbytes("pos_fname"),
     cst_t$61=caml_string_of_jsbytes("t"),
     cst_src_source_code_position0_$0=
      caml_string_of_jsbytes("src/source_code_position0.ml:7:4"),
     cst_t$62=caml_string_of_jsbytes("t"),
     tp_loc$12=
      caml_string_of_jsbytes("src/source_code_position0.ml.Stable.V1.t"),
     cst_core_kernel$70=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Source_code_po$0=
      caml_string_of_jsbytes("Core_kernel__Source_code_position0"),
     cst_src_info_ml_Extend_Interna=
      caml_string_of_jsbytes("src/info.ml.Extend.Internal_repr.Stable.V2.t"),
     cst_t$66=caml_string_of_jsbytes("t"),
     cst_src_info_ml_59_10=caml_string_of_jsbytes("src/info.ml:59:10"),
     cst_t$67=caml_string_of_jsbytes("t"),
     cst_t$68=caml_string_of_jsbytes("t"),
     cst_With_backtrace=caml_string_of_jsbytes("With_backtrace"),
     cst_t$69=caml_string_of_jsbytes("t"),
     cst_Of_list=caml_string_of_jsbytes("Of_list"),
     cst_t$70=caml_string_of_jsbytes("t"),
     cst_Tag_arg=caml_string_of_jsbytes("Tag_arg"),
     cst_t$71=caml_string_of_jsbytes("t"),
     cst_Tag_t=caml_string_of_jsbytes("Tag_t"),
     cst_Tag_sexp=caml_string_of_jsbytes("Tag_sexp"),
     cst_Sexp=caml_string_of_jsbytes("Sexp"),
     cst_Exn=caml_string_of_jsbytes("Exn"),
     cst_String=caml_string_of_jsbytes("String"),
     cst_Could_not_construct=caml_string_of_jsbytes("Could_not_construct"),
     cst_t$72=caml_string_of_jsbytes("t"),
     cst_src_info_ml_69_8=caml_string_of_jsbytes("src/info.ml:69:8"),
     cst_t$73=caml_string_of_jsbytes("t"),
     cst_t$74=caml_string_of_jsbytes("t"),
     cst_src_info_ml_138_2=caml_string_of_jsbytes("src/info.ml:138:2"),
     cst_t$75=caml_string_of_jsbytes("t"),
     cst_src_info_ml_Sexp_t=caml_string_of_jsbytes("src/info.ml.Sexp.t"),
     cst_Core_kernel_Info=caml_string_of_jsbytes("Core_kernel__Info"),
     cst_core_kernel$71=caml_string_of_jsbytes("core_kernel"),
     cst_src_info_ml=caml_string_of_jsbytes("src/info.ml"),
     cst$23=caml_string_of_jsbytes(""),
     cst_core_kernel$72=caml_string_of_jsbytes("core_kernel"),
     cst_t$63=caml_string_of_jsbytes("t"),
     cst_List$1=caml_string_of_jsbytes("List"),
     cst_Atom$1=caml_string_of_jsbytes("Atom"),
     cst_t$64=caml_string_of_jsbytes("t"),
     cst_src_info_ml_18_4=caml_string_of_jsbytes("src/info.ml:18:4"),
     cst_t$65=caml_string_of_jsbytes("t"),
     cst_core_kernel$73=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Info$0=caml_string_of_jsbytes("Core_kernel__Info"),
     cst_Core_kernel_Error=caml_string_of_jsbytes("Core_kernel__Error"),
     cst_core_kernel$74=caml_string_of_jsbytes("core_kernel"),
     cst_src_error_ml=caml_string_of_jsbytes("src/error.ml"),
     cst$24=caml_string_of_jsbytes(""),
     cst_core_kernel$75=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$76=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Error$0=caml_string_of_jsbytes("Core_kernel__Error"),
     cst_Core_kernel_T=caml_string_of_jsbytes("Core_kernel__T"),
     cst_core_kernel$77=caml_string_of_jsbytes("core_kernel"),
     cst_src_t_ml=caml_string_of_jsbytes("src/t.ml"),
     cst$25=caml_string_of_jsbytes(""),
     cst_core_kernel$78=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$79=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_T$0=caml_string_of_jsbytes("Core_kernel__T"),
     cst_Core_kernel_Hashtbl_intf=
      caml_string_of_jsbytes("Core_kernel__Hashtbl_intf"),
     cst_core_kernel$80=caml_string_of_jsbytes("core_kernel"),
     cst_src_hashtbl_intf_ml=caml_string_of_jsbytes("src/hashtbl_intf.ml"),
     cst$26=caml_string_of_jsbytes(""),
     cst_core_kernel$81=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$82=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Hashtbl_intf$0=
      caml_string_of_jsbytes("Core_kernel__Hashtbl_intf"),
     cst_Core_kernel_Hash_set_intf=
      caml_string_of_jsbytes("Core_kernel__Hash_set_intf"),
     cst_core_kernel$83=caml_string_of_jsbytes("core_kernel"),
     cst_src_hash_set_intf_ml=caml_string_of_jsbytes("src/hash_set_intf.ml"),
     cst$27=caml_string_of_jsbytes(""),
     cst_core_kernel$84=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$85=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Hash_set_intf$0=
      caml_string_of_jsbytes("Core_kernel__Hash_set_intf"),
     cst_t$79=caml_string_of_jsbytes("t"),
     cst_t$77=caml_string_of_jsbytes("t"),
     cst_Core_kernel_List0=caml_string_of_jsbytes("Core_kernel__List0"),
     cst_core_kernel$86=caml_string_of_jsbytes("core_kernel"),
     cst_src_list0_ml=caml_string_of_jsbytes("src/list0.ml"),
     cst$28=caml_string_of_jsbytes(""),
     cst_core_kernel$87=caml_string_of_jsbytes("core_kernel"),
     cst_a$22=caml_string_of_jsbytes("a"),
     cst_src_list0_ml_6_12=caml_string_of_jsbytes("src/list0.ml:6:12"),
     cst_a$23=caml_string_of_jsbytes("a"),
     cst_t$76=caml_string_of_jsbytes("t"),
     cst_src_list0_ml_6_0=caml_string_of_jsbytes("src/list0.ml:6:0"),
     name$10=caml_string_of_jsbytes("src/list0.ml.t"),
     cst_b$4=caml_string_of_jsbytes("b"),
     cst_src_list0_ml_11_26=caml_string_of_jsbytes("src/list0.ml:11:26"),
     cst_a$24=caml_string_of_jsbytes("a"),
     cst_src_list0_ml_11_21=caml_string_of_jsbytes("src/list0.ml:11:21"),
     cst_b$5=caml_string_of_jsbytes("b"),
     cst_a$25=caml_string_of_jsbytes("a"),
     cst_t$78=caml_string_of_jsbytes("t"),
     cst_src_list0_ml_11_2=caml_string_of_jsbytes("src/list0.ml:11:2"),
     cst_core_kernel$88=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_List0$0=caml_string_of_jsbytes("Core_kernel__List0"),
     cst_Hashtbl_bin_read_t_duplica=
      caml_string_of_jsbytes("Hashtbl.bin_read_t: duplicate key"),
     cst_el$2=caml_string_of_jsbytes("el"),
     cst_a$28=caml_string_of_jsbytes("a"),
     cst_src_hashtbl_ml_177_27=caml_string_of_jsbytes("src/hashtbl.ml:177:27"),
     cst_a$29=caml_string_of_jsbytes("a"),
     cst_el$1=caml_string_of_jsbytes("el"),
     cst_src_hashtbl_ml_177_6=caml_string_of_jsbytes("src/hashtbl.ml:177:6"),
     cst_8fabab0a_4992_11e6_8cca_9b=
      caml_string_of_jsbytes("8fabab0a-4992-11e6-8cca-9ba2c4686d9e"),
     module_name$0=[0,caml_string_of_jsbytes("Core_kernel.Hashtbl")],
     cst_Core_hashtbl_bin_read_t_du=
      caml_string_of_jsbytes("Core_hashtbl.bin_read_t_: duplicate key"),
     cst_el$0=caml_string_of_jsbytes("el"),
     cst_Core_kernel_Hashtbl=caml_string_of_jsbytes("Core_kernel__Hashtbl"),
     cst_core_kernel$89=caml_string_of_jsbytes("core_kernel"),
     cst_src_hashtbl_ml=caml_string_of_jsbytes("src/hashtbl.ml"),
     cst$29=caml_string_of_jsbytes(""),
     cst_core_kernel$90=caml_string_of_jsbytes("core_kernel"),
     cst_b$6=caml_string_of_jsbytes("b"),
     cst_src_hashtbl_ml_99_30=caml_string_of_jsbytes("src/hashtbl.ml:99:30"),
     cst_a$26=caml_string_of_jsbytes("a"),
     cst_src_hashtbl_ml_99_25=caml_string_of_jsbytes("src/hashtbl.ml:99:25"),
     cst_b$7=caml_string_of_jsbytes("b"),
     cst_a$27=caml_string_of_jsbytes("a"),
     cst_el=caml_string_of_jsbytes("el"),
     cst_src_hashtbl_ml_99_6=caml_string_of_jsbytes("src/hashtbl.ml:99:6"),
     cst_8f3e445c_4992_11e6_a279_37=
      caml_string_of_jsbytes("8f3e445c-4992-11e6-a279-3703be311e7b"),
     module_name=[0,caml_string_of_jsbytes("Core_kernel.Hashtbl")],
     cst_core_kernel$91=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Hashtbl$0=caml_string_of_jsbytes("Core_kernel__Hashtbl"),
     cst_el$3=caml_string_of_jsbytes("el"),
     cst_src_hash_set_ml_46_6=caml_string_of_jsbytes("src/hash_set.ml:46:6"),
     cst_el$4=caml_string_of_jsbytes("el"),
     cst_ad381672_4992_11e6_9e36_b7=
      caml_string_of_jsbytes("ad381672-4992-11e6-9e36-b76dc8cd466f"),
     module_name$1=[0,caml_string_of_jsbytes("Core_kernel.Hash_set")],
     cst_Core_kernel_Hash_set=caml_string_of_jsbytes("Core_kernel__Hash_set"),
     cst_core_kernel$92=caml_string_of_jsbytes("core_kernel"),
     cst_src_hash_set_ml=caml_string_of_jsbytes("src/hash_set.ml"),
     cst$30=caml_string_of_jsbytes(""),
     cst_core_kernel$93=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$94=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Hash_set$0=
      caml_string_of_jsbytes("Core_kernel__Hash_set"),
     cst_t$85=caml_string_of_jsbytes("t"),
     cst_t$83=caml_string_of_jsbytes("t"),
     cst_t$81=caml_string_of_jsbytes("t"),
     cst_Core_kernel_Or_error=caml_string_of_jsbytes("Core_kernel__Or_error"),
     cst_core_kernel$95=caml_string_of_jsbytes("core_kernel"),
     cst_src_or_error_ml=caml_string_of_jsbytes("src/or_error.ml"),
     cst$31=caml_string_of_jsbytes(""),
     cst_core_kernel$96=caml_string_of_jsbytes("core_kernel"),
     cst_a$30=caml_string_of_jsbytes("a"),
     cst_src_or_error_ml_4_13=caml_string_of_jsbytes("src/or_error.ml:4:13"),
     cst_a$31=caml_string_of_jsbytes("a"),
     cst_t$80=caml_string_of_jsbytes("t"),
     cst_src_or_error_ml_4_0=caml_string_of_jsbytes("src/or_error.ml:4:0"),
     cst_a$32=caml_string_of_jsbytes("a"),
     cst_src_or_error_ml_24_17=caml_string_of_jsbytes("src/or_error.ml:24:17"),
     cst_a$33=caml_string_of_jsbytes("a"),
     cst_t$82=caml_string_of_jsbytes("t"),
     cst_src_or_error_ml_24_4=caml_string_of_jsbytes("src/or_error.ml:24:4"),
     cst_a$34=caml_string_of_jsbytes("a"),
     cst_src_or_error_ml_31_17=caml_string_of_jsbytes("src/or_error.ml:31:17"),
     cst_a$35=caml_string_of_jsbytes("a"),
     cst_t$84=caml_string_of_jsbytes("t"),
     cst_src_or_error_ml_31_4=caml_string_of_jsbytes("src/or_error.ml:31:4"),
     cst_core_kernel$97=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Or_error$0=
      caml_string_of_jsbytes("Core_kernel__Or_error"),
     cst_Core_kernel_Quickcheck_int=
      caml_string_of_jsbytes("Core_kernel__Quickcheck_intf"),
     cst_core_kernel$98=caml_string_of_jsbytes("core_kernel"),
     cst_src_quickcheck_intf_ml=
      caml_string_of_jsbytes("src/quickcheck_intf.ml"),
     cst$32=caml_string_of_jsbytes(""),
     cst_core_kernel$99=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$100=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Quickcheck_int$0=
      caml_string_of_jsbytes("Core_kernel__Quickcheck_intf"),
     cst_cannot_generate=caml_string_of_jsbytes("cannot generate"),
     cst_cannot_generate$0=caml_string_of_jsbytes("cannot generate"),
     cst_insufficient_distinct_valu=
      caml_string_of_jsbytes("insufficient distinct values"),
     cst_Generator_of_sequence_ran_=
      caml_string_of_jsbytes("Generator.of_sequence: ran out of values"),
     cst_Quickcheck_Observer_of_lis=
      caml_string_of_jsbytes("Quickcheck.Observer.of_list: value not found"),
     cst_Core_kernel_Quickcheck=
      caml_string_of_jsbytes("Core_kernel__Quickcheck"),
     cst_core_kernel$101=caml_string_of_jsbytes("core_kernel"),
     cst_src_quickcheck_ml=caml_string_of_jsbytes("src/quickcheck.ml"),
     cst$33=caml_string_of_jsbytes(""),
     cst_core_kernel$102=caml_string_of_jsbytes("core_kernel"),
     default_seed=
      [0,
       -825553486,
       caml_string_of_jsbytes("an arbitrary but deterministic string")],
     default_shrink_attempts=[0,137269019,1000],
     cst_core_kernel$103=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Quickcheck$0=
      caml_string_of_jsbytes("Core_kernel__Quickcheck"),
     cst_Core_kernel_Map_intf=caml_string_of_jsbytes("Core_kernel__Map_intf"),
     cst_core_kernel$104=caml_string_of_jsbytes("core_kernel"),
     cst_src_map_intf_ml=caml_string_of_jsbytes("src/map_intf.ml"),
     cst$34=caml_string_of_jsbytes(""),
     cst_core_kernel$105=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$106=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Map_intf$0=
      caml_string_of_jsbytes("Core_kernel__Map_intf"),
     cst_el$8=caml_string_of_jsbytes("el"),
     cst_v$4=caml_string_of_jsbytes("v"),
     cst_src_map_ml_455_25=caml_string_of_jsbytes("src/map.ml:455:25"),
     cst_v$5=caml_string_of_jsbytes("v"),
     cst_el$7=caml_string_of_jsbytes("el"),
     cst_src_map_ml_455_4=caml_string_of_jsbytes("src/map.ml:455:4"),
     cst_dfb300f8_4992_11e6_9c15_73=
      caml_string_of_jsbytes("dfb300f8-4992-11e6-9c15-73a2ac6b815c"),
     module_name$3=[0,caml_string_of_jsbytes("Core_kernel.Map")],
     cst_el$6=caml_string_of_jsbytes("el"),
     cst_Map_bin_read_t_duplicate_e=
      caml_string_of_jsbytes("Map.bin_read_t: duplicate element in map"),
     cst_key_not_found=caml_string_of_jsbytes("key not found"),
     cst_Map_of_hashtbl_exn_duplica=
      caml_string_of_jsbytes("Map.of_hashtbl_exn: duplicate key"),
     cst_src_map_ml$0=caml_string_of_jsbytes("src/map.ml"),
     cst_Left$1=caml_string_of_jsbytes("Left"),
     cst_Right$1=caml_string_of_jsbytes("Right"),
     cst_Unequal$0=caml_string_of_jsbytes("Unequal"),
     cst_Left$2=caml_string_of_jsbytes("Left"),
     cst_Right$2=caml_string_of_jsbytes("Right"),
     cst_Unequal$1=caml_string_of_jsbytes("Unequal"),
     cst_src_map_ml_Symmetric_diff_$0=
      caml_string_of_jsbytes("src/map.ml.Symmetric_diff_element.Stable.V1.t"),
     cst_src_map_ml_Symmetric_diff_=
      caml_string_of_jsbytes("src/map.ml.Symmetric_diff_element.Stable.V1.t"),
     cst_t$87=caml_string_of_jsbytes("t"),
     cst_Core_kernel_Map=caml_string_of_jsbytes("Core_kernel__Map"),
     cst_core_kernel$107=caml_string_of_jsbytes("core_kernel"),
     cst_src_map_ml=caml_string_of_jsbytes("src/map.ml"),
     cst$35=caml_string_of_jsbytes(""),
     cst_core_kernel$108=caml_string_of_jsbytes("core_kernel"),
     cst_v=caml_string_of_jsbytes("v"),
     cst_src_map_ml_8_77=caml_string_of_jsbytes("src/map.ml:8:77"),
     cst_v$0=caml_string_of_jsbytes("v"),
     cst_src_map_ml_8_72=caml_string_of_jsbytes("src/map.ml:8:72"),
     cst_Unequal=caml_string_of_jsbytes("Unequal"),
     cst_v$1=caml_string_of_jsbytes("v"),
     cst_src_map_ml_8_55=caml_string_of_jsbytes("src/map.ml:8:55"),
     cst_Right$0=caml_string_of_jsbytes("Right"),
     cst_v$2=caml_string_of_jsbytes("v"),
     cst_src_map_ml_8_40=caml_string_of_jsbytes("src/map.ml:8:40"),
     cst_Left$0=caml_string_of_jsbytes("Left"),
     cst_src_map_ml_8_29=caml_string_of_jsbytes("src/map.ml:8:29"),
     cst_k=caml_string_of_jsbytes("k"),
     cst_src_map_ml_8_24=caml_string_of_jsbytes("src/map.ml:8:24"),
     cst_v$3=caml_string_of_jsbytes("v"),
     cst_k$0=caml_string_of_jsbytes("k"),
     cst_t$86=caml_string_of_jsbytes("t"),
     cst_src_map_ml_8_6=caml_string_of_jsbytes("src/map.ml:8:6"),
     tp_loc$13=
      caml_string_of_jsbytes("src/map.ml.Symmetric_diff_element.Stable.V1.t"),
     cst_src_map_ml$1=caml_string_of_jsbytes("src/map.ml"),
     cst_src_map_ml$2=caml_string_of_jsbytes("src/map.ml"),
     cst_src_map_ml$3=caml_string_of_jsbytes("src/map.ml"),
     cst_src_map_ml$4=caml_string_of_jsbytes("src/map.ml"),
     cst_9249a318f4c83c9f11a77240e9=
      caml_string_of_jsbytes("9249a318f4c83c9f11a77240e9d5be97"),
     cst_b$8=caml_string_of_jsbytes("b"),
     cst_src_map_ml_412_30=caml_string_of_jsbytes("src/map.ml:412:30"),
     cst_a$36=caml_string_of_jsbytes("a"),
     cst_src_map_ml_412_25=caml_string_of_jsbytes("src/map.ml:412:25"),
     cst_b$9=caml_string_of_jsbytes("b"),
     cst_a$37=caml_string_of_jsbytes("a"),
     cst_el$5=caml_string_of_jsbytes("el"),
     cst_src_map_ml_412_6=caml_string_of_jsbytes("src/map.ml:412:6"),
     cst_b7d7b1a0_4992_11e6_8a32_bb=
      caml_string_of_jsbytes("b7d7b1a0-4992-11e6-8a32-bbb221fa025c"),
     module_name$2=[0,caml_string_of_jsbytes("Core_kernel.Map")],
     cst_core_kernel$109=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Map$0=caml_string_of_jsbytes("Core_kernel__Map"),
     cst_Excl$0=caml_string_of_jsbytes("Excl"),
     cst_Incl$0=caml_string_of_jsbytes("Incl"),
     cst_Unbounded=caml_string_of_jsbytes("Unbounded"),
     cst_excl=caml_string_of_jsbytes("excl"),
     cst_incl=caml_string_of_jsbytes("incl"),
     cst_unbounded=caml_string_of_jsbytes("unbounded"),
     cst_Excl$1=caml_string_of_jsbytes("Excl"),
     cst_Incl$1=caml_string_of_jsbytes("Incl"),
     cst_Unbounded$0=caml_string_of_jsbytes("Unbounded"),
     cst_excl$0=caml_string_of_jsbytes("excl"),
     cst_incl$0=caml_string_of_jsbytes("incl"),
     cst_unbounded$0=caml_string_of_jsbytes("unbounded"),
     cst_src_maybe_bound_ml_Stable_=
      caml_string_of_jsbytes("src/maybe_bound.ml.Stable.V1.t"),
     cst_t$89=caml_string_of_jsbytes("t"),
     cst_Core_kernel_Maybe_bound=
      caml_string_of_jsbytes("Core_kernel__Maybe_bound"),
     cst_core_kernel$110=caml_string_of_jsbytes("core_kernel"),
     cst_src_maybe_bound_ml=caml_string_of_jsbytes("src/maybe_bound.ml"),
     cst$36=caml_string_of_jsbytes(""),
     cst_core_kernel$111=caml_string_of_jsbytes("core_kernel"),
     cst_a$38=caml_string_of_jsbytes("a"),
     cst_src_maybe_bound_ml_7_16=
      caml_string_of_jsbytes("src/maybe_bound.ml:7:16"),
     cst_Excl=caml_string_of_jsbytes("Excl"),
     cst_a$39=caml_string_of_jsbytes("a"),
     cst_src_maybe_bound_ml_6_16=
      caml_string_of_jsbytes("src/maybe_bound.ml:6:16"),
     cst_Incl=caml_string_of_jsbytes("Incl"),
     cst_a$40=caml_string_of_jsbytes("a"),
     cst_t$88=caml_string_of_jsbytes("t"),
     cst_src_maybe_bound_ml_5_4=
      caml_string_of_jsbytes("src/maybe_bound.ml:5:4"),
     tp_loc$14=caml_string_of_jsbytes("src/maybe_bound.ml.Stable.V1.t"),
     cst_core_kernel$112=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Maybe_bound$0=
      caml_string_of_jsbytes("Core_kernel__Maybe_bound"),
     cst_Core_kernel_Quickcheckable=
      caml_string_of_jsbytes("Core_kernel__Quickcheckable_intf"),
     cst_core_kernel$113=caml_string_of_jsbytes("core_kernel"),
     cst_src_quickcheckable_intf_ml=
      caml_string_of_jsbytes("src/quickcheckable_intf.ml"),
     cst$37=caml_string_of_jsbytes(""),
     cst_core_kernel$114=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$115=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Quickcheckable$0=
      caml_string_of_jsbytes("Core_kernel__Quickcheckable_intf"),
     cst_Core_kernel_Quickcheckable$1=
      caml_string_of_jsbytes("Core_kernel__Quickcheckable"),
     cst_core_kernel$116=caml_string_of_jsbytes("core_kernel"),
     cst_src_quickcheckable_ml=caml_string_of_jsbytes("src/quickcheckable.ml"),
     cst$38=caml_string_of_jsbytes(""),
     cst_core_kernel$117=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$118=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Quickcheckable$2=
      caml_string_of_jsbytes("Core_kernel__Quickcheckable"),
     cst_Core_kernel_Set_intf=caml_string_of_jsbytes("Core_kernel__Set_intf"),
     cst_core_kernel$119=caml_string_of_jsbytes("core_kernel"),
     cst_src_set_intf_ml=caml_string_of_jsbytes("src/set_intf.ml"),
     cst$39=caml_string_of_jsbytes(""),
     cst_core_kernel$120=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$121=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Set_intf$0=
      caml_string_of_jsbytes("Core_kernel__Set_intf"),
     cst_el$11=caml_string_of_jsbytes("el"),
     cst_src_set_ml_363_4=caml_string_of_jsbytes("src/set.ml:363:4"),
     cst_el$12=caml_string_of_jsbytes("el"),
     cst_8989278e_4992_11e6_8f4a_6b=
      caml_string_of_jsbytes("8989278e-4992-11e6-8f4a-6b89776b1e53"),
     module_name$5=[0,caml_string_of_jsbytes("Core_kernel.Set")],
     cst_el$10=caml_string_of_jsbytes("el"),
     cst_Set_bin_read_t_duplicate_e=
      caml_string_of_jsbytes("Set.bin_read_t: duplicate element in map"),
     cst_Core_kernel_Set=caml_string_of_jsbytes("Core_kernel__Set"),
     cst_core_kernel$122=caml_string_of_jsbytes("core_kernel"),
     cst_src_set_ml=caml_string_of_jsbytes("src/set.ml"),
     cst$40=caml_string_of_jsbytes(""),
     cst_core_kernel$123=caml_string_of_jsbytes("core_kernel"),
     cst_a$41=caml_string_of_jsbytes("a"),
     cst_src_set_ml_324_19=caml_string_of_jsbytes("src/set.ml:324:19"),
     cst_a$42=caml_string_of_jsbytes("a"),
     cst_el$9=caml_string_of_jsbytes("el"),
     cst_src_set_ml_324_6=caml_string_of_jsbytes("src/set.ml:324:6"),
     cst_88bcc478_4992_11e6_a95d_ff=
      caml_string_of_jsbytes("88bcc478-4992-11e6-a95d-ff4831acf410"),
     module_name$4=[0,caml_string_of_jsbytes("Core_kernel.Set")],
     cst_core_kernel$124=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Set$0=caml_string_of_jsbytes("Core_kernel__Set"),
     cst_Core_kernel_Comparable_int=
      caml_string_of_jsbytes("Core_kernel__Comparable_intf"),
     cst_core_kernel$125=caml_string_of_jsbytes("core_kernel"),
     cst_src_comparable_intf_ml=
      caml_string_of_jsbytes("src/comparable_intf.ml"),
     cst$41=caml_string_of_jsbytes(""),
     cst_core_kernel$126=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$127=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Comparable_int$0=
      caml_string_of_jsbytes("Core_kernel__Comparable_intf"),
     cst_Core_kernel_Comparable=
      caml_string_of_jsbytes("Core_kernel__Comparable"),
     cst_core_kernel$128=caml_string_of_jsbytes("core_kernel"),
     cst_src_comparable_ml=caml_string_of_jsbytes("src/comparable.ml"),
     cst$42=caml_string_of_jsbytes(""),
     cst_core_kernel$129=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$130=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Comparable$0=
      caml_string_of_jsbytes("Core_kernel__Comparable"),
     cst_Core_kernel_Doubly_linked_=
      caml_string_of_jsbytes("Core_kernel__Doubly_linked_intf"),
     cst_core_kernel$131=caml_string_of_jsbytes("core_kernel"),
     cst_src_doubly_linked_intf_ml=
      caml_string_of_jsbytes("src/doubly_linked_intf.ml"),
     cst$43=caml_string_of_jsbytes(""),
     cst_core_kernel$132=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$133=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Doubly_linked_$0=
      caml_string_of_jsbytes("Core_kernel__Doubly_linked_intf"),
     cst_t$91=caml_string_of_jsbytes("t"),
     cst_exn_if_dup=caml_string_of_jsbytes("exn_if_dup"),
     cst_Core_kernel_List=caml_string_of_jsbytes("Core_kernel__List"),
     cst_core_kernel$134=caml_string_of_jsbytes("core_kernel"),
     cst_src_list_ml=caml_string_of_jsbytes("src/list.ml"),
     cst$44=caml_string_of_jsbytes(""),
     cst_core_kernel$135=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_List_Duplicate=
      caml_string_of_jsbytes("Core_kernel__List.Duplicate_found"),
     cst_a$43=caml_string_of_jsbytes("a"),
     cst_src_list_ml_56_23=caml_string_of_jsbytes("src/list.ml:56:23"),
     cst_a$44=caml_string_of_jsbytes("a"),
     cst_t$90=caml_string_of_jsbytes("t"),
     cst_src_list_ml_56_4=caml_string_of_jsbytes("src/list.ml:56:4"),
     cst_core_kernel$136=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_List$0=caml_string_of_jsbytes("Core_kernel__List"),
     cst_t$95=caml_string_of_jsbytes("t"),
     cst_t$93=caml_string_of_jsbytes("t"),
     cst_Core_kernel_Option=caml_string_of_jsbytes("Core_kernel__Option"),
     cst_core_kernel$137=caml_string_of_jsbytes("core_kernel"),
     cst_src_option_ml=caml_string_of_jsbytes("src/option.ml"),
     cst$45=caml_string_of_jsbytes(""),
     cst_core_kernel$138=caml_string_of_jsbytes("core_kernel"),
     cst_a$45=caml_string_of_jsbytes("a"),
     cst_src_option_ml_4_12=caml_string_of_jsbytes("src/option.ml:4:12"),
     cst_a$46=caml_string_of_jsbytes("a"),
     cst_t$92=caml_string_of_jsbytes("t"),
     cst_src_option_ml_4_0=caml_string_of_jsbytes("src/option.ml:4:0"),
     name$11=caml_string_of_jsbytes("src/option.ml.t"),
     cst_a$47=caml_string_of_jsbytes("a"),
     cst_src_option_ml_16_23=caml_string_of_jsbytes("src/option.ml:16:23"),
     cst_a$48=caml_string_of_jsbytes("a"),
     cst_t$94=caml_string_of_jsbytes("t"),
     cst_src_option_ml_16_4=caml_string_of_jsbytes("src/option.ml:16:4"),
     cst_core_kernel$139=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Option$0=caml_string_of_jsbytes("Core_kernel__Option"),
     cst_Core_kernel_Optional_synta=
      caml_string_of_jsbytes("Core_kernel__Optional_syntax_intf"),
     cst_core_kernel$140=caml_string_of_jsbytes("core_kernel"),
     cst_src_optional_syntax_intf_m=
      caml_string_of_jsbytes("src/optional_syntax_intf.ml"),
     cst$46=caml_string_of_jsbytes(""),
     cst_core_kernel$141=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$142=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Optional_synta$0=
      caml_string_of_jsbytes("Core_kernel__Optional_syntax_intf"),
     cst_Core_kernel_Optional_synta$1=
      caml_string_of_jsbytes("Core_kernel__Optional_syntax"),
     cst_core_kernel$143=caml_string_of_jsbytes("core_kernel"),
     cst_src_optional_syntax_ml=
      caml_string_of_jsbytes("src/optional_syntax.ml"),
     cst$47=caml_string_of_jsbytes(""),
     cst_core_kernel$144=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$145=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Optional_synta$2=
      caml_string_of_jsbytes("Core_kernel__Optional_syntax"),
     cst_Core_kernel_Union_find=
      caml_string_of_jsbytes("Core_kernel__Union_find"),
     cst_core_kernel$146=caml_string_of_jsbytes("core_kernel"),
     cst_src_union_find_ml=caml_string_of_jsbytes("src/union_find.ml"),
     cst$48=caml_string_of_jsbytes(""),
     cst_core_kernel$147=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$148=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Union_find$0=
      caml_string_of_jsbytes("Core_kernel__Union_find"),
     cst_Core_kernel_Doubly_linked=
      caml_string_of_jsbytes("Core_kernel__Doubly_linked"),
     cst_core_kernel$149=caml_string_of_jsbytes("core_kernel"),
     cst_src_doubly_linked_ml=caml_string_of_jsbytes("src/doubly_linked.ml"),
     cst$49=caml_string_of_jsbytes(""),
     cst_core_kernel$150=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Doubly_linked_$1=
      caml_string_of_jsbytes
       ("Core_kernel__Doubly_linked.Attempt_to_mutate_list_during_iteration"),
     cst_Core_kernel_Doubly_linked_$2=
      caml_string_of_jsbytes
       ("Core_kernel__Doubly_linked.Transfer_src_and_dst_are_same_list"),
     cst_Core_kernel_Doubly_linked_$3=
      caml_string_of_jsbytes
       ("Core_kernel__Doubly_linked.Elt_does_not_belong_to_list"),
     cst_Core_kernel_Doubly_linked_$4=
      caml_string_of_jsbytes
       ("Core_kernel__Doubly_linked.Invalid_move__elt_equals_anchor"),
     cst_core_kernel$151=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Doubly_linked$0=
      caml_string_of_jsbytes("Core_kernel__Doubly_linked"),
     cst_Core_kernel_Hash_queue_int=
      caml_string_of_jsbytes("Core_kernel__Hash_queue_intf"),
     cst_core_kernel$152=caml_string_of_jsbytes("core_kernel"),
     cst_src_hash_queue_intf_ml=
      caml_string_of_jsbytes("src/hash_queue_intf.ml"),
     cst$50=caml_string_of_jsbytes(""),
     cst_core_kernel$153=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$154=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Hash_queue_int$0=
      caml_string_of_jsbytes("Core_kernel__Hash_queue_intf"),
     cst_no_raise$0=caml_string_of_jsbytes("no_raise"),
     cst_With_text_t_should_be_stor=
      caml_string_of_jsbytes
       ("With_text.t should be stored as an atom, but instead a list was found."),
     cst$52=caml_string_of_jsbytes(""),
     cst_src_sexp_ml_With_text_t=
      caml_string_of_jsbytes("src/sexp.ml.With_text.t"),
     cst_t$102=caml_string_of_jsbytes("t"),
     cst_sexp_parse_error=caml_string_of_jsbytes("sexp_parse_error"),
     cst_t$100=caml_string_of_jsbytes("t"),
     cst_src_sexp_ml_Stable_V1_t=
      caml_string_of_jsbytes("src/sexp.ml.Stable.V1.t"),
     cst_Core_kernel_Sexp=caml_string_of_jsbytes("Core_kernel__Sexp"),
     cst_core_kernel$155=caml_string_of_jsbytes("core_kernel"),
     cst_src_sexp_ml=caml_string_of_jsbytes("src/sexp.ml"),
     cst$51=caml_string_of_jsbytes(""),
     cst_core_kernel$156=caml_string_of_jsbytes("core_kernel"),
     cst_t$96=caml_string_of_jsbytes("t"),
     cst_List$2=caml_string_of_jsbytes("List"),
     cst_Atom$2=caml_string_of_jsbytes("Atom"),
     cst_t$97=caml_string_of_jsbytes("t"),
     cst_src_sexp_ml_5_4=caml_string_of_jsbytes("src/sexp.ml:5:4"),
     cst_t$98=caml_string_of_jsbytes("t"),
     cst_a$49=caml_string_of_jsbytes("a"),
     cst_src_sexp_ml_38_22=caml_string_of_jsbytes("src/sexp.ml:38:22"),
     cst_a$50=caml_string_of_jsbytes("a"),
     cst_t$99=caml_string_of_jsbytes("t"),
     cst_src_sexp_ml_38_2=caml_string_of_jsbytes("src/sexp.ml:38:2"),
     cst_text=caml_string_of_jsbytes("text"),
     cst_a$51=caml_string_of_jsbytes("a"),
     cst_src_sexp_ml_59_14=caml_string_of_jsbytes("src/sexp.ml:59:14"),
     cst_value=caml_string_of_jsbytes("value"),
     cst_a$52=caml_string_of_jsbytes("a"),
     cst_t$101=caml_string_of_jsbytes("t"),
     cst_src_sexp_ml_58_2=caml_string_of_jsbytes("src/sexp.ml:58:2"),
     cst_a$53=caml_string_of_jsbytes("a"),
     cst_src_sexp_ml_92_19=caml_string_of_jsbytes("src/sexp.ml:92:19"),
     cst_a$54=caml_string_of_jsbytes("a"),
     cst_no_raise=caml_string_of_jsbytes("no_raise"),
     cst_src_sexp_ml_92_0=caml_string_of_jsbytes("src/sexp.ml:92:0"),
     cst_core_kernel$157=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Sexp$0=caml_string_of_jsbytes("Core_kernel__Sexp"),
     cst_Hash_queue_replace_exn_unk=
      caml_string_of_jsbytes("Hash_queue.replace_exn: unknown key"),
     cst_Hash_queue_remove_exn_unkn=
      caml_string_of_jsbytes("Hash_queue.remove_exn: unknown key"),
     cst_Hash_queue_dequeue_exn_emp=
      caml_string_of_jsbytes("Hash_queue.dequeue_exn: empty queue"),
     cst_Hash_queue_dequeue_with_ke=
      caml_string_of_jsbytes("Hash_queue.dequeue_with_key: empty queue"),
     cst_Hash_queue_enqueue_exn_dup=
      caml_string_of_jsbytes("Hash_queue.enqueue_exn: duplicate key"),
     cst_It_is_an_error_to_modify_a=
      caml_string_of_jsbytes
       ("It is an error to modify a Hash_queue.t while iterating over it."),
     cst_Core_kernel_Hash_queue=
      caml_string_of_jsbytes("Core_kernel__Hash_queue"),
     cst_core_kernel$158=caml_string_of_jsbytes("core_kernel"),
     cst_src_hash_queue_ml=caml_string_of_jsbytes("src/hash_queue.ml"),
     cst$53=caml_string_of_jsbytes(""),
     cst_core_kernel$159=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$160=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Hash_queue$0=
      caml_string_of_jsbytes("Core_kernel__Hash_queue"),
     cst_Core_kernel_Hashable=caml_string_of_jsbytes("Core_kernel__Hashable"),
     cst_core_kernel$161=caml_string_of_jsbytes("core_kernel"),
     cst_src_hashable_ml=caml_string_of_jsbytes("src/hashable.ml"),
     cst$54=caml_string_of_jsbytes(""),
     cst_core_kernel$162=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$163=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Hashable$0=
      caml_string_of_jsbytes("Core_kernel__Hashable"),
     cst_Core_kernel_Identifiable=
      caml_string_of_jsbytes("Core_kernel__Identifiable"),
     cst_core_kernel$164=caml_string_of_jsbytes("core_kernel"),
     cst_src_identifiable_ml=caml_string_of_jsbytes("src/identifiable.ml"),
     cst$55=caml_string_of_jsbytes(""),
     cst_core_kernel$165=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$166=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Identifiable$0=
      caml_string_of_jsbytes("Core_kernel__Identifiable"),
     cst_Core_kernel_Bool=caml_string_of_jsbytes("Core_kernel__Bool"),
     cst_core_kernel$167=caml_string_of_jsbytes("core_kernel"),
     cst_src_bool_ml=caml_string_of_jsbytes("src/bool.ml"),
     cst$56=caml_string_of_jsbytes(""),
     cst_core_kernel$168=caml_string_of_jsbytes("core_kernel"),
     cst_t$103=caml_string_of_jsbytes("t"),
     cst_src_bool_ml_3_0=caml_string_of_jsbytes("src/bool.ml:3:0"),
     cst_t$104=caml_string_of_jsbytes("t"),
     name$12=caml_string_of_jsbytes("src/bool.ml.t"),
     cst_t$105=caml_string_of_jsbytes("t"),
     cst_src_bool_ml_8_6=caml_string_of_jsbytes("src/bool.ml:8:6"),
     cst_t$106=caml_string_of_jsbytes("t"),
     cst_t$107=caml_string_of_jsbytes("t"),
     cst_src_bool_ml_26_4=caml_string_of_jsbytes("src/bool.ml:26:4"),
     cst_t$108=caml_string_of_jsbytes("t"),
     cst_core_kernel$169=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Bool$0=caml_string_of_jsbytes("Core_kernel__Bool"),
     cst_Core_kernel_Hexdump_intf=
      caml_string_of_jsbytes("Core_kernel__Hexdump_intf"),
     cst_core_kernel$170=caml_string_of_jsbytes("core_kernel"),
     cst_src_hexdump_intf_ml=caml_string_of_jsbytes("src/hexdump_intf.ml"),
     cst$57=caml_string_of_jsbytes(""),
     cst_core_kernel$171=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$172=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Hexdump_intf$0=
      caml_string_of_jsbytes("Core_kernel__Hexdump_intf"),
     cst$60=caml_string_of_jsbytes("..."),
     partial=
      [12,32,[2,0,[12,32,[2,0,[12,32,[2,0,[12,32,[2,0,[12,32,[2,0,0]]]]]]]]]],
     partial$0=
      [2,
       0,
       [12,
        32,
        [2,
         0,
         [12,
          32,
          [2,
           0,
           [11,
            caml_string_of_jsbytes("  "),
            [2,0,[12,32,[2,0,[12,32,[2,0,partial]]]]]]]]]]],
     cst$59=caml_string_of_jsbytes("  "),
     cst_Core_kernel_Hexdump=caml_string_of_jsbytes("Core_kernel__Hexdump"),
     cst_core_kernel$173=caml_string_of_jsbytes("core_kernel"),
     cst_src_hexdump_ml=caml_string_of_jsbytes("src/hexdump.ml"),
     cst$58=caml_string_of_jsbytes(""),
     cst_core_kernel$174=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$175=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Hexdump$0=caml_string_of_jsbytes("Core_kernel__Hexdump"),
     cst_Core_kernel_Stable_compara=
      caml_string_of_jsbytes("Core_kernel__Stable_comparable"),
     cst_core_kernel$176=caml_string_of_jsbytes("core_kernel"),
     cst_src_stable_comparable_ml=
      caml_string_of_jsbytes("src/stable_comparable.ml"),
     cst$61=caml_string_of_jsbytes(""),
     cst_core_kernel$177=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$178=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Stable_compara$0=
      caml_string_of_jsbytes("Core_kernel__Stable_comparable"),
     cst_Core_kernel_String=caml_string_of_jsbytes("Core_kernel__String"),
     cst_core_kernel$179=caml_string_of_jsbytes("core_kernel"),
     cst_src_string_ml=caml_string_of_jsbytes("src/string.ml"),
     cst$62=caml_string_of_jsbytes(""),
     cst_core_kernel$180=caml_string_of_jsbytes("core_kernel"),
     cst_t$109=caml_string_of_jsbytes("t"),
     cst_src_string_ml_14_6=caml_string_of_jsbytes("src/string.ml:14:6"),
     cst_t$110=caml_string_of_jsbytes("t"),
     cst_t$111=caml_string_of_jsbytes("t"),
     cst_src_string_ml_31_4=caml_string_of_jsbytes("src/string.ml:31:4"),
     cst_t$112=caml_string_of_jsbytes("t"),
     name$13=caml_string_of_jsbytes("src/string.ml.t"),
     cst_t$113=caml_string_of_jsbytes("t"),
     cst_src_string_ml_44_6=caml_string_of_jsbytes("src/string.ml:44:6"),
     cst_t$114=caml_string_of_jsbytes("t"),
     cst_core_kernel$181=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_String$0=caml_string_of_jsbytes("Core_kernel__String"),
     cst_Core_kernel_Bytes=caml_string_of_jsbytes("Core_kernel__Bytes"),
     cst_core_kernel$182=caml_string_of_jsbytes("core_kernel"),
     cst_src_bytes_ml=caml_string_of_jsbytes("src/bytes.ml"),
     cst$63=caml_string_of_jsbytes(""),
     cst_core_kernel$183=caml_string_of_jsbytes("core_kernel"),
     cst_t$115=caml_string_of_jsbytes("t"),
     cst_src_bytes_ml_7_4=caml_string_of_jsbytes("src/bytes.ml:7:4"),
     cst_t$116=caml_string_of_jsbytes("t"),
     name$14=caml_string_of_jsbytes("src/bytes.ml.Stable.V1.t"),
     cst_core_kernel$184=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Bytes$0=caml_string_of_jsbytes("Core_kernel__Bytes"),
     cst_Core_kernel_Char=caml_string_of_jsbytes("Core_kernel__Char"),
     cst_core_kernel$185=caml_string_of_jsbytes("core_kernel"),
     cst_src_char_ml=caml_string_of_jsbytes("src/char.ml"),
     cst$64=caml_string_of_jsbytes(""),
     cst_core_kernel$186=caml_string_of_jsbytes("core_kernel"),
     name$15=caml_string_of_jsbytes("src/char.ml.t"),
     cst_t$117=caml_string_of_jsbytes("t"),
     cst_src_char_ml_8_6=caml_string_of_jsbytes("src/char.ml:8:6"),
     cst_t$118=caml_string_of_jsbytes("t"),
     cst_t$119=caml_string_of_jsbytes("t"),
     cst_src_char_ml_24_4=caml_string_of_jsbytes("src/char.ml:24:4"),
     cst_t$120=caml_string_of_jsbytes("t"),
     cst_core_kernel$187=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Char$0=caml_string_of_jsbytes("Core_kernel__Char"),
     cst_Core_kernel_Core_pervasive=
      caml_string_of_jsbytes("Core_kernel__Core_pervasives"),
     cst_core_kernel$188=caml_string_of_jsbytes("core_kernel"),
     cst_src_core_pervasives_ml=
      caml_string_of_jsbytes("src/core_pervasives.ml"),
     cst$65=caml_string_of_jsbytes(""),
     cst_core_kernel$189=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$190=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Core_pervasive$0=
      caml_string_of_jsbytes("Core_kernel__Core_pervasives"),
     cst_Core_kernel_Robustly_compa=
      caml_string_of_jsbytes("Core_kernel__Robustly_comparable"),
     cst_core_kernel$191=caml_string_of_jsbytes("core_kernel"),
     cst_src_robustly_comparable_ml=
      caml_string_of_jsbytes("src/robustly_comparable.ml"),
     cst$66=caml_string_of_jsbytes(""),
     cst_core_kernel$192=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$193=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Robustly_compa$0=
      caml_string_of_jsbytes("Core_kernel__Robustly_comparable"),
     cst_Neg$1=caml_string_of_jsbytes("Neg"),
     cst_Zero$1=caml_string_of_jsbytes("Zero"),
     cst_Pos$1=caml_string_of_jsbytes("Pos"),
     cst_src_sign_ml_Stable_V1_t=
      caml_string_of_jsbytes("src/sign.ml.Stable.V1.t"),
     cst_Neg=caml_string_of_jsbytes("Neg"),
     cst_Pos=caml_string_of_jsbytes("Pos"),
     cst_Zero=caml_string_of_jsbytes("Zero"),
     cst_neg=caml_string_of_jsbytes("neg"),
     cst_pos=caml_string_of_jsbytes("pos"),
     cst_zero=caml_string_of_jsbytes("zero"),
     cst_Neg$0=caml_string_of_jsbytes("Neg"),
     cst_Pos$0=caml_string_of_jsbytes("Pos"),
     cst_Zero$0=caml_string_of_jsbytes("Zero"),
     cst_neg$0=caml_string_of_jsbytes("neg"),
     cst_pos$0=caml_string_of_jsbytes("pos"),
     cst_zero$0=caml_string_of_jsbytes("zero"),
     cst_Core_kernel_Sign=caml_string_of_jsbytes("Core_kernel__Sign"),
     cst_core_kernel$194=caml_string_of_jsbytes("core_kernel"),
     cst_src_sign_ml=caml_string_of_jsbytes("src/sign.ml"),
     cst$67=caml_string_of_jsbytes(""),
     cst_core_kernel$195=caml_string_of_jsbytes("core_kernel"),
     tp_loc$15=caml_string_of_jsbytes("src/sign.ml.Stable.V1.t"),
     cst_t$121=caml_string_of_jsbytes("t"),
     cst_src_sign_ml_6_4=caml_string_of_jsbytes("src/sign.ml:6:4"),
     cst_t$122=caml_string_of_jsbytes("t"),
     name$16=caml_string_of_jsbytes("src/sign.ml.Stable.V1.t"),
     cst_core_kernel$196=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Sign$0=caml_string_of_jsbytes("Core_kernel__Sign"),
     cst_12g=caml_string_of_jsbytes("%.12g"),
     cst$69=caml_string_of_jsbytes("."),
     cst_Core_kernel_Float=caml_string_of_jsbytes("Core_kernel__Float"),
     cst_core_kernel$197=caml_string_of_jsbytes("core_kernel"),
     cst_src_float_ml=caml_string_of_jsbytes("src/float.ml"),
     cst$68=caml_string_of_jsbytes(""),
     cst_core_kernel$198=caml_string_of_jsbytes("core_kernel"),
     cst_t$123=caml_string_of_jsbytes("t"),
     cst_src_float_ml_26_2=caml_string_of_jsbytes("src/float.ml:26:2"),
     cst_t$124=caml_string_of_jsbytes("t"),
     name$17=caml_string_of_jsbytes("src/float.ml.T.t"),
     cst_t$125=caml_string_of_jsbytes("t"),
     cst_src_float_ml_84_2=caml_string_of_jsbytes("src/float.ml:84:2"),
     cst_t$126=caml_string_of_jsbytes("t"),
     cst_core_kernel$199=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Float$0=caml_string_of_jsbytes("Core_kernel__Float"),
     cst_Core_kernel_Int=caml_string_of_jsbytes("Core_kernel__Int"),
     cst_core_kernel$200=caml_string_of_jsbytes("core_kernel"),
     cst_src_int_ml=caml_string_of_jsbytes("src/int.ml"),
     cst$70=caml_string_of_jsbytes(""),
     cst_core_kernel$201=caml_string_of_jsbytes("core_kernel"),
     cst_t$127=caml_string_of_jsbytes("t"),
     cst_src_int_ml_8_6=caml_string_of_jsbytes("src/int.ml:8:6"),
     cst_t$128=caml_string_of_jsbytes("t"),
     cst_t$129=caml_string_of_jsbytes("t"),
     cst_src_int_ml_19_6=caml_string_of_jsbytes("src/int.ml:19:6"),
     cst_t$130=caml_string_of_jsbytes("t"),
     name$18=caml_string_of_jsbytes("src/int.ml.t"),
     name$19=caml_string_of_jsbytes("src/int.ml.Hex.t"),
     cst_t$131=caml_string_of_jsbytes("t"),
     cst_src_int_ml_30_2=caml_string_of_jsbytes("src/int.ml:30:2"),
     cst_t$132=caml_string_of_jsbytes("t"),
     cst_core_kernel$202=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Int$0=caml_string_of_jsbytes("Core_kernel__Int"),
     cst_Core_kernel_Int32=caml_string_of_jsbytes("Core_kernel__Int32"),
     cst_core_kernel$203=caml_string_of_jsbytes("core_kernel"),
     cst_src_int32_ml=caml_string_of_jsbytes("src/int32.ml"),
     cst$71=caml_string_of_jsbytes(""),
     cst_core_kernel$204=caml_string_of_jsbytes("core_kernel"),
     cst_t$133=caml_string_of_jsbytes("t"),
     cst_src_int32_ml_6_6=caml_string_of_jsbytes("src/int32.ml:6:6"),
     cst_t$134=caml_string_of_jsbytes("t"),
     name$20=caml_string_of_jsbytes("src/int32.ml.t"),
     name$21=caml_string_of_jsbytes("src/int32.ml.Hex.t"),
     cst_t$135=caml_string_of_jsbytes("t"),
     cst_src_int32_ml_16_2=caml_string_of_jsbytes("src/int32.ml:16:2"),
     cst_t$136=caml_string_of_jsbytes("t"),
     cst_core_kernel$205=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Int32$0=caml_string_of_jsbytes("Core_kernel__Int32"),
     cst_Core_kernel_Int64=caml_string_of_jsbytes("Core_kernel__Int64"),
     cst_core_kernel$206=caml_string_of_jsbytes("core_kernel"),
     cst_src_int64_ml=caml_string_of_jsbytes("src/int64.ml"),
     cst$72=caml_string_of_jsbytes(""),
     cst_core_kernel$207=caml_string_of_jsbytes("core_kernel"),
     cst_t$137=caml_string_of_jsbytes("t"),
     cst_src_int64_ml_6_6=caml_string_of_jsbytes("src/int64.ml:6:6"),
     cst_t$138=caml_string_of_jsbytes("t"),
     name$22=caml_string_of_jsbytes("src/int64.ml.t"),
     name$23=caml_string_of_jsbytes("src/int64.ml.Hex.t"),
     cst_t$139=caml_string_of_jsbytes("t"),
     cst_src_int64_ml_16_2=caml_string_of_jsbytes("src/int64.ml:16:2"),
     cst_t$140=caml_string_of_jsbytes("t"),
     cst_core_kernel$208=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Int64$0=caml_string_of_jsbytes("Core_kernel__Int64"),
     cst_Core_kernel_Int_intf=caml_string_of_jsbytes("Core_kernel__Int_intf"),
     cst_core_kernel$209=caml_string_of_jsbytes("core_kernel"),
     cst_src_int_intf_ml=caml_string_of_jsbytes("src/int_intf.ml"),
     cst$73=caml_string_of_jsbytes(""),
     cst_core_kernel$210=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$211=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Int_intf$0=
      caml_string_of_jsbytes("Core_kernel__Int_intf"),
     cst_Core_kernel_Int63=caml_string_of_jsbytes("Core_kernel__Int63"),
     cst_core_kernel$212=caml_string_of_jsbytes("core_kernel"),
     cst_src_int63_ml=caml_string_of_jsbytes("src/int63.ml"),
     cst$74=caml_string_of_jsbytes(""),
     cst_core_kernel$213=caml_string_of_jsbytes("core_kernel"),
     name$24=caml_string_of_jsbytes("src/int63.ml.Hex.t"),
     cst_t$141=caml_string_of_jsbytes("t"),
     cst_src_int63_ml_76_2=caml_string_of_jsbytes("src/int63.ml:76:2"),
     cst_t$142=caml_string_of_jsbytes("t"),
     cst_core_kernel$214=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Int63$0=caml_string_of_jsbytes("Core_kernel__Int63"),
     cst_Core_kernel_Stable_int63ab=
      caml_string_of_jsbytes("Core_kernel__Stable_int63able"),
     cst_core_kernel$215=caml_string_of_jsbytes("core_kernel"),
     cst_src_stable_int63able_ml=
      caml_string_of_jsbytes("src/stable_int63able.ml"),
     cst$75=caml_string_of_jsbytes(""),
     cst_core_kernel$216=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$217=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Stable_int63ab$0=
      caml_string_of_jsbytes("Core_kernel__Stable_int63able"),
     cst_src_unit_ml$0=caml_string_of_jsbytes("src/unit.ml"),
     cst_Core_kernel_Unit=caml_string_of_jsbytes("Core_kernel__Unit"),
     cst_core_kernel$218=caml_string_of_jsbytes("core_kernel"),
     cst_src_unit_ml=caml_string_of_jsbytes("src/unit.ml"),
     cst$76=caml_string_of_jsbytes(""),
     cst_core_kernel$219=caml_string_of_jsbytes("core_kernel"),
     cst_t$143=caml_string_of_jsbytes("t"),
     cst_src_unit_ml_7_6=caml_string_of_jsbytes("src/unit.ml:7:6"),
     cst_t$144=caml_string_of_jsbytes("t"),
     cst_src_unit_ml$1=caml_string_of_jsbytes("src/unit.ml"),
     cst_src_unit_ml$2=caml_string_of_jsbytes("src/unit.ml"),
     cst_src_unit_ml$3=caml_string_of_jsbytes("src/unit.ml"),
     cst_src_unit_ml$4=caml_string_of_jsbytes("src/unit.ml"),
     cst_a7cce5982e04b068cd882d40ef=
      caml_string_of_jsbytes("a7cce5982e04b068cd882d40ef8853b5"),
     cst_t$145=caml_string_of_jsbytes("t"),
     cst_src_unit_ml_25_6=caml_string_of_jsbytes("src/unit.ml:25:6"),
     cst_t$146=caml_string_of_jsbytes("t"),
     name$25=caml_string_of_jsbytes("src/unit.ml.t"),
     cst_core_kernel$220=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Unit$0=caml_string_of_jsbytes("Core_kernel__Unit"),
     cst_Core_kernel_Interfaces=
      caml_string_of_jsbytes("Core_kernel__Interfaces"),
     cst_core_kernel$221=caml_string_of_jsbytes("core_kernel"),
     cst_src_interfaces_ml=caml_string_of_jsbytes("src/interfaces.ml"),
     cst$77=caml_string_of_jsbytes(""),
     cst_core_kernel$222=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$223=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Interfaces$0=
      caml_string_of_jsbytes("Core_kernel__Interfaces"),
     cst_t$148=caml_string_of_jsbytes("t"),
     cst_Core_kernel_Lazy=caml_string_of_jsbytes("Core_kernel__Lazy"),
     cst_core_kernel$224=caml_string_of_jsbytes("core_kernel"),
     cst_src_lazy_ml=caml_string_of_jsbytes("src/lazy.ml"),
     cst$78=caml_string_of_jsbytes(""),
     cst_core_kernel$225=caml_string_of_jsbytes("core_kernel"),
     cst_a$55=caml_string_of_jsbytes("a"),
     cst_src_lazy_ml_7_16=caml_string_of_jsbytes("src/lazy.ml:7:16"),
     cst_a$56=caml_string_of_jsbytes("a"),
     cst_t$147=caml_string_of_jsbytes("t"),
     cst_src_lazy_ml_7_4=caml_string_of_jsbytes("src/lazy.ml:7:4"),
     name$26=caml_string_of_jsbytes("src/lazy.ml.Stable.V1.t"),
     cst_core_kernel$226=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Lazy$0=caml_string_of_jsbytes("Core_kernel__Lazy"),
     cst_Core_kernel_Nativeint=
      caml_string_of_jsbytes("Core_kernel__Nativeint"),
     cst_core_kernel$227=caml_string_of_jsbytes("core_kernel"),
     cst_src_nativeint_ml=caml_string_of_jsbytes("src/nativeint.ml"),
     cst$79=caml_string_of_jsbytes(""),
     cst_core_kernel$228=caml_string_of_jsbytes("core_kernel"),
     cst_t$149=caml_string_of_jsbytes("t"),
     cst_src_nativeint_ml_6_6=caml_string_of_jsbytes("src/nativeint.ml:6:6"),
     cst_t$150=caml_string_of_jsbytes("t"),
     name$27=caml_string_of_jsbytes("src/nativeint.ml.t"),
     name$28=caml_string_of_jsbytes("src/nativeint.ml.Hex.t"),
     cst_t$151=caml_string_of_jsbytes("t"),
     cst_src_nativeint_ml_16_2=caml_string_of_jsbytes("src/nativeint.ml:16:2"),
     cst_t$152=caml_string_of_jsbytes("t"),
     cst_core_kernel$229=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Nativeint$0=
      caml_string_of_jsbytes("Core_kernel__Nativeint"),
     cst_Core_kernel_Nothing=caml_string_of_jsbytes("Core_kernel__Nothing"),
     cst_core_kernel$230=caml_string_of_jsbytes("core_kernel"),
     cst_src_nothing_ml=caml_string_of_jsbytes("src/nothing.ml"),
     cst$80=caml_string_of_jsbytes(""),
     cst_core_kernel$231=caml_string_of_jsbytes("core_kernel"),
     cst_t$153=caml_string_of_jsbytes("t"),
     cst_src_nothing_ml_8_6=caml_string_of_jsbytes("src/nothing.ml:8:6"),
     cst_t$154=caml_string_of_jsbytes("t"),
     cst_Stable_V1_t=caml_string_of_jsbytes(".Stable.V1.t"),
     cst_core_kernel$232=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Nothing$0=caml_string_of_jsbytes("Core_kernel__Nothing"),
     cst_Core_kernel_Never_returns=
      caml_string_of_jsbytes("Core_kernel__Never_returns"),
     cst_core_kernel$233=caml_string_of_jsbytes("core_kernel"),
     cst_src_never_returns_ml=caml_string_of_jsbytes("src/never_returns.ml"),
     cst$81=caml_string_of_jsbytes(""),
     cst_core_kernel$234=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$235=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Never_returns$0=
      caml_string_of_jsbytes("Core_kernel__Never_returns"),
     cst_src_ordering_ml_t=caml_string_of_jsbytes("src/ordering.ml.t"),
     cst_Core_kernel_Ordering=caml_string_of_jsbytes("Core_kernel__Ordering"),
     cst_core_kernel$236=caml_string_of_jsbytes("core_kernel"),
     cst_src_ordering_ml=caml_string_of_jsbytes("src/ordering.ml"),
     cst$82=caml_string_of_jsbytes(""),
     cst_core_kernel$237=caml_string_of_jsbytes("core_kernel"),
     cst_t$155=caml_string_of_jsbytes("t"),
     cst_src_ordering_ml_3_0=caml_string_of_jsbytes("src/ordering.ml:3:0"),
     cst_t$156=caml_string_of_jsbytes("t"),
     cst_core_kernel$238=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Ordering$0=
      caml_string_of_jsbytes("Core_kernel__Ordering"),
     cst_t$160=caml_string_of_jsbytes("t"),
     cst_t$158=caml_string_of_jsbytes("t"),
     cst_Core_kernel_Ref=caml_string_of_jsbytes("Core_kernel__Ref"),
     cst_core_kernel$239=caml_string_of_jsbytes("core_kernel"),
     cst_src_ref_ml=caml_string_of_jsbytes("src/ref.ml"),
     cst$83=caml_string_of_jsbytes(""),
     cst_core_kernel$240=caml_string_of_jsbytes("core_kernel"),
     cst_a$57=caml_string_of_jsbytes("a"),
     cst_src_ref_ml_8_16=caml_string_of_jsbytes("src/ref.ml:8:16"),
     cst_a$58=caml_string_of_jsbytes("a"),
     cst_t$157=caml_string_of_jsbytes("t"),
     cst_src_ref_ml_8_4=caml_string_of_jsbytes("src/ref.ml:8:4"),
     name$29=caml_string_of_jsbytes("src/ref.ml.T.t"),
     cst_a$59=caml_string_of_jsbytes("a"),
     cst_src_ref_ml_21_25=caml_string_of_jsbytes("src/ref.ml:21:25"),
     cst_perms$4=caml_string_of_jsbytes("perms"),
     cst_a$60=caml_string_of_jsbytes("a"),
     cst_t$159=caml_string_of_jsbytes("t"),
     cst_src_ref_ml_21_2=caml_string_of_jsbytes("src/ref.ml:21:2"),
     cst_core_kernel$241=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Ref$0=caml_string_of_jsbytes("Core_kernel__Ref"),
     cst_sexp_opaque$2=caml_string_of_jsbytes("sexp_opaque"),
     cst_sexp_option$0=caml_string_of_jsbytes("sexp_option"),
     cst_sexp_list$0=caml_string_of_jsbytes("sexp_list"),
     cst_sexp_array$0=caml_string_of_jsbytes("sexp_array"),
     cst_ref$0=caml_string_of_jsbytes("ref"),
     cst_option$0=caml_string_of_jsbytes("option"),
     cst_list$0=caml_string_of_jsbytes("list"),
     cst_lazy_t$0=caml_string_of_jsbytes("lazy_t"),
     cst_array$0=caml_string_of_jsbytes("array"),
     cst_Core_kernel_Std_internal=
      caml_string_of_jsbytes("Core_kernel__Std_internal"),
     cst_core_kernel$242=caml_string_of_jsbytes("core_kernel"),
     cst_src_std_internal_ml=caml_string_of_jsbytes("src/std_internal.ml"),
     cst$84=caml_string_of_jsbytes(""),
     cst_core_kernel$243=caml_string_of_jsbytes("core_kernel"),
     cst_Bug=caml_string_of_jsbytes("Bug"),
     cst_Core_kernel_Std_internal_C=
      caml_string_of_jsbytes("Core_kernel__Std_internal.C_malloc_exn"),
     cst_C_malloc_exn=caml_string_of_jsbytes("C_malloc_exn"),
     cst_a$61=caml_string_of_jsbytes("a"),
     cst_src_std_internal_ml_107_18=
      caml_string_of_jsbytes("src/std_internal.ml:107:18"),
     cst_a$62=caml_string_of_jsbytes("a"),
     cst_array=caml_string_of_jsbytes("array"),
     cst_src_std_internal_ml_107_2=
      caml_string_of_jsbytes("src/std_internal.ml:107:2"),
     the_generic_group=
      [0,
       [0,caml_string_of_jsbytes("Array.t"),0],
       caml_string_of_jsbytes
        ("r\xb1A\xff~\x81%\xb2\xe2\xc4g\xa5\t\xe8\xcc\x01"),
       [0,
        [0,
         caml_string_of_jsbytes("array"),
         [2,[0,caml_string_of_jsbytes("a"),0],[0,[5,0],[0,[3,0],0]]]],
        0]],
     cst_src_std_internal_ml$0=caml_string_of_jsbytes("src/std_internal.ml"),
     cst_array$1=caml_string_of_jsbytes("array"),
     name$30=caml_string_of_jsbytes("src/std_internal.ml.array"),
     cst_bool=caml_string_of_jsbytes("bool"),
     cst_src_std_internal_ml_110_2=
      caml_string_of_jsbytes("src/std_internal.ml:110:2"),
     cst_bool$0=caml_string_of_jsbytes("bool"),
     the_generic_group$0=
      [0,
       [0,caml_string_of_jsbytes("Bool.t"),0],
       caml_string_of_jsbytes
        ("{\xab\xef\xa6\xdb\x80\x05\xc9\xc0$\x95\xca\xfb?\xba\xa4"),
       [0,[0,caml_string_of_jsbytes("bool"),[5,0]],0]],
     cst_src_std_internal_ml$1=caml_string_of_jsbytes("src/std_internal.ml"),
     cst_bool$1=caml_string_of_jsbytes("bool"),
     name$31=caml_string_of_jsbytes("src/std_internal.ml.bool"),
     cst_char=caml_string_of_jsbytes("char"),
     cst_src_std_internal_ml_113_2=
      caml_string_of_jsbytes("src/std_internal.ml:113:2"),
     cst_char$0=caml_string_of_jsbytes("char"),
     the_generic_group$1=
      [0,
       [0,caml_string_of_jsbytes("Char.t"),0],
       caml_string_of_jsbytes("H\x8c\xf3\xccY\xde\xbfd\0@\x18Md\x1c\x93>"),
       [0,[0,caml_string_of_jsbytes("char"),[5,0]],0]],
     cst_src_std_internal_ml$2=caml_string_of_jsbytes("src/std_internal.ml"),
     cst_char$1=caml_string_of_jsbytes("char"),
     name$32=caml_string_of_jsbytes("src/std_internal.ml.char"),
     cst_float=caml_string_of_jsbytes("float"),
     cst_src_std_internal_ml_116_2=
      caml_string_of_jsbytes("src/std_internal.ml:116:2"),
     cst_float$0=caml_string_of_jsbytes("float"),
     the_generic_group$2=
      [0,
       [0,caml_string_of_jsbytes("Float.t"),0],
       caml_string_of_jsbytes
        ("\xbeE\x14\xf2\xf9\x87C\xf0+\xd6\xe2\x8fIp\xd9\xdf"),
       [0,[0,caml_string_of_jsbytes("float"),[5,0]],0]],
     cst_src_std_internal_ml$3=caml_string_of_jsbytes("src/std_internal.ml"),
     cst_float$1=caml_string_of_jsbytes("float"),
     name$33=caml_string_of_jsbytes("src/std_internal.ml.float"),
     cst_int=caml_string_of_jsbytes("int"),
     cst_src_std_internal_ml_119_2=
      caml_string_of_jsbytes("src/std_internal.ml:119:2"),
     cst_int$0=caml_string_of_jsbytes("int"),
     the_generic_group$3=
      [0,
       [0,caml_string_of_jsbytes("Int.t"),0],
       caml_string_of_jsbytes
        ("\x9f\x9f\xc5^\xa5]\xec\xa5\xe5\xa5R8\xa9\xe1H\x14"),
       [0,[0,caml_string_of_jsbytes("int"),[5,0]],0]],
     cst_src_std_internal_ml$4=caml_string_of_jsbytes("src/std_internal.ml"),
     cst_int$1=caml_string_of_jsbytes("int"),
     name$34=caml_string_of_jsbytes("src/std_internal.ml.int"),
     cst_int32=caml_string_of_jsbytes("int32"),
     cst_src_std_internal_ml_122_2=
      caml_string_of_jsbytes("src/std_internal.ml:122:2"),
     cst_int32$0=caml_string_of_jsbytes("int32"),
     the_generic_group$4=
      [0,
       [0,caml_string_of_jsbytes("Int32.t"),0],
       caml_string_of_jsbytes("9\x99\0*L5O+l\x12\xb3b\xc6\xf8\x1a\xb1"),
       [0,[0,caml_string_of_jsbytes("int32"),[5,0]],0]],
     cst_src_std_internal_ml$5=caml_string_of_jsbytes("src/std_internal.ml"),
     cst_int32$1=caml_string_of_jsbytes("int32"),
     name$35=caml_string_of_jsbytes("src/std_internal.ml.int32"),
     cst_int64=caml_string_of_jsbytes("int64"),
     cst_src_std_internal_ml_125_2=
      caml_string_of_jsbytes("src/std_internal.ml:125:2"),
     cst_int64$0=caml_string_of_jsbytes("int64"),
     the_generic_group$5=
      [0,
       [0,caml_string_of_jsbytes("Int64.t"),0],
       caml_string_of_jsbytes("r\x99\x16\x87\x83L\x9b\xec\xebCKa\xc5o\xf8^"),
       [0,[0,caml_string_of_jsbytes("int64"),[5,0]],0]],
     cst_src_std_internal_ml$6=caml_string_of_jsbytes("src/std_internal.ml"),
     cst_int64$1=caml_string_of_jsbytes("int64"),
     name$36=caml_string_of_jsbytes("src/std_internal.ml.int64"),
     cst_a$63=caml_string_of_jsbytes("a"),
     cst_src_std_internal_ml_128_19=
      caml_string_of_jsbytes("src/std_internal.ml:128:19"),
     cst_a$64=caml_string_of_jsbytes("a"),
     cst_lazy_t=caml_string_of_jsbytes("lazy_t"),
     cst_src_std_internal_ml_128_2=
      caml_string_of_jsbytes("src/std_internal.ml:128:2"),
     the_generic_group$6=
      [0,
       [0,caml_string_of_jsbytes("Lazy.t"),0],
       caml_string_of_jsbytes
        ("\xe5\xc9\0\xc2\x84\x03\x0bF\x06Y\x88\xa9\x94!\x11?"),
       [0,
        [0,
         caml_string_of_jsbytes("lazy_t"),
         [2,[0,caml_string_of_jsbytes("a"),0],[0,[5,0],[0,[3,0],0]]]],
        0]],
     cst_src_std_internal_ml$7=caml_string_of_jsbytes("src/std_internal.ml"),
     cst_lazy_t$1=caml_string_of_jsbytes("lazy_t"),
     name$37=caml_string_of_jsbytes("src/std_internal.ml.lazy_t"),
     cst_a$65=caml_string_of_jsbytes("a"),
     cst_src_std_internal_ml_131_17=
      caml_string_of_jsbytes("src/std_internal.ml:131:17"),
     cst_a$66=caml_string_of_jsbytes("a"),
     cst_list=caml_string_of_jsbytes("list"),
     cst_src_std_internal_ml_131_2=
      caml_string_of_jsbytes("src/std_internal.ml:131:2"),
     the_generic_group$7=
      [0,
       [0,caml_string_of_jsbytes("List.t"),0],
       caml_string_of_jsbytes
        ("\x90\x16<Z\x0e\xc6\x0e\xaf\x19\xda\x04\xc7\xfc~\x1f="),
       [0,
        [0,
         caml_string_of_jsbytes("list"),
         [2,[0,caml_string_of_jsbytes("a"),0],[0,[5,0],[0,[3,0],0]]]],
        0]],
     cst_src_std_internal_ml$8=caml_string_of_jsbytes("src/std_internal.ml"),
     cst_list$1=caml_string_of_jsbytes("list"),
     name$38=caml_string_of_jsbytes("src/std_internal.ml.list"),
     cst_nativeint=caml_string_of_jsbytes("nativeint"),
     cst_src_std_internal_ml_134_2=
      caml_string_of_jsbytes("src/std_internal.ml:134:2"),
     cst_nativeint$0=caml_string_of_jsbytes("nativeint"),
     the_generic_group$8=
      [0,
       [0,caml_string_of_jsbytes("Nativeint.t"),0],
       caml_string_of_jsbytes("\x13\xb8AE\x17\\->1fcm\x02\xfe\xc4\x81"),
       [0,[0,caml_string_of_jsbytes("nativeint"),[5,0]],0]],
     cst_src_std_internal_ml$9=caml_string_of_jsbytes("src/std_internal.ml"),
     cst_nativeint$1=caml_string_of_jsbytes("nativeint"),
     name$39=caml_string_of_jsbytes("src/std_internal.ml.nativeint"),
     cst_a$67=caml_string_of_jsbytes("a"),
     cst_src_std_internal_ml_137_19=
      caml_string_of_jsbytes("src/std_internal.ml:137:19"),
     cst_a$68=caml_string_of_jsbytes("a"),
     cst_option=caml_string_of_jsbytes("option"),
     cst_src_std_internal_ml_137_2=
      caml_string_of_jsbytes("src/std_internal.ml:137:2"),
     the_generic_group$9=
      [0,
       [0,caml_string_of_jsbytes("Option.t"),0],
       caml_string_of_jsbytes
        ("\xf2@\xffj`*d\xcb\xa1\xb6\x15\xaf\xec\x92x\xd9"),
       [0,
        [0,
         caml_string_of_jsbytes("option"),
         [2,[0,caml_string_of_jsbytes("a"),0],[0,[5,0],[0,[3,0],0]]]],
        0]],
     cst_src_std_internal_ml$10=caml_string_of_jsbytes("src/std_internal.ml"),
     cst_option$1=caml_string_of_jsbytes("option"),
     name$40=caml_string_of_jsbytes("src/std_internal.ml.option"),
     cst_string=caml_string_of_jsbytes("string"),
     cst_src_std_internal_ml_140_2=
      caml_string_of_jsbytes("src/std_internal.ml:140:2"),
     cst_string$0=caml_string_of_jsbytes("string"),
     the_generic_group$10=
      [0,
       [0,caml_string_of_jsbytes("String.t"),0],
       caml_string_of_jsbytes
        ("\x8d\xc3]\x8f\x8b/M\t\x9f\t\x98\xd6g\xc6\x17\xb0"),
       [0,[0,caml_string_of_jsbytes("string"),[5,0]],0]],
     cst_src_std_internal_ml$11=caml_string_of_jsbytes("src/std_internal.ml"),
     cst_string$1=caml_string_of_jsbytes("string"),
     name$41=caml_string_of_jsbytes("src/std_internal.ml.string"),
     cst_bytes=caml_string_of_jsbytes("bytes"),
     cst_src_std_internal_ml_143_2=
      caml_string_of_jsbytes("src/std_internal.ml:143:2"),
     cst_bytes$0=caml_string_of_jsbytes("bytes"),
     the_generic_group$11=
      [0,
       [0,caml_string_of_jsbytes("Bytes.t"),0],
       caml_string_of_jsbytes("\x0f\x99L1\f\xf1\x0f\xfc\x96\0\xbf\x7fJb#3"),
       [0,[0,caml_string_of_jsbytes("bytes"),[5,0]],0]],
     cst_src_std_internal_ml$12=caml_string_of_jsbytes("src/std_internal.ml"),
     cst_bytes$1=caml_string_of_jsbytes("bytes"),
     name$42=caml_string_of_jsbytes("src/std_internal.ml.bytes"),
     cst_a$69=caml_string_of_jsbytes("a"),
     cst_src_std_internal_ml_145_16=
      caml_string_of_jsbytes("src/std_internal.ml:145:16"),
     cst_a$70=caml_string_of_jsbytes("a"),
     cst_ref=caml_string_of_jsbytes("ref"),
     cst_src_std_internal_ml_145_2=
      caml_string_of_jsbytes("src/std_internal.ml:145:2"),
     the_generic_group$12=
      [0,
       [0,caml_string_of_jsbytes("Ref.t"),0],
       caml_string_of_jsbytes
        ("\xb9\xf6\f[\x01\xc5\xe6\xc0y=\b\xc7\x8d\xf8\x14\f"),
       [0,
        [0,
         caml_string_of_jsbytes("ref"),
         [2,[0,caml_string_of_jsbytes("a"),0],[0,[5,0],[0,[3,0],0]]]],
        0]],
     cst_src_std_internal_ml$13=caml_string_of_jsbytes("src/std_internal.ml"),
     cst_ref$1=caml_string_of_jsbytes("ref"),
     name$43=caml_string_of_jsbytes("src/std_internal.ml.ref"),
     cst_unit=caml_string_of_jsbytes("unit"),
     cst_src_std_internal_ml_148_2=
      caml_string_of_jsbytes("src/std_internal.ml:148:2"),
     cst_unit$0=caml_string_of_jsbytes("unit"),
     the_generic_group$13=
      [0,
       [0,caml_string_of_jsbytes("Unit.t"),0],
       caml_string_of_jsbytes('=\x05 \x86\xbb"64\xc5S\xc056,\x1fl'),
       [0,[0,caml_string_of_jsbytes("unit"),[5,0]],0]],
     cst_src_std_internal_ml$14=caml_string_of_jsbytes("src/std_internal.ml"),
     cst_unit$1=caml_string_of_jsbytes("unit"),
     name$44=caml_string_of_jsbytes("src/std_internal.ml.unit"),
     cst_float_array=caml_string_of_jsbytes("float_array"),
     cst_src_std_internal_ml_152_2=
      caml_string_of_jsbytes("src/std_internal.ml:152:2"),
     cst_float_array$0=caml_string_of_jsbytes("float_array"),
     the_generic_group$14=
      [0,
       [0,
        caml_string_of_jsbytes("Float.t"),
        [0,caml_string_of_jsbytes("array"),0]],
       caml_string_of_jsbytes
        ("\x83\xd2\x91\x18>:N.\xf4\xa8\x93\xbb\x05X\xafl"),
       [0,[0,caml_string_of_jsbytes("float_array"),[0,[5,1],[0,[5,0],0]]],0]],
     cst_src_std_internal_ml$15=caml_string_of_jsbytes("src/std_internal.ml"),
     cst_float_array$1=caml_string_of_jsbytes("float_array"),
     name$45=caml_string_of_jsbytes("src/std_internal.ml.float_array"),
     cst_a$71=caml_string_of_jsbytes("a"),
     cst_src_std_internal_ml_215_23=
      caml_string_of_jsbytes("src/std_internal.ml:215:23"),
     cst_a$72=caml_string_of_jsbytes("a"),
     cst_sexp_array=caml_string_of_jsbytes("sexp_array"),
     cst_src_std_internal_ml_215_2=
      caml_string_of_jsbytes("src/std_internal.ml:215:2"),
     name$46=caml_string_of_jsbytes("src/std_internal.ml.sexp_array"),
     cst_sexp_bool=caml_string_of_jsbytes("sexp_bool"),
     cst_src_std_internal_ml_219_2=
      caml_string_of_jsbytes("src/std_internal.ml:219:2"),
     cst_sexp_bool$0=caml_string_of_jsbytes("sexp_bool"),
     name$47=caml_string_of_jsbytes("src/std_internal.ml.sexp_bool"),
     cst_a$73=caml_string_of_jsbytes("a"),
     cst_src_std_internal_ml_223_22=
      caml_string_of_jsbytes("src/std_internal.ml:223:22"),
     cst_a$74=caml_string_of_jsbytes("a"),
     cst_sexp_list=caml_string_of_jsbytes("sexp_list"),
     cst_src_std_internal_ml_223_2=
      caml_string_of_jsbytes("src/std_internal.ml:223:2"),
     name$48=caml_string_of_jsbytes("src/std_internal.ml.sexp_list"),
     cst_a$75=caml_string_of_jsbytes("a"),
     cst_src_std_internal_ml_227_24=
      caml_string_of_jsbytes("src/std_internal.ml:227:24"),
     cst_a$76=caml_string_of_jsbytes("a"),
     cst_sexp_option=caml_string_of_jsbytes("sexp_option"),
     cst_src_std_internal_ml_227_2=
      caml_string_of_jsbytes("src/std_internal.ml:227:2"),
     name$49=caml_string_of_jsbytes("src/std_internal.ml.sexp_option"),
     cst_a$77=caml_string_of_jsbytes("a"),
     cst_src_std_internal_ml_231_24=
      caml_string_of_jsbytes("src/std_internal.ml:231:24"),
     cst_a$78=caml_string_of_jsbytes("a"),
     cst_sexp_opaque$1=caml_string_of_jsbytes("sexp_opaque"),
     cst_src_std_internal_ml_231_2=
      caml_string_of_jsbytes("src/std_internal.ml:231:2"),
     name$50=caml_string_of_jsbytes("src/std_internal.ml.sexp_opaque"),
     cst_core_kernel$244=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Std_internal$0=
      caml_string_of_jsbytes("Core_kernel__Std_internal"),
     cst_Core_kernel_Byte_units0=
      caml_string_of_jsbytes("Core_kernel__Byte_units0"),
     cst_core_kernel$245=caml_string_of_jsbytes("core_kernel"),
     cst_src_byte_units0_ml=caml_string_of_jsbytes("src/byte_units0.ml"),
     cst$85=caml_string_of_jsbytes(""),
     cst_core_kernel$246=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$247=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Byte_units0$0=
      caml_string_of_jsbytes("Core_kernel__Byte_units0"),
     cst_Bigstring_write_bin_prot_n=
      caml_string_of_jsbytes("Bigstring.write_bin_prot: negative pos"),
     cst_Bigstring_write_bin_prot_n$0=
      caml_string_of_jsbytes("Bigstring.write_bin_prot: not enough room"),
     cst_Bigstring_write_bin_prot_b=
      caml_string_of_jsbytes("Bigstring.write_bin_prot bug!"),
     cst_not_enough_data=caml_string_of_jsbytes("not enough data"),
     cst_Invalid_data=caml_string_of_jsbytes("Invalid data"),
     cst_pos_ref_expected_pos=
      caml_string_of_jsbytes("pos_ref <> expected_pos"),
     cst_read_bin_prot_verbose_erro=
      caml_string_of_jsbytes("read_bin_prot_verbose_errors"),
     cst_negative_element_length_d=
      caml_string_of_jsbytes("negative element length %d"),
     cst_Core_kernel_Bigstring=
      caml_string_of_jsbytes("Core_kernel__Bigstring"),
     cst_core_kernel$248=caml_string_of_jsbytes("core_kernel"),
     cst_src_bigstring_ml=caml_string_of_jsbytes("src/bigstring.ml"),
     cst$86=caml_string_of_jsbytes(""),
     cst_core_kernel$249=caml_string_of_jsbytes("core_kernel"),
     cst_t$161=caml_string_of_jsbytes("t"),
     cst_src_bigstring_ml_13_6=caml_string_of_jsbytes("src/bigstring.ml:13:6"),
     cst_t$162=caml_string_of_jsbytes("t"),
     cst_t_frozen=caml_string_of_jsbytes("t_frozen"),
     cst_src_bigstring_ml_18_4=caml_string_of_jsbytes("src/bigstring.ml:18:4"),
     cst_t_frozen$0=caml_string_of_jsbytes("t_frozen"),
     cst_core_kernel$250=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Bigstring$0=
      caml_string_of_jsbytes("Core_kernel__Bigstring"),
     cst_Core_kernel_Core_bin_prot=
      caml_string_of_jsbytes("Core_kernel__Core_bin_prot"),
     cst_core_kernel$251=caml_string_of_jsbytes("core_kernel"),
     cst_src_core_bin_prot_ml=caml_string_of_jsbytes("src/core_bin_prot.ml"),
     cst$87=caml_string_of_jsbytes(""),
     cst_core_kernel$252=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$253=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Core_bin_prot$0=
      caml_string_of_jsbytes("Core_kernel__Core_bin_prot"),
     cst_Core_kernel_Md5=caml_string_of_jsbytes("Core_kernel__Md5"),
     cst_core_kernel$254=caml_string_of_jsbytes("core_kernel"),
     cst_src_md5_ml=caml_string_of_jsbytes("src/md5.ml"),
     cst$88=caml_string_of_jsbytes(""),
     cst_core_kernel$255=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$256=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Md5$0=caml_string_of_jsbytes("Core_kernel__Md5"),
     cst_Core_kernel_Zone_intf=
      caml_string_of_jsbytes("Core_kernel__Zone_intf"),
     cst_core_kernel$257=caml_string_of_jsbytes("core_kernel"),
     cst_src_zone_intf_ml=caml_string_of_jsbytes("src/zone_intf.ml"),
     cst$89=caml_string_of_jsbytes(""),
     cst_core_kernel$258=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$259=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Zone_intf$0=
      caml_string_of_jsbytes("Core_kernel__Zone_intf"),
     cst_Core_kernel_Binable=caml_string_of_jsbytes("Core_kernel__Binable"),
     cst_core_kernel$260=caml_string_of_jsbytes("core_kernel"),
     cst_src_binable_ml=caml_string_of_jsbytes("src/binable.ml"),
     cst$90=caml_string_of_jsbytes(""),
     cst_core_kernel$261=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$262=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Binable$0=caml_string_of_jsbytes("Core_kernel__Binable"),
     cst_UTC=caml_string_of_jsbytes("UTC"),
     cst$92=caml_string_of_jsbytes("-"),
     cst$93=caml_string_of_jsbytes("+"),
     cst_TZif=caml_string_of_jsbytes("TZif"),
     cst_magic_characters_TZif_not_=
      caml_string_of_jsbytes("magic characters TZif not present"),
     cst_expected_version_found_not=
      caml_string_of_jsbytes("expected version, found nothing"),
     cst_missing_terminating_charac=
      caml_string_of_jsbytes
       ("missing \0 terminating character in input_abbreviations"),
     cst_default_local_time_type$0=
      caml_string_of_jsbytes("default_local_time_type"),
     cst_digest$0=caml_string_of_jsbytes("digest"),
     cst_last_regime_index$0=caml_string_of_jsbytes("last_regime_index"),
     cst_leap_seconds$0=caml_string_of_jsbytes("leap_seconds"),
     cst_name$0=caml_string_of_jsbytes("name"),
     cst_original_filename$0=caml_string_of_jsbytes("original_filename"),
     cst_transitions$0=caml_string_of_jsbytes("transitions"),
     cst_leap_seconds$1=caml_string_of_jsbytes("leap_seconds"),
     cst_default_local_time_type$1=
      caml_string_of_jsbytes("default_local_time_type"),
     cst_last_regime_index$1=caml_string_of_jsbytes("last_regime_index"),
     cst_transitions$1=caml_string_of_jsbytes("transitions"),
     cst_digest$1=caml_string_of_jsbytes("digest"),
     cst_original_filename$1=caml_string_of_jsbytes("original_filename"),
     cst_name$1=caml_string_of_jsbytes("name"),
     cst_src_zone_ml_Stable_Full_da=
      caml_string_of_jsbytes("src/zone.ml.Stable.Full_data.V1.t"),
     cst_new_regime$0=caml_string_of_jsbytes("new_regime"),
     cst_start_time_in_seconds_sinc$0=
      caml_string_of_jsbytes("start_time_in_seconds_since_epoch"),
     cst_new_regime$1=caml_string_of_jsbytes("new_regime"),
     cst_start_time_in_seconds_sinc$1=
      caml_string_of_jsbytes("start_time_in_seconds_since_epoch"),
     cst_seconds$0=caml_string_of_jsbytes("seconds"),
     cst_time_in_seconds_since_epoc$0=
      caml_string_of_jsbytes("time_in_seconds_since_epoch"),
     cst_seconds$1=caml_string_of_jsbytes("seconds"),
     cst_time_in_seconds_since_epoc$1=
      caml_string_of_jsbytes("time_in_seconds_since_epoch"),
     cst_abbrv$0=caml_string_of_jsbytes("abbrv"),
     cst_is_dst$0=caml_string_of_jsbytes("is_dst"),
     cst_utc_offset_in_seconds$0=
      caml_string_of_jsbytes("utc_offset_in_seconds"),
     cst_abbrv$1=caml_string_of_jsbytes("abbrv"),
     cst_is_dst$1=caml_string_of_jsbytes("is_dst"),
     cst_utc_offset_in_seconds$1=
      caml_string_of_jsbytes("utc_offset_in_seconds"),
     cst_Core_kernel_Zone=caml_string_of_jsbytes("Core_kernel__Zone"),
     cst_core_kernel$263=caml_string_of_jsbytes("core_kernel"),
     cst_src_zone_ml=caml_string_of_jsbytes("src/zone.ml"),
     cst$91=caml_string_of_jsbytes(""),
     cst_core_kernel$264=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Zone_Invalid_f=
      caml_string_of_jsbytes("Core_kernel__Zone.Invalid_file_format"),
     cst_abbrv=caml_string_of_jsbytes("abbrv"),
     cst_is_dst=caml_string_of_jsbytes("is_dst"),
     cst_utc_offset_in_seconds=caml_string_of_jsbytes("utc_offset_in_seconds"),
     cst_t$163=caml_string_of_jsbytes("t"),
     cst_src_zone_ml_62_8=caml_string_of_jsbytes("src/zone.ml:62:8"),
     cst_t$164=caml_string_of_jsbytes("t"),
     tp_loc$17=
      caml_string_of_jsbytes("src/zone.ml.Stable.Full_data.V1.Regime.t"),
     cst_seconds=caml_string_of_jsbytes("seconds"),
     cst_time_in_seconds_since_epoc=
      caml_string_of_jsbytes("time_in_seconds_since_epoch"),
     cst_t$165=caml_string_of_jsbytes("t"),
     cst_src_zone_ml_74_8=caml_string_of_jsbytes("src/zone.ml:74:8"),
     cst_t$166=caml_string_of_jsbytes("t"),
     tp_loc$18=
      caml_string_of_jsbytes("src/zone.ml.Stable.Full_data.V1.Leap_second.t"),
     cst_new_regime=caml_string_of_jsbytes("new_regime"),
     cst_start_time_in_seconds_sinc=
      caml_string_of_jsbytes("start_time_in_seconds_since_epoch"),
     cst_t$167=caml_string_of_jsbytes("t"),
     cst_src_zone_ml_82_8=caml_string_of_jsbytes("src/zone.ml:82:8"),
     cst_t$168=caml_string_of_jsbytes("t"),
     tp_loc$19=
      caml_string_of_jsbytes("src/zone.ml.Stable.Full_data.V1.Transition.t"),
     cst_leap_seconds=caml_string_of_jsbytes("leap_seconds"),
     cst_default_local_time_type=
      caml_string_of_jsbytes("default_local_time_type"),
     cst_last_regime_index=caml_string_of_jsbytes("last_regime_index"),
     cst_transitions=caml_string_of_jsbytes("transitions"),
     cst_digest=caml_string_of_jsbytes("digest"),
     cst_original_filename=caml_string_of_jsbytes("original_filename"),
     cst_name=caml_string_of_jsbytes("name"),
     cst_t$169=caml_string_of_jsbytes("t"),
     cst_src_zone_ml_89_6=caml_string_of_jsbytes("src/zone.ml:89:6"),
     cst_t$170=caml_string_of_jsbytes("t"),
     tp_loc$20=caml_string_of_jsbytes("src/zone.ml.Stable.Full_data.V1.t"),
     cst_core_kernel$265=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Zone$0=caml_string_of_jsbytes("Core_kernel__Zone"),
     cst_Core_kernel_Source_code_po$1=
      caml_string_of_jsbytes("Core_kernel__Source_code_position"),
     cst_core_kernel$266=caml_string_of_jsbytes("core_kernel"),
     cst_src_source_code_position_m=
      caml_string_of_jsbytes("src/source_code_position.ml"),
     cst$94=caml_string_of_jsbytes(""),
     cst_core_kernel$267=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$268=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Source_code_po$2=
      caml_string_of_jsbytes("Core_kernel__Source_code_position"),
     cst_Core_kernel_Validated_intf=
      caml_string_of_jsbytes("Core_kernel__Validated_intf"),
     cst_core_kernel$269=caml_string_of_jsbytes("core_kernel"),
     cst_src_validated_intf_ml=caml_string_of_jsbytes("src/validated_intf.ml"),
     cst$95=caml_string_of_jsbytes(""),
     cst_core_kernel$270=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$271=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Validated_intf$0=
      caml_string_of_jsbytes("Core_kernel__Validated_intf"),
     name$52=caml_string_of_jsbytes("src/validated.ml.Add_typerep.t"),
     cst_validation_failed=caml_string_of_jsbytes("validation failed"),
     cst_Core_kernel_Validated=
      caml_string_of_jsbytes("Core_kernel__Validated"),
     cst_core_kernel$272=caml_string_of_jsbytes("core_kernel"),
     cst_src_validated_ml=caml_string_of_jsbytes("src/validated.ml"),
     cst$96=caml_string_of_jsbytes(""),
     cst_core_kernel$273=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$274=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Validated$0=
      caml_string_of_jsbytes("Core_kernel__Validated"),
     cst_Core_kernel_Type_equal=
      caml_string_of_jsbytes("Core_kernel__Type_equal"),
     cst_core_kernel$275=caml_string_of_jsbytes("core_kernel"),
     cst_src_type_equal_ml=caml_string_of_jsbytes("src/type_equal.ml"),
     cst$97=caml_string_of_jsbytes(""),
     cst_core_kernel$276=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$277=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Type_equal$0=
      caml_string_of_jsbytes("Core_kernel__Type_equal"),
     cst_Core_kernel_Type_equal_int=
      caml_string_of_jsbytes("Core_kernel__Type_equal_intf"),
     cst_core_kernel$278=caml_string_of_jsbytes("core_kernel"),
     cst_src_type_equal_intf_ml=
      caml_string_of_jsbytes("src/type_equal_intf.ml"),
     cst$98=caml_string_of_jsbytes(""),
     cst_core_kernel$279=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$280=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Type_equal_int$0=
      caml_string_of_jsbytes("Core_kernel__Type_equal_intf"),
     cst_Core_kernel_Univ_map_intf=
      caml_string_of_jsbytes("Core_kernel__Univ_map_intf"),
     cst_core_kernel$281=caml_string_of_jsbytes("core_kernel"),
     cst_src_univ_map_intf_ml=caml_string_of_jsbytes("src/univ_map_intf.ml"),
     cst$99=caml_string_of_jsbytes(""),
     cst_core_kernel$282=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$283=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Univ_map_intf$0=
      caml_string_of_jsbytes("Core_kernel__Univ_map_intf"),
     cst_Key_to_type_id_must_not_pr=
      caml_string_of_jsbytes
       ("[Key.to_type_id] must not provide different type ids when called on the same input"),
     cst_Core_kernel_Univ_map=caml_string_of_jsbytes("Core_kernel__Univ_map"),
     cst_core_kernel$284=caml_string_of_jsbytes("core_kernel"),
     cst_src_univ_map_ml=caml_string_of_jsbytes("src/univ_map.ml"),
     cst$100=caml_string_of_jsbytes(""),
     cst_core_kernel$285=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$286=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Univ_map$0=
      caml_string_of_jsbytes("Core_kernel__Univ_map"),
     cst_day=caml_string_of_jsbytes("day"),
     cst_Day=caml_string_of_jsbytes("Day"),
     cst_Hour=caml_string_of_jsbytes("Hour"),
     cst_Microsecond=caml_string_of_jsbytes("Microsecond"),
     cst_Millisecond=caml_string_of_jsbytes("Millisecond"),
     cst_Minute=caml_string_of_jsbytes("Minute"),
     cst_Nanosecond=caml_string_of_jsbytes("Nanosecond"),
     cst_Second$3=caml_string_of_jsbytes("Second"),
     cst_hour=caml_string_of_jsbytes("hour"),
     cst_microsecond=caml_string_of_jsbytes("microsecond"),
     cst_millisecond=caml_string_of_jsbytes("millisecond"),
     cst_minute=caml_string_of_jsbytes("minute"),
     cst_nanosecond=caml_string_of_jsbytes("nanosecond"),
     cst_second$1=caml_string_of_jsbytes("second"),
     cst_day$0=caml_string_of_jsbytes("day"),
     cst_Day$0=caml_string_of_jsbytes("Day"),
     cst_Hour$0=caml_string_of_jsbytes("Hour"),
     cst_Microsecond$0=caml_string_of_jsbytes("Microsecond"),
     cst_Millisecond$0=caml_string_of_jsbytes("Millisecond"),
     cst_Minute$0=caml_string_of_jsbytes("Minute"),
     cst_Nanosecond$0=caml_string_of_jsbytes("Nanosecond"),
     cst_Second$4=caml_string_of_jsbytes("Second"),
     cst_hour$0=caml_string_of_jsbytes("hour"),
     cst_microsecond$0=caml_string_of_jsbytes("microsecond"),
     cst_millisecond$0=caml_string_of_jsbytes("millisecond"),
     cst_minute$0=caml_string_of_jsbytes("minute"),
     cst_nanosecond$0=caml_string_of_jsbytes("nanosecond"),
     cst_second$2=caml_string_of_jsbytes("second"),
     cst_Core_kernel_Unit_of_time=
      caml_string_of_jsbytes("Core_kernel__Unit_of_time"),
     cst_core_kernel$287=caml_string_of_jsbytes("core_kernel"),
     cst_src_unit_of_time_ml=caml_string_of_jsbytes("src/unit_of_time.ml"),
     cst$101=caml_string_of_jsbytes(""),
     cst_core_kernel$288=caml_string_of_jsbytes("core_kernel"),
     tp_loc$21=caml_string_of_jsbytes("src/unit_of_time.ml.t"),
     unit_of_time_list=[0,0,[0,1,[0,2,[0,3,[0,4,[0,5,[0,6,0]]]]]]],
     cst_core_kernel$289=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Unit_of_time$0=
      caml_string_of_jsbytes("Core_kernel__Unit_of_time"),
     cst_Core_kernel_Unique_id_intf=
      caml_string_of_jsbytes("Core_kernel__Unique_id_intf"),
     cst_core_kernel$290=caml_string_of_jsbytes("core_kernel"),
     cst_src_unique_id_intf_ml=caml_string_of_jsbytes("src/unique_id_intf.ml"),
     cst$102=caml_string_of_jsbytes(""),
     cst_core_kernel$291=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$292=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Unique_id_intf$0=
      caml_string_of_jsbytes("Core_kernel__Unique_id_intf"),
     cst_Core_kernel_Unique_id=
      caml_string_of_jsbytes("Core_kernel__Unique_id"),
     cst_core_kernel$293=caml_string_of_jsbytes("core_kernel"),
     cst_src_unique_id_ml=caml_string_of_jsbytes("src/unique_id.ml"),
     cst$103=caml_string_of_jsbytes(""),
     cst_core_kernel$294=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$295=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Unique_id$0=
      caml_string_of_jsbytes("Core_kernel__Unique_id"),
     cst_Core_kernel_Uniform_array=
      caml_string_of_jsbytes("Core_kernel__Uniform_array"),
     cst_core_kernel$296=caml_string_of_jsbytes("core_kernel"),
     cst_src_uniform_array_ml=caml_string_of_jsbytes("src/uniform_array.ml"),
     cst$104=caml_string_of_jsbytes(""),
     cst_core_kernel$297=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$298=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Uniform_array$0=
      caml_string_of_jsbytes("Core_kernel__Uniform_array"),
     cst_lazy_t$2=caml_string_of_jsbytes("lazy_t"),
     cst_Always=caml_string_of_jsbytes("Always"),
     cst_Sometimes=caml_string_of_jsbytes("Sometimes"),
     cst_Never=caml_string_of_jsbytes("Never"),
     cst_Core_kernel_Type_immediacy=
      caml_string_of_jsbytes("Core_kernel__Type_immediacy"),
     cst_core_kernel$299=caml_string_of_jsbytes("core_kernel"),
     cst_src_type_immediacy_ml=caml_string_of_jsbytes("src/type_immediacy.ml"),
     cst$105=caml_string_of_jsbytes(""),
     cst_core_kernel$300=caml_string_of_jsbytes("core_kernel"),
     cst_option$2=caml_string_of_jsbytes("option"),
     cst_list$2=caml_string_of_jsbytes("list"),
     cst_array$2=caml_string_of_jsbytes("array"),
     cst_ref$2=caml_string_of_jsbytes("ref"),
     cst_tuple2=caml_string_of_jsbytes("tuple2"),
     cst_tuple3=caml_string_of_jsbytes("tuple3"),
     cst_tuple4=caml_string_of_jsbytes("tuple4"),
     cst_tuple5=caml_string_of_jsbytes("tuple5"),
     cst_function=caml_string_of_jsbytes("function"),
     name$54=caml_string_of_jsbytes("is_immediate"),
     cst_core_kernel$301=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Type_immediacy$0=
      caml_string_of_jsbytes("Core_kernel__Type_immediacy"),
     tp_loc$25=caml_string_of_jsbytes("src/tuple.ml.Hasher.T.t"),
     cst_src_tuple_ml_Binable_t=
      caml_string_of_jsbytes("src/tuple.ml.Binable.t"),
     cst_t$171=caml_string_of_jsbytes("t"),
     cst_src_tuple_ml_114_2=caml_string_of_jsbytes("src/tuple.ml:114:2"),
     cst_t$172=caml_string_of_jsbytes("t"),
     tp_loc$24=caml_string_of_jsbytes("src/tuple.ml.Sexpable.t"),
     cst_Core_kernel_Tuple=caml_string_of_jsbytes("Core_kernel__Tuple"),
     cst_core_kernel$302=caml_string_of_jsbytes("core_kernel"),
     cst_src_tuple_ml=caml_string_of_jsbytes("src/tuple.ml"),
     cst$106=caml_string_of_jsbytes(""),
     cst_core_kernel$303=caml_string_of_jsbytes("core_kernel"),
     tp_loc$22=caml_string_of_jsbytes("src/tuple.ml.T2.t"),
     name$55=caml_string_of_jsbytes("src/tuple.ml.T2.t"),
     tp_loc$23=caml_string_of_jsbytes("src/tuple.ml.T3.t"),
     name$56=caml_string_of_jsbytes("src/tuple.ml.T3.t"),
     cst_core_kernel$304=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Tuple$0=caml_string_of_jsbytes("Core_kernel__Tuple"),
     cst_SUNDAY=caml_string_of_jsbytes("SUNDAY"),
     cst_FRI$0=caml_string_of_jsbytes("FRI"),
     cst_FRIDAY=caml_string_of_jsbytes("FRIDAY"),
     cst_MON$0=caml_string_of_jsbytes("MON"),
     cst_MONDAY=caml_string_of_jsbytes("MONDAY"),
     cst_SAT$0=caml_string_of_jsbytes("SAT"),
     cst_SATURDAY=caml_string_of_jsbytes("SATURDAY"),
     cst_SUN$0=caml_string_of_jsbytes("SUN"),
     cst_THU$0=caml_string_of_jsbytes("THU"),
     cst_THURSDAY=caml_string_of_jsbytes("THURSDAY"),
     cst_TUE$0=caml_string_of_jsbytes("TUE"),
     cst_TUESDAY=caml_string_of_jsbytes("TUESDAY"),
     cst_WED$0=caml_string_of_jsbytes("WED"),
     cst_WEDNESDAY=caml_string_of_jsbytes("WEDNESDAY"),
     cst_Sunday=caml_string_of_jsbytes("Sunday"),
     cst_Monday=caml_string_of_jsbytes("Monday"),
     cst_Tuesday=caml_string_of_jsbytes("Tuesday"),
     cst_Wednesday=caml_string_of_jsbytes("Wednesday"),
     cst_Thursday=caml_string_of_jsbytes("Thursday"),
     cst_Friday=caml_string_of_jsbytes("Friday"),
     cst_Saturday=caml_string_of_jsbytes("Saturday"),
     cst_SUN=caml_string_of_jsbytes("SUN"),
     cst_MON=caml_string_of_jsbytes("MON"),
     cst_TUE=caml_string_of_jsbytes("TUE"),
     cst_WED=caml_string_of_jsbytes("WED"),
     cst_THU=caml_string_of_jsbytes("THU"),
     cst_FRI=caml_string_of_jsbytes("FRI"),
     cst_SAT=caml_string_of_jsbytes("SAT"),
     cst_src_day_of_week_ml_Stable_=
      caml_string_of_jsbytes("src/day_of_week.ml.Stable.V1.T.t"),
     cst_Core_kernel_Day_of_week=
      caml_string_of_jsbytes("Core_kernel__Day_of_week"),
     cst_core_kernel$305=caml_string_of_jsbytes("core_kernel"),
     cst_src_day_of_week_ml=caml_string_of_jsbytes("src/day_of_week.ml"),
     cst$107=caml_string_of_jsbytes(""),
     cst_core_kernel$306=caml_string_of_jsbytes("core_kernel"),
     cst_t$173=caml_string_of_jsbytes("t"),
     cst_src_day_of_week_ml_8_6=
      caml_string_of_jsbytes("src/day_of_week.ml:8:6"),
     cst_t$174=caml_string_of_jsbytes("t"),
     weekdays=[0,1,[0,2,[0,3,[0,4,[0,5,0]]]]],
     weekends=[0,6,[0,0,0]],
     all$3=[0,0,[0,1,[0,2,[0,3,[0,4,[0,5,[0,6,0]]]]]]],
     cst_core_kernel$307=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Day_of_week$0=
      caml_string_of_jsbytes("Core_kernel__Day_of_week"),
     cst_Core_kernel_Day_of_week_in=
      caml_string_of_jsbytes("Core_kernel__Day_of_week_intf"),
     cst_core_kernel$308=caml_string_of_jsbytes("core_kernel"),
     cst_src_day_of_week_intf_ml=
      caml_string_of_jsbytes("src/day_of_week_intf.ml"),
     cst$108=caml_string_of_jsbytes(""),
     cst_core_kernel$309=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$310=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Day_of_week_in$0=
      caml_string_of_jsbytes("Core_kernel__Day_of_week_intf"),
     name$60=caml_string_of_jsbytes("read_int63_decimal"),
     name$59=caml_string_of_jsbytes("read_int63"),
     cst_read_9_digit_int=caml_string_of_jsbytes("read_9_digit_int"),
     cst_read_8_digit_int=caml_string_of_jsbytes("read_8_digit_int"),
     cst_read_7_digit_int=caml_string_of_jsbytes("read_7_digit_int"),
     cst_read_6_digit_int=caml_string_of_jsbytes("read_6_digit_int"),
     cst_read_5_digit_int=caml_string_of_jsbytes("read_5_digit_int"),
     cst_read_4_digit_int=caml_string_of_jsbytes("read_4_digit_int"),
     cst_read_3_digit_int=caml_string_of_jsbytes("read_3_digit_int"),
     cst_read_2_digit_int=caml_string_of_jsbytes("read_2_digit_int"),
     cst_read_1_digit_int=caml_string_of_jsbytes("read_1_digit_int"),
     name$58=caml_string_of_jsbytes("write_int63"),
     cst_write_9_digit_int=caml_string_of_jsbytes("write_9_digit_int"),
     cst_write_8_digit_int=caml_string_of_jsbytes("write_8_digit_int"),
     cst_write_7_digit_int=caml_string_of_jsbytes("write_7_digit_int"),
     cst_write_6_digit_int=caml_string_of_jsbytes("write_6_digit_int"),
     cst_write_5_digit_int=caml_string_of_jsbytes("write_5_digit_int"),
     cst_write_4_digit_int=caml_string_of_jsbytes("write_4_digit_int"),
     cst_write_3_digit_int=caml_string_of_jsbytes("write_3_digit_int"),
     cst_write_2_digit_int=caml_string_of_jsbytes("write_2_digit_int"),
     cst_write_1_digit_int=caml_string_of_jsbytes("write_1_digit_int"),
     cst_s_s_Int63_out_of_range_0_I=
      caml_string_of_jsbytes("%s.%s: %{Int63} out of range [0, %{Int63}]"),
     cst_out_of_range_0=caml_string_of_jsbytes(" out of range [0, "),
     cst$110=caml_string_of_jsbytes(": "),
     cst_read_int63=caml_string_of_jsbytes("read_int63"),
     cst_read_int63$0=caml_string_of_jsbytes("read_int63"),
     name$57=caml_string_of_jsbytes("read_int63_decimal"),
     cst_Core_kernel_Digit_string_h=
      caml_string_of_jsbytes("Core_kernel__Digit_string_helpers"),
     cst_core_kernel$311=caml_string_of_jsbytes("core_kernel"),
     cst_src_digit_string_helpers_m=
      caml_string_of_jsbytes("src/digit_string_helpers.ml"),
     cst$109=caml_string_of_jsbytes(""),
     cst_core_kernel$312=caml_string_of_jsbytes("core_kernel"),
     module_name$6=caml_string_of_jsbytes("Digit_string_helpers"),
     cst_core_kernel$313=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Digit_string_h$0=
      caml_string_of_jsbytes("Core_kernel__Digit_string_helpers"),
     cst_Jan$2=caml_string_of_jsbytes("Jan"),
     cst_Feb$2=caml_string_of_jsbytes("Feb"),
     cst_Mar$2=caml_string_of_jsbytes("Mar"),
     cst_Apr$2=caml_string_of_jsbytes("Apr"),
     cst_May$2=caml_string_of_jsbytes("May"),
     cst_Jun$2=caml_string_of_jsbytes("Jun"),
     cst_Jul$2=caml_string_of_jsbytes("Jul"),
     cst_Aug$2=caml_string_of_jsbytes("Aug"),
     cst_Sep$2=caml_string_of_jsbytes("Sep"),
     cst_Oct$2=caml_string_of_jsbytes("Oct"),
     cst_Nov$2=caml_string_of_jsbytes("Nov"),
     cst_Dec$2=caml_string_of_jsbytes("Dec"),
     cst_apr=caml_string_of_jsbytes("apr"),
     cst_Jun=caml_string_of_jsbytes("Jun"),
     cst_Apr=caml_string_of_jsbytes("Apr"),
     cst_Aug=caml_string_of_jsbytes("Aug"),
     cst_Dec=caml_string_of_jsbytes("Dec"),
     cst_Feb=caml_string_of_jsbytes("Feb"),
     cst_Jan=caml_string_of_jsbytes("Jan"),
     cst_Jul=caml_string_of_jsbytes("Jul"),
     cst_Mar=caml_string_of_jsbytes("Mar"),
     cst_May=caml_string_of_jsbytes("May"),
     cst_Nov=caml_string_of_jsbytes("Nov"),
     cst_Oct=caml_string_of_jsbytes("Oct"),
     cst_Sep=caml_string_of_jsbytes("Sep"),
     cst_jun=caml_string_of_jsbytes("jun"),
     cst_aug=caml_string_of_jsbytes("aug"),
     cst_dec=caml_string_of_jsbytes("dec"),
     cst_feb=caml_string_of_jsbytes("feb"),
     cst_jan=caml_string_of_jsbytes("jan"),
     cst_jul=caml_string_of_jsbytes("jul"),
     cst_mar=caml_string_of_jsbytes("mar"),
     cst_may=caml_string_of_jsbytes("may"),
     cst_nov=caml_string_of_jsbytes("nov"),
     cst_oct=caml_string_of_jsbytes("oct"),
     cst_sep=caml_string_of_jsbytes("sep"),
     cst_apr$0=caml_string_of_jsbytes("apr"),
     cst_Jun$0=caml_string_of_jsbytes("Jun"),
     cst_Apr$0=caml_string_of_jsbytes("Apr"),
     cst_Aug$0=caml_string_of_jsbytes("Aug"),
     cst_Dec$0=caml_string_of_jsbytes("Dec"),
     cst_Feb$0=caml_string_of_jsbytes("Feb"),
     cst_Jan$0=caml_string_of_jsbytes("Jan"),
     cst_Jul$0=caml_string_of_jsbytes("Jul"),
     cst_Mar$0=caml_string_of_jsbytes("Mar"),
     cst_May$0=caml_string_of_jsbytes("May"),
     cst_Nov$0=caml_string_of_jsbytes("Nov"),
     cst_Oct$0=caml_string_of_jsbytes("Oct"),
     cst_Sep$0=caml_string_of_jsbytes("Sep"),
     cst_jun$0=caml_string_of_jsbytes("jun"),
     cst_aug$0=caml_string_of_jsbytes("aug"),
     cst_dec$0=caml_string_of_jsbytes("dec"),
     cst_feb$0=caml_string_of_jsbytes("feb"),
     cst_jan$0=caml_string_of_jsbytes("jan"),
     cst_jul$0=caml_string_of_jsbytes("jul"),
     cst_mar$0=caml_string_of_jsbytes("mar"),
     cst_may$0=caml_string_of_jsbytes("may"),
     cst_nov$0=caml_string_of_jsbytes("nov"),
     cst_oct$0=caml_string_of_jsbytes("oct"),
     cst_sep$0=caml_string_of_jsbytes("sep"),
     cst_Core_kernel_Month=caml_string_of_jsbytes("Core_kernel__Month"),
     cst_core_kernel$314=caml_string_of_jsbytes("core_kernel"),
     cst_src_month_ml=caml_string_of_jsbytes("src/month.ml"),
     cst$111=caml_string_of_jsbytes(""),
     cst_core_kernel$315=caml_string_of_jsbytes("core_kernel"),
     tp_loc$26=caml_string_of_jsbytes("src/month.ml.Stable.V1.t"),
     cst_Jan$1=caml_string_of_jsbytes("Jan"),
     cst_Feb$1=caml_string_of_jsbytes("Feb"),
     cst_Mar$1=caml_string_of_jsbytes("Mar"),
     cst_Apr$1=caml_string_of_jsbytes("Apr"),
     cst_May$1=caml_string_of_jsbytes("May"),
     cst_Jun$1=caml_string_of_jsbytes("Jun"),
     cst_Jul$1=caml_string_of_jsbytes("Jul"),
     cst_Aug$1=caml_string_of_jsbytes("Aug"),
     cst_Sep$1=caml_string_of_jsbytes("Sep"),
     cst_Oct$1=caml_string_of_jsbytes("Oct"),
     cst_Nov$1=caml_string_of_jsbytes("Nov"),
     cst_Dec$1=caml_string_of_jsbytes("Dec"),
     descriptions=
      caml_list_of_js_array
       ([[0,caml_string_of_jsbytes("Jan"),0],
         [0,caml_string_of_jsbytes("Feb"),0],
         [0,caml_string_of_jsbytes("Mar"),0],
         [0,caml_string_of_jsbytes("Apr"),0],
         [0,caml_string_of_jsbytes("May"),0],
         [0,caml_string_of_jsbytes("Jun"),0],
         [0,caml_string_of_jsbytes("Jul"),0],
         [0,caml_string_of_jsbytes("Aug"),0],
         [0,caml_string_of_jsbytes("Sep"),0],
         [0,caml_string_of_jsbytes("Oct"),0],
         [0,caml_string_of_jsbytes("Nov"),0],
         [0,caml_string_of_jsbytes("Dec"),0]]),
     all$4=caml_list_of_js_array([0,1,2,3,4,5,6,7,8,9,10,11]),
     cst_core_kernel$316=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Month$0=caml_string_of_jsbytes("Core_kernel__Month"),
     cst_Core_kernel_Month_intf=
      caml_string_of_jsbytes("Core_kernel__Month_intf"),
     cst_core_kernel$317=caml_string_of_jsbytes("core_kernel"),
     cst_src_month_intf_ml=caml_string_of_jsbytes("src/month_intf.ml"),
     cst$112=caml_string_of_jsbytes(""),
     cst_core_kernel$318=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$319=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Month_intf$0=
      caml_string_of_jsbytes("Core_kernel__Month_intf"),
     cst_Date_gen_uniform_incl_boun=
      caml_string_of_jsbytes("Date.gen_uniform_incl: bounds are crossed"),
     cst_Date_Option_value_exn_none=
      caml_string_of_jsbytes("Date.Option.value_exn none"),
     cst_src_date0_ml_309_31=caml_string_of_jsbytes("src/date0.ml:309:31"),
     cst_d=caml_string_of_jsbytes("d"),
     cst_m$0=caml_string_of_jsbytes("m"),
     cst_y=caml_string_of_jsbytes("y"),
     cst_d$0=caml_string_of_jsbytes("d"),
     cst_m$1=caml_string_of_jsbytes("m"),
     cst_y$0=caml_string_of_jsbytes("y"),
     cst_invalid_date=caml_string_of_jsbytes("invalid date: "),
     cst_Date_of_string_iso8601_bas=
      caml_string_of_jsbytes
       ("Date.of_string_iso8601_basic: pos + 8 > string length"),
     cst_Date_t=caml_string_of_jsbytes("Date.t"),
     cst_Date_create_exn_y_d_m_Mont=
      caml_string_of_jsbytes
       ("Date.create_exn ~y:%d ~m:%{Month} ~d:%d error: %s"),
     cst_m=caml_string_of_jsbytes(" ~m:"),
     cst_Date_create_exn_y=caml_string_of_jsbytes("Date.create_exn ~y:"),
     cst_year_outside_of_0_9999=
      caml_string_of_jsbytes("year outside of [0..9999]"),
     cst_day_0=caml_string_of_jsbytes("day <= 0"),
     cst_Core_kernel_Date0=caml_string_of_jsbytes("Core_kernel__Date0"),
     cst_core_kernel$320=caml_string_of_jsbytes("core_kernel"),
     cst_src_date0_ml=caml_string_of_jsbytes("src/date0.ml"),
     cst$113=caml_string_of_jsbytes(""),
     cst_core_kernel$321=caml_string_of_jsbytes("core_kernel"),
     name$61=
      caml_string_of_jsbytes("src/date0.ml.Stable.V1.Without_comparable.T.t"),
     cst_899ee3e0_490a_11e6_a10a_a3=
      caml_string_of_jsbytes("899ee3e0-490a-11e6-a10a-a3734f733566"),
     cst_src_date0_ml$0=caml_string_of_jsbytes("src/date0.ml"),
     cst_invalid_value=caml_string_of_jsbytes(": invalid value"),
     tp_loc$27=
      caml_string_of_jsbytes
       ("src/date0.ml.Stable.V1.Without_comparable.Sexpable.Old_date.t"),
     cst_t$175=caml_string_of_jsbytes("t"),
     cst_src_date0_ml_284_6=caml_string_of_jsbytes("src/date0.ml:284:6"),
     cst_t$176=caml_string_of_jsbytes("t"),
     cst_826a3e79_3321_451a_9707_ed=
      caml_string_of_jsbytes("826a3e79-3321-451a-9707-ed6c03b84e2f"),
     name$62=caml_string_of_jsbytes("src/date0.ml.Stable.Option.V1.t"),
     module_name$7=caml_string_of_jsbytes("Core_kernel.Date"),
     cst_2100_01_01=caml_string_of_jsbytes("2100-01-01"),
     cst_1900_01_01=caml_string_of_jsbytes("1900-01-01"),
     cst_core_kernel$322=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Date0$0=caml_string_of_jsbytes("Core_kernel__Date0"),
     cst_Core_kernel_Immediate_opti=
      caml_string_of_jsbytes("Core_kernel__Immediate_option_intf"),
     cst_core_kernel$323=caml_string_of_jsbytes("core_kernel"),
     cst_src_immediate_option_intf_=
      caml_string_of_jsbytes("src/immediate_option_intf.ml"),
     cst$114=caml_string_of_jsbytes(""),
     cst_core_kernel$324=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$325=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Immediate_opti$0=
      caml_string_of_jsbytes("Core_kernel__Immediate_option_intf"),
     cst_Core_kernel_Date0_intf=
      caml_string_of_jsbytes("Core_kernel__Date0_intf"),
     cst_core_kernel$326=caml_string_of_jsbytes("core_kernel"),
     cst_src_date0_intf_ml=caml_string_of_jsbytes("src/date0_intf.ml"),
     cst$115=caml_string_of_jsbytes(""),
     cst_core_kernel$327=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$328=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Date0_intf$0=
      caml_string_of_jsbytes("Core_kernel__Date0_intf"),
     cst_Core_kernel_Immediate_opti$1=
      caml_string_of_jsbytes("Core_kernel__Immediate_option"),
     cst_core_kernel$329=caml_string_of_jsbytes("core_kernel"),
     cst_src_immediate_option_ml=
      caml_string_of_jsbytes("src/immediate_option.ml"),
     cst$116=caml_string_of_jsbytes(""),
     cst_core_kernel$330=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$331=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Immediate_opti$2=
      caml_string_of_jsbytes("Core_kernel__Immediate_option"),
     cst$118=caml_string_of_jsbytes(""),
     cst_len_2=caml_string_of_jsbytes("len < 2"),
     cst_hour_24=caml_string_of_jsbytes("hour > 24"),
     cst_2_len_5=caml_string_of_jsbytes("2 < len < 5"),
     cst_first_colon_missing=caml_string_of_jsbytes("first colon missing"),
     cst_minute_60=caml_string_of_jsbytes("minute > 60"),
     cst_24_hours_and_non_zero_minu=
      caml_string_of_jsbytes("24 hours and non-zero minute"),
     cst_5_len_8=caml_string_of_jsbytes("5 < len < 8"),
     cst_second_colon_missing=caml_string_of_jsbytes("second colon missing"),
     cst_24_hours_and_non_zero_seco=
      caml_string_of_jsbytes("24 hours and non-zero seconds"),
     cst_length_9=caml_string_of_jsbytes("length = 9"),
     cst_missing_subsecond_separato=
      caml_string_of_jsbytes("missing subsecond separator"),
     cst_24_hours_and_non_zero_subs=
      caml_string_of_jsbytes("24 hours and non-zero subseconds"),
     cst$119=caml_string_of_jsbytes(""),
     cst$122=caml_string_of_jsbytes(""),
     cst$120=caml_string_of_jsbytes(""),
     cst$121=caml_string_of_jsbytes(""),
     cst_expected_end_of_string_aft=
      caml_string_of_jsbytes("expected end of string after minutes"),
     cst_expected_colon_or_am_pm_su=
      caml_string_of_jsbytes
       ("expected colon or am/pm suffix with optional space after minutes"),
     cst_expected_two_digits_of_sec=
      caml_string_of_jsbytes("expected two digits of seconds"),
     cst_expected_decimal_point_or_=
      caml_string_of_jsbytes
       ("expected decimal point or am/pm suffix after seconds"),
     cst_BUG_did_not_expect_seconds=
      caml_string_of_jsbytes("BUG: did not expect seconds, but found them"),
     cst_hours_out_of_bounds$0=caml_string_of_jsbytes("hours out of bounds"),
     cst_hours_out_of_bounds$1=caml_string_of_jsbytes("hours out of bounds"),
     cst_time_is_past_24_00_00=caml_string_of_jsbytes("time is past 24:00:00"),
     cst_hours_without_minutes_or_A=
      caml_string_of_jsbytes("hours without minutes or AM/PM"),
     cst_hours_out_of_bounds=caml_string_of_jsbytes("hours out of bounds"),
     cst_minutes_out_of_bounds=caml_string_of_jsbytes("minutes out of bounds"),
     cst_seconds_out_of_bounds=caml_string_of_jsbytes("seconds out of bounds"),
     cst_expected_digits_after_deci=
      caml_string_of_jsbytes("expected digits after decimal point"),
     cst_expected_digits_and_or_und=
      caml_string_of_jsbytes
       ("expected digits and/or underscores after decimal point"),
     cst_Time_Ofday_invalid_string=
      caml_string_of_jsbytes("Time.Ofday: invalid string"),
     cst_Core_kernel_Ofday_helpers=
      caml_string_of_jsbytes("Core_kernel__Ofday_helpers"),
     cst_core_kernel$332=caml_string_of_jsbytes("core_kernel"),
     cst_src_ofday_helpers_ml=caml_string_of_jsbytes("src/ofday_helpers.ml"),
     cst$117=caml_string_of_jsbytes(""),
     cst_core_kernel$333=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$334=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Ofday_helpers$0=
      caml_string_of_jsbytes("Core_kernel__Ofday_helpers"),
     cst_sexp_list$2=caml_string_of_jsbytes("sexp_list"),
     cst_sexp_option$2=caml_string_of_jsbytes("sexp_option"),
     cst_Core_kernel_Stable_interna=
      caml_string_of_jsbytes("Core_kernel__Stable_internal"),
     cst_core_kernel$335=caml_string_of_jsbytes("core_kernel"),
     cst_src_stable_internal_ml=
      caml_string_of_jsbytes("src/stable_internal.ml"),
     cst$123=caml_string_of_jsbytes(""),
     cst_core_kernel$336=caml_string_of_jsbytes("core_kernel"),
     cst_a$79=caml_string_of_jsbytes("a"),
     cst_src_stable_internal_ml_42_=
      caml_string_of_jsbytes("src/stable_internal.ml:42:25"),
     cst_a$80=caml_string_of_jsbytes("a"),
     cst_sexp_option$1=caml_string_of_jsbytes("sexp_option"),
     cst_src_stable_internal_ml_42_$0=
      caml_string_of_jsbytes("src/stable_internal.ml:42:2"),
     cst_a$81=caml_string_of_jsbytes("a"),
     cst_src_stable_internal_ml_45_=
      caml_string_of_jsbytes("src/stable_internal.ml:45:23"),
     cst_a$82=caml_string_of_jsbytes("a"),
     cst_sexp_list$1=caml_string_of_jsbytes("sexp_list"),
     cst_src_stable_internal_ml_45_$0=
      caml_string_of_jsbytes("src/stable_internal.ml:45:2"),
     cst_core_kernel$337=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Stable_interna$0=
      caml_string_of_jsbytes("Core_kernel__Stable_internal"),
     cst_Decimal_t_of_sexp_Expected=
      caml_string_of_jsbytes("Decimal.t_of_sexp: Expected Atom, found List"),
     cst_Core_kernel_Float_with_fin=
      caml_string_of_jsbytes
       ("Core_kernel__Float_with_finite_only_serialization"),
     cst_core_kernel$338=caml_string_of_jsbytes("core_kernel"),
     cst_src_float_with_finite_only=
      caml_string_of_jsbytes("src/float_with_finite_only_serialization.ml"),
     cst$124=caml_string_of_jsbytes(""),
     cst_core_kernel$339=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Float_with_fin$0=
      caml_string_of_jsbytes
       ("Core_kernel__Float_with_finite_only_serialization.Stable.V1.Nan_or_inf"),
     cst_core_kernel$340=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Float_with_fin$1=
      caml_string_of_jsbytes
       ("Core_kernel__Float_with_finite_only_serialization"),
     cst_Percent_Option_value_exn_n=
      caml_string_of_jsbytes("Percent.Option.value_exn none"),
     cst_src_percent_ml_167_31=caml_string_of_jsbytes("src/percent.ml:167:31"),
     cst_x$1=caml_string_of_jsbytes("x"),
     cst$128=caml_string_of_jsbytes("%"),
     cst_bp$1=caml_string_of_jsbytes("bp"),
     cst_0x$0=caml_string_of_jsbytes("0x"),
     cst_x$0=caml_string_of_jsbytes("x"),
     cst$127=caml_string_of_jsbytes("%"),
     cst_bp$0=caml_string_of_jsbytes("bp"),
     cst_0x=caml_string_of_jsbytes("0x"),
     cst_x=caml_string_of_jsbytes("x"),
     cst$126=caml_string_of_jsbytes("%"),
     cst_bp=caml_string_of_jsbytes("bp"),
     cst_Core_kernel_Percent=caml_string_of_jsbytes("Core_kernel__Percent"),
     cst_core_kernel$341=caml_string_of_jsbytes("core_kernel"),
     cst_src_percent_ml=caml_string_of_jsbytes("src/percent.ml"),
     cst$125=caml_string_of_jsbytes(""),
     cst_core_kernel$342=caml_string_of_jsbytes("core_kernel"),
     name$63=caml_string_of_jsbytes("src/percent.ml.Stable.V1.t"),
     cst_t$177=caml_string_of_jsbytes("t"),
     cst_src_percent_ml_133_8=caml_string_of_jsbytes("src/percent.ml:133:8"),
     cst_t$178=caml_string_of_jsbytes("t"),
     cst_t$179=caml_string_of_jsbytes("t"),
     cst_src_percent_ml_148_6=caml_string_of_jsbytes("src/percent.ml:148:6"),
     cst_t$180=caml_string_of_jsbytes("t"),
     name$64=caml_string_of_jsbytes("src/percent.ml.Stable.Option.V1.t"),
     cst_core_kernel$343=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Percent$0=caml_string_of_jsbytes("Core_kernel__Percent"),
     cst_d$1=caml_string_of_jsbytes("d"),
     cst_h=caml_string_of_jsbytes("h"),
     cst_m$2=caml_string_of_jsbytes("m"),
     cst_s$4=caml_string_of_jsbytes("s"),
     cst_ms=caml_string_of_jsbytes("ms"),
     cst_us=caml_string_of_jsbytes("us"),
     cst$130=caml_string_of_jsbytes("-"),
     cst_Span_randomize_percent_is_=
      caml_string_of_jsbytes
       ("Span.randomize: percent is out of range [0x, 1x]"),
     cst_Core_kernel_Span_helpers=
      caml_string_of_jsbytes("Core_kernel__Span_helpers"),
     cst_core_kernel$344=caml_string_of_jsbytes("core_kernel"),
     cst_src_span_helpers_ml=caml_string_of_jsbytes("src/span_helpers.ml"),
     cst$129=caml_string_of_jsbytes(""),
     cst_core_kernel$345=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$346=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Span_helpers$0=
      caml_string_of_jsbytes("Core_kernel__Span_helpers"),
     suffix$0=caml_string_of_jsbytes("ns"),
     suffix$1=caml_string_of_jsbytes("us"),
     suffix$2=caml_string_of_jsbytes("ms"),
     suffix$3=caml_string_of_jsbytes("s"),
     suffix$4=caml_string_of_jsbytes("m"),
     suffix$5=caml_string_of_jsbytes("h"),
     suffix$6=caml_string_of_jsbytes("d"),
     cst$139=caml_string_of_jsbytes(" "),
     cst_Time_Span_Stable_V3_t_of_s=
      caml_string_of_jsbytes
       ("Time.Span.Stable.V3.t_of_sexp: sexp must be an Atom"),
     cst_NANs$0=caml_string_of_jsbytes("NANs"),
     cst_INFs$1=caml_string_of_jsbytes("-INFs"),
     cst_INFs$2=caml_string_of_jsbytes("INFs"),
     cst_0s$0=caml_string_of_jsbytes("0s"),
     cst$137=caml_string_of_jsbytes("-"),
     cst$138=caml_string_of_jsbytes(""),
     cst$135=caml_string_of_jsbytes(""),
     cst$136=caml_string_of_jsbytes(""),
     cst$134=caml_string_of_jsbytes(""),
     suffix=caml_string_of_jsbytes("."),
     cst_invalid_span_part_suffix=
      caml_string_of_jsbytes("invalid span part suffix"),
     cst_INFs=caml_string_of_jsbytes("-INFs"),
     cst_INFs$0=caml_string_of_jsbytes("INFs"),
     cst_NANs=caml_string_of_jsbytes("NANs"),
     cst_empty_input=caml_string_of_jsbytes("empty input"),
     cst_empty_input$0=caml_string_of_jsbytes("empty input"),
     cst_invalid_span_part_magnitud=
      caml_string_of_jsbytes("invalid span part magnitude"),
     cst_Time_Span_of_string=caml_string_of_jsbytes("Time.Span.of_string: "),
     cst_ns$2=caml_string_of_jsbytes("ns"),
     cst_us$3=caml_string_of_jsbytes("us"),
     cst_ms$3=caml_string_of_jsbytes("ms"),
     cst_s$6=caml_string_of_jsbytes("s"),
     cst_m$4=caml_string_of_jsbytes("m"),
     cst_h$1=caml_string_of_jsbytes("h"),
     cst_d$3=caml_string_of_jsbytes("d"),
     cst_inf=caml_string_of_jsbytes("inf"),
     cst_inf$0=caml_string_of_jsbytes("-inf"),
     cst_nan=caml_string_of_jsbytes("nan"),
     cst_ns$1=caml_string_of_jsbytes("ns"),
     cst_us$2=caml_string_of_jsbytes("us"),
     cst_ms$2=caml_string_of_jsbytes("ms"),
     cst_s$5=caml_string_of_jsbytes("s"),
     cst_m$3=caml_string_of_jsbytes("m"),
     cst_h$0=caml_string_of_jsbytes("h"),
     cst_d$2=caml_string_of_jsbytes("d"),
     cst_0s=caml_string_of_jsbytes("0s"),
     cst$133=caml_string_of_jsbytes(""),
     cst_no_number_given=caml_string_of_jsbytes("no number given"),
     cst$132=caml_string_of_jsbytes(""),
     cst_empty_string=caml_string_of_jsbytes("empty string"),
     cst_Time_spans_must_end_in_ns_=
      caml_string_of_jsbytes
       ("Time spans must end in ns, us, ms, s, m, h, or d."),
     cst_Time_spans_must_end_in_ms_=
      caml_string_of_jsbytes("Time spans must end in ms, s, m, h, or d."),
     cst_hr=caml_string_of_jsbytes("hr"),
     cst_min=caml_string_of_jsbytes("min"),
     cst_ms$0=caml_string_of_jsbytes("ms"),
     cst_ns=caml_string_of_jsbytes("ns"),
     cst_sec=caml_string_of_jsbytes("sec"),
     cst_sign=caml_string_of_jsbytes("sign"),
     cst_us$0=caml_string_of_jsbytes("us"),
     cst_ns$0=caml_string_of_jsbytes("ns"),
     cst_us$1=caml_string_of_jsbytes("us"),
     cst_ms$1=caml_string_of_jsbytes("ms"),
     cst_sec$0=caml_string_of_jsbytes("sec"),
     cst_min$0=caml_string_of_jsbytes("min"),
     cst_hr$0=caml_string_of_jsbytes("hr"),
     cst_sign$0=caml_string_of_jsbytes("sign"),
     cst_Core_kernel_Span_float=
      caml_string_of_jsbytes("Core_kernel__Span_float"),
     cst_core_kernel$347=caml_string_of_jsbytes("core_kernel"),
     cst_src_span_float_ml=caml_string_of_jsbytes("src/span_float.ml"),
     cst$131=caml_string_of_jsbytes(""),
     cst_core_kernel$348=caml_string_of_jsbytes("core_kernel"),
     tp_loc$28=caml_string_of_jsbytes("src/span_float.ml.Stable.V1.Parts.t"),
     cst_Core_kernel_Span_float_Sta=
      caml_string_of_jsbytes("Core_kernel__Span_float.Stable.V1.T_of_sexp"),
     cst_Core_kernel_Span_float_Sta$0=
      caml_string_of_jsbytes
       ("Core_kernel__Span_float.Stable.V1.T_of_sexp_expected_atom_but_got"),
     module_name$8=caml_string_of_jsbytes("Core_kernel.Time.Span"),
     cst_t$181=caml_string_of_jsbytes("t"),
     cst_src_span_float_ml_748_4=
      caml_string_of_jsbytes("src/span_float.ml:748:4"),
     cst_t$182=caml_string_of_jsbytes("t"),
     cst_t$183=caml_string_of_jsbytes("t"),
     cst_src_span_float_ml_761_2=
      caml_string_of_jsbytes("src/span_float.ml:761:2"),
     cst_t$184=caml_string_of_jsbytes("t"),
     cst_core_kernel$349=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Span_float$0=
      caml_string_of_jsbytes("Core_kernel__Span_float"),
     cst_Core_kernel_Span_intf=
      caml_string_of_jsbytes("Core_kernel__Span_intf"),
     cst_core_kernel$350=caml_string_of_jsbytes("core_kernel"),
     cst_src_span_intf_ml=caml_string_of_jsbytes("src/span_intf.ml"),
     cst$140=caml_string_of_jsbytes(""),
     cst_core_kernel$351=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$352=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Span_intf$0=
      caml_string_of_jsbytes("Core_kernel__Span_intf"),
     cst_Ofday_t_of_sexp=caml_string_of_jsbytes("Ofday.t_of_sexp: "),
     cst_Ofday_t_of_sexp$0=caml_string_of_jsbytes("Ofday.t_of_sexp"),
     cst_Ofday_out_of_range_Span=
      caml_string_of_jsbytes("Ofday out of range: %{Span}"),
     cst_Ofday_out_of_range=caml_string_of_jsbytes("Ofday out of range: "),
     cst_Ofday_of_span_since_start_$0=
      caml_string_of_jsbytes
       ("Ofday.of_span_since_start_of_day_exn: infinite value"),
     cst_Ofday_of_span_since_start_=
      caml_string_of_jsbytes
       ("Ofday.of_span_since_start_of_day_exn: NaN value"),
     cst_Core_kernel_Ofday_float=
      caml_string_of_jsbytes("Core_kernel__Ofday_float"),
     cst_core_kernel$353=caml_string_of_jsbytes("core_kernel"),
     cst_src_ofday_float_ml=caml_string_of_jsbytes("src/ofday_float.ml"),
     cst$141=caml_string_of_jsbytes(""),
     cst_core_kernel$354=caml_string_of_jsbytes("core_kernel"),
     module_name$9=caml_string_of_jsbytes("Core_kernel.Time.Ofday"),
     cst_t$185=caml_string_of_jsbytes("t"),
     cst_src_ofday_float_ml_278_4=
      caml_string_of_jsbytes("src/ofday_float.ml:278:4"),
     cst_t$186=caml_string_of_jsbytes("t"),
     cst_t$187=caml_string_of_jsbytes("t"),
     cst_src_ofday_float_ml_291_2=
      caml_string_of_jsbytes("src/ofday_float.ml:291:2"),
     cst_t$188=caml_string_of_jsbytes("t"),
     cst_core_kernel$355=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Ofday_float$0=
      caml_string_of_jsbytes("Core_kernel__Ofday_float"),
     cst_Core_kernel_Ofday_intf=
      caml_string_of_jsbytes("Core_kernel__Ofday_intf"),
     cst_core_kernel$356=caml_string_of_jsbytes("core_kernel"),
     cst_src_ofday_intf_ml=caml_string_of_jsbytes("src/ofday_intf.ml"),
     cst$142=caml_string_of_jsbytes(""),
     cst_core_kernel$357=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$358=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Ofday_intf$0=
      caml_string_of_jsbytes("Core_kernel__Ofday_intf"),
     cst_Core_kernel_Time0_intf=
      caml_string_of_jsbytes("Core_kernel__Time0_intf"),
     cst_core_kernel$359=caml_string_of_jsbytes("core_kernel"),
     cst_src_time0_intf_ml=caml_string_of_jsbytes("src/time0_intf.ml"),
     cst$143=caml_string_of_jsbytes(""),
     cst_core_kernel$360=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$361=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Time0_intf$0=
      caml_string_of_jsbytes("Core_kernel__Time0_intf"),
     cst_Core_kernel_Time_intf=
      caml_string_of_jsbytes("Core_kernel__Time_intf"),
     cst_core_kernel$362=caml_string_of_jsbytes("core_kernel"),
     cst_src_time_intf_ml=caml_string_of_jsbytes("src/time_intf.ml"),
     cst$144=caml_string_of_jsbytes(""),
     cst_core_kernel$363=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$364=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Time_intf$0=
      caml_string_of_jsbytes("Core_kernel__Time_intf"),
     cst_time_has_no_time_zone_or_U=
      caml_string_of_jsbytes("time has no time zone or UTC offset"),
     cst$152=caml_string_of_jsbytes(" "),
     cst$153=caml_string_of_jsbytes(" "),
     cst_no_spaces_or_T_found=caml_string_of_jsbytes("no spaces or T found"),
     cst_too_many_spaces=caml_string_of_jsbytes("too many spaces"),
     utc_offset=[0,0.],
     cst_00=caml_string_of_jsbytes(":00"),
     cst$151=caml_string_of_jsbytes(":"),
     cst_Time_of_localized_string=
      caml_string_of_jsbytes("Time.of_localized_string"),
     cst_no_space_in_filename_strin=
      caml_string_of_jsbytes("no space in filename string"),
     cst$150=caml_string_of_jsbytes("_"),
     cst$149=caml_string_of_jsbytes(" "),
     cst$148=caml_string_of_jsbytes(" "),
     cst_Z=caml_string_of_jsbytes("Z"),
     cst$146=caml_string_of_jsbytes("-"),
     cst$147=caml_string_of_jsbytes("+"),
     cst_Time_to_date_ofday_precise=
      caml_string_of_jsbytes("Time.to_date_ofday_precise"),
     cst_Core_kernel_Time_Make_Time=
      caml_string_of_jsbytes("Core_kernel__Time.Make(Time0).Time_of_string"),
     cst_Core_kernel_Time=caml_string_of_jsbytes("Core_kernel__Time"),
     cst_core_kernel$365=caml_string_of_jsbytes("core_kernel"),
     cst_src_time_ml=caml_string_of_jsbytes("src/time.ml"),
     cst$145=caml_string_of_jsbytes(""),
     cst_core_kernel$366=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$367=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Time$0=caml_string_of_jsbytes("Core_kernel__Time"),
     cst_Time_next_multiple_got_non=
      caml_string_of_jsbytes("Time.next_multiple got nonpositive interval"),
     cst_Core_kernel_Time_float0=
      caml_string_of_jsbytes("Core_kernel__Time_float0"),
     cst_core_kernel$368=caml_string_of_jsbytes("core_kernel"),
     cst_src_time_float0_ml=caml_string_of_jsbytes("src/time_float0.ml"),
     cst$154=caml_string_of_jsbytes(""),
     cst_core_kernel$369=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$370=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Time_float0$0=
      caml_string_of_jsbytes("Core_kernel__Time_float0"),
     cst_Time_Stable_With_utc_V2_t_$0=
      caml_string_of_jsbytes
       ("Time.Stable.With_utc.V2.t_of_sexp: unknown time zone"),
     cst$156=caml_string_of_jsbytes(" "),
     cst_Time_Stable_With_utc_V2_t_=
      caml_string_of_jsbytes("Time.Stable.With_utc.V2.t_of_sexp"),
     cst_Core_kernel_Time_float=
      caml_string_of_jsbytes("Core_kernel__Time_float"),
     cst_core_kernel$371=caml_string_of_jsbytes("core_kernel"),
     cst_src_time_float_ml=caml_string_of_jsbytes("src/time_float.ml"),
     cst$155=caml_string_of_jsbytes(""),
     cst_core_kernel$372=caml_string_of_jsbytes("core_kernel"),
     cst_t$189=caml_string_of_jsbytes("t"),
     cst_src_time_float_ml_18_6=
      caml_string_of_jsbytes("src/time_float.ml:18:6"),
     cst_t$190=caml_string_of_jsbytes("t"),
     cst_core_kernel$373=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Time_float$0=
      caml_string_of_jsbytes("Core_kernel__Time_float"),
     cst_Core_kernel_Time_ns_intf=
      caml_string_of_jsbytes("Core_kernel__Time_ns_intf"),
     cst_core_kernel$374=caml_string_of_jsbytes("core_kernel"),
     cst_src_time_ns_intf_ml=caml_string_of_jsbytes("src/time_ns_intf.ml"),
     cst$157=caml_string_of_jsbytes(""),
     cst_core_kernel$375=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$376=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Time_ns_intf$0=
      caml_string_of_jsbytes("Core_kernel__Time_ns_intf"),
     cst_Core_kernel_Date=caml_string_of_jsbytes("Core_kernel__Date"),
     cst_core_kernel$377=caml_string_of_jsbytes("core_kernel"),
     cst_src_date_ml=caml_string_of_jsbytes("src/date.ml"),
     cst$158=caml_string_of_jsbytes(""),
     cst_core_kernel$378=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$379=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Date$0=caml_string_of_jsbytes("Core_kernel__Date"),
     cst_Core_kernel_Date_intf=
      caml_string_of_jsbytes("Core_kernel__Date_intf"),
     cst_core_kernel$380=caml_string_of_jsbytes("core_kernel"),
     cst_src_date_intf_ml=caml_string_of_jsbytes("src/date_intf.ml"),
     cst$159=caml_string_of_jsbytes(""),
     cst_core_kernel$381=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$382=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Date_intf$0=
      caml_string_of_jsbytes("Core_kernel__Date_intf"),
     cst_Time_ns_Span_does_not_supp=
      caml_string_of_jsbytes("Time_ns.Span does not support this span"),
     cst_Span_t_exceeds_limits=caml_string_of_jsbytes("Span.t exceeds limits"),
     suffix$7=caml_string_of_jsbytes("ns"),
     suffix$8=caml_string_of_jsbytes("us"),
     suffix$9=caml_string_of_jsbytes("ms"),
     suffix$10=caml_string_of_jsbytes("s"),
     suffix$11=caml_string_of_jsbytes("m"),
     suffix$12=caml_string_of_jsbytes("h"),
     suffix$13=caml_string_of_jsbytes("d"),
     cst$161=caml_string_of_jsbytes(" "),
     cst_Time_ns_Span_Stable_V2_t_o=
      caml_string_of_jsbytes
       ("Time_ns.Span.Stable.V2.t_of_sexp: sexp must be an Atom"),
     cst_empty_string$0=caml_string_of_jsbytes("empty string"),
     cst_no_digits_before_unit_suff=
      caml_string_of_jsbytes("no digits before unit suffix"),
     cst_unparseable_unit_suffix=
      caml_string_of_jsbytes("unparseable unit suffix"),
     cst_unparseable_unit_suffix$0=
      caml_string_of_jsbytes("unparseable unit suffix"),
     cst_no_unit_suffix_after_digit=
      caml_string_of_jsbytes("no unit suffix after digits"),
     cst_span_would_be_outside_of_i$2=
      caml_string_of_jsbytes("span would be outside of int63 range"),
     cst_span_would_be_outside_of_i$1=
      caml_string_of_jsbytes("span would be outside of int63 range"),
     cst_span_would_be_outside_of_i$0=
      caml_string_of_jsbytes("span would be outside of int63 range"),
     cst_span_would_be_outside_of_i=
      caml_string_of_jsbytes("span would be outside of int63 range"),
     cst_Time_ns_Span_of_string_inv=
      caml_string_of_jsbytes("Time_ns.Span.of_string: invalid string"),
     cst_0s$1=caml_string_of_jsbytes("0s"),
     cst_Time_ns_Span_to_int_ns_uns=
      caml_string_of_jsbytes
       ("Time_ns.Span.to_int_ns: unsupported on 32bit machines"),
     cst_hr$1=caml_string_of_jsbytes("hr"),
     cst_min$1=caml_string_of_jsbytes("min"),
     cst_ms$4=caml_string_of_jsbytes("ms"),
     cst_ns$3=caml_string_of_jsbytes("ns"),
     cst_sec$1=caml_string_of_jsbytes("sec"),
     cst_sign$1=caml_string_of_jsbytes("sign"),
     cst_us$4=caml_string_of_jsbytes("us"),
     cst_ns$4=caml_string_of_jsbytes("ns"),
     cst_us$5=caml_string_of_jsbytes("us"),
     cst_ms$5=caml_string_of_jsbytes("ms"),
     cst_sec$2=caml_string_of_jsbytes("sec"),
     cst_min$2=caml_string_of_jsbytes("min"),
     cst_hr$2=caml_string_of_jsbytes("hr"),
     cst_sign$2=caml_string_of_jsbytes("sign"),
     cst_Core_kernel_Span_ns=caml_string_of_jsbytes("Core_kernel__Span_ns"),
     cst_core_kernel$383=caml_string_of_jsbytes("core_kernel"),
     cst_src_span_ns_ml=caml_string_of_jsbytes("src/span_ns.ml"),
     cst$160=caml_string_of_jsbytes(""),
     cst_core_kernel$384=caml_string_of_jsbytes("core_kernel"),
     module_name$10=caml_string_of_jsbytes("Core_kernel.Time_ns.Span"),
     cst_t$191=caml_string_of_jsbytes("t"),
     cst_src_span_ns_ml_15_2=caml_string_of_jsbytes("src/span_ns.ml:15:2"),
     cst_t$192=caml_string_of_jsbytes("t"),
     name$65=caml_string_of_jsbytes("src/span_ns.ml.T.t"),
     tp_loc$29=caml_string_of_jsbytes("src/span_ns.ml.Parts.t"),
     cst_t$193=caml_string_of_jsbytes("t"),
     cst_src_span_ns_ml_184_8=caml_string_of_jsbytes("src/span_ns.ml:184:8"),
     cst_t$194=caml_string_of_jsbytes("t"),
     cst_t$195=caml_string_of_jsbytes("t"),
     cst_src_span_ns_ml_732_4=caml_string_of_jsbytes("src/span_ns.ml:732:4"),
     cst_t$196=caml_string_of_jsbytes("t"),
     cst_t$197=caml_string_of_jsbytes("t"),
     cst_src_span_ns_ml_738_4=caml_string_of_jsbytes("src/span_ns.ml:738:4"),
     cst_t$198=caml_string_of_jsbytes("t"),
     cst_core_kernel$385=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Span_ns$0=caml_string_of_jsbytes("Core_kernel__Span_ns"),
     cst_src_ofday_ns_ml$0=caml_string_of_jsbytes("src/ofday_ns.ml"),
     cst_Time_ns_Ofday_every_called=
      caml_string_of_jsbytes
       ("[Time_ns.Ofday.every] called with [start] > [stop]"),
     cst_Time_ns_Ofday_every_called$0=
      caml_string_of_jsbytes
       ("[Time_ns.Ofday.every] called with negative span"),
     cst_Time_ns_Ofday_of_string_is=
      caml_string_of_jsbytes
       ("Time_ns.Ofday.of_string_iso8601_extended: cannot parse string"),
     cst_expected_an_atom=caml_string_of_jsbytes("expected an atom"),
     cst_Incorrect_day=caml_string_of_jsbytes("Incorrect day"),
     cst_Time_ns_Ofday_of_span_sinc=
      caml_string_of_jsbytes
       ("Time_ns.Ofday.of_span_since_start_of_day_exn: input out of bounds"),
     cst_Core_kernel_Ofday_ns=caml_string_of_jsbytes("Core_kernel__Ofday_ns"),
     cst_core_kernel$386=caml_string_of_jsbytes("core_kernel"),
     cst_src_ofday_ns_ml=caml_string_of_jsbytes("src/ofday_ns.ml"),
     cst$162=caml_string_of_jsbytes(""),
     cst_core_kernel$387=caml_string_of_jsbytes("core_kernel"),
     cst_t$199=caml_string_of_jsbytes("t"),
     cst_src_ofday_ns_ml_6_0=caml_string_of_jsbytes("src/ofday_ns.ml:6:0"),
     cst_t$200=caml_string_of_jsbytes("t"),
     name$66=caml_string_of_jsbytes("src/ofday_ns.ml.t"),
     cst_t$201=caml_string_of_jsbytes("t"),
     cst_src_ofday_ns_ml_65_6=caml_string_of_jsbytes("src/ofday_ns.ml:65:6"),
     cst_t$202=caml_string_of_jsbytes("t"),
     cst_src_ofday_ns_ml$1=caml_string_of_jsbytes("src/ofday_ns.ml"),
     cst_src_ofday_ns_ml$2=caml_string_of_jsbytes("src/ofday_ns.ml"),
     cst_src_ofday_ns_ml$3=caml_string_of_jsbytes("src/ofday_ns.ml"),
     cst_src_ofday_ns_ml$4=caml_string_of_jsbytes("src/ofday_ns.ml"),
     cst_97508895bf053f9e2e80939071=
      caml_string_of_jsbytes("97508895bf053f9e2e8093907134c761"),
     cst_t$203=caml_string_of_jsbytes("t"),
     cst_src_ofday_ns_ml_294_4=caml_string_of_jsbytes("src/ofday_ns.ml:294:4"),
     cst_t$204=caml_string_of_jsbytes("t"),
     module_name$11=caml_string_of_jsbytes("Core.Time_ns.Ofday"),
     cst_core_kernel$388=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Ofday_ns$0=
      caml_string_of_jsbytes("Core_kernel__Ofday_ns"),
     cst_time_has_no_time_zone_or_U$0=
      caml_string_of_jsbytes("time has no time zone or UTC offset"),
     cst$173=caml_string_of_jsbytes(" "),
     cst$174=caml_string_of_jsbytes(" "),
     cst_no_spaces_or_T_found$0=caml_string_of_jsbytes("no spaces or T found"),
     cst_too_many_spaces$0=caml_string_of_jsbytes("too many spaces"),
     utc_offset$1=[0,0.],
     cst_00$0=caml_string_of_jsbytes(":00"),
     cst$172=caml_string_of_jsbytes(":"),
     cst_Time_of_localized_string$0=
      caml_string_of_jsbytes("Time.of_localized_string"),
     cst_no_space_in_filename_strin$0=
      caml_string_of_jsbytes("no space in filename string"),
     cst$171=caml_string_of_jsbytes("_"),
     cst$170=caml_string_of_jsbytes(" "),
     cst$169=caml_string_of_jsbytes(" "),
     cst_Z$2=caml_string_of_jsbytes("Z"),
     cst$167=caml_string_of_jsbytes("-"),
     cst$168=caml_string_of_jsbytes("+"),
     cst_Time_to_date_ofday_precise$0=
      caml_string_of_jsbytes("Time.to_date_ofday_precise"),
     cst_Z$1=caml_string_of_jsbytes("Z"),
     cst_Z$0=caml_string_of_jsbytes("Z"),
     cst$166=caml_string_of_jsbytes(" "),
     cst$165=caml_string_of_jsbytes("."),
     cst$164=caml_string_of_jsbytes(""),
     cst_Time_ns_next_multiple_got_=
      caml_string_of_jsbytes("Time_ns.next_multiple got nonpositive interval"),
     cst_Time_ns_does_not_support_t=
      caml_string_of_jsbytes("Time_ns does not support this time"),
     cst_Time_ns_to_int_ns_since_ep=
      caml_string_of_jsbytes
       ("Time_ns.to_int_ns_since_epoch: unsupported on 32bit machines"),
     cst_Time_ns_overflow=caml_string_of_jsbytes("Time_ns: overflow"),
     cst_Core_kernel_Time_ns=caml_string_of_jsbytes("Core_kernel__Time_ns"),
     cst_core_kernel$389=caml_string_of_jsbytes("core_kernel"),
     cst_src_time_ns_ml=caml_string_of_jsbytes("src/time_ns.ml"),
     cst$163=caml_string_of_jsbytes(""),
     cst_core_kernel$390=caml_string_of_jsbytes("core_kernel"),
     cst_t$205=caml_string_of_jsbytes("t"),
     cst_src_time_ns_ml_9_0=caml_string_of_jsbytes("src/time_ns.ml:9:0"),
     cst_t$206=caml_string_of_jsbytes("t"),
     name$67=caml_string_of_jsbytes("src/time_ns.ml.t"),
     cst_t$207=caml_string_of_jsbytes("t"),
     cst_src_time_ns_ml_323_6=caml_string_of_jsbytes("src/time_ns.ml:323:6"),
     cst_t$208=caml_string_of_jsbytes("t"),
     cst_Core_kernel_Time_ns_To_and=
      caml_string_of_jsbytes
       ("Core_kernel__Time_ns.To_and_of_string.Time_ns_of_string"),
     cst_core_kernel$391=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Time_ns$0=caml_string_of_jsbytes("Core_kernel__Time_ns"),
     cst_Core_kernel_Time_ns_altern=
      caml_string_of_jsbytes("Core_kernel__Time_ns_alternate_sexp"),
     cst_core_kernel$392=caml_string_of_jsbytes("core_kernel"),
     cst_src_time_ns_alternate_sexp=
      caml_string_of_jsbytes("src/time_ns_alternate_sexp.ml"),
     cst$175=caml_string_of_jsbytes(""),
     cst_core_kernel$393=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$394=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Time_ns_altern$0=
      caml_string_of_jsbytes("Core_kernel__Time_ns_alternate_sexp"),
     cst_Core_kernel_Substring_intf=
      caml_string_of_jsbytes("Core_kernel__Substring_intf"),
     cst_core_kernel$395=caml_string_of_jsbytes("core_kernel"),
     cst_src_substring_intf_ml=caml_string_of_jsbytes("src/substring_intf.ml"),
     cst$176=caml_string_of_jsbytes(""),
     cst_core_kernel$396=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$397=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Substring_intf$0=
      caml_string_of_jsbytes("Core_kernel__Substring_intf"),
     cst_Substring_suffix=caml_string_of_jsbytes("Substring.suffix"),
     cst_Substring_prefix=caml_string_of_jsbytes("Substring.prefix"),
     cst_Substring_drop_suffix=caml_string_of_jsbytes("Substring.drop_suffix"),
     cst_Substring_drop_prefix=caml_string_of_jsbytes("Substring.drop_prefix"),
     cst_index_out_of_bounds=caml_string_of_jsbytes("index out of bounds"),
     cst_string$2=caml_string_of_jsbytes("string"),
     cst_bigstring=caml_string_of_jsbytes("bigstring"),
     cst_Core_kernel_Make_substring=
      caml_string_of_jsbytes("Core_kernel__Make_substring"),
     cst_core_kernel$398=caml_string_of_jsbytes("core_kernel"),
     cst_src_make_substring_ml=caml_string_of_jsbytes("src/make_substring.ml"),
     cst$177=caml_string_of_jsbytes(""),
     cst_core_kernel$399=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$400=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Make_substring$0=
      caml_string_of_jsbytes("Core_kernel__Make_substring"),
     cst_Core_kernel_Substring=
      caml_string_of_jsbytes("Core_kernel__Substring"),
     cst_core_kernel$401=caml_string_of_jsbytes("core_kernel"),
     cst_src_substring_ml=caml_string_of_jsbytes("src/substring.ml"),
     cst$178=caml_string_of_jsbytes(""),
     cst_core_kernel$402=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$403=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Substring$0=
      caml_string_of_jsbytes("Core_kernel__Substring"),
     cst_Core_kernel_String_id_intf=
      caml_string_of_jsbytes("Core_kernel__String_id_intf"),
     cst_core_kernel$404=caml_string_of_jsbytes("core_kernel"),
     cst_src_string_id_intf_ml=caml_string_of_jsbytes("src/string_id_intf.ml"),
     cst$179=caml_string_of_jsbytes(""),
     cst_core_kernel$405=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$406=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_String_id_intf$0=
      caml_string_of_jsbytes("Core_kernel__String_id_intf"),
     cst_it_is_empty=caml_string_of_jsbytes("it is empty"),
     cst_it_has_whitespace_on_the_e=
      caml_string_of_jsbytes("it has whitespace on the edge"),
     cst_Core_kernel_String_id=
      caml_string_of_jsbytes("Core_kernel__String_id"),
     cst_core_kernel$407=caml_string_of_jsbytes("core_kernel"),
     cst_src_string_id_ml=caml_string_of_jsbytes("src/string_id.ml"),
     cst$180=caml_string_of_jsbytes(""),
     cst_core_kernel$408=caml_string_of_jsbytes("core_kernel"),
     module_name$12=caml_string_of_jsbytes("Core_kernel.String_id"),
     cst_core_kernel$409=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_String_id$0=
      caml_string_of_jsbytes("Core_kernel__String_id"),
     cst_Core_kernel_Stack=caml_string_of_jsbytes("Core_kernel__Stack"),
     cst_core_kernel$410=caml_string_of_jsbytes("core_kernel"),
     cst_src_stack_ml=caml_string_of_jsbytes("src/stack.ml"),
     cst$181=caml_string_of_jsbytes(""),
     cst_core_kernel$411=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$412=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Stack$0=caml_string_of_jsbytes("Core_kernel__Stack"),
     cst_bin_io_deserialization_mis$0=
      caml_string_of_jsbytes("bin-io deserialization mismatch"),
     cst_serialization_mismatch=
      caml_string_of_jsbytes("serialization mismatch"),
     cst_sexp_deserialization_msima=
      caml_string_of_jsbytes("sexp deserialization msimatch"),
     cst_expected_list_when_seriali=
      caml_string_of_jsbytes
       ("expected list when serializing unordered container"),
     cst_sexp_serialization_mismatc$0=
      caml_string_of_jsbytes("sexp serialization mismatch"),
     cst_src_stable_unit_test_ml$3=
      caml_string_of_jsbytes("src/stable_unit_test.ml"),
     cst_sexp=caml_string_of_jsbytes(": sexp"),
     cst_src_stable_unit_test_ml$4=
      caml_string_of_jsbytes("src/stable_unit_test.ml"),
     cst_bin_io$0=caml_string_of_jsbytes(": bin_io"),
     cst_bin_io_serialization_misma=
      caml_string_of_jsbytes("bin_io serialization mismatch"),
     cst_bin_io_deserialization_mis=
      caml_string_of_jsbytes("bin_io deserialization mismatch"),
     cst_src_stable_unit_test_ml$2=
      caml_string_of_jsbytes("src/stable_unit_test.ml"),
     cst_bin_io=caml_string_of_jsbytes(": bin_io"),
     cst_sexp_serialization_mismatc=
      caml_string_of_jsbytes("sexp serialization mismatch"),
     cst_src_stable_unit_test_ml$1=
      caml_string_of_jsbytes("src/stable_unit_test.ml"),
     cst_sexp_serialization=caml_string_of_jsbytes(": sexp serialization"),
     cst_sexp_deserialization_misma=
      caml_string_of_jsbytes("sexp deserialization mismatch"),
     cst_could_not_deserialize_sexp=
      caml_string_of_jsbytes("could not deserialize sexp"),
     cst_src_stable_unit_test_ml$0=
      caml_string_of_jsbytes("src/stable_unit_test.ml"),
     cst_sexp_deserialization=caml_string_of_jsbytes(": sexp deserialization"),
     cst_Core_kernel_Stable_unit_te$1=
      caml_string_of_jsbytes("Core_kernel__Stable_unit_test"),
     cst_core_kernel$413=caml_string_of_jsbytes("core_kernel"),
     cst_src_stable_unit_test_ml=
      caml_string_of_jsbytes("src/stable_unit_test.ml"),
     cst$182=caml_string_of_jsbytes(""),
     cst_core_kernel$414=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$415=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Stable_unit_te$2=
      caml_string_of_jsbytes("Core_kernel__Stable_unit_test"),
     cst_Core_kernel_Arg=caml_string_of_jsbytes("Core_kernel__Arg"),
     cst_core_kernel$416=caml_string_of_jsbytes("core_kernel"),
     cst_src_arg_ml=caml_string_of_jsbytes("src/arg.ml"),
     cst$183=caml_string_of_jsbytes(""),
     cst_core_kernel$417=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$418=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Arg$0=caml_string_of_jsbytes("Core_kernel__Arg"),
     cst_false=caml_string_of_jsbytes("false"),
     cst_true=caml_string_of_jsbytes("true"),
     cst_and=caml_string_of_jsbytes("and"),
     cst_if=caml_string_of_jsbytes("if"),
     cst_not=caml_string_of_jsbytes("not"),
     cst_or=caml_string_of_jsbytes("or"),
     name$68=caml_string_of_jsbytes("not"),
     name$69=caml_string_of_jsbytes("if"),
     cst_src_blang_ml_T_t=caml_string_of_jsbytes("src/blang.ml.T.t"),
     cst_t$218=caml_string_of_jsbytes("t"),
     cst_Core_kernel_Blang=caml_string_of_jsbytes("Core_kernel__Blang"),
     cst_core_kernel$419=caml_string_of_jsbytes("core_kernel"),
     cst_src_blang_ml=caml_string_of_jsbytes("src/blang.ml"),
     cst$184=caml_string_of_jsbytes(""),
     cst_core_kernel$420=caml_string_of_jsbytes("core_kernel"),
     cst_a$83=caml_string_of_jsbytes("a"),
     cst_src_blang_ml_48_14=caml_string_of_jsbytes("src/blang.ml:48:14"),
     cst_Base=caml_string_of_jsbytes("Base"),
     cst_a$84=caml_string_of_jsbytes("a"),
     cst_src_blang_ml_47_26=caml_string_of_jsbytes("src/blang.ml:47:26"),
     cst_t$209=caml_string_of_jsbytes("t"),
     cst_a$85=caml_string_of_jsbytes("a"),
     cst_src_blang_ml_47_19=caml_string_of_jsbytes("src/blang.ml:47:19"),
     cst_t$210=caml_string_of_jsbytes("t"),
     cst_a$86=caml_string_of_jsbytes("a"),
     cst_src_blang_ml_47_12=caml_string_of_jsbytes("src/blang.ml:47:12"),
     cst_t$211=caml_string_of_jsbytes("t"),
     cst_If=caml_string_of_jsbytes("If"),
     cst_a$87=caml_string_of_jsbytes("a"),
     cst_src_blang_ml_46_13=caml_string_of_jsbytes("src/blang.ml:46:13"),
     cst_t$212=caml_string_of_jsbytes("t"),
     cst_Not=caml_string_of_jsbytes("Not"),
     cst_a$88=caml_string_of_jsbytes("a"),
     cst_src_blang_ml_45_19=caml_string_of_jsbytes("src/blang.ml:45:19"),
     cst_t$213=caml_string_of_jsbytes("t"),
     cst_a$89=caml_string_of_jsbytes("a"),
     cst_src_blang_ml_45_12=caml_string_of_jsbytes("src/blang.ml:45:12"),
     cst_t$214=caml_string_of_jsbytes("t"),
     cst_Or=caml_string_of_jsbytes("Or"),
     cst_a$90=caml_string_of_jsbytes("a"),
     cst_src_blang_ml_44_20=caml_string_of_jsbytes("src/blang.ml:44:20"),
     cst_t$215=caml_string_of_jsbytes("t"),
     cst_a$91=caml_string_of_jsbytes("a"),
     cst_src_blang_ml_44_13=caml_string_of_jsbytes("src/blang.ml:44:13"),
     cst_t$216=caml_string_of_jsbytes("t"),
     cst_And=caml_string_of_jsbytes("And"),
     cst_a$92=caml_string_of_jsbytes("a"),
     cst_t$217=caml_string_of_jsbytes("t"),
     cst_src_blang_ml_41_2=caml_string_of_jsbytes("src/blang.ml:41:2"),
     cst_core_kernel$421=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Blang$0=caml_string_of_jsbytes("Core_kernel__Blang"),
     cst_Filename_of_parts_empty_pa=
      caml_string_of_jsbytes("Filename.of_parts: empty parts list"),
     cst$198=caml_string_of_jsbytes("."),
     cst$199=caml_string_of_jsbytes("/"),
     cst$200=caml_string_of_jsbytes("/"),
     cst$201=caml_string_of_jsbytes("."),
     cst$197=caml_string_of_jsbytes("/"),
     cst$195=caml_string_of_jsbytes("."),
     cst$196=caml_string_of_jsbytes(".."),
     cst$186=caml_string_of_jsbytes(""),
     cst$189=caml_string_of_jsbytes(""),
     cst$190=caml_string_of_jsbytes("."),
     cst$191=caml_string_of_jsbytes(""),
     cst$187=caml_string_of_jsbytes(""),
     cst$188=caml_string_of_jsbytes("."),
     cst$192=caml_string_of_jsbytes(""),
     cst$193=caml_string_of_jsbytes("."),
     cst$194=caml_string_of_jsbytes("/"),
     cst_Core_kernel_Filename=caml_string_of_jsbytes("Core_kernel__Filename"),
     cst_core_kernel$422=caml_string_of_jsbytes("core_kernel"),
     cst_src_filename_ml=caml_string_of_jsbytes("src/filename.ml"),
     cst$185=caml_string_of_jsbytes(""),
     cst_core_kernel$423=caml_string_of_jsbytes("core_kernel"),
     root$0=caml_string_of_jsbytes("/"),
     cst_core_kernel$424=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Filename$0=
      caml_string_of_jsbytes("Core_kernel__Filename"),
     cst_src_command_shape_ml_Fully=
      caml_string_of_jsbytes("src/command_shape.ml.Fully_forced.t"),
     cst_Basic$3=caml_string_of_jsbytes("Basic"),
     cst_Exec$12=caml_string_of_jsbytes("Exec"),
     cst_Group$12=caml_string_of_jsbytes("Group"),
     cst_basic$1=caml_string_of_jsbytes("basic"),
     cst_exec$7=caml_string_of_jsbytes("exec"),
     cst_group$7=caml_string_of_jsbytes("group"),
     cst_Basic$4=caml_string_of_jsbytes("Basic"),
     cst_Exec$13=caml_string_of_jsbytes("Exec"),
     cst_Group$13=caml_string_of_jsbytes("Group"),
     cst_basic$2=caml_string_of_jsbytes("basic"),
     cst_exec$8=caml_string_of_jsbytes("exec"),
     cst_group$8=caml_string_of_jsbytes("group"),
     cst_child_subcommand$4=caml_string_of_jsbytes("child_subcommand"),
     cst_path_to_exe$10=caml_string_of_jsbytes("path_to_exe"),
     cst_readme$21=caml_string_of_jsbytes("readme"),
     cst_summary$30=caml_string_of_jsbytes("summary"),
     cst_working_dir$7=caml_string_of_jsbytes("working_dir"),
     cst_child_subcommand$5=caml_string_of_jsbytes("child_subcommand"),
     cst_path_to_exe$11=caml_string_of_jsbytes("path_to_exe"),
     cst_working_dir$8=caml_string_of_jsbytes("working_dir"),
     cst_summary$31=caml_string_of_jsbytes("summary"),
     cst_src_command_shape_ml_Exec_=
      caml_string_of_jsbytes("src/command_shape.ml.Exec_info.t"),
     cst$212=caml_string_of_jsbytes("-"),
     cst_Subcommands_must_not_begin=
      caml_string_of_jsbytes("Subcommands must not begin with '-'"),
     cst_readme$18=caml_string_of_jsbytes("readme"),
     cst_subcommands$7=caml_string_of_jsbytes("subcommands"),
     cst_summary$26=caml_string_of_jsbytes("summary"),
     cst_subcommands$8=caml_string_of_jsbytes("subcommands"),
     cst_summary$27=caml_string_of_jsbytes("summary"),
     cst_src_command_shape_ml_Group=
      caml_string_of_jsbytes("src/command_shape.ml.Group_info.t"),
     cst_t$270=caml_string_of_jsbytes("t"),
     cst$211=caml_string_of_jsbytes("-"),
     cst_Flags_must_begin_with=
      caml_string_of_jsbytes("Flags must begin with '-'"),
     cst_anons$4=caml_string_of_jsbytes("anons"),
     cst_flags$7=caml_string_of_jsbytes("flags"),
     cst_readme$15=caml_string_of_jsbytes("readme"),
     cst_summary$22=caml_string_of_jsbytes("summary"),
     cst_flags$8=caml_string_of_jsbytes("flags"),
     cst_anons$5=caml_string_of_jsbytes("anons"),
     cst_summary$23=caml_string_of_jsbytes("summary"),
     cst_src_command_shape_ml_Base_=
      caml_string_of_jsbytes("src/command_shape.ml.Base_info.t"),
     cst_Key_type_s_is_an_ambiguous=
      caml_string_of_jsbytes("%{Key_type} %s is an ambiguous prefix: %s"),
     cst_unknown_Key_type_s=caml_string_of_jsbytes("unknown %{Key_type} %s"),
     cst_unknown=caml_string_of_jsbytes("unknown "),
     cst_flag=caml_string_of_jsbytes("flag"),
     cst_subcommand=caml_string_of_jsbytes("subcommand"),
     cst$206=caml_string_of_jsbytes("  "),
     cst$207=caml_string_of_jsbytes("  "),
     cst$208=caml_string_of_jsbytes("  "),
     cst$209=caml_string_of_jsbytes(""),
     cst$210=caml_string_of_jsbytes(""),
     cst$205=caml_string_of_jsbytes(" "),
     cst_help=caml_string_of_jsbytes("[-help]"),
     cst_help$0=caml_string_of_jsbytes("[-help]"),
     cst_version=caml_string_of_jsbytes("[-version]"),
     cst_version$0=caml_string_of_jsbytes("[-version]"),
     cst_build_info=caml_string_of_jsbytes("[-build-info]"),
     cst_build_info$0=caml_string_of_jsbytes("[-build-info]"),
     cst_help$1=caml_string_of_jsbytes("help"),
     cst_help$2=caml_string_of_jsbytes("help"),
     cst_version$1=caml_string_of_jsbytes("version"),
     cst_version$2=caml_string_of_jsbytes("version"),
     cst_Unable_to_parse=caml_string_of_jsbytes("Unable to parse"),
     cst_aliases$4=caml_string_of_jsbytes("aliases"),
     cst_doc$4=caml_string_of_jsbytes("doc"),
     cst_name$7=caml_string_of_jsbytes("name"),
     cst_aliases$5=caml_string_of_jsbytes("aliases"),
     cst_doc$5=caml_string_of_jsbytes("doc"),
     cst_name$8=caml_string_of_jsbytes("name"),
     cst_src_command_shape_ml_Flag_=
      caml_string_of_jsbytes("src/command_shape.ml.Flag_info.t"),
     x_104=caml_string_of_jsbytes("name"),
     cst_src_command_shape_ml$60=
      caml_string_of_jsbytes("src/command_shape.ml"),
     cst_Grammar$3=caml_string_of_jsbytes("Grammar"),
     cst_Usage$3=caml_string_of_jsbytes("Usage"),
     cst_grammar$1=caml_string_of_jsbytes("grammar"),
     cst_usage$4=caml_string_of_jsbytes("usage"),
     cst_Grammar$4=caml_string_of_jsbytes("Grammar"),
     cst_Usage$4=caml_string_of_jsbytes("Usage"),
     cst_grammar$2=caml_string_of_jsbytes("grammar"),
     cst_usage$5=caml_string_of_jsbytes("usage"),
     cst_ad_hoc$1=caml_string_of_jsbytes("ad_hoc"),
     cst_Ad_hoc$3=caml_string_of_jsbytes("Ad_hoc"),
     cst_Concat$3=caml_string_of_jsbytes("Concat"),
     cst_Many$3=caml_string_of_jsbytes("Many"),
     cst_Maybe$3=caml_string_of_jsbytes("Maybe"),
     cst_One$3=caml_string_of_jsbytes("One"),
     cst_Zero$4=caml_string_of_jsbytes("Zero"),
     cst_concat$1=caml_string_of_jsbytes("concat"),
     cst_many$1=caml_string_of_jsbytes("many"),
     cst_maybe$1=caml_string_of_jsbytes("maybe"),
     cst_one$1=caml_string_of_jsbytes("one"),
     cst_zero$3=caml_string_of_jsbytes("zero"),
     cst_ad_hoc$2=caml_string_of_jsbytes("ad_hoc"),
     cst_Ad_hoc$4=caml_string_of_jsbytes("Ad_hoc"),
     cst_Concat$4=caml_string_of_jsbytes("Concat"),
     cst_Many$4=caml_string_of_jsbytes("Many"),
     cst_Maybe$4=caml_string_of_jsbytes("Maybe"),
     cst_One$4=caml_string_of_jsbytes("One"),
     cst_Zero$5=caml_string_of_jsbytes("Zero"),
     cst_concat$2=caml_string_of_jsbytes("concat"),
     cst_many$2=caml_string_of_jsbytes("many"),
     cst_maybe$2=caml_string_of_jsbytes("maybe"),
     cst_one$2=caml_string_of_jsbytes("one"),
     cst_zero$4=caml_string_of_jsbytes("zero"),
     cst_unsupported_version_to_use=
      caml_string_of_jsbytes("unsupported version_to_use"),
     cst_src_command_shape_ml$55=
      caml_string_of_jsbytes("src/command_shape.ml"),
     cst_V1$0=caml_string_of_jsbytes("V1"),
     cst_V2$0=caml_string_of_jsbytes("V2"),
     cst_V3$0=caml_string_of_jsbytes("V3"),
     cst_v1=caml_string_of_jsbytes("v1"),
     cst_v2=caml_string_of_jsbytes("v2"),
     cst_v3=caml_string_of_jsbytes("v3"),
     cst_V1$1=caml_string_of_jsbytes("V1"),
     cst_V2$1=caml_string_of_jsbytes("V2"),
     cst_V3$1=caml_string_of_jsbytes("V3"),
     cst_v1$0=caml_string_of_jsbytes("v1"),
     cst_v2$0=caml_string_of_jsbytes("v2"),
     cst_v3$0=caml_string_of_jsbytes("v3"),
     cst_src_command_shape_ml$50=
      caml_string_of_jsbytes("src/command_shape.ml"),
     cst_Base$7=caml_string_of_jsbytes("Base"),
     cst_Exec$9=caml_string_of_jsbytes("Exec"),
     cst_Group$9=caml_string_of_jsbytes("Group"),
     cst_base$3=caml_string_of_jsbytes("base"),
     cst_exec$5=caml_string_of_jsbytes("exec"),
     cst_group$5=caml_string_of_jsbytes("group"),
     cst_Base$8=caml_string_of_jsbytes("Base"),
     cst_Exec$10=caml_string_of_jsbytes("Exec"),
     cst_Group$10=caml_string_of_jsbytes("Group"),
     cst_base$4=caml_string_of_jsbytes("base"),
     cst_exec$6=caml_string_of_jsbytes("exec"),
     cst_group$6=caml_string_of_jsbytes("group"),
     cst_src_command_shape_ml$45=
      caml_string_of_jsbytes("src/command_shape.ml"),
     cst_Base$4=caml_string_of_jsbytes("Base"),
     cst_Exec$6=caml_string_of_jsbytes("Exec"),
     cst_Group$6=caml_string_of_jsbytes("Group"),
     cst_base$1=caml_string_of_jsbytes("base"),
     cst_exec$3=caml_string_of_jsbytes("exec"),
     cst_group$3=caml_string_of_jsbytes("group"),
     cst_Base$5=caml_string_of_jsbytes("Base"),
     cst_Exec$7=caml_string_of_jsbytes("Exec"),
     cst_Group$7=caml_string_of_jsbytes("Group"),
     cst_base$2=caml_string_of_jsbytes("base"),
     cst_exec$4=caml_string_of_jsbytes("exec"),
     cst_group$4=caml_string_of_jsbytes("group"),
     cst_src_command_shape_ml$40=
      caml_string_of_jsbytes("src/command_shape.ml"),
     cst_Base$1=caml_string_of_jsbytes("Base"),
     cst_Exec$3=caml_string_of_jsbytes("Exec"),
     cst_Group$3=caml_string_of_jsbytes("Group"),
     cst_Lazy$0=caml_string_of_jsbytes("Lazy"),
     cst_base=caml_string_of_jsbytes("base"),
     cst_exec$1=caml_string_of_jsbytes("exec"),
     cst_group$1=caml_string_of_jsbytes("group"),
     cst_lazy=caml_string_of_jsbytes("lazy"),
     cst_Base$2=caml_string_of_jsbytes("Base"),
     cst_Exec$4=caml_string_of_jsbytes("Exec"),
     cst_Group$4=caml_string_of_jsbytes("Group"),
     cst_Lazy$1=caml_string_of_jsbytes("Lazy"),
     cst_base$0=caml_string_of_jsbytes("base"),
     cst_exec$2=caml_string_of_jsbytes("exec"),
     cst_group$2=caml_string_of_jsbytes("group"),
     cst_lazy$0=caml_string_of_jsbytes("lazy"),
     cst_src_command_shape_ml$35=
      caml_string_of_jsbytes("src/command_shape.ml"),
     cst_src_command_shape_ml_Stabl$5=
      caml_string_of_jsbytes("src/command_shape.ml.Stable.Fully_forced.V1.t"),
     cst_Basic$0=caml_string_of_jsbytes("Basic"),
     cst_Exec$0=caml_string_of_jsbytes("Exec"),
     cst_Group$0=caml_string_of_jsbytes("Group"),
     cst_basic=caml_string_of_jsbytes("basic"),
     cst_exec=caml_string_of_jsbytes("exec"),
     cst_group=caml_string_of_jsbytes("group"),
     cst_Basic$1=caml_string_of_jsbytes("Basic"),
     cst_Exec$1=caml_string_of_jsbytes("Exec"),
     cst_Group$1=caml_string_of_jsbytes("Group"),
     cst_basic$0=caml_string_of_jsbytes("basic"),
     cst_exec$0=caml_string_of_jsbytes("exec"),
     cst_group$0=caml_string_of_jsbytes("group"),
     cst$204=caml_string_of_jsbytes("/"),
     cst_path_to_exe$6=caml_string_of_jsbytes("path_to_exe"),
     cst_readme$12=caml_string_of_jsbytes("readme"),
     cst_summary$18=caml_string_of_jsbytes("summary"),
     cst_path_to_exe$7=caml_string_of_jsbytes("path_to_exe"),
     cst_summary$19=caml_string_of_jsbytes("summary"),
     cst_path_to_exe$3=caml_string_of_jsbytes("path_to_exe"),
     cst_readme$10=caml_string_of_jsbytes("readme"),
     cst_summary$15=caml_string_of_jsbytes("summary"),
     cst_working_dir$3=caml_string_of_jsbytes("working_dir"),
     cst_path_to_exe$4=caml_string_of_jsbytes("path_to_exe"),
     cst_working_dir$4=caml_string_of_jsbytes("working_dir"),
     cst_summary$16=caml_string_of_jsbytes("summary"),
     cst_src_command_shape_ml$30=
      caml_string_of_jsbytes("src/command_shape.ml"),
     cst_child_subcommand$0=caml_string_of_jsbytes("child_subcommand"),
     cst_path_to_exe$0=caml_string_of_jsbytes("path_to_exe"),
     cst_readme$8=caml_string_of_jsbytes("readme"),
     cst_summary$12=caml_string_of_jsbytes("summary"),
     cst_working_dir$0=caml_string_of_jsbytes("working_dir"),
     cst_child_subcommand$1=caml_string_of_jsbytes("child_subcommand"),
     cst_path_to_exe$1=caml_string_of_jsbytes("path_to_exe"),
     cst_working_dir$1=caml_string_of_jsbytes("working_dir"),
     cst_summary$13=caml_string_of_jsbytes("summary"),
     cst_src_command_shape_ml_Stabl$4=
      caml_string_of_jsbytes("src/command_shape.ml.Stable.Exec_info.V3.t"),
     cst_src_command_shape_ml$25=
      caml_string_of_jsbytes("src/command_shape.ml"),
     cst_readme$6=caml_string_of_jsbytes("readme"),
     cst_subcommands$3=caml_string_of_jsbytes("subcommands"),
     cst_summary$9=caml_string_of_jsbytes("summary"),
     cst_subcommands$4=caml_string_of_jsbytes("subcommands"),
     cst_summary$10=caml_string_of_jsbytes("summary"),
     cst_t$235=caml_string_of_jsbytes("t"),
     cst_src_command_shape_ml$20=
      caml_string_of_jsbytes("src/command_shape.ml"),
     cst_readme$4=caml_string_of_jsbytes("readme"),
     cst_subcommands$0=caml_string_of_jsbytes("subcommands"),
     cst_summary$6=caml_string_of_jsbytes("summary"),
     cst_subcommands$1=caml_string_of_jsbytes("subcommands"),
     cst_summary$7=caml_string_of_jsbytes("summary"),
     cst_src_command_shape_ml_Stabl$3=
      caml_string_of_jsbytes("src/command_shape.ml.Stable.Group_info.V2.t"),
     cst_t$233=caml_string_of_jsbytes("t"),
     cst_flags$3=caml_string_of_jsbytes("flags"),
     cst_readme$2=caml_string_of_jsbytes("readme"),
     cst_summary$3=caml_string_of_jsbytes("summary"),
     cst_usage$2=caml_string_of_jsbytes("usage"),
     cst_flags$4=caml_string_of_jsbytes("flags"),
     cst_usage$3=caml_string_of_jsbytes("usage"),
     cst_summary$4=caml_string_of_jsbytes("summary"),
     cst_src_command_shape_ml$15=
      caml_string_of_jsbytes("src/command_shape.ml"),
     cst_anons$0=caml_string_of_jsbytes("anons"),
     cst_flags$0=caml_string_of_jsbytes("flags"),
     cst_readme$0=caml_string_of_jsbytes("readme"),
     cst_summary$0=caml_string_of_jsbytes("summary"),
     cst_flags$1=caml_string_of_jsbytes("flags"),
     cst_anons$1=caml_string_of_jsbytes("anons"),
     cst_summary$1=caml_string_of_jsbytes("summary"),
     cst_src_command_shape_ml_Stabl$2=
      caml_string_of_jsbytes("src/command_shape.ml.Stable.Base_info.V2.t"),
     cst_src_command_shape_ml$10=
      caml_string_of_jsbytes("src/command_shape.ml"),
     cst_aliases$0=caml_string_of_jsbytes("aliases"),
     cst_doc$0=caml_string_of_jsbytes("doc"),
     cst_name$3=caml_string_of_jsbytes("name"),
     cst_aliases$1=caml_string_of_jsbytes("aliases"),
     cst_doc$1=caml_string_of_jsbytes("doc"),
     cst_name$4=caml_string_of_jsbytes("name"),
     cst_src_command_shape_ml_Stabl$1=
      caml_string_of_jsbytes("src/command_shape.ml.Stable.Flag_info.V1.t"),
     cst_src_command_shape_ml$5=caml_string_of_jsbytes("src/command_shape.ml"),
     cst_Grammar$0=caml_string_of_jsbytes("Grammar"),
     cst_Usage$0=caml_string_of_jsbytes("Usage"),
     cst_grammar=caml_string_of_jsbytes("grammar"),
     cst_usage=caml_string_of_jsbytes("usage"),
     cst_Grammar$1=caml_string_of_jsbytes("Grammar"),
     cst_Usage$1=caml_string_of_jsbytes("Usage"),
     cst_grammar$0=caml_string_of_jsbytes("grammar"),
     cst_usage$0=caml_string_of_jsbytes("usage"),
     cst_src_command_shape_ml_Stabl$0=
      caml_string_of_jsbytes("src/command_shape.ml.Stable.Anons.V2.t"),
     cst_Many_Zero_should_be_just_Z=
      caml_string_of_jsbytes("Many Zero should be just Zero"),
     cst_Maybe_Zero_should_be_just_=
      caml_string_of_jsbytes("Maybe Zero should be just Zero"),
     cst_Flatten_zero_and_one_eleme=
      caml_string_of_jsbytes("Flatten zero and one-element Concat"),
     cst$203=caml_string_of_jsbytes(""),
     cst_bug_in_command_ml=caml_string_of_jsbytes("bug in command.ml"),
     cst_bug_in_command_ml$0=caml_string_of_jsbytes("bug in command.ml"),
     cst_src_command_shape_ml$0=caml_string_of_jsbytes("src/command_shape.ml"),
     cst_src_command_shape_ml_Stabl=
      caml_string_of_jsbytes("src/command_shape.ml.Stable.Anons.Grammar.V1.t"),
     cst_ad_hoc=caml_string_of_jsbytes("ad_hoc"),
     cst_Ad_hoc$0=caml_string_of_jsbytes("Ad_hoc"),
     cst_Concat$0=caml_string_of_jsbytes("Concat"),
     cst_Many$0=caml_string_of_jsbytes("Many"),
     cst_Maybe$0=caml_string_of_jsbytes("Maybe"),
     cst_One$0=caml_string_of_jsbytes("One"),
     cst_Zero$2=caml_string_of_jsbytes("Zero"),
     cst_concat=caml_string_of_jsbytes("concat"),
     cst_many=caml_string_of_jsbytes("many"),
     cst_maybe=caml_string_of_jsbytes("maybe"),
     cst_one=caml_string_of_jsbytes("one"),
     cst_zero$1=caml_string_of_jsbytes("zero"),
     cst_ad_hoc$0=caml_string_of_jsbytes("ad_hoc"),
     cst_Ad_hoc$1=caml_string_of_jsbytes("Ad_hoc"),
     cst_Concat$1=caml_string_of_jsbytes("Concat"),
     cst_Many$1=caml_string_of_jsbytes("Many"),
     cst_Maybe$1=caml_string_of_jsbytes("Maybe"),
     cst_One$1=caml_string_of_jsbytes("One"),
     cst_Zero$3=caml_string_of_jsbytes("Zero"),
     cst_concat$0=caml_string_of_jsbytes("concat"),
     cst_many$0=caml_string_of_jsbytes("many"),
     cst_maybe$0=caml_string_of_jsbytes("maybe"),
     cst_one$0=caml_string_of_jsbytes("one"),
     cst_zero$2=caml_string_of_jsbytes("zero"),
     cst_Core_kernel_Command_shape=
      caml_string_of_jsbytes("Core_kernel__Command_shape"),
     cst_core_kernel$425=caml_string_of_jsbytes("core_kernel"),
     cst_src_command_shape_ml=caml_string_of_jsbytes("src/command_shape.ml"),
     cst$202=caml_string_of_jsbytes(""),
     cst_core_kernel$426=caml_string_of_jsbytes("core_kernel"),
     cst_Ad_hoc=caml_string_of_jsbytes("Ad_hoc"),
     cst_t$219=caml_string_of_jsbytes("t"),
     cst_Concat=caml_string_of_jsbytes("Concat"),
     cst_t$220=caml_string_of_jsbytes("t"),
     cst_Maybe=caml_string_of_jsbytes("Maybe"),
     cst_t$221=caml_string_of_jsbytes("t"),
     cst_Many=caml_string_of_jsbytes("Many"),
     cst_One=caml_string_of_jsbytes("One"),
     cst_t$222=caml_string_of_jsbytes("t"),
     cst_src_command_shape_ml_8_8=
      caml_string_of_jsbytes("src/command_shape.ml:8:8"),
     cst_t$223=caml_string_of_jsbytes("t"),
     tp_loc$30=
      caml_string_of_jsbytes("src/command_shape.ml.Stable.Anons.Grammar.V1.t"),
     cst_src_command_shape_ml$1=caml_string_of_jsbytes("src/command_shape.ml"),
     cst_src_command_shape_ml$2=caml_string_of_jsbytes("src/command_shape.ml"),
     cst_src_command_shape_ml$3=caml_string_of_jsbytes("src/command_shape.ml"),
     cst_src_command_shape_ml$4=caml_string_of_jsbytes("src/command_shape.ml"),
     cst_f1755de6c27d9367cb640e60f8=
      caml_string_of_jsbytes("f1755de6c27d9367cb640e60f8554697"),
     cst_Grammar=caml_string_of_jsbytes("Grammar"),
     cst_Usage=caml_string_of_jsbytes("Usage"),
     cst_t$224=caml_string_of_jsbytes("t"),
     cst_src_command_shape_ml_60_6=
      caml_string_of_jsbytes("src/command_shape.ml:60:6"),
     cst_t$225=caml_string_of_jsbytes("t"),
     tp_loc$31=
      caml_string_of_jsbytes("src/command_shape.ml.Stable.Anons.V2.t"),
     cst_src_command_shape_ml$6=caml_string_of_jsbytes("src/command_shape.ml"),
     cst_src_command_shape_ml$7=caml_string_of_jsbytes("src/command_shape.ml"),
     cst_src_command_shape_ml$8=caml_string_of_jsbytes("src/command_shape.ml"),
     cst_src_command_shape_ml$9=caml_string_of_jsbytes("src/command_shape.ml"),
     cst_f1755de6c27d9367cb640e60f8$0=
      caml_string_of_jsbytes("f1755de6c27d9367cb640e60f8554697"),
     cst_aliases=caml_string_of_jsbytes("aliases"),
     cst_doc=caml_string_of_jsbytes("doc"),
     cst_name$2=caml_string_of_jsbytes("name"),
     cst_t$226=caml_string_of_jsbytes("t"),
     cst_src_command_shape_ml_76_6=
      caml_string_of_jsbytes("src/command_shape.ml:76:6"),
     cst_t$227=caml_string_of_jsbytes("t"),
     tp_loc$32=
      caml_string_of_jsbytes("src/command_shape.ml.Stable.Flag_info.V1.t"),
     cst_src_command_shape_ml$11=
      caml_string_of_jsbytes("src/command_shape.ml"),
     cst_src_command_shape_ml$12=
      caml_string_of_jsbytes("src/command_shape.ml"),
     cst_src_command_shape_ml$13=
      caml_string_of_jsbytes("src/command_shape.ml"),
     cst_src_command_shape_ml$14=
      caml_string_of_jsbytes("src/command_shape.ml"),
     cst_f1755de6c27d9367cb640e60f8$1=
      caml_string_of_jsbytes("f1755de6c27d9367cb640e60f8554697"),
     cst_flags=caml_string_of_jsbytes("flags"),
     cst_anons=caml_string_of_jsbytes("anons"),
     cst_readme=caml_string_of_jsbytes("readme"),
     cst_summary=caml_string_of_jsbytes("summary"),
     cst_t$228=caml_string_of_jsbytes("t"),
     cst_src_command_shape_ml_94_6=
      caml_string_of_jsbytes("src/command_shape.ml:94:6"),
     cst_t$229=caml_string_of_jsbytes("t"),
     tp_loc$33=
      caml_string_of_jsbytes("src/command_shape.ml.Stable.Base_info.V2.t"),
     cst_src_command_shape_ml$16=
      caml_string_of_jsbytes("src/command_shape.ml"),
     cst_src_command_shape_ml$17=
      caml_string_of_jsbytes("src/command_shape.ml"),
     cst_src_command_shape_ml$18=
      caml_string_of_jsbytes("src/command_shape.ml"),
     cst_src_command_shape_ml$19=
      caml_string_of_jsbytes("src/command_shape.ml"),
     cst_f1755de6c27d9367cb640e60f8$2=
      caml_string_of_jsbytes("f1755de6c27d9367cb640e60f8554697"),
     cst_flags$2=caml_string_of_jsbytes("flags"),
     cst_usage$1=caml_string_of_jsbytes("usage"),
     cst_readme$1=caml_string_of_jsbytes("readme"),
     cst_summary$2=caml_string_of_jsbytes("summary"),
     cst_t$230=caml_string_of_jsbytes("t"),
     cst_src_command_shape_ml_109_6=
      caml_string_of_jsbytes("src/command_shape.ml:109:6"),
     cst_t$231=caml_string_of_jsbytes("t"),
     tp_loc$34=
      caml_string_of_jsbytes("src/command_shape.ml.Stable.Base_info.V1.t"),
     cst_a$93=caml_string_of_jsbytes("a"),
     cst_src_command_shape_ml_137_4=
      caml_string_of_jsbytes("src/command_shape.ml:137:4"),
     cst_a$94=caml_string_of_jsbytes("a"),
     cst_a$95=caml_string_of_jsbytes("a"),
     cst_src_command_shape_ml_144_3=
      caml_string_of_jsbytes("src/command_shape.ml:144:34"),
     cst_subcommands=caml_string_of_jsbytes("subcommands"),
     cst_readme$3=caml_string_of_jsbytes("readme"),
     cst_summary$5=caml_string_of_jsbytes("summary"),
     cst_a$96=caml_string_of_jsbytes("a"),
     cst_t$232=caml_string_of_jsbytes("t"),
     cst_src_command_shape_ml_141_6=
      caml_string_of_jsbytes("src/command_shape.ml:141:6"),
     tp_loc$35=
      caml_string_of_jsbytes("src/command_shape.ml.Stable.Group_info.V2.t"),
     cst_src_command_shape_ml$21=
      caml_string_of_jsbytes("src/command_shape.ml"),
     cst_src_command_shape_ml$22=
      caml_string_of_jsbytes("src/command_shape.ml"),
     cst_src_command_shape_ml$23=
      caml_string_of_jsbytes("src/command_shape.ml"),
     cst_src_command_shape_ml$24=
      caml_string_of_jsbytes("src/command_shape.ml"),
     cst_f1755de6c27d9367cb640e60f8$3=
      caml_string_of_jsbytes("f1755de6c27d9367cb640e60f8554697"),
     cst_a$97=caml_string_of_jsbytes("a"),
     cst_src_command_shape_ml_166_3=
      caml_string_of_jsbytes("src/command_shape.ml:166:34"),
     cst_subcommands$2=caml_string_of_jsbytes("subcommands"),
     cst_readme$5=caml_string_of_jsbytes("readme"),
     cst_summary$8=caml_string_of_jsbytes("summary"),
     cst_a$98=caml_string_of_jsbytes("a"),
     cst_t$234=caml_string_of_jsbytes("t"),
     cst_src_command_shape_ml_163_6=
      caml_string_of_jsbytes("src/command_shape.ml:163:6"),
     tp_loc$36=
      caml_string_of_jsbytes("src/command_shape.ml.Stable.Group_info.V1.t"),
     cst_src_command_shape_ml$26=
      caml_string_of_jsbytes("src/command_shape.ml"),
     cst_src_command_shape_ml$27=
      caml_string_of_jsbytes("src/command_shape.ml"),
     cst_src_command_shape_ml$28=
      caml_string_of_jsbytes("src/command_shape.ml"),
     cst_src_command_shape_ml$29=
      caml_string_of_jsbytes("src/command_shape.ml"),
     cst_f1755de6c27d9367cb640e60f8$4=
      caml_string_of_jsbytes("f1755de6c27d9367cb640e60f8554697"),
     cst_child_subcommand=caml_string_of_jsbytes("child_subcommand"),
     cst_path_to_exe=caml_string_of_jsbytes("path_to_exe"),
     cst_working_dir=caml_string_of_jsbytes("working_dir"),
     cst_readme$7=caml_string_of_jsbytes("readme"),
     cst_summary$11=caml_string_of_jsbytes("summary"),
     cst_t$236=caml_string_of_jsbytes("t"),
     cst_src_command_shape_ml_195_6=
      caml_string_of_jsbytes("src/command_shape.ml:195:6"),
     cst_t$237=caml_string_of_jsbytes("t"),
     tp_loc$37=
      caml_string_of_jsbytes("src/command_shape.ml.Stable.Exec_info.V3.t"),
     cst_src_command_shape_ml$31=
      caml_string_of_jsbytes("src/command_shape.ml"),
     cst_src_command_shape_ml$32=
      caml_string_of_jsbytes("src/command_shape.ml"),
     cst_src_command_shape_ml$33=
      caml_string_of_jsbytes("src/command_shape.ml"),
     cst_src_command_shape_ml$34=
      caml_string_of_jsbytes("src/command_shape.ml"),
     cst_f1755de6c27d9367cb640e60f8$5=
      caml_string_of_jsbytes("f1755de6c27d9367cb640e60f8554697"),
     cst_path_to_exe$2=caml_string_of_jsbytes("path_to_exe"),
     cst_working_dir$2=caml_string_of_jsbytes("working_dir"),
     cst_readme$9=caml_string_of_jsbytes("readme"),
     cst_summary$14=caml_string_of_jsbytes("summary"),
     cst_t$238=caml_string_of_jsbytes("t"),
     cst_src_command_shape_ml_216_6=
      caml_string_of_jsbytes("src/command_shape.ml:216:6"),
     cst_t$239=caml_string_of_jsbytes("t"),
     tp_loc$38=
      caml_string_of_jsbytes("src/command_shape.ml.Stable.Exec_info.V2.t"),
     cst_path_to_exe$5=caml_string_of_jsbytes("path_to_exe"),
     cst_readme$11=caml_string_of_jsbytes("readme"),
     cst_summary$17=caml_string_of_jsbytes("summary"),
     cst_t$240=caml_string_of_jsbytes("t"),
     cst_src_command_shape_ml_246_6=
      caml_string_of_jsbytes("src/command_shape.ml:246:6"),
     cst_t$241=caml_string_of_jsbytes("t"),
     tp_loc$39=
      caml_string_of_jsbytes("src/command_shape.ml.Stable.Exec_info.V1.t"),
     cst_t$242=caml_string_of_jsbytes("t"),
     cst_Exec=caml_string_of_jsbytes("Exec"),
     cst_t$243=caml_string_of_jsbytes("t"),
     cst_Group=caml_string_of_jsbytes("Group"),
     cst_Basic=caml_string_of_jsbytes("Basic"),
     cst_t$244=caml_string_of_jsbytes("t"),
     cst_src_command_shape_ml_276_6=
      caml_string_of_jsbytes("src/command_shape.ml:276:6"),
     cst_t$245=caml_string_of_jsbytes("t"),
     tp_loc$40=
      caml_string_of_jsbytes("src/command_shape.ml.Stable.Fully_forced.V1.t"),
     cst_src_command_shape_ml$36=
      caml_string_of_jsbytes("src/command_shape.ml"),
     cst_src_command_shape_ml$37=
      caml_string_of_jsbytes("src/command_shape.ml"),
     cst_src_command_shape_ml$38=
      caml_string_of_jsbytes("src/command_shape.ml"),
     cst_src_command_shape_ml$39=
      caml_string_of_jsbytes("src/command_shape.ml"),
     cst_f1755de6c27d9367cb640e60f8$6=
      caml_string_of_jsbytes("f1755de6c27d9367cb640e60f8554697"),
     cst_t$246=caml_string_of_jsbytes("t"),
     cst_Lazy=caml_string_of_jsbytes("Lazy"),
     cst_Exec$2=caml_string_of_jsbytes("Exec"),
     cst_t$247=caml_string_of_jsbytes("t"),
     cst_Group$2=caml_string_of_jsbytes("Group"),
     cst_Base$0=caml_string_of_jsbytes("Base"),
     cst_t$248=caml_string_of_jsbytes("t"),
     cst_src_command_shape_ml_293_6=
      caml_string_of_jsbytes("src/command_shape.ml:293:6"),
     cst_t$249=caml_string_of_jsbytes("t"),
     tp_loc$41=
      caml_string_of_jsbytes("src/command_shape.ml.Stable.Sexpable.V3.t"),
     cst_src_command_shape_ml$41=
      caml_string_of_jsbytes("src/command_shape.ml"),
     cst_src_command_shape_ml$42=
      caml_string_of_jsbytes("src/command_shape.ml"),
     cst_src_command_shape_ml$43=
      caml_string_of_jsbytes("src/command_shape.ml"),
     cst_src_command_shape_ml$44=
      caml_string_of_jsbytes("src/command_shape.ml"),
     cst_f1755de6c27d9367cb640e60f8$7=
      caml_string_of_jsbytes("f1755de6c27d9367cb640e60f8554697"),
     cst_Exec$5=caml_string_of_jsbytes("Exec"),
     cst_t$250=caml_string_of_jsbytes("t"),
     cst_Group$5=caml_string_of_jsbytes("Group"),
     cst_Base$3=caml_string_of_jsbytes("Base"),
     cst_t$251=caml_string_of_jsbytes("t"),
     cst_src_command_shape_ml_312_6=
      caml_string_of_jsbytes("src/command_shape.ml:312:6"),
     cst_t$252=caml_string_of_jsbytes("t"),
     tp_loc$42=
      caml_string_of_jsbytes("src/command_shape.ml.Stable.Sexpable.V2.t"),
     cst_src_command_shape_ml$46=
      caml_string_of_jsbytes("src/command_shape.ml"),
     cst_src_command_shape_ml$47=
      caml_string_of_jsbytes("src/command_shape.ml"),
     cst_src_command_shape_ml$48=
      caml_string_of_jsbytes("src/command_shape.ml"),
     cst_src_command_shape_ml$49=
      caml_string_of_jsbytes("src/command_shape.ml"),
     cst_f1755de6c27d9367cb640e60f8$8=
      caml_string_of_jsbytes("f1755de6c27d9367cb640e60f8554697"),
     cst_Exec$8=caml_string_of_jsbytes("Exec"),
     cst_t$253=caml_string_of_jsbytes("t"),
     cst_Group$8=caml_string_of_jsbytes("Group"),
     cst_Base$6=caml_string_of_jsbytes("Base"),
     cst_t$254=caml_string_of_jsbytes("t"),
     cst_src_command_shape_ml_338_6=
      caml_string_of_jsbytes("src/command_shape.ml:338:6"),
     cst_t$255=caml_string_of_jsbytes("t"),
     tp_loc$43=
      caml_string_of_jsbytes("src/command_shape.ml.Stable.Sexpable.V1.t"),
     cst_src_command_shape_ml$51=
      caml_string_of_jsbytes("src/command_shape.ml"),
     cst_src_command_shape_ml$52=
      caml_string_of_jsbytes("src/command_shape.ml"),
     cst_src_command_shape_ml$53=
      caml_string_of_jsbytes("src/command_shape.ml"),
     cst_src_command_shape_ml$54=
      caml_string_of_jsbytes("src/command_shape.ml"),
     cst_f1755de6c27d9367cb640e60f8$9=
      caml_string_of_jsbytes("f1755de6c27d9367cb640e60f8554697"),
     cst_V3=caml_string_of_jsbytes("V3"),
     cst_V2=caml_string_of_jsbytes("V2"),
     cst_V1=caml_string_of_jsbytes("V1"),
     cst_t$256=caml_string_of_jsbytes("t"),
     cst_src_command_shape_ml_364_6=
      caml_string_of_jsbytes("src/command_shape.ml:364:6"),
     cst_t$257=caml_string_of_jsbytes("t"),
     tp_loc$44=
      caml_string_of_jsbytes
       ("src/command_shape.ml.Stable.Sexpable.Versioned.t"),
     cst_V1$2=caml_string_of_jsbytes("V1"),
     cst_V2$2=caml_string_of_jsbytes("V2"),
     cst_V3$2=caml_string_of_jsbytes("V3"),
     cst_src_command_shape_ml$56=
      caml_string_of_jsbytes("src/command_shape.ml"),
     cst_src_command_shape_ml$57=
      caml_string_of_jsbytes("src/command_shape.ml"),
     cst_src_command_shape_ml$58=
      caml_string_of_jsbytes("src/command_shape.ml"),
     cst_src_command_shape_ml$59=
      caml_string_of_jsbytes("src/command_shape.ml"),
     cst_f1755de6c27d9367cb640e60f8$10=
      caml_string_of_jsbytes("f1755de6c27d9367cb640e60f8554697"),
     cst_Ad_hoc$2=caml_string_of_jsbytes("Ad_hoc"),
     cst_t$258=caml_string_of_jsbytes("t"),
     cst_Concat$2=caml_string_of_jsbytes("Concat"),
     cst_t$259=caml_string_of_jsbytes("t"),
     cst_Maybe$2=caml_string_of_jsbytes("Maybe"),
     cst_t$260=caml_string_of_jsbytes("t"),
     cst_Many$2=caml_string_of_jsbytes("Many"),
     cst_One$2=caml_string_of_jsbytes("One"),
     cst_t$261=caml_string_of_jsbytes("t"),
     cst_src_command_shape_ml_404_4=
      caml_string_of_jsbytes("src/command_shape.ml:404:4"),
     cst_t$262=caml_string_of_jsbytes("t"),
     tp_loc$45=caml_string_of_jsbytes("src/command_shape.ml.Anons.Grammar.t"),
     cst_Grammar$2=caml_string_of_jsbytes("Grammar"),
     cst_Usage$2=caml_string_of_jsbytes("Usage"),
     cst_t$263=caml_string_of_jsbytes("t"),
     cst_src_command_shape_ml_417_2=
      caml_string_of_jsbytes("src/command_shape.ml:417:2"),
     cst_t$264=caml_string_of_jsbytes("t"),
     tp_loc$46=caml_string_of_jsbytes("src/command_shape.ml.Anons.t"),
     enumerate_093=[0,0,[0,1,0]],
     enumerate_094=[0,0,[0,1,0]],
     names=
      [0,
       caml_string_of_jsbytes("at_least_once"),
       [0,caml_string_of_jsbytes("at_most_once"),0]],
     cst_at_most_once=caml_string_of_jsbytes("at_most_once"),
     cst_at_least_once=caml_string_of_jsbytes("at_least_once"),
     maybe_missing_prefix=caml_string_of_jsbytes("["),
     maybe_missing_suffix=caml_string_of_jsbytes("]"),
     maybe_more_suffix=caml_string_of_jsbytes(" ..."),
     cst_src_command_shape_ml$61=
      caml_string_of_jsbytes("src/command_shape.ml"),
     cst_src_command_shape_ml$62=
      caml_string_of_jsbytes("src/command_shape.ml"),
     cst_src_command_shape_ml$63=
      caml_string_of_jsbytes("src/command_shape.ml"),
     cst_src_command_shape_ml$64=
      caml_string_of_jsbytes("src/command_shape.ml"),
     cst_f1755de6c27d9367cb640e60f8$11=
      caml_string_of_jsbytes("f1755de6c27d9367cb640e60f8554697"),
     cst_aliases$2=caml_string_of_jsbytes("aliases"),
     cst_doc$2=caml_string_of_jsbytes("doc"),
     cst_name$5=caml_string_of_jsbytes("name"),
     cst_t$265=caml_string_of_jsbytes("t"),
     cst_src_command_shape_ml_479_2=
      caml_string_of_jsbytes("src/command_shape.ml:479:2"),
     cst_t$266=caml_string_of_jsbytes("t"),
     names$0=
      [0,
       caml_string_of_jsbytes("name"),
       [0,
        caml_string_of_jsbytes("doc"),
        [0,caml_string_of_jsbytes("aliases"),0]]],
     cst_aliases$3=caml_string_of_jsbytes("aliases"),
     cst_doc$3=caml_string_of_jsbytes("doc"),
     cst_name$6=caml_string_of_jsbytes("name"),
     tp_loc$47=caml_string_of_jsbytes("src/command_shape.ml.Flag_info.t"),
     cst_flags$5=caml_string_of_jsbytes("flags"),
     cst_anons$2=caml_string_of_jsbytes("anons"),
     cst_readme$13=caml_string_of_jsbytes("readme"),
     cst_summary$20=caml_string_of_jsbytes("summary"),
     cst_t$267=caml_string_of_jsbytes("t"),
     cst_src_command_shape_ml_616_2=
      caml_string_of_jsbytes("src/command_shape.ml:616:2"),
     cst_t$268=caml_string_of_jsbytes("t"),
     names$1=
      [0,
       caml_string_of_jsbytes("summary"),
       [0,
        caml_string_of_jsbytes("readme"),
        [0,
         caml_string_of_jsbytes("anons"),
         [0,caml_string_of_jsbytes("flags"),0]]]],
     cst_flags$6=caml_string_of_jsbytes("flags"),
     cst_anons$3=caml_string_of_jsbytes("anons"),
     cst_readme$14=caml_string_of_jsbytes("readme"),
     cst_summary$21=caml_string_of_jsbytes("summary"),
     tp_loc$48=caml_string_of_jsbytes("src/command_shape.ml.Base_info.t"),
     cst_a$99=caml_string_of_jsbytes("a"),
     cst_src_command_shape_ml_652_3=
      caml_string_of_jsbytes("src/command_shape.ml:652:30"),
     cst_subcommands$5=caml_string_of_jsbytes("subcommands"),
     cst_readme$16=caml_string_of_jsbytes("readme"),
     cst_summary$24=caml_string_of_jsbytes("summary"),
     cst_a$100=caml_string_of_jsbytes("a"),
     cst_t$269=caml_string_of_jsbytes("t"),
     cst_src_command_shape_ml_649_2=
      caml_string_of_jsbytes("src/command_shape.ml:649:2"),
     names$2=
      [0,
       caml_string_of_jsbytes("summary"),
       [0,
        caml_string_of_jsbytes("readme"),
        [0,caml_string_of_jsbytes("subcommands"),0]]],
     cst_subcommands$6=caml_string_of_jsbytes("subcommands"),
     cst_readme$17=caml_string_of_jsbytes("readme"),
     cst_summary$25=caml_string_of_jsbytes("summary"),
     tp_loc$49=caml_string_of_jsbytes("src/command_shape.ml.Group_info.t"),
     cst_child_subcommand$2=caml_string_of_jsbytes("child_subcommand"),
     cst_path_to_exe$8=caml_string_of_jsbytes("path_to_exe"),
     cst_working_dir$5=caml_string_of_jsbytes("working_dir"),
     cst_readme$19=caml_string_of_jsbytes("readme"),
     cst_summary$28=caml_string_of_jsbytes("summary"),
     cst_t$271=caml_string_of_jsbytes("t"),
     cst_src_command_shape_ml_672_2=
      caml_string_of_jsbytes("src/command_shape.ml:672:2"),
     cst_t$272=caml_string_of_jsbytes("t"),
     names$3=
      [0,
       caml_string_of_jsbytes("summary"),
       [0,
        caml_string_of_jsbytes("readme"),
        [0,
         caml_string_of_jsbytes("working_dir"),
         [0,
          caml_string_of_jsbytes("path_to_exe"),
          [0,caml_string_of_jsbytes("child_subcommand"),0]]]]],
     cst_child_subcommand$3=caml_string_of_jsbytes("child_subcommand"),
     cst_path_to_exe$9=caml_string_of_jsbytes("path_to_exe"),
     cst_working_dir$6=caml_string_of_jsbytes("working_dir"),
     cst_readme$20=caml_string_of_jsbytes("readme"),
     cst_summary$29=caml_string_of_jsbytes("summary"),
     tp_loc$50=caml_string_of_jsbytes("src/command_shape.ml.Exec_info.t"),
     cst_t$273=caml_string_of_jsbytes("t"),
     cst_Exec$11=caml_string_of_jsbytes("Exec"),
     cst_t$274=caml_string_of_jsbytes("t"),
     cst_Group$11=caml_string_of_jsbytes("Group"),
     cst_Basic$2=caml_string_of_jsbytes("Basic"),
     cst_t$275=caml_string_of_jsbytes("t"),
     cst_src_command_shape_ml_683_2=
      caml_string_of_jsbytes("src/command_shape.ml:683:2"),
     cst_t$276=caml_string_of_jsbytes("t"),
     tp_loc$51=caml_string_of_jsbytes("src/command_shape.ml.Fully_forced.t"),
     extraction_var=caml_string_of_jsbytes("COMMAND_OUTPUT_HELP_SEXP"),
     cst_core_kernel$427=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Command_shape$0=
      caml_string_of_jsbytes("Core_kernel__Command_shape"),
     cst_Core_kernel_Command_shape_=
      caml_string_of_jsbytes("Core_kernel__Command_shape_intf"),
     cst_core_kernel$428=caml_string_of_jsbytes("core_kernel"),
     cst_src_command_shape_intf_ml=
      caml_string_of_jsbytes("src/command_shape_intf.ml"),
     cst$213=caml_string_of_jsbytes(""),
     cst_core_kernel$429=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$430=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Command_shape_$0=
      caml_string_of_jsbytes("Core_kernel__Command_shape_intf"),
     pos$1=caml_string_of_jsbytes("src/host_and_port.ml:89:36"),
     pos$0=caml_string_of_jsbytes("src/host_and_port.ml:78:21"),
     pos=caml_string_of_jsbytes("src/host_and_port.ml:75:21"),
     cst_localhost_8080=caml_string_of_jsbytes("(localhost 8080)"),
     expect=[0,caml_string_of_jsbytes("localhost"),8080],
     cst_localhost_8080$0=caml_string_of_jsbytes("localhost:8080"),
     expect$0=[0,caml_string_of_jsbytes("localhost"),8080],
     cst_src_host_and_port_ml$0=caml_string_of_jsbytes("src/host_and_port.ml"),
     cst_src_host_and_port_ml_Stabl=
      caml_string_of_jsbytes("src/host_and_port.ml.Stable.V1.Serializable.t"),
     cst_Core_kernel_Host_and_port=
      caml_string_of_jsbytes("Core_kernel__Host_and_port"),
     cst_core_kernel$431=caml_string_of_jsbytes("core_kernel"),
     cst_src_host_and_port_ml=caml_string_of_jsbytes("src/host_and_port.ml"),
     cst$214=caml_string_of_jsbytes(""),
     cst_core_kernel$432=caml_string_of_jsbytes("core_kernel"),
     tp_loc$52=
      caml_string_of_jsbytes("src/host_and_port.ml.Stable.V1.Serializable.t"),
     cst_t$277=caml_string_of_jsbytes("t"),
     cst_src_host_and_port_ml_7_6=
      caml_string_of_jsbytes("src/host_and_port.ml:7:6"),
     cst_t$278=caml_string_of_jsbytes("t"),
     cst_src_host_and_port_ml$1=caml_string_of_jsbytes("src/host_and_port.ml"),
     cst_src_host_and_port_ml$2=caml_string_of_jsbytes("src/host_and_port.ml"),
     cst_src_host_and_port_ml$3=caml_string_of_jsbytes("src/host_and_port.ml"),
     cst_src_host_and_port_ml$4=caml_string_of_jsbytes("src/host_and_port.ml"),
     cst_b3b97aad9d77964b46fc90863d=
      caml_string_of_jsbytes("b3b97aad9d77964b46fc90863da08049"),
     cst_src_host_and_port_ml$5=caml_string_of_jsbytes("src/host_and_port.ml"),
     cst_t_of_sexp=caml_string_of_jsbytes(": t_of_sexp"),
     cst_src_host_and_port_ml$6=caml_string_of_jsbytes("src/host_and_port.ml"),
     cst_sexp_roundtrip=caml_string_of_jsbytes(": sexp roundtrip"),
     module_name$13=caml_string_of_jsbytes("Core_kernel.Host_and_port"),
     cst_Host_and_port=caml_string_of_jsbytes("Host_and_port"),
     cst_core_kernel$433=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Host_and_port$0=
      caml_string_of_jsbytes("Core_kernel__Host_and_port"),
     cst_Core_kernel_Pid=caml_string_of_jsbytes("Core_kernel__Pid"),
     cst_core_kernel$434=caml_string_of_jsbytes("core_kernel"),
     cst_src_pid_ml=caml_string_of_jsbytes("src/pid.ml"),
     cst$215=caml_string_of_jsbytes(""),
     cst_core_kernel$435=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Pid_Stable_V1_=
      caml_string_of_jsbytes
       ("Core_kernel__Pid.Stable.V1.Without_containers.Pid_must_be_positive"),
     cst_t$279=caml_string_of_jsbytes("t"),
     cst_src_pid_ml_50_4=caml_string_of_jsbytes("src/pid.ml:50:4"),
     cst_t$280=caml_string_of_jsbytes("t"),
     module_name$14=caml_string_of_jsbytes("Core_kernel.Pid"),
     cst_core_kernel$436=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Pid$0=caml_string_of_jsbytes("Core_kernel__Pid"),
     cst_Core_kernel_Command_intf=
      caml_string_of_jsbytes("Core_kernel__Command_intf"),
     cst_core_kernel$437=caml_string_of_jsbytes("core_kernel"),
     cst_src_command_intf_ml=caml_string_of_jsbytes("src/command_intf.ml"),
     cst$216=caml_string_of_jsbytes(""),
     cst_core_kernel$438=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$439=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Command_intf$0=
      caml_string_of_jsbytes("Core_kernel__Command_intf"),
     cst_el$14=caml_string_of_jsbytes("el"),
     cst_BUG_Fdeque_back_0_front_2=
      caml_string_of_jsbytes("BUG: Fdeque: |back| = 0, |front| >= 2"),
     cst_BUG_Fdeque_front_0_back_2=
      caml_string_of_jsbytes("BUG: Fdeque: |front| = 0, |back| >= 2"),
     cst_Core_kernel_Fdeque=caml_string_of_jsbytes("Core_kernel__Fdeque"),
     cst_core_kernel$440=caml_string_of_jsbytes("core_kernel"),
     cst_src_fdeque_ml=caml_string_of_jsbytes("src/fdeque.ml"),
     cst$217=caml_string_of_jsbytes(""),
     cst_core_kernel$441=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Fdeque_Empty=
      caml_string_of_jsbytes("Core_kernel__Fdeque.Empty"),
     acc=[0,0,0,0],
     cst_a$101=caml_string_of_jsbytes("a"),
     cst_src_fdeque_ml_315_21=caml_string_of_jsbytes("src/fdeque.ml:315:21"),
     cst_a$102=caml_string_of_jsbytes("a"),
     cst_el$13=caml_string_of_jsbytes("el"),
     cst_src_fdeque_ml_315_8=caml_string_of_jsbytes("src/fdeque.ml:315:8"),
     cst_83f96982_4992_11e6_919d_fb=
      caml_string_of_jsbytes("83f96982-4992-11e6-919d-fbddcfdca576"),
     module_name$15=[0,caml_string_of_jsbytes("Core_kernel.Fdeque")],
     cst_core_kernel$442=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Fdeque$0=caml_string_of_jsbytes("Core_kernel__Fdeque"),
     cst_Core_kernel_Fqueue=caml_string_of_jsbytes("Core_kernel__Fqueue"),
     cst_core_kernel$443=caml_string_of_jsbytes("core_kernel"),
     cst_src_fqueue_ml=caml_string_of_jsbytes("src/fqueue.ml"),
     cst$218=caml_string_of_jsbytes(""),
     cst_core_kernel$444=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$445=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Fqueue$0=caml_string_of_jsbytes("Core_kernel__Fqueue"),
     cst_Set_once_get_exn_unset=
      caml_string_of_jsbytes("[Set_once.get_exn] unset"),
     cst_Set_once_set_exn_already_s=
      caml_string_of_jsbytes("[Set_once.set_exn] already set"),
     cst_unset=caml_string_of_jsbytes("unset"),
     cst_t$282=caml_string_of_jsbytes("t"),
     cst_Core_kernel_Set_once=caml_string_of_jsbytes("Core_kernel__Set_once"),
     cst_core_kernel$446=caml_string_of_jsbytes("core_kernel"),
     cst_src_set_once_ml=caml_string_of_jsbytes("src/set_once.ml"),
     cst$219=caml_string_of_jsbytes(""),
     cst_core_kernel$447=caml_string_of_jsbytes("core_kernel"),
     cst_a$103=caml_string_of_jsbytes("a"),
     cst_src_set_once_ml_14_18=caml_string_of_jsbytes("src/set_once.ml:14:18"),
     cst_a$104=caml_string_of_jsbytes("a"),
     cst_t$281=caml_string_of_jsbytes("t"),
     cst_src_set_once_ml_14_6=caml_string_of_jsbytes("src/set_once.ml:14:6"),
     cst_core_kernel$448=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Set_once$0=
      caml_string_of_jsbytes("Core_kernel__Set_once"),
     cst$238=caml_string_of_jsbytes(" "),
     cst$239=caml_string_of_jsbytes("  "),
     cst_help$10=caml_string_of_jsbytes("help"),
     cst_build_info$3=caml_string_of_jsbytes("--build-info"),
     cst_help$11=caml_string_of_jsbytes("--help"),
     cst_version$6=caml_string_of_jsbytes("--version"),
     cst_build_info$4=caml_string_of_jsbytes("-build-info"),
     cst_help$12=caml_string_of_jsbytes("-help"),
     cst_version$7=caml_string_of_jsbytes("-version"),
     cst_help$13=caml_string_of_jsbytes("-help"),
     cst_expand_dots$0=caml_string_of_jsbytes("-expand-dots"),
     cst_flags$10=caml_string_of_jsbytes("-flags"),
     cst_r=caml_string_of_jsbytes("-r"),
     cst_help$14=caml_string_of_jsbytes("-help"),
     cst_COMMAND_OUTPUT_INSTALLATIO=
      caml_string_of_jsbytes("COMMAND_OUTPUT_INSTALLATION_BASH"),
     cst_missing_executable_name=
      caml_string_of_jsbytes("missing executable name"),
     cst_Couldn_t_choose_a_supporte=
      caml_string_of_jsbytes
       ("Couldn't choose a supported help output version for Command.exec from the given supported versions."),
     partial$1=[12,32,[2,0,[12,10,[10,0]]]],
     cst_SUBCOMMAND=caml_string_of_jsbytes("SUBCOMMAND"),
     cst_expand_subcommands_in_recu=
      caml_string_of_jsbytes(" expand subcommands in recursive help"),
     cst_expand_dots=caml_string_of_jsbytes("-expand-dots"),
     cst_show_flags_as_well_in_recu=
      caml_string_of_jsbytes(" show flags as well in recursive help"),
     cst_flags$9=caml_string_of_jsbytes("-flags"),
     cst_show_subcommands_of_subcom=
      caml_string_of_jsbytes(" show subcommands of subcommands, etc."),
     cst_recursive=caml_string_of_jsbytes("-recursive"),
     cst_explain_a_given_subcommand=
      caml_string_of_jsbytes
       ("explain a given subcommand (perhaps recursively)"),
     cst_subcommands_and_flags=
      caml_string_of_jsbytes("=== subcommands and flags ==="),
     cst_subcommands$10=caml_string_of_jsbytes("=== subcommands ==="),
     cst$237=caml_string_of_jsbytes("  "),
     cst_help$9=caml_string_of_jsbytes("[-help]"),
     cst_help$8=caml_string_of_jsbytes("help"),
     cst_cannot_parse_command_shape=
      caml_string_of_jsbytes("cannot parse command shape"),
     cst_BUG_failed_to_read=caml_string_of_jsbytes("BUG failed to read"),
     cst_stdout=caml_string_of_jsbytes("stdout"),
     cst_stderr=caml_string_of_jsbytes("stderr"),
     cst$235=caml_string_of_jsbytes(" "),
     cst$236=caml_string_of_jsbytes("."),
     opt=[0,0],
     cst_version$5=caml_string_of_jsbytes("version"),
     cst_the_version_of_this_build=
      caml_string_of_jsbytes("the version of this build"),
     cst_version$4=caml_string_of_jsbytes("-version"),
     cst_info_about_this_build=caml_string_of_jsbytes("info about this build"),
     cst_build_info$2=caml_string_of_jsbytes("-build-info"),
     cst_print_build_info_for_this_=
      caml_string_of_jsbytes(" print build info for this build"),
     cst_build_info$1=caml_string_of_jsbytes("-build-info"),
     cst_print_the_version_of_this_=
      caml_string_of_jsbytes(" print the version of this build"),
     cst_version$3=caml_string_of_jsbytes("-version"),
     cst_print_version_information=
      caml_string_of_jsbytes("print version information"),
     cst_Path_passed_to_Absolute_mu=
      caml_string_of_jsbytes("Path passed to `Absolute must be absolute"),
     cst_Path_passed_to_Relative_to=
      caml_string_of_jsbytes
       ("Path passed to `Relative_to_me must be relative"),
     cst_this_help_text=caml_string_of_jsbytes("this help text"),
     cst_help$7=caml_string_of_jsbytes("-help"),
     cst_and_arg_name_expects_exact=
      caml_string_of_jsbytes("[and_arg_name] expects exactly one name, got"),
     cst_Cannot_pass_more_than_one_=
      caml_string_of_jsbytes
       ("Cannot pass more than one of these: \n  %{Choice_name.list_to_string}"),
     cst_Cannot_pass_more_than_one_$0=
      caml_string_of_jsbytes("Cannot pass more than one of these: \n  "),
     cst_Must_pass_one_of_these_Cho=
      caml_string_of_jsbytes
       ("Must pass one of these:\n  %{Choice_name.list_to_string}"),
     cst_Must_pass_one_of_these=
      caml_string_of_jsbytes("Must pass one of these:\n  "),
     cst_Command_Spec_choose_one_ca=
      caml_string_of_jsbytes
       ("[Command.Spec.choose_one] called with duplicate name"),
     cst_For_simplicity_Command_Spe=
      caml_string_of_jsbytes
       ("For simplicity, [Command.Spec.choose_one] does not support names with commas."),
     cst_choose_one_expects_choices=
      caml_string_of_jsbytes
       ("[choose_one] expects choices to read command-line arguments."),
     cst_Arg_Tuple_is_not_supported=
      caml_string_of_jsbytes
       ("Arg.Tuple is not supported by Command.Spec.flags_of_args_exn"),
     cst_Arg_Rest_all_is_not_suppor=
      caml_string_of_jsbytes
       ("Arg.Rest_all is not supported by Command.Spec.flags_of_args_exn"),
     cst_Arg_Expand_is_not_supporte=
      caml_string_of_jsbytes
       ("Arg.Expand is not supported by Command.Spec.flags_of_args_exn"),
     cst_s_default_Sexp=caml_string_of_jsbytes("%s (default: %{Sexp})"),
     cst_default=caml_string_of_jsbytes(" (default: "),
     cst_anon=caml_string_of_jsbytes("-anon"),
     cst$231=caml_string_of_jsbytes("-"),
     cst$232=caml_string_of_jsbytes("-"),
     cst$233=caml_string_of_jsbytes("-"),
     cst_help$6=caml_string_of_jsbytes(" -help\n"),
     cst$234=caml_string_of_jsbytes("  "),
     cst_For_usage_information_run=
      caml_string_of_jsbytes("For usage information, run"),
     cst_Error_parsing_command_line=
      caml_string_of_jsbytes("Error parsing command line:"),
     cst$230=caml_string_of_jsbytes("  "),
     cst_help$4=caml_string_of_jsbytes("-help"),
     cst$227=caml_string_of_jsbytes("-"),
     cst_invalid_Key_type_name_S=
      caml_string_of_jsbytes("invalid %{Key_type} name: %S"),
     cst_invalid=caml_string_of_jsbytes("invalid "),
     cst_invalid_Key_type_name_cont=
      caml_string_of_jsbytes
       ("invalid %{Key_type} name (contains whitespace): %S"),
     cst_invalid$0=caml_string_of_jsbytes("invalid "),
     cst$228=caml_string_of_jsbytes("-"),
     cst$229=caml_string_of_jsbytes("-"),
     cst_WILL_NEVER_BE_PRINTED=caml_string_of_jsbytes("WILL NEVER BE PRINTED"),
     cst_Empty_anonymous_argument_n=
      caml_string_of_jsbytes("Empty anonymous argument name provided"),
     cst_BUG_asked_for_final_value_=
      caml_string_of_jsbytes
       ("BUG: asked for final value when doing completion"),
     cst_bug_in_command_ml$1=caml_string_of_jsbytes("bug in command.ml"),
     cst$226=caml_string_of_jsbytes("."),
     cst_help$3=caml_string_of_jsbytes("help"),
     cst$225=caml_string_of_jsbytes(" "),
     cst$224=caml_string_of_jsbytes(" "),
     cst$222=caml_string_of_jsbytes(""),
     cst$223=caml_string_of_jsbytes("_"),
     cst_Command_Spec_Arg_type_comm=
      caml_string_of_jsbytes
       ("Command.Spec.Arg_type.comma_separated: empty list not allowed"),
     cst$221=caml_string_of_jsbytes(","),
     cst_Core_kernel_Command=caml_string_of_jsbytes("Core_kernel__Command"),
     cst_core_kernel$449=caml_string_of_jsbytes("core_kernel"),
     cst_src_command_ml=caml_string_of_jsbytes("src/command.ml"),
     cst$220=caml_string_of_jsbytes(""),
     cst_core_kernel$450=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Command_Exit_c=
      caml_string_of_jsbytes("Core_kernel__Command.Exit_called"),
     cst_Core_kernel_Command_Failed=
      caml_string_of_jsbytes
       ("Core_kernel__Command.Failed_to_parse_command_line"),
     enumerate_003=[0,0,[0,1,0]],
     enumerate_004=[0,0,[0,1,0]],
     any=[0,0,0],
     at_least_once$1=[0,1,0],
     at_most_once$1=[0,0,1],
     exactly_once=[0,1,1],
     cst_path=caml_string_of_jsbytes("path"),
     cst_args=caml_string_of_jsbytes("args"),
     cst_help$5=caml_string_of_jsbytes("help"),
     comp_cword=caml_string_of_jsbytes("COMP_CWORD"),
     cst_subcommands$9=caml_string_of_jsbytes("subcommands"),
     cst_core_kernel$451=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Command$0=caml_string_of_jsbytes("Core_kernel__Command"),
     cst_short=caml_string_of_jsbytes("%{#short}"),
     cst_src_byte_units_ml$29=caml_string_of_jsbytes("src/byte_units.ml"),
     cst_short$0=caml_string_of_jsbytes("%{#short}"),
     cst_src_byte_units_ml$30=caml_string_of_jsbytes("src/byte_units.ml"),
     cst_short$1=caml_string_of_jsbytes("%{#short}"),
     cst_src_byte_units_ml$31=caml_string_of_jsbytes("src/byte_units.ml"),
     cst_short$2=caml_string_of_jsbytes("%{#short}"),
     cst_src_byte_units_ml$32=caml_string_of_jsbytes("src/byte_units.ml"),
     cst_short$3=caml_string_of_jsbytes("%{#short}"),
     cst_src_byte_units_ml$33=caml_string_of_jsbytes("src/byte_units.ml"),
     cst_short$4=caml_string_of_jsbytes("%{#short}"),
     cst_src_byte_units_ml$34=caml_string_of_jsbytes("src/byte_units.ml"),
     cst_short$5=caml_string_of_jsbytes("%{#short}"),
     cst_src_byte_units_ml$35=caml_string_of_jsbytes("src/byte_units.ml"),
     cst_short$6=caml_string_of_jsbytes("%{#short}"),
     cst_src_byte_units_ml$36=caml_string_of_jsbytes("src/byte_units.ml"),
     cst_short$7=caml_string_of_jsbytes("%{#short}"),
     cst_src_byte_units_ml$37=caml_string_of_jsbytes("src/byte_units.ml"),
     cst_short$8=caml_string_of_jsbytes("%{#short}"),
     cst_src_byte_units_ml$38=caml_string_of_jsbytes("src/byte_units.ml"),
     cst_short$9=caml_string_of_jsbytes("%{#short}"),
     cst_src_byte_units_ml$39=caml_string_of_jsbytes("src/byte_units.ml"),
     cst_short$10=caml_string_of_jsbytes("%{#short}"),
     cst_src_byte_units_ml$40=caml_string_of_jsbytes("src/byte_units.ml"),
     cst_short$11=caml_string_of_jsbytes("%{#short}"),
     cst_src_byte_units_ml$41=caml_string_of_jsbytes("src/byte_units.ml"),
     cst$241=caml_string_of_jsbytes("%{}"),
     cst_src_byte_units_ml$0=caml_string_of_jsbytes("src/byte_units.ml"),
     cst$242=caml_string_of_jsbytes("%{}"),
     cst_src_byte_units_ml$1=caml_string_of_jsbytes("src/byte_units.ml"),
     cst$243=caml_string_of_jsbytes("%{}"),
     cst_src_byte_units_ml$2=caml_string_of_jsbytes("src/byte_units.ml"),
     cst$244=caml_string_of_jsbytes("%{}"),
     cst_src_byte_units_ml$3=caml_string_of_jsbytes("src/byte_units.ml"),
     cst$245=caml_string_of_jsbytes("%{}"),
     cst_src_byte_units_ml$4=caml_string_of_jsbytes("src/byte_units.ml"),
     cst$246=caml_string_of_jsbytes("%{}"),
     cst_src_byte_units_ml$5=caml_string_of_jsbytes("src/byte_units.ml"),
     cst$247=caml_string_of_jsbytes("%{}"),
     cst_src_byte_units_ml$6=caml_string_of_jsbytes("src/byte_units.ml"),
     cst$248=caml_string_of_jsbytes("%{}"),
     cst_src_byte_units_ml$7=caml_string_of_jsbytes("src/byte_units.ml"),
     cst$249=caml_string_of_jsbytes("%{}"),
     cst_src_byte_units_ml$8=caml_string_of_jsbytes("src/byte_units.ml"),
     cst_Bytes=caml_string_of_jsbytes("Bytes"),
     cst_Exabytes=caml_string_of_jsbytes("Exabytes"),
     cst_Gigabytes=caml_string_of_jsbytes("Gigabytes"),
     cst_Kilobytes=caml_string_of_jsbytes("Kilobytes"),
     cst_Megabytes=caml_string_of_jsbytes("Megabytes"),
     cst_Petabytes=caml_string_of_jsbytes("Petabytes"),
     cst_Terabytes=caml_string_of_jsbytes("Terabytes"),
     cst_Words=caml_string_of_jsbytes("Words"),
     cst_Not_a_recognized_Byte_unit=
      caml_string_of_jsbytes("Not a recognized [Byte_units.t] representation"),
     cst_Core_kernel_Byte_units=
      caml_string_of_jsbytes("Core_kernel__Byte_units"),
     cst_core_kernel$452=caml_string_of_jsbytes("core_kernel"),
     cst_src_byte_units_ml=caml_string_of_jsbytes("src/byte_units.ml"),
     cst$240=caml_string_of_jsbytes(""),
     cst_core_kernel$453=caml_string_of_jsbytes("core_kernel"),
     cst_src_byte_units_ml$9=caml_string_of_jsbytes("src/byte_units.ml"),
     cst_src_byte_units_ml$10=caml_string_of_jsbytes("src/byte_units.ml"),
     cst_src_byte_units_ml$11=caml_string_of_jsbytes("src/byte_units.ml"),
     cst_src_byte_units_ml$12=caml_string_of_jsbytes("src/byte_units.ml"),
     cst_src_byte_units_ml$13=caml_string_of_jsbytes("src/byte_units.ml"),
     cst_src_byte_units_ml$14=caml_string_of_jsbytes("src/byte_units.ml"),
     cst_src_byte_units_ml$15=caml_string_of_jsbytes("src/byte_units.ml"),
     cst_src_byte_units_ml$16=caml_string_of_jsbytes("src/byte_units.ml"),
     cst_src_byte_units_ml$17=caml_string_of_jsbytes("src/byte_units.ml"),
     cst_src_byte_units_ml$18=caml_string_of_jsbytes("src/byte_units.ml"),
     cst_src_byte_units_ml$19=caml_string_of_jsbytes("src/byte_units.ml"),
     cst_src_byte_units_ml$20=caml_string_of_jsbytes("src/byte_units.ml"),
     cst_src_byte_units_ml$21=caml_string_of_jsbytes("src/byte_units.ml"),
     cst_src_byte_units_ml$22=caml_string_of_jsbytes("src/byte_units.ml"),
     cst_src_byte_units_ml$23=caml_string_of_jsbytes("src/byte_units.ml"),
     cst_src_byte_units_ml$24=caml_string_of_jsbytes("src/byte_units.ml"),
     cst_src_byte_units_ml$25=caml_string_of_jsbytes("src/byte_units.ml"),
     cst_src_byte_units_ml$26=caml_string_of_jsbytes("src/byte_units.ml"),
     cst_src_byte_units_ml$27=caml_string_of_jsbytes("src/byte_units.ml"),
     cst_src_byte_units_ml$28=caml_string_of_jsbytes("src/byte_units.ml"),
     cst_e5fd3c71a5d31e4005a60055a4=
      caml_string_of_jsbytes("e5fd3c71a5d31e4005a60055a47d6d2e"),
     cst_src_byte_units_ml$42=caml_string_of_jsbytes("src/byte_units.ml"),
     cst_src_byte_units_ml$43=caml_string_of_jsbytes("src/byte_units.ml"),
     cst_src_byte_units_ml$44=caml_string_of_jsbytes("src/byte_units.ml"),
     cst_src_byte_units_ml$45=caml_string_of_jsbytes("src/byte_units.ml"),
     cst_src_byte_units_ml$46=caml_string_of_jsbytes("src/byte_units.ml"),
     cst_src_byte_units_ml$47=caml_string_of_jsbytes("src/byte_units.ml"),
     cst_src_byte_units_ml$48=caml_string_of_jsbytes("src/byte_units.ml"),
     cst_src_byte_units_ml$49=caml_string_of_jsbytes("src/byte_units.ml"),
     cst_src_byte_units_ml$50=caml_string_of_jsbytes("src/byte_units.ml"),
     cst_src_byte_units_ml$51=caml_string_of_jsbytes("src/byte_units.ml"),
     cst_src_byte_units_ml$52=caml_string_of_jsbytes("src/byte_units.ml"),
     cst_src_byte_units_ml$53=caml_string_of_jsbytes("src/byte_units.ml"),
     cst_src_byte_units_ml$54=caml_string_of_jsbytes("src/byte_units.ml"),
     cst_src_byte_units_ml$55=caml_string_of_jsbytes("src/byte_units.ml"),
     cst_src_byte_units_ml$56=caml_string_of_jsbytes("src/byte_units.ml"),
     cst_src_byte_units_ml$57=caml_string_of_jsbytes("src/byte_units.ml"),
     cst_src_byte_units_ml$58=caml_string_of_jsbytes("src/byte_units.ml"),
     cst_src_byte_units_ml$59=caml_string_of_jsbytes("src/byte_units.ml"),
     cst_src_byte_units_ml$60=caml_string_of_jsbytes("src/byte_units.ml"),
     cst_src_byte_units_ml$61=caml_string_of_jsbytes("src/byte_units.ml"),
     cst_src_byte_units_ml$62=caml_string_of_jsbytes("src/byte_units.ml"),
     cst_src_byte_units_ml$63=caml_string_of_jsbytes("src/byte_units.ml"),
     cst_src_byte_units_ml$64=caml_string_of_jsbytes("src/byte_units.ml"),
     cst_src_byte_units_ml$65=caml_string_of_jsbytes("src/byte_units.ml"),
     cst_src_byte_units_ml$66=caml_string_of_jsbytes("src/byte_units.ml"),
     cst_src_byte_units_ml$67=caml_string_of_jsbytes("src/byte_units.ml"),
     cst_src_byte_units_ml$68=caml_string_of_jsbytes("src/byte_units.ml"),
     cst_src_byte_units_ml$69=caml_string_of_jsbytes("src/byte_units.ml"),
     cst_e5fd3c71a5d31e4005a60055a4$0=
      caml_string_of_jsbytes("e5fd3c71a5d31e4005a60055a47d6d2e"),
     cst_core_kernel$454=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Byte_units$0=
      caml_string_of_jsbytes("Core_kernel__Byte_units"),
     cst_Heap_block_create_exn_call=
      caml_string_of_jsbytes
       ("Heap_block.create_exn called with non heap block"),
     cst_Core_kernel_Heap_block=
      caml_string_of_jsbytes("Core_kernel__Heap_block"),
     cst_core_kernel$455=caml_string_of_jsbytes("core_kernel"),
     cst_src_heap_block_ml=caml_string_of_jsbytes("src/heap_block.ml"),
     cst$250=caml_string_of_jsbytes(""),
     cst_core_kernel$456=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$457=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Heap_block$0=
      caml_string_of_jsbytes("Core_kernel__Heap_block"),
     cst_gc_alarm=caml_string_of_jsbytes("<gc alarm>"),
     cst_max_overhead$0=caml_string_of_jsbytes("max_overhead"),
     cst_allocation_policy$0=caml_string_of_jsbytes("allocation_policy"),
     cst_custom_major_ratio$0=caml_string_of_jsbytes("custom_major_ratio"),
     cst_custom_minor_max_size$0=
      caml_string_of_jsbytes("custom_minor_max_size"),
     cst_custom_minor_ratio$0=caml_string_of_jsbytes("custom_minor_ratio"),
     cst_major_heap_increment$0=caml_string_of_jsbytes("major_heap_increment"),
     cst_minor_heap_size$0=caml_string_of_jsbytes("minor_heap_size"),
     cst_space_overhead$0=caml_string_of_jsbytes("space_overhead"),
     cst_stack_limit$0=caml_string_of_jsbytes("stack_limit"),
     cst_verbose$0=caml_string_of_jsbytes("verbose"),
     cst_window_size$0=caml_string_of_jsbytes("window_size"),
     cst_custom_minor_max_size$1=
      caml_string_of_jsbytes("custom_minor_max_size"),
     cst_custom_minor_ratio$1=caml_string_of_jsbytes("custom_minor_ratio"),
     cst_custom_major_ratio$1=caml_string_of_jsbytes("custom_major_ratio"),
     cst_window_size$1=caml_string_of_jsbytes("window_size"),
     cst_allocation_policy$1=caml_string_of_jsbytes("allocation_policy"),
     cst_stack_limit$1=caml_string_of_jsbytes("stack_limit"),
     cst_max_overhead$1=caml_string_of_jsbytes("max_overhead"),
     cst_verbose$1=caml_string_of_jsbytes("verbose"),
     cst_space_overhead$1=caml_string_of_jsbytes("space_overhead"),
     cst_major_heap_increment$1=caml_string_of_jsbytes("major_heap_increment"),
     cst_minor_heap_size$1=caml_string_of_jsbytes("minor_heap_size"),
     cst_src_gc_ml_Control_T_t=caml_string_of_jsbytes("src/gc.ml.Control.T.t"),
     cst_live_blocks$0=caml_string_of_jsbytes("live_blocks"),
     cst_compactions$0=caml_string_of_jsbytes("compactions"),
     cst_forced_major_collections$0=
      caml_string_of_jsbytes("forced_major_collections"),
     cst_fragments$0=caml_string_of_jsbytes("fragments"),
     cst_free_blocks$0=caml_string_of_jsbytes("free_blocks"),
     cst_free_words$0=caml_string_of_jsbytes("free_words"),
     cst_heap_chunks$0=caml_string_of_jsbytes("heap_chunks"),
     cst_heap_words$0=caml_string_of_jsbytes("heap_words"),
     cst_largest_free$0=caml_string_of_jsbytes("largest_free"),
     cst_live_words$0=caml_string_of_jsbytes("live_words"),
     cst_major_collections$0=caml_string_of_jsbytes("major_collections"),
     cst_major_words$0=caml_string_of_jsbytes("major_words"),
     cst_minor_collections$0=caml_string_of_jsbytes("minor_collections"),
     cst_minor_words$0=caml_string_of_jsbytes("minor_words"),
     cst_promoted_words$0=caml_string_of_jsbytes("promoted_words"),
     cst_stack_size$0=caml_string_of_jsbytes("stack_size"),
     cst_top_heap_words$0=caml_string_of_jsbytes("top_heap_words"),
     cst_forced_major_collections$1=
      caml_string_of_jsbytes("forced_major_collections"),
     cst_stack_size$1=caml_string_of_jsbytes("stack_size"),
     cst_top_heap_words$1=caml_string_of_jsbytes("top_heap_words"),
     cst_compactions$1=caml_string_of_jsbytes("compactions"),
     cst_fragments$1=caml_string_of_jsbytes("fragments"),
     cst_largest_free$1=caml_string_of_jsbytes("largest_free"),
     cst_free_blocks$1=caml_string_of_jsbytes("free_blocks"),
     cst_free_words$1=caml_string_of_jsbytes("free_words"),
     cst_live_blocks$1=caml_string_of_jsbytes("live_blocks"),
     cst_live_words$1=caml_string_of_jsbytes("live_words"),
     cst_heap_chunks$1=caml_string_of_jsbytes("heap_chunks"),
     cst_heap_words$1=caml_string_of_jsbytes("heap_words"),
     cst_major_collections$1=caml_string_of_jsbytes("major_collections"),
     cst_minor_collections$1=caml_string_of_jsbytes("minor_collections"),
     cst_major_words$1=caml_string_of_jsbytes("major_words"),
     cst_promoted_words$1=caml_string_of_jsbytes("promoted_words"),
     cst_minor_words$1=caml_string_of_jsbytes("minor_words"),
     cst_src_gc_ml_Stat_T_t=caml_string_of_jsbytes("src/gc.ml.Stat.T.t"),
     cst_Best_fit=caml_string_of_jsbytes("Best_fit"),
     cst_First_fit=caml_string_of_jsbytes("First_fit"),
     cst_Next_fit=caml_string_of_jsbytes("Next_fit"),
     cst_best_fit=caml_string_of_jsbytes("best_fit"),
     cst_first_fit=caml_string_of_jsbytes("first_fit"),
     cst_next_fit=caml_string_of_jsbytes("next_fit"),
     cst_Best_fit$0=caml_string_of_jsbytes("Best_fit"),
     cst_First_fit$0=caml_string_of_jsbytes("First_fit"),
     cst_Next_fit$0=caml_string_of_jsbytes("Next_fit"),
     cst_best_fit$0=caml_string_of_jsbytes("best_fit"),
     cst_first_fit$0=caml_string_of_jsbytes("first_fit"),
     cst_next_fit$0=caml_string_of_jsbytes("next_fit"),
     cst_src_gc_ml_Stable_Allocatio=
      caml_string_of_jsbytes("src/gc.ml.Stable.Allocation_policy.V1.t"),
     cst_Core_kernel_Gc=caml_string_of_jsbytes("Core_kernel__Gc"),
     cst_core_kernel$458=caml_string_of_jsbytes("core_kernel"),
     cst_src_gc_ml=caml_string_of_jsbytes("src/gc.ml"),
     cst$251=caml_string_of_jsbytes(""),
     cst_core_kernel$459=caml_string_of_jsbytes("core_kernel"),
     cst_t$283=caml_string_of_jsbytes("t"),
     cst_src_gc_ml_6_6=caml_string_of_jsbytes("src/gc.ml:6:6"),
     cst_t$284=caml_string_of_jsbytes("t"),
     tp_loc$53=
      caml_string_of_jsbytes("src/gc.ml.Stable.Allocation_policy.V1.t"),
     cst_forced_major_collections=
      caml_string_of_jsbytes("forced_major_collections"),
     cst_stack_size=caml_string_of_jsbytes("stack_size"),
     cst_top_heap_words=caml_string_of_jsbytes("top_heap_words"),
     cst_compactions=caml_string_of_jsbytes("compactions"),
     cst_fragments=caml_string_of_jsbytes("fragments"),
     cst_largest_free=caml_string_of_jsbytes("largest_free"),
     cst_free_blocks=caml_string_of_jsbytes("free_blocks"),
     cst_free_words=caml_string_of_jsbytes("free_words"),
     cst_live_blocks=caml_string_of_jsbytes("live_blocks"),
     cst_live_words=caml_string_of_jsbytes("live_words"),
     cst_heap_chunks=caml_string_of_jsbytes("heap_chunks"),
     cst_heap_words=caml_string_of_jsbytes("heap_words"),
     cst_major_collections=caml_string_of_jsbytes("major_collections"),
     cst_minor_collections=caml_string_of_jsbytes("minor_collections"),
     cst_major_words=caml_string_of_jsbytes("major_words"),
     cst_promoted_words=caml_string_of_jsbytes("promoted_words"),
     cst_minor_words=caml_string_of_jsbytes("minor_words"),
     cst_t$285=caml_string_of_jsbytes("t"),
     cst_src_gc_ml_21_4=caml_string_of_jsbytes("src/gc.ml:21:4"),
     cst_t$286=caml_string_of_jsbytes("t"),
     tp_loc$54=caml_string_of_jsbytes("src/gc.ml.Stat.T.t"),
     names$5=
      caml_list_of_js_array
       ([caml_string_of_jsbytes("minor_words"),
         caml_string_of_jsbytes("promoted_words"),
         caml_string_of_jsbytes("major_words"),
         caml_string_of_jsbytes("minor_collections"),
         caml_string_of_jsbytes("major_collections"),
         caml_string_of_jsbytes("heap_words"),
         caml_string_of_jsbytes("heap_chunks"),
         caml_string_of_jsbytes("live_words"),
         caml_string_of_jsbytes("live_blocks"),
         caml_string_of_jsbytes("free_words"),
         caml_string_of_jsbytes("free_blocks"),
         caml_string_of_jsbytes("largest_free"),
         caml_string_of_jsbytes("fragments"),
         caml_string_of_jsbytes("compactions"),
         caml_string_of_jsbytes("top_heap_words"),
         caml_string_of_jsbytes("stack_size"),
         caml_string_of_jsbytes("forced_major_collections")]),
     cst_forced_major_collections$2=
      caml_string_of_jsbytes("forced_major_collections"),
     cst_stack_size$2=caml_string_of_jsbytes("stack_size"),
     cst_top_heap_words$2=caml_string_of_jsbytes("top_heap_words"),
     cst_compactions$2=caml_string_of_jsbytes("compactions"),
     cst_fragments$2=caml_string_of_jsbytes("fragments"),
     cst_largest_free$2=caml_string_of_jsbytes("largest_free"),
     cst_free_blocks$2=caml_string_of_jsbytes("free_blocks"),
     cst_free_words$2=caml_string_of_jsbytes("free_words"),
     cst_live_blocks$2=caml_string_of_jsbytes("live_blocks"),
     cst_live_words$2=caml_string_of_jsbytes("live_words"),
     cst_heap_chunks$2=caml_string_of_jsbytes("heap_chunks"),
     cst_heap_words$2=caml_string_of_jsbytes("heap_words"),
     cst_major_collections$2=caml_string_of_jsbytes("major_collections"),
     cst_minor_collections$2=caml_string_of_jsbytes("minor_collections"),
     cst_major_words$2=caml_string_of_jsbytes("major_words"),
     cst_promoted_words$2=caml_string_of_jsbytes("promoted_words"),
     cst_minor_words$2=caml_string_of_jsbytes("minor_words"),
     cst_custom_minor_max_size=caml_string_of_jsbytes("custom_minor_max_size"),
     cst_custom_minor_ratio=caml_string_of_jsbytes("custom_minor_ratio"),
     cst_custom_major_ratio=caml_string_of_jsbytes("custom_major_ratio"),
     cst_window_size=caml_string_of_jsbytes("window_size"),
     cst_allocation_policy=caml_string_of_jsbytes("allocation_policy"),
     cst_stack_limit=caml_string_of_jsbytes("stack_limit"),
     cst_max_overhead=caml_string_of_jsbytes("max_overhead"),
     cst_verbose=caml_string_of_jsbytes("verbose"),
     cst_space_overhead=caml_string_of_jsbytes("space_overhead"),
     cst_major_heap_increment=caml_string_of_jsbytes("major_heap_increment"),
     cst_minor_heap_size=caml_string_of_jsbytes("minor_heap_size"),
     cst_t$287=caml_string_of_jsbytes("t"),
     cst_src_gc_ml_92_4=caml_string_of_jsbytes("src/gc.ml:92:4"),
     cst_t$288=caml_string_of_jsbytes("t"),
     tp_loc$55=caml_string_of_jsbytes("src/gc.ml.Control.T.t"),
     names$6=
      caml_list_of_js_array
       ([caml_string_of_jsbytes("minor_heap_size"),
         caml_string_of_jsbytes("major_heap_increment"),
         caml_string_of_jsbytes("space_overhead"),
         caml_string_of_jsbytes("verbose"),
         caml_string_of_jsbytes("max_overhead"),
         caml_string_of_jsbytes("stack_limit"),
         caml_string_of_jsbytes("allocation_policy"),
         caml_string_of_jsbytes("window_size"),
         caml_string_of_jsbytes("custom_major_ratio"),
         caml_string_of_jsbytes("custom_minor_ratio"),
         caml_string_of_jsbytes("custom_minor_max_size")]),
     cst_custom_minor_max_size$2=
      caml_string_of_jsbytes("custom_minor_max_size"),
     cst_custom_minor_ratio$2=caml_string_of_jsbytes("custom_minor_ratio"),
     cst_custom_major_ratio$2=caml_string_of_jsbytes("custom_major_ratio"),
     cst_window_size$2=caml_string_of_jsbytes("window_size"),
     cst_allocation_policy$2=caml_string_of_jsbytes("allocation_policy"),
     cst_stack_limit$2=caml_string_of_jsbytes("stack_limit"),
     cst_max_overhead$2=caml_string_of_jsbytes("max_overhead"),
     cst_verbose$2=caml_string_of_jsbytes("verbose"),
     cst_space_overhead$2=caml_string_of_jsbytes("space_overhead"),
     cst_major_heap_increment$2=caml_string_of_jsbytes("major_heap_increment"),
     cst_minor_heap_size$2=caml_string_of_jsbytes("minor_heap_size"),
     cst_0=caml_string_of_jsbytes("0"),
     cst_core_kernel$460=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Gc$0=caml_string_of_jsbytes("Core_kernel__Gc"),
     cst_Core_kernel_Make_stable=
      caml_string_of_jsbytes("Core_kernel__Make_stable"),
     cst_core_kernel$461=caml_string_of_jsbytes("core_kernel"),
     cst_src_make_stable_ml=caml_string_of_jsbytes("src/make_stable.ml"),
     cst$252=caml_string_of_jsbytes(""),
     cst_core_kernel$462=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$463=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Make_stable$0=
      caml_string_of_jsbytes("Core_kernel__Make_stable"),
     cst_el$16=caml_string_of_jsbytes("el"),
     cst_Core_kernel_Queue=caml_string_of_jsbytes("Core_kernel__Queue"),
     cst_core_kernel$464=caml_string_of_jsbytes("core_kernel"),
     cst_src_queue_ml=caml_string_of_jsbytes("src/queue.ml"),
     cst$253=caml_string_of_jsbytes(""),
     cst_core_kernel$465=caml_string_of_jsbytes("core_kernel"),
     cst_a$105=caml_string_of_jsbytes("a"),
     cst_src_queue_ml_34_19=caml_string_of_jsbytes("src/queue.ml:34:19"),
     cst_a$106=caml_string_of_jsbytes("a"),
     cst_el$15=caml_string_of_jsbytes("el"),
     cst_src_queue_ml_34_6=caml_string_of_jsbytes("src/queue.ml:34:6"),
     cst_b4c84254_4992_11e6_9ba7_73=
      caml_string_of_jsbytes("b4c84254-4992-11e6-9ba7-734e154027bd"),
     module_name$16=[0,caml_string_of_jsbytes("Core_kernel.Queue")],
     cst_core_kernel$466=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Queue$0=caml_string_of_jsbytes("Core_kernel__Queue"),
     cst_Core_kernel_Stable=caml_string_of_jsbytes("Core_kernel__Stable"),
     cst_core_kernel$467=caml_string_of_jsbytes("core_kernel"),
     cst_src_stable_ml=caml_string_of_jsbytes("src/stable.ml"),
     cst$254=caml_string_of_jsbytes(""),
     cst_core_kernel$468=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$469=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Stable$0=caml_string_of_jsbytes("Core_kernel__Stable"),
     cst_Neg$4=caml_string_of_jsbytes("Neg"),
     cst_Zero$8=caml_string_of_jsbytes("Zero"),
     cst_Pos$4=caml_string_of_jsbytes("Pos"),
     cst_Nan$1=caml_string_of_jsbytes("Nan"),
     cst_src_sign_or_nan_ml_Stable_=
      caml_string_of_jsbytes("src/sign_or_nan.ml.Stable.V1.t"),
     cst_Nan=caml_string_of_jsbytes("Nan"),
     cst_Neg$2=caml_string_of_jsbytes("Neg"),
     cst_Pos$2=caml_string_of_jsbytes("Pos"),
     cst_Zero$6=caml_string_of_jsbytes("Zero"),
     cst_nan$0=caml_string_of_jsbytes("nan"),
     cst_neg$1=caml_string_of_jsbytes("neg"),
     cst_pos$1=caml_string_of_jsbytes("pos"),
     cst_zero$5=caml_string_of_jsbytes("zero"),
     cst_Nan$0=caml_string_of_jsbytes("Nan"),
     cst_Neg$3=caml_string_of_jsbytes("Neg"),
     cst_Pos$3=caml_string_of_jsbytes("Pos"),
     cst_Zero$7=caml_string_of_jsbytes("Zero"),
     cst_nan$1=caml_string_of_jsbytes("nan"),
     cst_neg$2=caml_string_of_jsbytes("neg"),
     cst_pos$2=caml_string_of_jsbytes("pos"),
     cst_zero$6=caml_string_of_jsbytes("zero"),
     cst_Core_kernel_Sign_or_nan=
      caml_string_of_jsbytes("Core_kernel__Sign_or_nan"),
     cst_core_kernel$470=caml_string_of_jsbytes("core_kernel"),
     cst_src_sign_or_nan_ml=caml_string_of_jsbytes("src/sign_or_nan.ml"),
     cst$255=caml_string_of_jsbytes(""),
     cst_core_kernel$471=caml_string_of_jsbytes("core_kernel"),
     tp_loc$56=caml_string_of_jsbytes("src/sign_or_nan.ml.Stable.V1.t"),
     cst_t$289=caml_string_of_jsbytes("t"),
     cst_src_sign_or_nan_ml_6_4=
      caml_string_of_jsbytes("src/sign_or_nan.ml:6:4"),
     cst_t$290=caml_string_of_jsbytes("t"),
     name$72=caml_string_of_jsbytes("src/sign_or_nan.ml.Stable.V1.t"),
     cst_core_kernel$472=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Sign_or_nan$0=
      caml_string_of_jsbytes("Core_kernel__Sign_or_nan"),
     cst_Core_kernel_Queue_intf=
      caml_string_of_jsbytes("Core_kernel__Queue_intf"),
     cst_core_kernel$473=caml_string_of_jsbytes("core_kernel"),
     cst_src_queue_intf_ml=caml_string_of_jsbytes("src/queue_intf.ml"),
     cst$256=caml_string_of_jsbytes(""),
     cst_core_kernel$474=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$475=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Queue_intf$0=
      caml_string_of_jsbytes("Core_kernel__Queue_intf"),
     cst_Core_kernel_Printexc=caml_string_of_jsbytes("Core_kernel__Printexc"),
     cst_core_kernel$476=caml_string_of_jsbytes("core_kernel"),
     cst_src_printexc_ml=caml_string_of_jsbytes("src/printexc.ml"),
     cst$257=caml_string_of_jsbytes(""),
     cst_core_kernel$477=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$478=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Printexc$0=
      caml_string_of_jsbytes("Core_kernel__Printexc"),
     cst_t$292=caml_string_of_jsbytes("t"),
     cst_Core_kernel_Option_array=
      caml_string_of_jsbytes("Core_kernel__Option_array"),
     cst_core_kernel$479=caml_string_of_jsbytes("core_kernel"),
     cst_src_option_array_ml=caml_string_of_jsbytes("src/option_array.ml"),
     cst$258=caml_string_of_jsbytes(""),
     cst_core_kernel$480=caml_string_of_jsbytes("core_kernel"),
     cst_a$107=caml_string_of_jsbytes("a"),
     cst_src_option_array_ml_9_18=
      caml_string_of_jsbytes("src/option_array.ml:9:18"),
     cst_a$108=caml_string_of_jsbytes("a"),
     cst_t$291=caml_string_of_jsbytes("t"),
     cst_src_option_array_ml_9_6=
      caml_string_of_jsbytes("src/option_array.ml:9:6"),
     cst_core_kernel$481=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Option_array$0=
      caml_string_of_jsbytes("Core_kernel__Option_array"),
     cst_Core_kernel_Only_in_test=
      caml_string_of_jsbytes("Core_kernel__Only_in_test"),
     cst_core_kernel$482=caml_string_of_jsbytes("core_kernel"),
     cst_src_only_in_test_ml=caml_string_of_jsbytes("src/only_in_test.ml"),
     cst$259=caml_string_of_jsbytes(""),
     cst_core_kernel$483=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$484=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Only_in_test$0=
      caml_string_of_jsbytes("Core_kernel__Only_in_test"),
     cst_Core_kernel_No_polymorphic=
      caml_string_of_jsbytes("Core_kernel__No_polymorphic_compare"),
     cst_core_kernel$485=caml_string_of_jsbytes("core_kernel"),
     cst_src_no_polymorphic_compare=
      caml_string_of_jsbytes("src/no_polymorphic_compare.ml"),
     cst$260=caml_string_of_jsbytes(""),
     cst_core_kernel$486=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$487=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_No_polymorphic$0=
      caml_string_of_jsbytes("Core_kernel__No_polymorphic_compare"),
     cst_Core_kernel_Memo=caml_string_of_jsbytes("Core_kernel__Memo"),
     cst_core_kernel$488=caml_string_of_jsbytes("core_kernel"),
     cst_src_memo_ml=caml_string_of_jsbytes("src/memo.ml"),
     cst$261=caml_string_of_jsbytes(""),
     cst_core_kernel$489=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$490=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Memo$0=caml_string_of_jsbytes("Core_kernel__Memo"),
     cst_el$18=caml_string_of_jsbytes("el"),
     cst_Core_kernel_Linked_queue=
      caml_string_of_jsbytes("Core_kernel__Linked_queue"),
     cst_core_kernel$491=caml_string_of_jsbytes("core_kernel"),
     cst_src_linked_queue_ml=caml_string_of_jsbytes("src/linked_queue.ml"),
     cst$262=caml_string_of_jsbytes(""),
     cst_core_kernel$492=caml_string_of_jsbytes("core_kernel"),
     cst_a$109=caml_string_of_jsbytes("a"),
     cst_src_linked_queue_ml_9_17=
      caml_string_of_jsbytes("src/linked_queue.ml:9:17"),
     cst_a$110=caml_string_of_jsbytes("a"),
     cst_el$17=caml_string_of_jsbytes("el"),
     cst_src_linked_queue_ml_9_4=
      caml_string_of_jsbytes("src/linked_queue.ml:9:4"),
     cst_800df9a0_4992_11e6_881d_ff=
      caml_string_of_jsbytes("800df9a0-4992-11e6-881d-ffe1a5c8aced"),
     module_name$17=[0,caml_string_of_jsbytes("Core_kernel.Linked_queue")],
     cst_core_kernel$493=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Linked_queue$0=
      caml_string_of_jsbytes("Core_kernel__Linked_queue"),
     cst_Core_kernel_Explicit_depen=
      caml_string_of_jsbytes("Core_kernel__Explicit_dependencies"),
     cst_core_kernel$494=caml_string_of_jsbytes("core_kernel"),
     cst_src_explicit_dependencies_=
      caml_string_of_jsbytes("src/explicit_dependencies.ml"),
     cst$263=caml_string_of_jsbytes(""),
     cst_core_kernel$495=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$496=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Explicit_depen$0=
      caml_string_of_jsbytes("Core_kernel__Explicit_dependencies"),
     cst_Core_kernel_Ephemeron=
      caml_string_of_jsbytes("Core_kernel__Ephemeron"),
     cst_core_kernel$497=caml_string_of_jsbytes("core_kernel"),
     cst_src_ephemeron_ml=caml_string_of_jsbytes("src/ephemeron.ml"),
     cst$264=caml_string_of_jsbytes(""),
     cst_core_kernel$498=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$499=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Ephemeron$0=
      caml_string_of_jsbytes("Core_kernel__Ephemeron"),
     cst_Core_kernel_Deriving_hash_=
      caml_string_of_jsbytes("Core_kernel__Deriving_hash_intf"),
     cst_core_kernel$500=caml_string_of_jsbytes("core_kernel"),
     cst_src_deriving_hash_intf_ml=
      caml_string_of_jsbytes("src/deriving_hash_intf.ml"),
     cst$265=caml_string_of_jsbytes(""),
     cst_core_kernel$501=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$502=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Deriving_hash_$0=
      caml_string_of_jsbytes("Core_kernel__Deriving_hash_intf"),
     cst_Core_kernel_Deriving_hash=
      caml_string_of_jsbytes("Core_kernel__Deriving_hash"),
     cst_core_kernel$503=caml_string_of_jsbytes("core_kernel"),
     cst_src_deriving_hash_ml=caml_string_of_jsbytes("src/deriving_hash.ml"),
     cst$266=caml_string_of_jsbytes(""),
     cst_core_kernel$504=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$505=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Deriving_hash$0=
      caml_string_of_jsbytes("Core_kernel__Deriving_hash"),
     cst_Deque_front_index_exn=caml_string_of_jsbytes("Deque.front_index_exn"),
     cst_Deque_back_index_exn=caml_string_of_jsbytes("Deque.back_index_exn"),
     cst_el$20=caml_string_of_jsbytes("el"),
     cst_Deque_true_index_exn=caml_string_of_jsbytes("Deque.true_index_exn"),
     cst_Deque_dequeue_back_exn_pas=
      caml_string_of_jsbytes("Deque.dequeue_back_exn passed an empty queue"),
     cst_Deque_dequeue_front_exn_pa=
      caml_string_of_jsbytes("Deque.dequeue_front_exn passed an empty queue"),
     cst_Deque_peek_back_exn_passed=
      caml_string_of_jsbytes("Deque.peek_back_exn passed an empty queue"),
     cst_Deque_peek_front_exn_passe=
      caml_string_of_jsbytes("Deque.peek_front_exn passed an empty queue"),
     cst_Core_kernel_Deque=caml_string_of_jsbytes("Core_kernel__Deque"),
     cst_core_kernel$506=caml_string_of_jsbytes("core_kernel"),
     cst_src_deque_ml=caml_string_of_jsbytes("src/deque.ml"),
     cst$267=caml_string_of_jsbytes(""),
     cst_core_kernel$507=caml_string_of_jsbytes("core_kernel"),
     cst_a$111=caml_string_of_jsbytes("a"),
     cst_src_deque_ml_451_17=caml_string_of_jsbytes("src/deque.ml:451:17"),
     cst_a$112=caml_string_of_jsbytes("a"),
     cst_el$19=caml_string_of_jsbytes("el"),
     cst_src_deque_ml_451_4=caml_string_of_jsbytes("src/deque.ml:451:4"),
     cst_34c1e9ca_4992_11e6_a686_8b=
      caml_string_of_jsbytes("34c1e9ca-4992-11e6-a686-8b4bd4f87796"),
     module_name$18=[0,caml_string_of_jsbytes("Core_kernel.Deque")],
     cst_core_kernel$508=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Deque$0=caml_string_of_jsbytes("Core_kernel__Deque"),
     cst$269=caml_string_of_jsbytes("."),
     cst_invariant_pre_condition_fa=
      caml_string_of_jsbytes("invariant pre-condition failed"),
     cst_invariant_post_condition_f=
      caml_string_of_jsbytes("invariant post-condition failed"),
     cst$270=caml_string_of_jsbytes("."),
     cst_Core_kernel_Debug=caml_string_of_jsbytes("Core_kernel__Debug"),
     cst_core_kernel$509=caml_string_of_jsbytes("core_kernel"),
     cst_src_debug_ml=caml_string_of_jsbytes("src/debug.ml"),
     cst$268=caml_string_of_jsbytes(""),
     cst_core_kernel$510=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$511=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Debug$0=caml_string_of_jsbytes("Core_kernel__Debug"),
     cst_Core_kernel_Bag_intf=caml_string_of_jsbytes("Core_kernel__Bag_intf"),
     cst_core_kernel$512=caml_string_of_jsbytes("core_kernel"),
     cst_src_bag_intf_ml=caml_string_of_jsbytes("src/bag_intf.ml"),
     cst$271=caml_string_of_jsbytes(""),
     cst_core_kernel$513=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$514=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Bag_intf$0=
      caml_string_of_jsbytes("Core_kernel__Bag_intf"),
     cst_Core_kernel_Bag=caml_string_of_jsbytes("Core_kernel__Bag"),
     cst_core_kernel$515=caml_string_of_jsbytes("core_kernel"),
     cst_src_bag_ml=caml_string_of_jsbytes("src/bag.ml"),
     cst$272=caml_string_of_jsbytes(""),
     cst_core_kernel$516=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$517=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Bag$0=caml_string_of_jsbytes("Core_kernel__Bag"),
     cst_Core_kernel_Bigbuffer_inte=
      caml_string_of_jsbytes("Core_kernel__Bigbuffer_internal"),
     cst_core_kernel$518=caml_string_of_jsbytes("core_kernel"),
     cst_src_bigbuffer_internal_ml=
      caml_string_of_jsbytes("src/bigbuffer_internal.ml"),
     cst$273=caml_string_of_jsbytes(""),
     cst_core_kernel$519=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$520=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Bigbuffer_inte$0=
      caml_string_of_jsbytes("Core_kernel__Bigbuffer_internal"),
     cst_Bigbuffer_add_substitute_c=
      caml_string_of_jsbytes
       ("Bigbuffer.add_substitute: cannot find closing delimiter"),
     cst_Bigbuffer_add_subbytes=
      caml_string_of_jsbytes("Bigbuffer.add_subbytes"),
     cst_Bigbuffer_add_substring=
      caml_string_of_jsbytes("Bigbuffer.add_substring"),
     cst_Bigbuffer_nth=caml_string_of_jsbytes("Bigbuffer.nth"),
     cst_Core_kernel_Bigbuffer=
      caml_string_of_jsbytes("Core_kernel__Bigbuffer"),
     cst_core_kernel$521=caml_string_of_jsbytes("core_kernel"),
     cst_src_bigbuffer_ml=caml_string_of_jsbytes("src/bigbuffer.ml"),
     cst$274=caml_string_of_jsbytes(""),
     cst_core_kernel$522=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$523=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Bigbuffer$0=
      caml_string_of_jsbytes("Core_kernel__Bigbuffer"),
     cst_Core_kernel_Bigsubstring=
      caml_string_of_jsbytes("Core_kernel__Bigsubstring"),
     cst_core_kernel$524=caml_string_of_jsbytes("core_kernel"),
     cst_src_bigsubstring_ml=caml_string_of_jsbytes("src/bigsubstring.ml"),
     cst$275=caml_string_of_jsbytes(""),
     cst_core_kernel$525=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$526=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Bigsubstring$0=
      caml_string_of_jsbytes("Core_kernel__Bigsubstring"),
     cst_Core_kernel_Bounded_index_=
      caml_string_of_jsbytes("Core_kernel__Bounded_index_intf"),
     cst_core_kernel$527=caml_string_of_jsbytes("core_kernel"),
     cst_src_bounded_index_intf_ml=
      caml_string_of_jsbytes("src/bounded_index_intf.ml"),
     cst$276=caml_string_of_jsbytes(""),
     cst_core_kernel$528=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$529=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Bounded_index_$0=
      caml_string_of_jsbytes("Core_kernel__Bounded_index_intf"),
     cst_t$297=caml_string_of_jsbytes("t"),
     cst_src_bounded_index_ml_76_2=
      caml_string_of_jsbytes("src/bounded_index.ml:76:2"),
     cst_t$298=caml_string_of_jsbytes("t"),
     cst_t$299=caml_string_of_jsbytes("t"),
     cst_src_bounded_index_ml_98_6=
      caml_string_of_jsbytes("src/bounded_index.ml:98:6"),
     cst_t$300=caml_string_of_jsbytes("t"),
     cst_of$0=caml_string_of_jsbytes("of"),
     cst_to$0=caml_string_of_jsbytes("to"),
     cst_invalid_sexp_for_index=
      caml_string_of_jsbytes("invalid sexp for index"),
     cst_to=caml_string_of_jsbytes("to"),
     cst_of=caml_string_of_jsbytes("of"),
     cst_index_out_of_bounds$0=caml_string_of_jsbytes("index out of bounds"),
     cst_src_bounded_index_ml_Stabl=
      caml_string_of_jsbytes("src/bounded_index.ml.Stable.V1.Make.t"),
     cst_max_index=caml_string_of_jsbytes("max_index"),
     cst_min_index=caml_string_of_jsbytes("min_index"),
     cst_index=caml_string_of_jsbytes("index"),
     cst_t$293=caml_string_of_jsbytes("t"),
     cst_src_bounded_index_ml_10_6=
      caml_string_of_jsbytes("src/bounded_index.ml:10:6"),
     cst_t$294=caml_string_of_jsbytes("t"),
     tp_loc$57=
      caml_string_of_jsbytes
       ("src/bounded_index.ml.Stable.V1.Make.For_sexpable.t"),
     cst_t$295=caml_string_of_jsbytes("t"),
     cst_src_bounded_index_ml_52_10=
      caml_string_of_jsbytes("src/bounded_index.ml:52:10"),
     cst_t$296=caml_string_of_jsbytes("t"),
     cst_Core_kernel_Bounded_index=
      caml_string_of_jsbytes("Core_kernel__Bounded_index"),
     cst_core_kernel$530=caml_string_of_jsbytes("core_kernel"),
     cst_src_bounded_index_ml=caml_string_of_jsbytes("src/bounded_index.ml"),
     cst$277=caml_string_of_jsbytes(""),
     cst_core_kernel$531=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$532=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel_Bounded_index$0=
      caml_string_of_jsbytes("Core_kernel__Bounded_index"),
     cst_Core_kernel=caml_string_of_jsbytes("Core_kernel"),
     cst_core_kernel$533=caml_string_of_jsbytes("core_kernel"),
     cst_src_core_kernel_ml=caml_string_of_jsbytes("src/core_kernel.ml"),
     cst$278=caml_string_of_jsbytes(""),
     cst_core_kernel$534=caml_string_of_jsbytes("core_kernel"),
     cst_core_kernel$535=caml_string_of_jsbytes("core_kernel"),
     cst_Core_kernel$0=caml_string_of_jsbytes("Core_kernel"),
     Bin_prot_Common=global_data.Bin_prot__Common,
     Bin_prot_Shape=global_data.Bin_prot__Shape,
     Ppx_module_timer_runtime=global_data.Ppx_module_timer_runtime,
     Ppx_bench_lib_Benchmark_accumu=
      global_data.Ppx_bench_lib__Benchmark_accumulator,
     Expect_test_collector=global_data.Expect_test_collector,
     Ppx_inline_test_lib_Runtime=global_data.Ppx_inline_test_lib__Runtime,
     Base=global_data.Base,
     Stdio=global_data.Stdio,
     Bin_prot_Std=global_data.Bin_prot__Std,
     Sexplib_Conv=global_data.Sexplib__Conv,
     Typerep_lib_Make_typename=global_data.Typerep_lib__Make_typename,
     Typerep_lib_Std=global_data.Typerep_lib__Std,
     Base_With_return=global_data.Base__With_return,
     include$0=global_data.Caml,
     Stdlib=global_data.Stdlib,
     Bin_prot_Write=global_data.Bin_prot__Write,
     Assert_failure=global_data.Assert_failure,
     Stdlib_bigarray=global_data.Stdlib__bigarray,
     Sexplib0_Sexp_conv=global_data.Sexplib0__Sexp_conv,
     Bin_prot_Utils=global_data.Bin_prot__Utils,
     Bin_prot_Read=global_data.Bin_prot__Read,
     include$2=global_data.Bin_prot__Binable,
     include$4=global_data.Base__Printf,
     Stdio_Out_channel=global_data.Stdio__Out_channel,
     Base_Hash=global_data.Base__Hash,
     Sexplib0_Sexp_conv_error=global_data.Sexplib0__Sexp_conv_error,
     Ppx_compare_lib=global_data.Ppx_compare_lib,
     include$5=global_data.Base__Comparator,
     include$6=global_data.Base__Result,
     include$7=global_data.Base__Container,
     Base_Fn=global_data.Base__Fn,
     include$8=global_data.Base__Ordered_collection_common,
     Base_Field=global_data.Base__Field,
     Base_Comparable=global_data.Base__Comparable,
     include$9=global_data.Base__Sequence,
     include$11=global_data.Base__Array,
     Base_for_tests_Test_blit=global_data.Base_for_tests__Test_blit,
     include$13=global_data.Base__Float,
     Stdlib_sys=global_data.Stdlib__sys,
     Typerep_lib_Typename=global_data.Typerep_lib__Typename,
     include$15=global_data.Base__Either,
     Base_quickcheck_Generator=global_data.Base_quickcheck__Generator,
     Base_quickcheck_Observer=global_data.Base_quickcheck__Observer,
     Base_quickcheck_Shrinker=global_data.Base_quickcheck__Shrinker,
     include$17=global_data.Base__Source_code_position,
     include$18=global_data.Sexplib__Sexp,
     Base_Exn=global_data.Base__Exn,
     Base_Info=global_data.Base__Info,
     Base_Error=global_data.Base__Error,
     include$22=global_data.Base__Hash_set,
     include$23=global_data.Base__List,
     Base_Hashtbl=global_data.Base__Hashtbl,
     Base_Hashable=global_data.Base__Hashable,
     include$27=global_data.Base__Or_error,
     Expect_test_config=global_data.Expect_test_config,
     Stdlib_set=global_data.Stdlib__set,
     Base_quickcheck_Test=global_data.Base_quickcheck__Test,
     include$29=global_data.Base__Int,
     include$30=global_data.Base__Option,
     CamlinternalLazy=global_data.CamlinternalLazy,
     Splittable_random=global_data.Splittable_random,
     Base_Random=global_data.Base__Random,
     Base_Word_size=global_data.Base__Word_size,
     Base_Map_intf=global_data.Base__Map_intf,
     Base_Map=global_data.Base__Map,
     Base_Set=global_data.Base__Set,
     Expect_test_common_File=global_data.Expect_test_common__File,
     Inline_test_config=global_data.Inline_test_config,
     include$35=global_data.Base__Maybe_bound,
     include$39=global_data.Base__String,
     Base_Staged=global_data.Base__Staged,
     Base_Pretty_printer=global_data.Base__Pretty_printer,
     Base_Bool=global_data.Base__Bool,
     Base_Char=global_data.Base__Char,
     include$48=global_data.Base__Bytes,
     Base_Sign=global_data.Base__Sign,
     include$59=global_data.Base__Int32,
     include$60=global_data.Base__Int64,
     Base_Int63_emul=global_data.Base__Int63_emul,
     include$62=global_data.Base__Int63,
     include$67=global_data.Base__Unit,
     Sexplib_Std=global_data.Sexplib__Std,
     include$68=global_data.Base__Lazy,
     include$70=global_data.Base__Nativeint,
     Sexplib_Conv_error=global_data.Sexplib__Conv_error,
     Base_Nothing=global_data.Base__Nothing,
     include$72=global_data.Base__Ordering,
     include$73=global_data.Base__Ref,
     Base_quickcheck_Export=global_data.Base_quickcheck__Export,
     Stdlib_callback=global_data.Stdlib__callback,
     include$74=global_data.Typerep_lib__Std_internal,
     Sexplib0_Lazy_group_id=global_data.Sexplib0__Lazy_group_id,
     include$75=global_data.Base_bigstring,
     Md5_lib=global_data.Md5_lib,
     Stdlib_digest=global_data.Stdlib__digest,
     Bin_prot_Md5=global_data.Bin_prot__Md5,
     Stdio_In_channel=global_data.Stdio__In_channel,
     Stdlib_buffer=global_data.Stdlib__buffer,
     Base_Sexpable=global_data.Base__Sexpable,
     Base_Validate=global_data.Base__Validate,
     include$85=global_data.Base__Type_equal,
     Base_Invariant=global_data.Base__Invariant,
     include$89=global_data.Base__Uniform_array,
     Typerep_lib_Type_generic=global_data.Typerep_lib__Type_generic,
     Time_now=global_data.Time_now,
     include$125=global_data.Base__Stack,
     include$127=global_data.Stdlib__arg,
     Base_Monad=global_data.Base__Monad,
     Stdlib_filename=global_data.Stdlib__filename,
     Stdlib_list=global_data.Stdlib__list,
     Ppx_assert_lib_Runtime=global_data.Ppx_assert_lib__Runtime,
     Base_Applicative=global_data.Base__Applicative,
     include$148=global_data.Stdlib__gc,
     include$151=global_data.Base__Queue,
     Base_for_tests_Test_binary_sea=
      global_data.Base_for_tests__Test_binary_searchable,
     Base_Sign_or_nan=global_data.Base__Sign_or_nan,
     Stdlib_printexc=global_data.Stdlib__printexc,
     include$155=global_data.Base__Option_array,
     include$157=global_data.Base__Linked_queue,
     Stdlib_ephemeron=global_data.Stdlib__ephemeron,
     Base_Backtrace=global_data.Base__Backtrace,
     Stdlib_format=global_data.Stdlib__format,
     Base_Blit=global_data.Base__Blit,
     Core_kernel=[0];
    caml_register_global(4891,Core_kernel,"Core_kernel__");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Import);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel);
    caml_call1(Expect_test_collector[4][1],cst_src_import_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$0,cst);
    var
     _a_=Base[86],
     _c_=_a_[2],
     _e_=_a_[4],
     _f_=_a_[5],
     _t_=_a_[19],
     sexp_of_t=_a_[21],
     _v_=_a_[22],
     _z_=_a_[26],
     _A_=_a_[27],
     compare=_a_[29],
     hash_fold_t=_a_[31],
     _D_=_a_[32],
     t_of_sexp=_a_[33],
     sexp_of_t$0=_a_[34],
     _T_=_a_[50],
     _V_=_a_[52],
     _X_=_a_[54],
     _ai_=_a_[67],
     _ap_=_a_[74],
     _ar_=_a_[76],
     _as_=_a_[77],
     _at_=_a_[78],
     _au_=_a_[79],
     _aJ_=_a_[94],
     _aK_=_a_[95],
     _aL_=_a_[96],
     _aM_=_a_[97],
     _a2_=_a_[113],
     _a3_=_a_[114],
     _a4_=_a_[115],
     _a5_=_a_[116],
     _a6_=_a_[117],
     _a7_=_a_[118],
     _ba_=_a_[123],
     _bb_=_a_[124],
     _bd_=_a_[126],
     _bi_=_a_[131],
     _bj_=_a_[132],
     _bk_=_a_[133],
     _bl_=_a_[134],
     _bm_=_a_[135],
     _bn_=_a_[136],
     _bo_=_a_[137],
     _bs_=Stdio[4],
     _bx_=Stdio[9],
     bin_size_t=Bin_prot_Std[1],
     bin_size_t$0=Bin_prot_Std[2],
     bin_size_t$1=Bin_prot_Std[3],
     bin_size_t$2=Bin_prot_Std[4],
     bin_size_t$3=Bin_prot_Std[5],
     bin_size_t$4=Bin_prot_Std[6],
     bin_size_t$5=Bin_prot_Std[7],
     bin_size_t$6=Bin_prot_Std[8],
     bin_size_t$7=Bin_prot_Std[9],
     bin_size_t$8=Bin_prot_Std[10],
     _bA_=Bin_prot_Std[12],
     _bB_=Bin_prot_Std[13],
     _bD_=Bin_prot_Std[15],
     _bG_=Bin_prot_Std[18],
     _bH_=Bin_prot_Std[19],
     bin_size_t_frozen=Bin_prot_Std[27],
     _b6_=Bin_prot_Std[45],
     bin_write_t=Bin_prot_Std[47],
     bin_read_t=Bin_prot_Std[49],
     bin_read_t$0=Bin_prot_Std[50],
     _b__=Bin_prot_Std[52],
     bin_write_t$0=Bin_prot_Std[54],
     bin_read_t$1=Bin_prot_Std[56],
     bin_read_t$2=Bin_prot_Std[57],
     _cc_=Bin_prot_Std[59],
     bin_write_t$1=Bin_prot_Std[61],
     bin_read_t$3=Bin_prot_Std[63],
     bin_read_t$4=Bin_prot_Std[64],
     _cg_=Bin_prot_Std[66],
     bin_write_t$2=Bin_prot_Std[68],
     bin_read_t$5=Bin_prot_Std[70],
     bin_read_t$6=Bin_prot_Std[71],
     _ck_=Bin_prot_Std[73],
     bin_write_t$3=Bin_prot_Std[75],
     bin_read_t$7=Bin_prot_Std[77],
     bin_read_t$8=Bin_prot_Std[78],
     _co_=Bin_prot_Std[80],
     bin_write_t$4=Bin_prot_Std[82],
     bin_read_t$9=Bin_prot_Std[84],
     bin_read_t$10=Bin_prot_Std[85],
     _cs_=Bin_prot_Std[87],
     bin_write_t$5=Bin_prot_Std[89],
     bin_read_t$11=Bin_prot_Std[91],
     bin_read_t$12=Bin_prot_Std[92],
     _cD_=Bin_prot_Std[101],
     bin_write_t$6=Bin_prot_Std[103],
     bin_read_t$13=Bin_prot_Std[105],
     bin_read_t$14=Bin_prot_Std[106],
     _cH_=Bin_prot_Std[108],
     bin_write_t$7=Bin_prot_Std[110],
     bin_read_t$15=Bin_prot_Std[112],
     bin_read_t$16=Bin_prot_Std[113],
     _cL_=Bin_prot_Std[115],
     bin_write_t$8=Bin_prot_Std[117],
     bin_read_t$17=Bin_prot_Std[119],
     bin_read_t$18=Bin_prot_Std[120],
     _cP_=Bin_prot_Std[122],
     _cR_=Bin_prot_Std[124],
     _cT_=Bin_prot_Std[126],
     _cU_=Bin_prot_Std[127],
     _cW_=Bin_prot_Std[129],
     _cY_=Bin_prot_Std[131],
     _c0_=Bin_prot_Std[133],
     _c1_=Bin_prot_Std[134],
     _c__=Bin_prot_Std[143],
     _da_=Bin_prot_Std[145],
     _dc_=Bin_prot_Std[147],
     _dd_=Bin_prot_Std[148],
     _df_=Bin_prot_Std[150],
     _dh_=Bin_prot_Std[152],
     _dj_=Bin_prot_Std[154],
     _dk_=Bin_prot_Std[155],
     _dm_=Bin_prot_Std[157],
     _do_=Bin_prot_Std[159],
     _dq_=Bin_prot_Std[161],
     _dr_=Bin_prot_Std[162],
     _dA_=Bin_prot_Std[171],
     bin_write_t_frozen=Bin_prot_Std[173],
     bin_read_t_frozen=Bin_prot_Std[175],
     bin_read_t_frozen$0=Bin_prot_Std[176],
     include=
      [0,
       Sexplib_Conv[52],
       Sexplib_Conv[61],
       Sexplib_Conv[58],
       Sexplib_Conv[73],
       Sexplib_Conv[55],
       Sexplib_Conv[67],
       Sexplib_Conv[23],
       Sexplib_Conv[47],
       Sexplib_Conv[18],
       Sexplib_Conv[42],
       Sexplib_Conv[25],
       Sexplib_Conv[27],
       Sexplib_Conv[28]],
     _es_=include[12],
     _et_=include[13],
     _b_=_a_[1],
     _d_=_a_[3],
     _g_=_a_[6],
     _h_=_a_[7],
     _i_=_a_[8],
     _j_=_a_[9],
     _k_=_a_[10],
     _l_=_a_[11],
     _m_=_a_[12],
     _n_=_a_[13],
     _o_=_a_[14],
     _p_=_a_[15],
     _q_=_a_[16],
     _r_=_a_[17],
     _s_=_a_[18],
     _u_=_a_[20],
     _w_=_a_[23],
     _x_=_a_[24],
     _y_=_a_[25],
     _B_=_a_[28],
     _C_=_a_[30],
     _E_=_a_[35],
     _F_=_a_[36],
     _G_=_a_[37],
     _H_=_a_[38],
     _I_=_a_[39],
     _J_=_a_[40],
     _K_=_a_[41],
     _L_=_a_[42],
     _M_=_a_[43],
     _N_=_a_[44],
     _O_=_a_[45],
     _P_=_a_[46],
     _Q_=_a_[47],
     _R_=_a_[48],
     _S_=_a_[49],
     _U_=_a_[51],
     _W_=_a_[53],
     _Y_=_a_[55],
     _Z_=_a_[56],
     ___=_a_[57],
     _$_=_a_[58],
     _aa_=_a_[59],
     _ab_=_a_[60],
     _ac_=_a_[61],
     _ad_=_a_[62],
     _ae_=_a_[63],
     _af_=_a_[64],
     _ag_=_a_[65],
     _ah_=_a_[66],
     _aj_=_a_[68],
     _ak_=_a_[69],
     _al_=_a_[70],
     _am_=_a_[71],
     _an_=_a_[72],
     _ao_=_a_[73],
     _aq_=_a_[75],
     _av_=_a_[80],
     _aw_=_a_[81],
     _ax_=_a_[82],
     _ay_=_a_[83],
     _az_=_a_[84],
     _aA_=_a_[85],
     _aB_=_a_[86],
     _aC_=_a_[87],
     _aD_=_a_[88],
     _aE_=_a_[89],
     _aF_=_a_[90],
     _aG_=_a_[91],
     _aH_=_a_[92],
     _aI_=_a_[93],
     _aN_=_a_[98],
     _aO_=_a_[99],
     _aP_=_a_[100],
     _aQ_=_a_[101],
     _aR_=_a_[102],
     _aS_=_a_[103],
     _aT_=_a_[104],
     _aU_=_a_[105],
     _aV_=_a_[106],
     _aW_=_a_[107],
     _aX_=_a_[108],
     _aY_=_a_[109],
     _aZ_=_a_[110],
     _a0_=_a_[111],
     _a1_=_a_[112],
     _a8_=_a_[119],
     _a9_=_a_[120],
     _a__=_a_[121],
     _a$_=_a_[122],
     _bc_=_a_[125],
     _be_=_a_[127],
     _bf_=_a_[128],
     _bg_=_a_[129],
     _bh_=_a_[130],
     _bp_=Stdio[1],
     _bq_=Stdio[2],
     _br_=Stdio[3],
     _bt_=Stdio[5],
     _bu_=Stdio[6],
     _bv_=Stdio[7],
     _bw_=Stdio[8],
     _by_=Stdio[10],
     _bz_=Bin_prot_Std[11],
     _bC_=Bin_prot_Std[14],
     _bE_=Bin_prot_Std[16],
     _bF_=Bin_prot_Std[17],
     _bI_=Bin_prot_Std[20],
     _bJ_=Bin_prot_Std[21],
     _bK_=Bin_prot_Std[22],
     _bL_=Bin_prot_Std[23],
     _bM_=Bin_prot_Std[24],
     _bN_=Bin_prot_Std[25],
     _bO_=Bin_prot_Std[26],
     _bP_=Bin_prot_Std[28],
     _bQ_=Bin_prot_Std[29],
     _bR_=Bin_prot_Std[30],
     _bS_=Bin_prot_Std[31],
     _bT_=Bin_prot_Std[32],
     _bU_=Bin_prot_Std[33],
     _bV_=Bin_prot_Std[34],
     _bW_=Bin_prot_Std[35],
     _bX_=Bin_prot_Std[36],
     _bY_=Bin_prot_Std[37],
     _bZ_=Bin_prot_Std[38],
     _b0_=Bin_prot_Std[39],
     _b1_=Bin_prot_Std[40],
     _b2_=Bin_prot_Std[41],
     _b3_=Bin_prot_Std[42],
     _b4_=Bin_prot_Std[43],
     _b5_=Bin_prot_Std[44],
     _b7_=Bin_prot_Std[46],
     _b8_=Bin_prot_Std[48],
     _b9_=Bin_prot_Std[51],
     _b$_=Bin_prot_Std[53],
     _ca_=Bin_prot_Std[55],
     _cb_=Bin_prot_Std[58],
     _cd_=Bin_prot_Std[60],
     _ce_=Bin_prot_Std[62],
     _cf_=Bin_prot_Std[65],
     _ch_=Bin_prot_Std[67],
     _ci_=Bin_prot_Std[69],
     _cj_=Bin_prot_Std[72],
     _cl_=Bin_prot_Std[74],
     _cm_=Bin_prot_Std[76],
     _cn_=Bin_prot_Std[79],
     _cp_=Bin_prot_Std[81],
     _cq_=Bin_prot_Std[83],
     _cr_=Bin_prot_Std[86],
     _ct_=Bin_prot_Std[88],
     _cu_=Bin_prot_Std[90],
     _cv_=Bin_prot_Std[93],
     _cw_=Bin_prot_Std[94],
     _cx_=Bin_prot_Std[95],
     _cy_=Bin_prot_Std[96],
     _cz_=Bin_prot_Std[97],
     _cA_=Bin_prot_Std[98],
     _cB_=Bin_prot_Std[99],
     _cC_=Bin_prot_Std[100],
     _cE_=Bin_prot_Std[102],
     _cF_=Bin_prot_Std[104],
     _cG_=Bin_prot_Std[107],
     _cI_=Bin_prot_Std[109],
     _cJ_=Bin_prot_Std[111],
     _cK_=Bin_prot_Std[114],
     _cM_=Bin_prot_Std[116],
     _cN_=Bin_prot_Std[118],
     _cO_=Bin_prot_Std[121],
     _cQ_=Bin_prot_Std[123],
     _cS_=Bin_prot_Std[125],
     _cV_=Bin_prot_Std[128],
     _cX_=Bin_prot_Std[130],
     _cZ_=Bin_prot_Std[132],
     _c2_=Bin_prot_Std[135],
     _c3_=Bin_prot_Std[136],
     _c4_=Bin_prot_Std[137],
     _c5_=Bin_prot_Std[138],
     _c6_=Bin_prot_Std[139],
     _c7_=Bin_prot_Std[140],
     _c8_=Bin_prot_Std[141],
     _c9_=Bin_prot_Std[142],
     _c$_=Bin_prot_Std[144],
     _db_=Bin_prot_Std[146],
     _de_=Bin_prot_Std[149],
     _dg_=Bin_prot_Std[151],
     _di_=Bin_prot_Std[153],
     _dl_=Bin_prot_Std[156],
     _dn_=Bin_prot_Std[158],
     _dp_=Bin_prot_Std[160],
     _ds_=Bin_prot_Std[163],
     _dt_=Bin_prot_Std[164],
     _du_=Bin_prot_Std[165],
     _dv_=Bin_prot_Std[166],
     _dw_=Bin_prot_Std[167],
     _dx_=Bin_prot_Std[168],
     _dy_=Bin_prot_Std[169],
     _dz_=Bin_prot_Std[170],
     _dB_=Bin_prot_Std[172],
     _dC_=Bin_prot_Std[174],
     _dD_=Bin_prot_Std[177],
     _dE_=Bin_prot_Std[178],
     _dF_=Bin_prot_Std[179],
     _dG_=Bin_prot_Std[180],
     _dH_=Bin_prot_Std[181],
     _dI_=Bin_prot_Std[182],
     _dJ_=Bin_prot_Std[183],
     _dK_=Bin_prot_Std[184],
     _dL_=Bin_prot_Std[185],
     _dM_=Bin_prot_Std[186],
     _dN_=Bin_prot_Std[187],
     _dO_=Bin_prot_Std[188],
     _dP_=Bin_prot_Std[189],
     _dQ_=Bin_prot_Std[190],
     _dR_=Bin_prot_Std[191],
     _dS_=Bin_prot_Std[192],
     _dT_=Bin_prot_Std[193],
     _dU_=Bin_prot_Std[194],
     _dV_=Bin_prot_Std[195],
     _dW_=Bin_prot_Std[196],
     _dX_=Bin_prot_Std[197],
     _dY_=Bin_prot_Std[198],
     _dZ_=Bin_prot_Std[199],
     _d0_=Bin_prot_Std[200],
     _d1_=Bin_prot_Std[201],
     _d2_=Bin_prot_Std[202],
     _d3_=Bin_prot_Std[203],
     _d4_=Bin_prot_Std[204],
     _d5_=Bin_prot_Std[205],
     _d6_=Bin_prot_Std[206],
     _d7_=Bin_prot_Std[207],
     _d8_=Bin_prot_Std[208],
     _d9_=Bin_prot_Std[209],
     _d__=Bin_prot_Std[210],
     _d$_=Bin_prot_Std[211],
     _ea_=Bin_prot_Std[212],
     _eb_=Bin_prot_Std[213],
     _ec_=Bin_prot_Std[214],
     _ed_=Bin_prot_Std[215],
     _ee_=Bin_prot_Std[216],
     _ef_=Bin_prot_Std[217],
     _eg_=Bin_prot_Std[218],
     _eh_=include[1],
     _ei_=include[2],
     _ej_=include[3],
     _ek_=include[4],
     _el_=include[5],
     _em_=include[6],
     _en_=include[7],
     _eo_=include[8],
     _ep_=include[9],
     _eq_=include[10],
     _er_=include[11],
     _eu_=caml_call1(Bin_prot_Shape[3][1],cst_a),
     _ev_=caml_call1(Bin_prot_Shape[4][1],cst_src_import_ml_75_24),
     _ew_=caml_call2(Bin_prot_Shape[15],_ev_,_eu_),
     _ex_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$0),0],
     _ey_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_sexp_opaque),_ex_,_ew_],0],
     _ez_=caml_call1(Bin_prot_Shape[4][1],cst_src_import_ml_75_2),
     group=caml_call2(Bin_prot_Shape[6],_ez_,_ey_),
     _eA_=[5,caml_string_of_jsbytes("src/import.ml.sexp_opaque")],
     _fu_=[0,caml_string_of_jsbytes("src/binable0.ml"),190,2],
     _ft_=[0,caml_string_of_jsbytes("src/binable0.ml"),170,2],
     _fr_=
      [0,
       caml_string_of_jsbytes
        ("src/binable0.ml.Stable.Of_stringable.V2.Of_binable")],
     _fs_=[0,caml_string_of_jsbytes("_none_"),0,-1],
     _fp_=
      [0,
       caml_string_of_jsbytes
        ("src/binable0.ml.Stable.Of_stringable.V1.Of_binable")],
     _fq_=[0,caml_string_of_jsbytes("_none_"),0,-1],
     _fo_=
      [1,caml_string_of_jsbytes("src/binable0.ml.Stable.Of_sexpable.V2.t")],
     _fn_=
      [1,caml_string_of_jsbytes("src/binable0.ml.Stable.Of_sexpable.V1.t")],
     _fF_=[0,[2,0,[12,10,[10,0]]],caml_string_of_jsbytes("%s\n%!")],
     _gE_=
      [5,caml_string_of_jsbytes("src/perms.ml.Only_used_as_phantom_type1.t")],
     _gD_=
      [0,
       [11,
        caml_string_of_jsbytes("Unexpectedly used "),
        [2,0,[11,caml_string_of_jsbytes(" bin_io deserialization"),0]]],
       caml_string_of_jsbytes("Unexpectedly used %s bin_io deserialization")],
     _gC_=
      [0,
       [11,
        caml_string_of_jsbytes("Unexpectedly used "),
        [2,0,[11,caml_string_of_jsbytes(" bin_io serialization"),0]]],
       caml_string_of_jsbytes("Unexpectedly used %s bin_io serialization")],
     _gB_=
      [0,
       [11,
        caml_string_of_jsbytes("Unexpectedly called ["),
        [2,0,[11,caml_string_of_jsbytes(".hash_fold_t]"),0]]],
       caml_string_of_jsbytes("Unexpectedly called [%s.hash_fold_t]")],
     _gA_=
      [0,
       [11,
        caml_string_of_jsbytes("Unexpectedly called ["),
        [2,0,[11,caml_string_of_jsbytes(".compare]"),0]]],
       caml_string_of_jsbytes("Unexpectedly called [%s.compare]")],
     _gz_=
      [0,
       [11,
        caml_string_of_jsbytes("Unexpectedly called ["),
        [2,0,[11,caml_string_of_jsbytes(".t_of_sexp]"),0]]],
       caml_string_of_jsbytes("Unexpectedly called [%s.t_of_sexp]")],
     _gy_=
      [0,
       [11,
        caml_string_of_jsbytes("Unexpectedly called ["),
        [2,0,[11,caml_string_of_jsbytes(".sexp_of_t]"),0]]],
       caml_string_of_jsbytes("Unexpectedly called [%s.sexp_of_t]")],
     _gx_=[0,caml_string_of_jsbytes("Who_can_write")],
     _gc_=[0,caml_string_of_jsbytes("Who_can_write")],
     _f5_=[0,caml_string_of_jsbytes("Who_can_write")],
     _fY_=[0,caml_string_of_jsbytes("Read")],
     _fR_=[0,caml_string_of_jsbytes("src/perms.ml"),15,4],
     _fQ_=[6,caml_string_of_jsbytes("src/perms.ml.Types.Me.t")],
     _fL_=[0,caml_string_of_jsbytes("src/perms.ml"),9,4],
     _fK_=[6,caml_string_of_jsbytes("src/perms.ml.Types.Nobody.t")],
     _hp_=[0,caml_string_of_jsbytes("Ok")],
     _hq_=[0,caml_string_of_jsbytes("Error")],
     _ho_=[1,caml_string_of_jsbytes("src/result.ml.Stable.V1.t")],
     _k0_=
      [1,
       caml_string_of_jsbytes
        ("src/sequence.ml.Merge_with_duplicates_element.t")],
     _kE_=[1,caml_string_of_jsbytes("src/sequence.ml.Step.t")],
     _kx_=[0,caml_string_of_jsbytes("Done"),0],
     _lS_=[0,caml_string_of_jsbytes("First")],
     _lT_=[0,caml_string_of_jsbytes("Second")],
     _lR_=[1,caml_string_of_jsbytes("src/either.ml.Stable.V1.t")],
     _mm_=[0,caml_string_of_jsbytes("pos_cnum")],
     _mn_=[0,caml_string_of_jsbytes("pos_bol")],
     _mo_=[0,caml_string_of_jsbytes("pos_lnum")],
     _mp_=[0,caml_string_of_jsbytes("pos_fname")],
     _ml_=[0,caml_string_of_jsbytes("src/source_code_position0.ml"),7,4],
     _m7_=
      [1,
       caml_string_of_jsbytes("src/info.ml.Extend.Internal_repr.Stable.V2.t")],
     _m8_=[0,caml_string_of_jsbytes("Could_not_construct")],
     _m9_=[0,caml_string_of_jsbytes("String")],
     _m__=[0,caml_string_of_jsbytes("Exn")],
     _m$_=[0,caml_string_of_jsbytes("Sexp")],
     _na_=[0,caml_string_of_jsbytes("Tag_sexp")],
     _nb_=[0,caml_string_of_jsbytes("Tag_t")],
     _nc_=[0,caml_string_of_jsbytes("Tag_arg")],
     _nd_=[0,caml_string_of_jsbytes("Of_list")],
     _ne_=[0,caml_string_of_jsbytes("With_backtrace")],
     _m6_=[1,caml_string_of_jsbytes("src/info.ml.Sexp.t")],
     _tf_=[0,caml_string_of_jsbytes("src/hashtbl.ml"),195,5324,5344],
     _uE_=[0,caml_string_of_jsbytes("attempts")],
     _uA_=[0,caml_string_of_jsbytes("values")],
     _uB_=[0,caml_string_of_jsbytes("actual_count")],
     _uC_=[0,caml_string_of_jsbytes("expect_count")],
     _uD_=[0,caml_string_of_jsbytes("trials")],
     _uz_=[0,caml_string_of_jsbytes("_")],
     _uy_=
      [0,
       [11,
        caml_string_of_jsbytes("Generator.of_sequence: probability ["),
        [8,[0,0,0],0,0,[11,caml_string_of_jsbytes("] out of bounds"),0]]],
       caml_string_of_jsbytes
        ("Generator.of_sequence: probability [%f] out of bounds")],
     _uG_=[0,104758188],
     _wb_=[0,caml_string_of_jsbytes("_")],
     _wa_=[0,caml_string_of_jsbytes("_")],
     _v$_=[0,caml_string_of_jsbytes("_")],
     _vY_=[0,caml_string_of_jsbytes("_")],
     _vw_=[0,caml_string_of_jsbytes("src/map.ml"),92,2476,2490],
     _vm_=[0,caml_string_of_jsbytes("Unequal")],
     _vn_=[0,caml_string_of_jsbytes("Right")],
     _vl_=[0,caml_string_of_jsbytes("Left")],
     _vq_=[1,caml_string_of_jsbytes(" 00674be9fe8dfe9e9ad476067d7d8101 ")],
     _vr_=[0,caml_string_of_jsbytes("")],
     _wx_=[0,caml_string_of_jsbytes("Unbounded")],
     _wy_=[0,caml_string_of_jsbytes("Incl")],
     _wz_=[0,caml_string_of_jsbytes("Excl")],
     _ww_=[1,caml_string_of_jsbytes("src/maybe_bound.ml.Stable.V1.t")],
     _wl_=[0,[0,caml_string_of_jsbytes("Unbounded"),0],0],
     _w3_=[0,caml_string_of_jsbytes("_")],
     _w2_=[0,caml_string_of_jsbytes("_")],
     _w1_=[0,caml_string_of_jsbytes("_")],
     _wU_=[0,caml_string_of_jsbytes("_")],
     _xn_=[0,caml_string_of_jsbytes("src/list.ml.Duplicate_found")],
     _xo_=[0,caml_string_of_jsbytes("_none_"),0,-1],
     _xl_=[0,caml_string_of_jsbytes("src/list.ml"),21,24],
     _xk_=[0,caml_string_of_jsbytes("src/list.ml"),20,24],
     _yv_=[0,caml_string_of_jsbytes("src/union_find.ml"),58,16],
     _yy_=[0,caml_string_of_jsbytes("src/doubly_linked.ml"),285,6],
     _yx_=[0,caml_string_of_jsbytes("src/doubly_linked.ml"),286,6],
     _yw_=[0,caml_string_of_jsbytes("src/doubly_linked.ml"),287,6],
     _yz_=[0,caml_string_of_jsbytes("src/doubly_linked.ml"),292,4],
     _zi_=[0,caml_string_of_jsbytes("failure building sexp")],
     _zh_=
      [0,
       caml_string_of_jsbytes
        ("could not build sexp for exn raised when building sexp for value")],
     _zg_=[5,caml_string_of_jsbytes("src/sexp.ml.no_raise")],
     _y4_=[0,caml_string_of_jsbytes("sexp_parse_error")],
     _yT_=[1,caml_string_of_jsbytes("src/sexp.ml.Stable.V1.t")],
     _zM_=[0,caml_string_of_jsbytes("src/hash_queue.ml"),57,10],
     _zN_=[0,caml_string_of_jsbytes("src/hash_queue.ml"),55,18],
     _zO_=[0,caml_string_of_jsbytes("src/hash_queue.ml"),46,6],
     _BM_=[0,caml_string_of_jsbytes("_")],
     _BL_=[0,caml_string_of_jsbytes("_")],
     _BK_=[0,caml_string_of_jsbytes("_")],
     _BJ_=[0,caml_string_of_jsbytes("_")],
     _BI_=[0,caml_string_of_jsbytes("\n")],
     _BH_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes("  "),
         [2,0,[11,caml_string_of_jsbytes("  |"),[2,0,[12,124,0]]]]]],
       caml_string_of_jsbytes("%s  %s  |%s|")],
     _BG_=
      [0,
       [2,
        0,
        [12,
         32,
         [2,0,[12,32,[2,0,[12,32,[2,0,[12,32,[2,0,[12,32,partial$0]]]]]]]]]],
       caml_string_of_jsbytes
        ("%s %s %s %s %s %s %s %s  %s %s %s %s %s %s %s %s")],
     _BF_=[0,[4,6,[0,2,2],0,0],caml_string_of_jsbytes("%02x")],
     _BE_=[0,[4,6,[0,2,8],0,0],caml_string_of_jsbytes("%08x")],
     _HF_=[1,0],
     _HG_=[1,1],
     _HH_=[1,2],
     _HE_=[1,caml_string_of_jsbytes("src/sign.ml.Stable.V1.t")],
     _Hw_=[0,caml_string_of_jsbytes("Neg")],
     _Hx_=[0,caml_string_of_jsbytes("Zero")],
     _Hy_=[0,caml_string_of_jsbytes("Pos")],
     _Hz_=
      [0,
       [0,caml_string_of_jsbytes("Neg"),0],
       [0,
        [0,caml_string_of_jsbytes("Zero"),0],
        [0,[0,caml_string_of_jsbytes("Pos"),0],0]]],
     _K7_=[1,caml_string_of_jsbytes(" 86ba5df747eec837f0b391dd49f33f9e ")],
     _K8_=[0,caml_string_of_jsbytes("")],
     _L6_=[0,caml_string_of_jsbytes("src/nothing.ml"),13,259,276],
     _MS_=[1,caml_string_of_jsbytes("src/ordering.ml.t")],
     _MN_=
      [0,
       [0,caml_string_of_jsbytes("Less"),0],
       [0,
        [0,caml_string_of_jsbytes("Equal"),0],
        [0,[0,caml_string_of_jsbytes("Greater"),0],0]]],
     _Q8_=[5,caml_string_of_jsbytes("src/std_internal.ml.sexp_opaque")],
     _Pb_=[0,caml_string_of_jsbytes("src/std_internal.ml.Bug")],
     _Pc_=[0,caml_string_of_jsbytes("_none_"),0,-1],
     _Q9_=[0,[4,0,0,0,[12,66,0]],caml_string_of_jsbytes("%dB")],
     _Q__=[0,[8,[0,0,3],0,0,[12,75,0]],caml_string_of_jsbytes("%gK")],
     _Q$_=[0,[8,[0,0,3],0,0,[12,77,0]],caml_string_of_jsbytes("%gM")],
     _Ra_=[0,[8,[0,0,3],0,0,[12,71,0]],caml_string_of_jsbytes("%gG")],
     _Tb_=
      [0,
       [11,
        caml_string_of_jsbytes("Bigstring.set_head_padded_fixed_string: "),
        [3,0,[11,caml_string_of_jsbytes(" is longer than "),[4,0,0,0,0]]]],
       caml_string_of_jsbytes
        ("Bigstring.set_head_padded_fixed_string: %S is longer than %d")],
     _Ta_=
      [0,
       [11,
        caml_string_of_jsbytes("Bigstring.set_tail_padded_fixed_string: "),
        [3,0,[11,caml_string_of_jsbytes(" is longer than "),[4,0,0,0,0]]]],
       caml_string_of_jsbytes
        ("Bigstring.set_tail_padded_fixed_string: %S is longer than %d")],
     _S5_=[0,caml_string_of_jsbytes("pos_after_data")],
     _S6_=[0,caml_string_of_jsbytes("start_pos")],
     _S7_=[0,caml_string_of_jsbytes("bin_prot_size_header_length")],
     _S8_=[0,caml_string_of_jsbytes("data_len")],
     _S9_=[0,caml_string_of_jsbytes("total_len")],
     _S1_=[0,caml_string_of_jsbytes("pos")],
     _S2_=[0,caml_string_of_jsbytes("pos_after_writing")],
     _S3_=[0,caml_string_of_jsbytes("bigstring_length")],
     _S0_=[0,caml_string_of_jsbytes("src/bigstring.ml"),95,2589,2609],
     _S4_=[0,caml_string_of_jsbytes("src/bigstring.ml"),99,2732,2744],
     _S__=[0,caml_string_of_jsbytes("src/bigstring.ml"),109,3229,3241],
     _Tf_=[0,caml_string_of_jsbytes("src/core_bin_prot.ml"),50,4],
     _Te_=[0,caml_string_of_jsbytes("src/core_bin_prot.ml"),41,4],
     _Td_=[0,caml_string_of_jsbytes("src/core_bin_prot.ml"),24,4],
     _Tc_=[0,caml_string_of_jsbytes("src/core_bin_prot.ml"),14,4],
     _TL_=[0,0,[0,6,0]],
     _Ux_=[0,caml_string_of_jsbytes("src/zone.ml"),364,8],
     _Uw_=
      [0,
       [11,caml_string_of_jsbytes("UTC"),[2,0,[4,0,0,0,0]]],
       caml_string_of_jsbytes("UTC%s%d")],
     _Uv_=
      [0,
       [2,0,[11,caml_string_of_jsbytes(" - "),[2,0,0]]],
       caml_string_of_jsbytes("%s - %s")],
     _Uu_=[0,caml_string_of_jsbytes("src/zone.ml"),336,10],
     _Ut_=
      [0,
       [11,
        caml_string_of_jsbytes("version ("),
        [0,[11,caml_string_of_jsbytes(") is invalid"),0]]],
       caml_string_of_jsbytes("version (%c) is invalid")],
     _Um_=[0,caml_string_of_jsbytes("leap_seconds")],
     _Un_=[0,caml_string_of_jsbytes("default_local_time_type")],
     _Uo_=[0,caml_string_of_jsbytes("last_regime_index")],
     _Up_=[0,caml_string_of_jsbytes("transitions")],
     _Uq_=[0,caml_string_of_jsbytes("digest")],
     _Ur_=[0,caml_string_of_jsbytes("original_filename")],
     _Us_=[0,caml_string_of_jsbytes("name")],
     _Ul_=[0,caml_string_of_jsbytes("src/zone.ml"),89,6],
     _Ub_=[0,caml_string_of_jsbytes("new_regime")],
     _Uc_=[0,caml_string_of_jsbytes("start_time_in_seconds_since_epoch")],
     _Ua_=[0,caml_string_of_jsbytes("src/zone.ml"),82,8],
     _T6_=[0,caml_string_of_jsbytes("seconds")],
     _T7_=[0,caml_string_of_jsbytes("time_in_seconds_since_epoch")],
     _T5_=[0,caml_string_of_jsbytes("src/zone.ml"),74,8],
     _TY_=[0,caml_string_of_jsbytes("abbrv")],
     _TZ_=[0,caml_string_of_jsbytes("is_dst")],
     _T0_=[0,caml_string_of_jsbytes("utc_offset_in_seconds")],
     _TX_=[0,caml_string_of_jsbytes("src/zone.ml"),62,8],
     _TR_=[0,caml_string_of_jsbytes("src/zone.ml.Invalid_file_format")],
     _TS_=[0,caml_string_of_jsbytes("_none_"),0,-1],
     _Uy_=
      [0,
       caml_string_of_jsbytes("America/New_York"),
       [0,
        caml_string_of_jsbytes("Europe/London"),
        [0,
         caml_string_of_jsbytes("Asia/Hong_Kong"),
         [0,caml_string_of_jsbytes("America/Chicago"),0]]]],
     _Vp_=
      [0,
       [11,
        caml_string_of_jsbytes("Univ_map.change_exn on unknown key "),
        [2,0,0]],
       caml_string_of_jsbytes("Univ_map.change_exn on unknown key %s")],
     _Vo_=
      [0,
       [11,
        caml_string_of_jsbytes("Univ_map.add_exn on existing key "),
        [2,0,0]],
       caml_string_of_jsbytes("Univ_map.add_exn on existing key %s")],
     _Vn_=
      [0,
       [11,
        caml_string_of_jsbytes("Univ_map.find_exn on unknown key "),
        [2,0,0]],
       caml_string_of_jsbytes("Univ_map.find_exn on unknown key %s")],
     _Vl_=[0,caml_string_of_jsbytes("_")],
     _Vk_=[0,caml_string_of_jsbytes("src/univ_map.ml"),78,8],
     _Vm_=[0,caml_string_of_jsbytes("src/univ_map.ml"),76,2305,2329],
     _Vi_=[0,caml_string_of_jsbytes("_")],
     _Vg_=[0,caml_string_of_jsbytes("type_id2")],
     _Vh_=[0,caml_string_of_jsbytes("type_id1")],
     _Vj_=[0,caml_string_of_jsbytes("key")],
     _Vd_=[0,caml_string_of_jsbytes("<uid>")],
     _Ve_=[0,caml_string_of_jsbytes("uid")],
     _Vf_=[0,caml_string_of_jsbytes("name")],
     _Vs_=[0,caml_string_of_jsbytes("Nanosecond")],
     _Vt_=[0,caml_string_of_jsbytes("Microsecond")],
     _Vu_=[0,caml_string_of_jsbytes("Millisecond")],
     _Vv_=[0,caml_string_of_jsbytes("Second")],
     _Vw_=[0,caml_string_of_jsbytes("Minute")],
     _Vx_=[0,caml_string_of_jsbytes("Hour")],
     _Vy_=[0,caml_string_of_jsbytes("Day")],
     _VS_=
      [0,
       [11,
        caml_string_of_jsbytes("Immediate.value_as_int_exn: typename:"),
        [3,0,0]],
       caml_string_of_jsbytes("Immediate.value_as_int_exn: typename:%S")],
     _VR_=
      [0,
       [11,
        caml_string_of_jsbytes("Immediate.int_as_value_exn: typename:"),
        [3,0,[11,caml_string_of_jsbytes(" int:"),[4,0,0,0,0]]]],
       caml_string_of_jsbytes
        ("Immediate.int_as_value_exn: typename:%S int:%d")],
     _VQ_=
      [0,
       [11,
        caml_string_of_jsbytes("type "),
        [2,
         0,
         [11,caml_string_of_jsbytes(" is not independent of its arguments"),0]]],
       caml_string_of_jsbytes("type %s is not independent of its arguments")],
     _VP_=
      [0,
       [11,
        caml_string_of_jsbytes("type "),
        [2,
         0,
         [11,
          caml_string_of_jsbytes(" does not have desired immediacy: wanted "),
          [2,0,[11,caml_string_of_jsbytes(" but got "),[2,0,0]]]]]],
       caml_string_of_jsbytes
        ("type %s does not have desired immediacy: wanted %s but got %s")],
     _VO_=[0,caml_string_of_jsbytes("src/type_immediacy.ml"),204,29],
     _VI_=[1,0],
     _VJ_=[1,0],
     _VK_=[1,0],
     _VL_=[1,1],
     _VM_=[1,255],
     _WA_=
      [0,
       [11,caml_string_of_jsbytes("Day_of_week.of_string: "),[3,0,0]],
       caml_string_of_jsbytes("Day_of_week.of_string: %S")],
     _Wz_=
      [0,
       [11,caml_string_of_jsbytes("Day_of_week.of_int_exn: "),[4,0,0,0,0]],
       caml_string_of_jsbytes("Day_of_week.of_int_exn: %d")],
     _Wy_=
      [0,
       [11,caml_string_of_jsbytes("Day_of_week.of_string: "),[3,0,0]],
       caml_string_of_jsbytes("Day_of_week.of_string: %S")],
     _Wg_=[1,caml_string_of_jsbytes("src/day_of_week.ml.Stable.V1.T.t")],
     _Wb_=
      [0,
       [0,caml_string_of_jsbytes("Sun"),0],
       [0,
        [0,caml_string_of_jsbytes("Mon"),0],
        [0,
         [0,caml_string_of_jsbytes("Tue"),0],
         [0,
          [0,caml_string_of_jsbytes("Wed"),0],
          [0,
           [0,caml_string_of_jsbytes("Thu"),0],
           [0,
            [0,caml_string_of_jsbytes("Fri"),0],
            [0,[0,caml_string_of_jsbytes("Sat"),0],0]]]]]]],
     _WN_=[12,93,0],
     _WO_=[0,0],
     _WP_=[0,0],
     _WM_=
      [0,
       [2,
        0,
        [12,
         46,
         [2,
          0,
          [11,
           caml_string_of_jsbytes(": "),
           [4,
            0,
            0,
            0,
            [11,
             caml_string_of_jsbytes(" out of range [0, "),
             [4,0,0,0,[12,93,0]]]]]]]],
       caml_string_of_jsbytes("%s.%s: %d out of range [0, %d]")],
     _WK_=
      [0,
       [2,
        0,
        [12,
         46,
         [2,
          0,
          [11,
           caml_string_of_jsbytes(": pos="),
           [4,
            0,
            0,
            0,
            [11,
             caml_string_of_jsbytes(" out of range for string of length "),
             [4,0,0,0,0]]]]]]],
       caml_string_of_jsbytes
        ("%s.%s: pos=%d out of range for string of length %d")],
     _WL_=
      [0,
       [2,
        0,
        [12,
         46,
         [2,
          0,
          [11,
           caml_string_of_jsbytes(": "),
           [4,
            0,
            0,
            0,
            [11,
             caml_string_of_jsbytes(" digits do not fit at pos "),
             [4,
              0,
              0,
              0,
              [11,caml_string_of_jsbytes(" in string of length "),[4,0,0,0,0]]]]]]]]],
       caml_string_of_jsbytes
        ("%s.%s: %d digits do not fit at pos %d in string of length %d")],
     _WJ_=
      [0,
       [2,
        0,
        [12,
         46,
         [2,
          0,
          [11,
           caml_string_of_jsbytes(": scale="),
           [7,
            0,
            0,
            0,
            [11,
             caml_string_of_jsbytes(" out of range ["),
             [7,0,0,0,[11,caml_string_of_jsbytes(", "),[7,0,0,0,[12,93,0]]]]]]]]]],
       caml_string_of_jsbytes("%s.%s: scale=%Ld out of range [%Ld, %Ld]")],
     _WI_=
      [0,
       [2,
        0,
        [12,
         46,
         [2,
          0,
          [11,
           caml_string_of_jsbytes(": digits="),
           [4,
            0,
            0,
            0,
            [11,caml_string_of_jsbytes(" is not a positive number"),0]]]]]],
       caml_string_of_jsbytes("%s.%s: digits=%d is not a positive number")],
     _WH_=
      [0,
       [2,
        0,
        [12,
         46,
         [2,
          0,
          [11,
           caml_string_of_jsbytes(": decimals="),
           [4,0,0,0,[11,caml_string_of_jsbytes(" is negative"),0]]]]]],
       caml_string_of_jsbytes("%s.%s: decimals=%d is negative")],
     _WG_=
      [0,
       [2,
        0,
        [12,
         46,
         [2,0,[11,caml_string_of_jsbytes(": invalid decimal character"),0]]]],
       caml_string_of_jsbytes("%s.%s: invalid decimal character")],
     _WF_=
      [0,
       [2,
        0,
        [12,
         46,
         [2,0,[11,caml_string_of_jsbytes(": overflow reading int63"),0]]]],
       caml_string_of_jsbytes("%s.%s: overflow reading int63")],
     _WD_=[0,caml_string_of_jsbytes("Toward_negative_infinity")],
     _WE_=[0,caml_string_of_jsbytes("Toward_positive_infinity")],
     _W4_=
      [0,
       [11,caml_string_of_jsbytes("Invalid month: "),[2,0,0]],
       caml_string_of_jsbytes("Invalid month: %s")],
     _W2_=
      [0,
       [11,caml_string_of_jsbytes("Month.of_int_exn "),[4,0,0,0,0]],
       caml_string_of_jsbytes("Month.of_int_exn %d")],
     _WQ_=[0,caml_string_of_jsbytes("Jan")],
     _WR_=[0,caml_string_of_jsbytes("Feb")],
     _WS_=[0,caml_string_of_jsbytes("Mar")],
     _WT_=[0,caml_string_of_jsbytes("Apr")],
     _WU_=[0,caml_string_of_jsbytes("May")],
     _WV_=[0,caml_string_of_jsbytes("Jun")],
     _WW_=[0,caml_string_of_jsbytes("Jul")],
     _WX_=[0,caml_string_of_jsbytes("Aug")],
     _WY_=[0,caml_string_of_jsbytes("Sep")],
     _WZ_=[0,caml_string_of_jsbytes("Oct")],
     _W0_=[0,caml_string_of_jsbytes("Nov")],
     _W1_=[0,caml_string_of_jsbytes("Dec")],
     _Xm_=[0,caml_string_of_jsbytes("upper_bound")],
     _Xn_=[0,caml_string_of_jsbytes("lower_bound")],
     _Xi_=[0,caml_string_of_jsbytes("src/date0.ml"),421,6],
     _Xb_=[0,caml_string_of_jsbytes("src/date0.ml"),240,10],
     _Xa_=
      [0,
       [11,
        caml_string_of_jsbytes("Date.of_string ("),
        [2,0,[11,caml_string_of_jsbytes("): "),[2,0,0]]]],
       caml_string_of_jsbytes("Date.of_string (%s): %s")],
     _W7_=
      [11,
       caml_string_of_jsbytes(" ~d:"),
       [4,0,0,0,[11,caml_string_of_jsbytes(" error: "),[2,0,0]]]],
     _W8_=[0,0],
     _W9_=
      [0,
       [4,0,0,0,[11,caml_string_of_jsbytes(" day month violation"),0]],
       caml_string_of_jsbytes("%d day month violation")],
     _Xj_=[0,0,3,2,5,0,3,5,1,4,6,2,4],
     _Xk_=[0,0,31,59,90,120,151,181,212,243,273,304,334],
     _Xl_=[0,0,31,60,91,121,152,182,213,244,274,305,335],
     _Xy_=
      [0,
       [11,
        caml_string_of_jsbytes("Ofday.of_string_iso8601_extended: "),
        [2,0,0]],
       caml_string_of_jsbytes("Ofday.of_string_iso8601_extended: %s")],
     _Xx_=
      [0,
       [11,caml_string_of_jsbytes("invalid second: "),[4,3,0,0,0]],
       caml_string_of_jsbytes("invalid second: %i")],
     _Xw_=[0,caml_string_of_jsbytes("src/ofday_helpers.ml"),76,22],
     _Xs_=
      [0,
       [0,[11,caml_string_of_jsbytes(".M."),0]],
       caml_string_of_jsbytes("%c.M.")],
     _Xt_=
      [0,
       [0,[11,caml_string_of_jsbytes(".M"),0]],
       caml_string_of_jsbytes("%c.M")],
     _Xu_=[0,[0,[12,77,0]],caml_string_of_jsbytes("%cM")],
     _Xv_=[0,[0,0],caml_string_of_jsbytes("%c")],
     _aac_=
      [0,
       caml_string_of_jsbytes
        ("src/float_with_finite_only_serialization.ml.Stable.V1.Nan_or_inf")],
     _aad_=[0,caml_string_of_jsbytes("_none_"),0,-1],
     _aav_=
      [0,
       [11,
        caml_string_of_jsbytes("Percent.of_string: must end in x, "),
        [12,37,[11,caml_string_of_jsbytes(", or bp: "),[2,0,0]]]],
       caml_string_of_jsbytes
        ("Percent.of_string: must end in x, %%, or bp: %s")],
     _aau_=[0,[8,[0,0,4],0,[0,6],0],caml_string_of_jsbytes("%.6G")],
     _aam_=[0,[8,[0,0,5],0,0,0],caml_string_of_jsbytes("%F")],
     _aan_=[0,[8,[0,0,1],0,1,0],caml_string_of_jsbytes("%.*e")],
     _aao_=[0,[8,[0,0,2],0,1,0],caml_string_of_jsbytes("%.*E")],
     _aap_=[0,[8,[0,0,0],0,1,0],caml_string_of_jsbytes("%.*f")],
     _aaq_=[0,[8,[0,0,3],0,1,0],caml_string_of_jsbytes("%.*g")],
     _aar_=[0,[8,[0,0,4],0,1,0],caml_string_of_jsbytes("%.*G")],
     _aas_=[0,[8,[0,0,6],0,1,0],caml_string_of_jsbytes("%.*h")],
     _aat_=[0,[8,[0,0,7],0,1,0],caml_string_of_jsbytes("%.*H")],
     _aae_=[0,caml_string_of_jsbytes("Ocaml")],
     _aaf_=[0,caml_string_of_jsbytes("Exponent")],
     _aag_=[0,caml_string_of_jsbytes("Exponent_E")],
     _aah_=[0,caml_string_of_jsbytes("Decimal")],
     _aai_=[0,caml_string_of_jsbytes("Compact")],
     _aaj_=[0,caml_string_of_jsbytes("Compact_E")],
     _aak_=[0,caml_string_of_jsbytes("Hex")],
     _aal_=[0,caml_string_of_jsbytes("Hex_E")],
     _aaJ_=
      [0,
       [4,3,0,0,[11,caml_string_of_jsbytes("ns"),0]],
       caml_string_of_jsbytes("%ins")],
     _aaI_=[0,caml_string_of_jsbytes("src/span_helpers.ml"),15,2],
     _aaG_=
      [0,
       [4,0,0,0,[12,46,[4,0,0,0,[2,0,0]]]],
       caml_string_of_jsbytes("%d.%d%s")],
     _aaH_=[0,[4,0,0,0,[2,0,0]],caml_string_of_jsbytes("%d%s")],
     _aaF_=[0,caml_string_of_jsbytes("percent")],
     _aa6_=[0,[8,[0,0,3],0,1,0],caml_string_of_jsbytes("%.*g")],
     _aa5_=[0,[8,[0,0,3],0,[0,1],0],caml_string_of_jsbytes("%.1g")],
     _aa0_=[0,2],
     _aa3_=[0,1],
     _aa4_=[0,0],
     _aa2_=[0,3],
     _aa1_=[0,4],
     _aaZ_=[0,[8,[0,0,3],0,0,[2,0,0]],caml_string_of_jsbytes("%g%s")],
     _aaX_=
      [0,
       caml_string_of_jsbytes
        ("src/span_float.ml.Stable.V1.T_of_sexp_expected_atom_but_got")],
     _aaY_=[0,caml_string_of_jsbytes("_none_"),0,-1],
     _aaU_=[0,caml_string_of_jsbytes("src/span_float.ml.Stable.V1.T_of_sexp")],
     _aaV_=[0,caml_string_of_jsbytes("_none_"),0,-1],
     _aaS_=
      [0,
       [11,
        caml_string_of_jsbytes("Span.of_string could not parse '"),
        [2,0,[11,caml_string_of_jsbytes("': "),[2,0,0]]]],
       caml_string_of_jsbytes("Span.of_string could not parse '%s': %s")],
     _aaL_=[0,caml_string_of_jsbytes("ns")],
     _aaM_=[0,caml_string_of_jsbytes("us")],
     _aaN_=[0,caml_string_of_jsbytes("ms")],
     _aaO_=[0,caml_string_of_jsbytes("sec")],
     _aaP_=[0,caml_string_of_jsbytes("min")],
     _aaQ_=[0,caml_string_of_jsbytes("hr")],
     _aaR_=[0,caml_string_of_jsbytes("sign")],
     _aaK_=[0,caml_string_of_jsbytes("src/span_float.ml"),8,6],
     _abn_=
      [0,
       [11,
        caml_string_of_jsbytes("Ofday.of_string_iso8601_extended("),
        [2,0,[11,caml_string_of_jsbytes("): "),[2,0,0]]]],
       caml_string_of_jsbytes("Ofday.of_string_iso8601_extended(%s): %s")],
     _abm_=[0,caml_string_of_jsbytes("src/ofday_float.ml"),152,6],
     _abj_=[0,0],
     _abk_=[0,0],
     _abl_=[0,0],
     _abi_=[0,0],
     _abN_=
      [0,
       [11,
        caml_string_of_jsbytes("unable to lookup Zone "),
        [2,
         0,
         [11,caml_string_of_jsbytes(".  Try using Core.Time.of_string"),0]]],
       caml_string_of_jsbytes
        ("unable to lookup Zone %s.  Try using Core.Time.of_string")],
     _abL_=[0,caml_string_of_jsbytes("src/time.ml.Make.Time_of_string")],
     _abM_=[0,caml_string_of_jsbytes("_none_"),0,-1],
     _abK_=
      [0,
       [11,caml_string_of_jsbytes("invalid offset "),[2,0,0]],
       caml_string_of_jsbytes("invalid offset %s")],
     _abJ_=
      [0,
       [11,caml_string_of_jsbytes("no space in date_ofday string: "),[2,0,0]],
       caml_string_of_jsbytes("no space in date_ofday string: %s")],
     _abI_=
      [0,
       [11,
        caml_string_of_jsbytes("Time.of_filename_string ("),
        [2,0,[11,caml_string_of_jsbytes("): "),[2,0,0]]]],
       caml_string_of_jsbytes("Time.of_filename_string (%s): %s")],
     _abH_=[0,caml_string_of_jsbytes("T")],
     _abG_=[0,caml_string_of_jsbytes(" ")],
     _abF_=[0,caml_string_of_jsbytes(" ")],
     _abE_=[0,caml_string_of_jsbytes("")],
     _abA_=[0,caml_string_of_jsbytes("zone")],
     _abB_=[0,caml_string_of_jsbytes("span_since_epoch")],
     _abC_=[0,caml_string_of_jsbytes("src/time.ml"),258,10],
     _abD_=[0,caml_string_of_jsbytes("src/time.ml"),267,10],
     _abQ_=[0,caml_string_of_jsbytes("src/time_float0.ml"),117,3604,3616],
     _abR_=[0,759637122],
     _abP_=
      [0,
       [11,
        caml_string_of_jsbytes("Time.gmtime: out of range ("),
        [8,[0,0,0],0,0,[12,41,0]]],
       caml_string_of_jsbytes("Time.gmtime: out of range (%f)")],
     _acq_=
      [0,
       [11,
        caml_string_of_jsbytes("Time.Stable.With_utc.V2.t_of_sexp: "),
        [2,0,0]],
       caml_string_of_jsbytes("Time.Stable.With_utc.V2.t_of_sexp: %s")],
     _adn_=[0,caml_string_of_jsbytes("src/span_ns.ml"),787,27375,27387],
     _adk_=[0,caml_string_of_jsbytes("max_value_for_1us_rounding")],
     _adl_=[0,caml_string_of_jsbytes("min_value_for_1us_rounding")],
     _adm_=[0,caml_string_of_jsbytes("t")],
     _acN_=[0,caml_string_of_jsbytes("reason")],
     _acO_=[0,caml_string_of_jsbytes("string")],
     _acM_=[0,caml_string_of_jsbytes("src/span_ns.ml"),402,14],
     _acL_=[0,caml_string_of_jsbytes("src/span_ns.ml"),419,14],
     _acK_=[0,caml_string_of_jsbytes("src/span_ns.ml"),211,12],
     _acJ_=[0,caml_string_of_jsbytes("src/span_ns.ml"),204,17],
     _acx_=[0,caml_string_of_jsbytes("ns")],
     _acy_=[0,caml_string_of_jsbytes("us")],
     _acz_=[0,caml_string_of_jsbytes("ms")],
     _acA_=[0,caml_string_of_jsbytes("sec")],
     _acB_=[0,caml_string_of_jsbytes("min")],
     _acC_=[0,caml_string_of_jsbytes("hr")],
     _acD_=[0,caml_string_of_jsbytes("sign")],
     _acw_=[0,caml_string_of_jsbytes("src/span_ns.ml"),26,2],
     _adB_=
      [0,
       [11,
        caml_string_of_jsbytes("small_diff "),
        [2,0,[12,32,[2,0,[11,caml_string_of_jsbytes(" = "),[2,0,[12,10,0]]]]]]],
       caml_string_of_jsbytes("small_diff %s %s = %s\n")],
     _adC_=
      [0,
       [0,caml_string_of_jsbytes("12:00"),caml_string_of_jsbytes("12:05")],
       [0,
        [0,caml_string_of_jsbytes("12:58"),caml_string_of_jsbytes("13:02")],
        [0,
         [0,caml_string_of_jsbytes("00:52"),caml_string_of_jsbytes("23:19")],
         [0,
          [0,caml_string_of_jsbytes("00:00"),caml_string_of_jsbytes("24:00")],
          0]]]],
     _ady_=[0,caml_string_of_jsbytes("stop")],
     _adz_=[0,caml_string_of_jsbytes("start")],
     _ads_=[0,0],
     _adt_=[0,0],
     _adu_=[0,0],
     _adE_=
      [1,
       caml_string_of_jsbytes
        ("\n    small_diff 12:00:00.000000000 12:05:00.000000000 = -5m\n    small_diff 12:05:00.000000000 12:00:00.000000000 = 5m\n    small_diff 12:58:00.000000000 13:02:00.000000000 = -4m\n    small_diff 13:02:00.000000000 12:58:00.000000000 = 4m\n    small_diff 00:52:00.000000000 23:19:00.000000000 = -27m\n    small_diff 23:19:00.000000000 00:52:00.000000000 = 27m\n    small_diff 00:00:00.000000000 24:00:00.000000000 = 0s\n    small_diff 24:00:00.000000000 00:00:00.000000000 = 0s ")],
     _adF_=[0,caml_string_of_jsbytes("")],
     _adH_=[0,caml_string_of_jsbytes("small_diff")],
     _aeW_=[0,1],
     _aeV_=
      [0,
       [11,
        caml_string_of_jsbytes("unable to lookup Zone "),
        [2,
         0,
         [11,caml_string_of_jsbytes(".  Try using Core.Time.of_string"),0]]],
       caml_string_of_jsbytes
        ("unable to lookup Zone %s.  Try using Core.Time.of_string")],
     _aeT_=
      [0,
       caml_string_of_jsbytes
        ("src/time_ns.ml.To_and_of_string.Time_ns_of_string")],
     _aeU_=[0,caml_string_of_jsbytes("_none_"),0,-1],
     _aeR_=
      [0,
       [11,caml_string_of_jsbytes("invalid offset "),[2,0,0]],
       caml_string_of_jsbytes("invalid offset %s")],
     _aeQ_=
      [0,
       [11,caml_string_of_jsbytes("no space in date_ofday string: "),[2,0,0]],
       caml_string_of_jsbytes("no space in date_ofday string: %s")],
     _aeP_=
      [0,
       [11,
        caml_string_of_jsbytes("Time.of_filename_string ("),
        [2,0,[11,caml_string_of_jsbytes("): "),[2,0,0]]]],
       caml_string_of_jsbytes("Time.of_filename_string (%s): %s")],
     _aeO_=[0,caml_string_of_jsbytes("T")],
     _aeN_=[0,caml_string_of_jsbytes(" ")],
     _aeM_=[0,caml_string_of_jsbytes(" ")],
     _aeL_=[0,caml_string_of_jsbytes("")],
     _aeH_=[0,caml_string_of_jsbytes("zone")],
     _aeI_=[0,caml_string_of_jsbytes("span_since_epoch")],
     _aeJ_=[0,caml_string_of_jsbytes("src/time_ns.ml"),704,10],
     _aeK_=[0,caml_string_of_jsbytes("src/time_ns.ml"),713,10],
     _aeD_=[0,caml_string_of_jsbytes("src/time_ns.ml"),280,6],
     _aeC_=[0,caml_string_of_jsbytes("src/time_ns.ml"),262,8],
     _aeB_=[0,caml_string_of_jsbytes("src/time_ns.ml"),274,17],
     _aes_=[0,[12,46,[4,0,[0,2,1],0,0]],caml_string_of_jsbytes(".%01d")],
     _aet_=[0,[12,46,[4,0,[0,2,2],0,0]],caml_string_of_jsbytes(".%02d")],
     _aeu_=[0,[12,46,[4,0,[0,2,3],0,0]],caml_string_of_jsbytes(".%03d")],
     _aev_=[0,[12,46,[4,0,[0,2,4],0,0]],caml_string_of_jsbytes(".%04d")],
     _aew_=[0,[12,46,[4,0,[0,2,5],0,0]],caml_string_of_jsbytes(".%05d")],
     _aex_=[0,[12,46,[4,0,[0,2,6],0,0]],caml_string_of_jsbytes(".%06d")],
     _aey_=[0,[12,46,[4,0,[0,2,7],0,0]],caml_string_of_jsbytes(".%07d")],
     _aez_=[0,[12,46,[4,0,[0,2,8],0,0]],caml_string_of_jsbytes(".%08d")],
     _aeA_=[0,[12,46,[4,0,[0,2,9],0,0]],caml_string_of_jsbytes(".%09d")],
     _aer_=[0,caml_string_of_jsbytes("src/time_ns.ml"),220,13],
     _aeq_=[0,caml_string_of_jsbytes("src/time_ns.ml"),209,6],
     _aep_=
      [0,
       [4,0,[0,2,2],0,[12,58,[4,0,[0,2,2],0,[12,58,[4,0,[0,2,2],0,0]]]]],
       caml_string_of_jsbytes("%02d:%02d:%02d")],
     _aeo_=[0,caml_string_of_jsbytes("src/time_ns.ml"),182,4],
     _aen_=[0,caml_string_of_jsbytes("src/time_ns.ml"),124,3426,3436],
     _aem_=[0,caml_string_of_jsbytes("src/time_ns.ml"),105,2857,2869],
     _ae0_=[0,0],
     _aeZ_=
      [0,
       [11,
        caml_string_of_jsbytes("Substring.blit_from_"),
        [2,
         0,
         [11,
          caml_string_of_jsbytes(" len > substring length : "),
          [4,0,0,0,[11,caml_string_of_jsbytes(" > "),[4,0,0,0,0]]]]]],
       caml_string_of_jsbytes
        ("Substring.blit_from_%s len > substring length : %d > %d")],
     _afD_=[0,0],
     _afC_=[0,0],
     _afB_=
      [0,
       [12,
        39,
        [2,
         0,
         [11,
          caml_string_of_jsbytes("' is not a valid "),
          [2,0,[11,caml_string_of_jsbytes(" because "),[2,0,0]]]]]],
       caml_string_of_jsbytes("'%s' is not a valid %s because %s")],
     _agX_=[0,caml_string_of_jsbytes("Expected")],
     _agY_=[0,caml_string_of_jsbytes("But_got")],
     _agZ_=[0,caml_string_of_jsbytes("src/stable_unit_test.ml"),158,5836,5854],
     _agU_=[0,caml_string_of_jsbytes("Expected")],
     _agV_=[0,caml_string_of_jsbytes("But_got")],
     _agW_=[0,caml_string_of_jsbytes("src/stable_unit_test.ml"),148,5351,5367],
     _agR_=[0,caml_string_of_jsbytes("Expected")],
     _agS_=[0,caml_string_of_jsbytes("But_got")],
     _agT_=[0,caml_string_of_jsbytes("src/stable_unit_test.ml"),111,3968,3986],
     _agO_=[0,caml_string_of_jsbytes("Expected")],
     _agP_=[0,caml_string_of_jsbytes("But_got")],
     _agN_=[0,caml_string_of_jsbytes("src/stable_unit_test.ml"),91,3135,3153],
     _agQ_=[0,caml_string_of_jsbytes("src/stable_unit_test.ml"),101,3521,3537],
     _agK_=[0,caml_string_of_jsbytes("Expected")],
     _agL_=[0,caml_string_of_jsbytes("But_got")],
     _agH_=[0,caml_string_of_jsbytes("Expected")],
     _agI_=[0,caml_string_of_jsbytes("But_got")],
     _agJ_=[0,caml_string_of_jsbytes("src/stable_unit_test.ml"),58,2006,2022],
     _agM_=[0,caml_string_of_jsbytes("src/stable_unit_test.ml"),66,2340,2356],
     _agE_=[0,caml_string_of_jsbytes("Expected")],
     _agF_=[0,caml_string_of_jsbytes("But_got")],
     _agG_=[0,caml_string_of_jsbytes("src/stable_unit_test.ml"),41,1360,1381],
     _agD_=[0,caml_string_of_jsbytes("Expected")],
     _agB_=[0,caml_string_of_jsbytes("Expected")],
     _agC_=[0,caml_string_of_jsbytes("But_got")],
     _agA_=[0,0],
     _aig_=[0,0],
     _aih_=[0,1],
     _aia_=[0,caml_string_of_jsbytes("true")],
     _aib_=[0,caml_string_of_jsbytes("false")],
     _aic_=[0,caml_string_of_jsbytes("and")],
     _aid_=[0,caml_string_of_jsbytes("or")],
     _aie_=[0,caml_string_of_jsbytes("not")],
     _aif_=[0,caml_string_of_jsbytes("if")],
     _ah$_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes(" expects three arguments, "),
         [4,0,0,0,[11,caml_string_of_jsbytes(" found"),0]]]],
       caml_string_of_jsbytes("%s expects three arguments, %d found")],
     _ah__=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes(" expects one argument, "),
         [4,0,0,0,[11,caml_string_of_jsbytes(" found"),0]]]],
       caml_string_of_jsbytes("%s expects one argument, %d found")],
     _ah3_=[0,caml_string_of_jsbytes("True")],
     _ah4_=[0,caml_string_of_jsbytes("False")],
     _ah5_=[0,caml_string_of_jsbytes("And")],
     _ah6_=[0,caml_string_of_jsbytes("Or")],
     _ah7_=[0,caml_string_of_jsbytes("Not")],
     _ah8_=[0,caml_string_of_jsbytes("If")],
     _ah9_=[0,caml_string_of_jsbytes("Base")],
     _ah2_=[0,caml_string_of_jsbytes("src/blang.ml"),59,24],
     _ah1_=[1,caml_string_of_jsbytes("src/blang.ml.T.t")],
     _ahU_=[0,caml_string_of_jsbytes("False"),0],
     _ahV_=[0,caml_string_of_jsbytes("True"),0],
     _aiF_=
      [0,
       [11,
        caml_string_of_jsbytes
         ("Filename.to_absolute_exn called with a [relative_to] that is a relative path: "),
        [2,0,0]],
       caml_string_of_jsbytes
        ("Filename.to_absolute_exn called with a [relative_to] that is a relative path: %s")],
     _aiE_=
      [0,
       [11,
        caml_string_of_jsbytes
         ("Filename.concat called with an empty string as its first argument (second argument: "),
        [2,0,[12,41,0]]],
       caml_string_of_jsbytes
        ("Filename.concat called with an empty string as its first argument (second argument: %s)")],
     _aoW_=[0,caml_string_of_jsbytes("Base")],
     _aoX_=[0,caml_string_of_jsbytes("Group")],
     _aoY_=[0,caml_string_of_jsbytes("Exec")],
     _aoZ_=[0,caml_string_of_jsbytes("Lazy")],
     _aoS_=[1,caml_string_of_jsbytes("src/command_shape.ml.Fully_forced.t")],
     _aoT_=[0,caml_string_of_jsbytes("Basic")],
     _aoU_=[0,caml_string_of_jsbytes("Group")],
     _aoV_=[0,caml_string_of_jsbytes("Exec")],
     _aoF_=[0,caml_string_of_jsbytes("child_subcommand")],
     _aoG_=[0,caml_string_of_jsbytes("path_to_exe")],
     _aoH_=[0,caml_string_of_jsbytes("working_dir")],
     _aoI_=[0,caml_string_of_jsbytes("readme")],
     _aoJ_=[0,caml_string_of_jsbytes("summary")],
     _aoE_=[0,caml_string_of_jsbytes("src/command_shape.ml"),672,2],
     _aol_=[0,caml_string_of_jsbytes("subcommands")],
     _aom_=[0,caml_string_of_jsbytes("readme")],
     _aon_=[0,caml_string_of_jsbytes("summary")],
     _aok_=[0,caml_string_of_jsbytes("src/command_shape.ml"),649,2],
     _an3_=[0,caml_string_of_jsbytes("flags")],
     _an4_=[0,caml_string_of_jsbytes("anons")],
     _an5_=[0,caml_string_of_jsbytes("readme")],
     _an6_=[0,caml_string_of_jsbytes("summary")],
     _an2_=[0,caml_string_of_jsbytes("src/command_shape.ml"),616,2],
     _anJ_=[0,caml_string_of_jsbytes(", ")],
     _anK_=
      [12,
       32,
       [2,0,[11,caml_string_of_jsbytes(" is an ambiguous prefix: "),[2,0,0]]]],
     _anL_=[0,0],
     _anM_=[12,32,[2,0,0]],
     _anN_=[0,0],
     _anE_=[0,caml_string_of_jsbytes("\n"),0],
     _anD_=[0,caml_string_of_jsbytes("\n"),0],
     _anF_=[0,caml_string_of_jsbytes("\n"),0],
     _anG_=[0,caml_string_of_jsbytes(", ")],
     _anH_=
      [0,
       [11,caml_string_of_jsbytes("(aliases: "),[2,0,[12,41,0]]],
       caml_string_of_jsbytes("(aliases: %s)")],
     _anI_=
      [0,
       [11,caml_string_of_jsbytes("(alias: "),[2,0,[12,41,0]]],
       caml_string_of_jsbytes("(alias: %s)")],
     _anA_=[0,caml_string_of_jsbytes("aliases")],
     _anB_=[0,caml_string_of_jsbytes("doc")],
     _anC_=[0,caml_string_of_jsbytes("name")],
     _anz_=[0,caml_string_of_jsbytes("src/command_shape.ml"),479,2],
     _ang_=[0,caml_string_of_jsbytes("src/command_shape.ml"),467,6],
     _anf_=[0,caml_string_of_jsbytes("src/command_shape.ml"),468,6],
     _anc_=[0,caml_string_of_jsbytes("at_most_once")],
     _and_=[0,caml_string_of_jsbytes("at_least_once")],
     _am8_=[0,caml_string_of_jsbytes("Usage")],
     _am9_=[0,caml_string_of_jsbytes("Grammar")],
     _am7_=[1,caml_string_of_jsbytes("src/command_shape.ml.Anons.t")],
     _amW_=[1,caml_string_of_jsbytes("src/command_shape.ml.Anons.Grammar.t")],
     _amX_=[0,caml_string_of_jsbytes("Zero")],
     _amY_=[0,caml_string_of_jsbytes("One")],
     _amZ_=[0,caml_string_of_jsbytes("Many")],
     _am0_=[0,caml_string_of_jsbytes("Maybe")],
     _am1_=[0,caml_string_of_jsbytes("Concat")],
     _am2_=[0,caml_string_of_jsbytes("Ad_hoc")],
     _amK_=[0,caml_string_of_jsbytes("src/command_shape.ml"),390,10469,10487],
     _amA_=[0,caml_string_of_jsbytes("V1")],
     _amB_=[0,caml_string_of_jsbytes("V2")],
     _amC_=[0,caml_string_of_jsbytes("V3")],
     _amm_=[0,caml_string_of_jsbytes("Base")],
     _amn_=[0,caml_string_of_jsbytes("Group")],
     _amo_=[0,caml_string_of_jsbytes("Exec")],
     _al8_=[0,caml_string_of_jsbytes("Base")],
     _al9_=[0,caml_string_of_jsbytes("Group")],
     _al__=[0,caml_string_of_jsbytes("Exec")],
     _alR_=[0,caml_string_of_jsbytes("Base")],
     _alS_=[0,caml_string_of_jsbytes("Group")],
     _alT_=[0,caml_string_of_jsbytes("Exec")],
     _alU_=[0,caml_string_of_jsbytes("Lazy")],
     _alx_=
      [1,
       caml_string_of_jsbytes("src/command_shape.ml.Stable.Fully_forced.V1.t")],
     _aly_=[0,caml_string_of_jsbytes("Basic")],
     _alz_=[0,caml_string_of_jsbytes("Group")],
     _alA_=[0,caml_string_of_jsbytes("Exec")],
     _alm_=[0,caml_string_of_jsbytes("path_to_exe")],
     _aln_=[0,caml_string_of_jsbytes("readme")],
     _alo_=[0,caml_string_of_jsbytes("summary")],
     _all_=[0,caml_string_of_jsbytes("src/command_shape.ml"),246,6],
     _alc_=[0,caml_string_of_jsbytes("path_to_exe")],
     _ald_=[0,caml_string_of_jsbytes("working_dir")],
     _ale_=[0,caml_string_of_jsbytes("readme")],
     _alf_=[0,caml_string_of_jsbytes("summary")],
     _alb_=[0,caml_string_of_jsbytes("src/command_shape.ml"),216,6],
     _akW_=[0,caml_string_of_jsbytes("child_subcommand")],
     _akX_=[0,caml_string_of_jsbytes("path_to_exe")],
     _akY_=[0,caml_string_of_jsbytes("working_dir")],
     _akZ_=[0,caml_string_of_jsbytes("readme")],
     _ak0_=[0,caml_string_of_jsbytes("summary")],
     _akV_=[0,caml_string_of_jsbytes("src/command_shape.ml"),195,6],
     _akF_=[0,caml_string_of_jsbytes("subcommands")],
     _akG_=[0,caml_string_of_jsbytes("readme")],
     _akH_=[0,caml_string_of_jsbytes("summary")],
     _akE_=[0,caml_string_of_jsbytes("src/command_shape.ml"),163,6],
     _akk_=[0,caml_string_of_jsbytes("subcommands")],
     _akl_=[0,caml_string_of_jsbytes("readme")],
     _akm_=[0,caml_string_of_jsbytes("summary")],
     _akj_=[0,caml_string_of_jsbytes("src/command_shape.ml"),141,6],
     _aj1_=[0,caml_string_of_jsbytes("flags")],
     _aj2_=[0,caml_string_of_jsbytes("usage")],
     _aj3_=[0,caml_string_of_jsbytes("readme")],
     _aj4_=[0,caml_string_of_jsbytes("summary")],
     _aj0_=[0,caml_string_of_jsbytes("src/command_shape.ml"),109,6],
     _ajJ_=[0,caml_string_of_jsbytes("flags")],
     _ajK_=[0,caml_string_of_jsbytes("anons")],
     _ajL_=[0,caml_string_of_jsbytes("readme")],
     _ajM_=[0,caml_string_of_jsbytes("summary")],
     _ajI_=[0,caml_string_of_jsbytes("src/command_shape.ml"),94,6],
     _ajs_=[0,caml_string_of_jsbytes("aliases")],
     _ajt_=[0,caml_string_of_jsbytes("doc")],
     _aju_=[0,caml_string_of_jsbytes("name")],
     _ajr_=[0,caml_string_of_jsbytes("src/command_shape.ml"),76,6],
     _ajd_=[0,caml_string_of_jsbytes("Usage")],
     _aje_=[0,caml_string_of_jsbytes("Grammar")],
     _ajc_=
      [1,caml_string_of_jsbytes("src/command_shape.ml.Stable.Anons.V2.t")],
     _ai5_=[0,caml_string_of_jsbytes("src/command_shape.ml"),23,535,570],
     _ai7_=
      [0,
       [11,
        caml_string_of_jsbytes("[("),
        [2,0,[11,caml_string_of_jsbytes(") ...]"),0]]],
       caml_string_of_jsbytes("[(%s) ...]")],
     _ai6_=
      [0,
       [12,91,[2,0,[11,caml_string_of_jsbytes(" ...]"),0]]],
       caml_string_of_jsbytes("[%s ...]")],
     _ai8_=[0,[12,91,[2,0,[12,93,0]]],caml_string_of_jsbytes("[%s]")],
     _ai9_=[0,caml_string_of_jsbytes(" ")],
     _aiR_=
      [1,
       caml_string_of_jsbytes
        ("src/command_shape.ml.Stable.Anons.Grammar.V1.t")],
     _aiS_=[0,caml_string_of_jsbytes("Zero")],
     _aiT_=[0,caml_string_of_jsbytes("One")],
     _aiU_=[0,caml_string_of_jsbytes("Many")],
     _aiV_=[0,caml_string_of_jsbytes("Maybe")],
     _aiW_=[0,caml_string_of_jsbytes("Concat")],
     _aiX_=[0,caml_string_of_jsbytes("Ad_hoc")],
     _aiL_=[0,caml_string_of_jsbytes("Zero"),0],
     _ai0_=[1,caml_string_of_jsbytes(" a17fd34ec213e508db450f6469f7fe99 ")],
     _ai1_=[0,caml_string_of_jsbytes("")],
     _ajh_=[1,caml_string_of_jsbytes(" 081d9ec167903f8f8c49cbf8e3fb3a66 ")],
     _aji_=[0,caml_string_of_jsbytes("")],
     _ajx_=[1,caml_string_of_jsbytes(" bd8d6fb7a662d2c0b5e0d2026c6d2d21 ")],
     _ajy_=[0,caml_string_of_jsbytes("")],
     _ajP_=[1,caml_string_of_jsbytes(" 8faac1e8d9deb0baaa56ac8ebf85b498 ")],
     _ajQ_=[0,caml_string_of_jsbytes("")],
     _aj5_=
      [0,
       [0,
        caml_string_of_jsbytes
         ("Dummy_type_because_we_cannot_digest_type_constructors_only_concrete_types"),
        0],
       0],
     _akp_=[1,caml_string_of_jsbytes(" 2cc3eeb58d12d8fe4400009e592d7827 ")],
     _akq_=[0,caml_string_of_jsbytes("")],
     _akK_=[1,caml_string_of_jsbytes(" 2cc3eeb58d12d8fe4400009e592d7827 ")],
     _akL_=[0,caml_string_of_jsbytes("")],
     _ak3_=[1,caml_string_of_jsbytes(" c0c8256e9238cdd8f2ec1f8785e02ae0 ")],
     _ak4_=[0,caml_string_of_jsbytes("")],
     _alD_=[1,caml_string_of_jsbytes(" 981154ef3919437c6c822619882841d4 ")],
     _alE_=[0,caml_string_of_jsbytes("")],
     _alX_=[1,caml_string_of_jsbytes(" d3c375548f1a43c58c71e814c04ba36a ")],
     _alY_=[0,caml_string_of_jsbytes("")],
     _amb_=[1,caml_string_of_jsbytes(" 598d4b41ef435bc69a4886bdba0f8689 ")],
     _amc_=[0,caml_string_of_jsbytes("")],
     _amr_=[1,caml_string_of_jsbytes(" 70d20b5432ffab77a385b02b04031d2e ")],
     _ams_=[0,caml_string_of_jsbytes("")],
     _amF_=[1,caml_string_of_jsbytes(" 796fbf006deb25159171637c2a510bf4 ")],
     _amG_=[0,caml_string_of_jsbytes("")],
     _amQ_=[0,caml_string_of_jsbytes("Zero"),0],
     _ani_=
      [1,
       caml_string_of_jsbytes
        ('\n        (((at_least_once false) (at_most_once false)) "[name] ...")\n        (((at_least_once true) (at_most_once false)) "name ...")\n        (((at_least_once false) (at_most_once true)) [name])\n        (((at_least_once true) (at_most_once true)) name) ')],
     _anj_=[0,caml_string_of_jsbytes("")],
     _anl_=[0,caml_string_of_jsbytes("to_help_string")],
     _apo_=
      [0,
       [11,
        caml_string_of_jsbytes("Host_and_port.of_string: bad port: "),
        [2,0,0]],
       caml_string_of_jsbytes("Host_and_port.of_string: bad port: %s")],
     _apn_=
      [0,
       [11,caml_string_of_jsbytes("Host_and_port.of_string: "),[2,0,0]],
       caml_string_of_jsbytes("Host_and_port.of_string: %s")],
     _apm_=[0,[2,0,[12,58,[4,0,0,0,0]]],caml_string_of_jsbytes("%s:%d")],
     _apf_=
      [1,
       caml_string_of_jsbytes
        ("\n                  957990f0fc4161fb874e66872550fb40\n                  957990f0fc4161fb874e66872550fb40 ")],
     _apg_=[0,caml_string_of_jsbytes("")],
     _api_=[0,caml_string_of_jsbytes("stable")],
     _apW_=
      [0,
       caml_string_of_jsbytes
        ("src/pid.ml.Stable.V1.Without_containers.Pid_must_be_positive")],
     _apX_=[0,caml_string_of_jsbytes("_none_"),0,-1],
     _aq5_=[0,caml_string_of_jsbytes("src/fdeque.ml"),330,14],
     _aqN_=[0,0,0],
     _aqM_=[0,0,0],
     _aqL_=[0,caml_string_of_jsbytes("src/fdeque.ml"),25,2],
     _aqK_=[0,caml_string_of_jsbytes("src/fdeque.ml"),26,2],
     _aqI_=[0,caml_string_of_jsbytes("src/fdeque.ml.Empty")],
     _aqJ_=[0,caml_string_of_jsbytes("_none_"),0,-1],
     _arl_=[0,caml_string_of_jsbytes("src/set_once.ml"),104,2307,2342],
     _ark_=[0,caml_string_of_jsbytes("at")],
     _arh_=[0,0],
     _ari_=[0,caml_string_of_jsbytes("previously_set_at")],
     _arj_=[0,caml_string_of_jsbytes("setting_at")],
     _arg_=[0,caml_string_of_jsbytes("src/set_once.ml"),65,1314,1355],
     _are_=[0,caml_string_of_jsbytes("set_at")],
     _arf_=[0,caml_string_of_jsbytes("value")],
     _arc_=[0,caml_string_of_jsbytes("src/set_once.ml"),20,377,449],
     _asA_=[0,caml_string_of_jsbytes("=== flags ===")],
     _asH_=[0,[2,0,[12,10,[10,0]]],caml_string_of_jsbytes("%s\n%!")],
     _asI_=[0,[2,0,0],caml_string_of_jsbytes("%s")],
     _asJ_=
      [0,
       [11,caml_string_of_jsbytes("missing subcommand for command "),[2,0,0]],
       caml_string_of_jsbytes("missing subcommand for command %s")],
     _asG_=[0,caml_string_of_jsbytes(""),0],
     _asF_=[0,caml_string_of_jsbytes("src/command.ml"),2228,69550,69564],
     _asD_=
      [0,
       [11,caml_string_of_jsbytes("_jsautocom_"),[2,0,0]],
       caml_string_of_jsbytes("_jsautocom_%s")],
     _asE_=
      [0,
       [11,
        caml_string_of_jsbytes("function "),
        [2,
         0,
         [11,
          caml_string_of_jsbytes(" {\n  export COMP_CWORD\n  COMP_WORDS[0]="),
          [2,
           0,
           [11,
            caml_string_of_jsbytes
             ('\n  if type readarray > /dev/null\n  then readarray -t COMPREPLY < <("${COMP_WORDS['),
            [17,
             0,
             [11,
              caml_string_of_jsbytes
               ('}")\n  else IFS="\n" read -d "" -A COMPREPLY < <("${COMP_WORDS['),
              [17,
               0,
               [11,
                caml_string_of_jsbytes('}")\n  fi\n}\ncomplete -F '),
                [2,0,partial$1]]]]]]]]]],
       caml_string_of_jsbytes
        ('function %s {\n  export COMP_CWORD\n  COMP_WORDS[0]=%s\n  if type readarray > /dev/null\n  then readarray -t COMPREPLY < <("${COMP_WORDS[@]}")\n  else IFS="\n" read -d "" -A COMPREPLY < <("${COMP_WORDS[@]}")\n  fi\n}\ncomplete -F %s %s\n%!')],
     _asC_=[0,caml_string_of_jsbytes("src/command.ml"),2162,21],
     _asB_=
      [0,
       [11,
        caml_string_of_jsbytes("unknown subcommand "),
        [2,
         0,
         [11,
          caml_string_of_jsbytes(" for command "),
          [2,0,[11,caml_string_of_jsbytes(": "),[2,0,0]]]]]],
       caml_string_of_jsbytes("unknown subcommand %s for command %s: %s")],
     _asz_=[0,caml_string_of_jsbytes(" SUBCOMMAND"),0],
     _asx_=
      [0,
       [11,caml_string_of_jsbytes("unexpected subcommand "),[3,0,0]],
       caml_string_of_jsbytes("unexpected subcommand %S")],
     _asy_=
      [0,
       [11,caml_string_of_jsbytes("unknown subcommand "),[3,0,0]],
       caml_string_of_jsbytes("unknown subcommand %S")],
     _asv_=[0,caml_string_of_jsbytes("stderr")],
     _asw_=[0,caml_string_of_jsbytes("stdout")],
     _asu_=[0,caml_string_of_jsbytes("info")],
     _ast_=[0,caml_string_of_jsbytes("src/command.ml"),1961,59609,59651],
     _ass_=[0,caml_string_of_jsbytes("src/command.ml"),1874,36],
     _asp_=[0,caml_string_of_jsbytes("\n")],
     _asq_=[0,caml_string_of_jsbytes("--version"),0],
     _asr_=[0,caml_string_of_jsbytes("--build-info"),0],
     _aso_=
      [0,
       [11,caml_string_of_jsbytes("multiple subcommands named "),[2,0,0]],
       caml_string_of_jsbytes("multiple subcommands named %s")],
     _asm_=[0,caml_string_of_jsbytes("--help"),0],
     _asn_=[0,caml_string_of_jsbytes("-?"),0],
     _asl_=
      [0,
       [11,
        caml_string_of_jsbytes(" print "),
        [2,0,[11,caml_string_of_jsbytes(" and exit"),0]]],
       caml_string_of_jsbytes(" print %s and exit")],
     _ask_=
      [0,
       [11,
        caml_string_of_jsbytes("there is already a "),
        [2,0,[11,caml_string_of_jsbytes(" named "),[2,0,0]]]],
       caml_string_of_jsbytes("there is already a %s named %s")],
     _ash_=[0,0],
     _asi_=[0,0],
     _asj_=[0,caml_string_of_jsbytes("src/command.ml"),1440,43884,43902],
     _asg_=[0,caml_string_of_jsbytes("\n  ")],
     _ase_=[0,caml_string_of_jsbytes("src/command.ml"),1406,42799,42819],
     _asa_=[12,41,0],
     _asb_=[0,0],
     _ar6_=[0,[2,0,0],caml_string_of_jsbytes("%s")],
     _ar5_=
      [0,
       [11,caml_string_of_jsbytes("missing argument for flag "),[2,0,0]],
       caml_string_of_jsbytes("missing argument for flag %s")],
     _ar7_=[0,caml_string_of_jsbytes("\n\n")],
     _ar4_=[0,caml_string_of_jsbytes("\n")],
     _ar3_=
      [0,
       [11,caml_string_of_jsbytes("multiple flags named "),[2,0,0]],
       caml_string_of_jsbytes("multiple flags named %s")],
     _arZ_=[11,caml_string_of_jsbytes(" name: "),[3,0,0]],
     _ar0_=[0,0],
     _ar1_=
      [11,caml_string_of_jsbytes(" name (contains whitespace): "),[3,0,0]],
     _ar2_=[0,0],
     _arY_=
      [0,
       [2,
        0,
        [12,
         32,
         [2,
          0,
          [11,
           caml_string_of_jsbytes
            (" contains an underscore. Use a dash instead."),
           0]]]],
       caml_string_of_jsbytes
        ("%s %s contains an underscore. Use a dash instead.")],
     _arW_=
      [0,
       [11,
        caml_string_of_jsbytes("argument name "),
        [3,0,[11,caml_string_of_jsbytes(" has surrounding whitespace"),0]]],
       caml_string_of_jsbytes("argument name %S has surrounding whitespace")],
     _arX_=[0,60,[0,62,[0,91,[0,93,[0,40,[0,41,[0,123,[0,125,0]]]]]]]],
     _arT_=
      [0,
       [11,caml_string_of_jsbytes("missing anonymous argument: "),[2,0,0]],
       caml_string_of_jsbytes("missing anonymous argument: %s")],
     _arU_=
      [0,
       [11,caml_string_of_jsbytes("too many anonymous arguments"),0],
       caml_string_of_jsbytes("too many anonymous arguments")],
     _arV_=[3,0],
     _arS_=
      [0,
       [11,caml_string_of_jsbytes("missing anonymous argument: "),[2,0,0]],
       caml_string_of_jsbytes("missing anonymous argument: %s")],
     _arQ_=[3,0],
     _arR_=
      [0,
       [11,
        caml_string_of_jsbytes("failed to parse "),
        [2,0,[11,caml_string_of_jsbytes(" value "),[3,0,[12,10,[2,0,0]]]]]],
       caml_string_of_jsbytes("failed to parse %s value %S\n%s")],
     _arN_=[0,caml_string_of_jsbytes("src/command.ml"),583,11],
     _arP_=
      [0,
       [11,
        caml_string_of_jsbytes("the grammar "),
        [2,
         0,
         [11,
          caml_string_of_jsbytes
           (" for anonymous arguments is not supported because there is the possibility for arguments ("),
          [2,
           0,
           [11,
            caml_string_of_jsbytes
             (") following a variable number of arguments ("),
            [2,
             0,
             [11,
              caml_string_of_jsbytes
               (").  Supporting such grammars would complicate the implementation significantly."),
              0]]]]]]],
       caml_string_of_jsbytes
        ("the grammar %s for anonymous arguments is not supported because there is the possibility for arguments (%s) following a variable number of arguments (%s).  Supporting such grammars would complicate the implementation significantly.")],
     _arO_=
      [0,
       [11,
        caml_string_of_jsbytes
         ("iteration of variable-length grammars such as "),
        [2,0,[11,caml_string_of_jsbytes(" is disallowed"),0]]],
       caml_string_of_jsbytes
        ("iteration of variable-length grammars such as %s is disallowed")],
     _arM_=[0,caml_string_of_jsbytes("src/command.ml"),534,11],
     _arL_=
      [0,
       [11,caml_string_of_jsbytes("missing required flag: "),[2,0,0]],
       caml_string_of_jsbytes("missing required flag: %s")],
     _arK_=[0,caml_string_of_jsbytes("_")],
     _arJ_=[0,caml_string_of_jsbytes("_")],
     _arI_=
      [0,
       [11,
        caml_string_of_jsbytes("flag "),
        [2,0,[11,caml_string_of_jsbytes(" passed more than once"),0]]],
       caml_string_of_jsbytes("flag %s passed more than once")],
     _arH_=[0,caml_string_of_jsbytes("_")],
     _arG_=
      [0,
       [11,caml_string_of_jsbytes("missing required flag: "),[2,0,0]],
       caml_string_of_jsbytes("missing required flag: %s")],
     _arF_=[0,caml_string_of_jsbytes("_")],
     _arE_=
      [0,
       [11,
        caml_string_of_jsbytes("flag "),
        [2,0,[11,caml_string_of_jsbytes(" passed more than once"),0]]],
       caml_string_of_jsbytes("flag %s passed more than once")],
     _arD_=
      [0,
       [11,
        caml_string_of_jsbytes("failed to parse "),
        [2,
         0,
         [11,
          caml_string_of_jsbytes(" value "),
          [3,0,[11,caml_string_of_jsbytes(".\n"),[2,0,0]]]]]],
       caml_string_of_jsbytes("failed to parse %s value %S.\n%s")],
     _arB_=
      [0,
       [11,caml_string_of_jsbytes("multiple flags or aliases named "),[2,0,0]],
       caml_string_of_jsbytes("multiple flags or aliases named %s")],
     _arC_=
      [0,
       [11,caml_string_of_jsbytes("multiple flags named "),[2,0,0]],
       caml_string_of_jsbytes("multiple flags named %s")],
     _arA_=
      [0,
       [11,caml_string_of_jsbytes('same as "'),[2,0,[12,34,0]]],
       caml_string_of_jsbytes('same as "%s"')],
     _arz_=
      [0,
       [11,caml_string_of_jsbytes('same as "'),[2,0,[12,34,0]]],
       caml_string_of_jsbytes('same as "%s"')],
     _ary_=[0,caml_string_of_jsbytes(",")],
     _arw_=
      [0,
       [11,
        caml_string_of_jsbytes
         ("Command.Spec.Arg_type.of_alist_exn: duplicate key "),
        [2,0,0]],
       caml_string_of_jsbytes
        ("Command.Spec.Arg_type.of_alist_exn: duplicate key %s")],
     _aru_=[0,caml_string_of_jsbytes(",")],
     _arv_=
      [0,
       [11,caml_string_of_jsbytes("valid arguments: {"),[2,0,[12,125,0]]],
       caml_string_of_jsbytes("valid arguments: {%s}")],
     _art_=[0,caml_string_of_jsbytes("\n\n")],
     _ars_=[0,caml_string_of_jsbytes(" ")],
     _arp_=[0,caml_string_of_jsbytes("status")],
     _arq_=[0,caml_string_of_jsbytes("src/command.ml.Exit_called")],
     _arr_=[0,caml_string_of_jsbytes("_none_"),0,-1],
     _arx_=
      [0,
       [0,caml_string_of_jsbytes("true"),1],
       [0,[0,caml_string_of_jsbytes("false"),0],0]],
     _asf_=[0,caml_string_of_jsbytes(",")],
     _atW_=[0,0],
     _atX_=[0,0],
     _atY_=[0,0],
     _atZ_=[0,0],
     _at0_=[0,0],
     _at1_=[0,0],
     _at2_=[0,0],
     _at3_=[0,0],
     _at4_=[0,0],
     _at5_=[0,0],
     _at6_=[0,0],
     _at7_=[0,0],
     _at8_=[0,0],
     _atR_=[0,[8,[0,0,0],0,[0,0],[0,0]],caml_string_of_jsbytes("%.0f%c")],
     _atS_=[0,[8,[0,0,0],0,[0,1],[0,0]],caml_string_of_jsbytes("%.1f%c")],
     _atT_=[0,[8,[0,0,0],0,[0,2],[0,0]],caml_string_of_jsbytes("%.2f%c")],
     _atU_=[0,[4,0,0,0,[12,66,0]],caml_string_of_jsbytes("%dB")],
     _atQ_=[0,caml_string_of_jsbytes("Bytes")],
     _as5_=[0,0],
     _as6_=[0,0],
     _as7_=[0,0],
     _as8_=[0,0],
     _as9_=[0,0],
     _as__=[0,0],
     _as$_=[0,0],
     _ata_=[0,0],
     _atb_=[0,0],
     _as1_=[0,caml_string_of_jsbytes("Gigabytes")],
     _as0_=[0,caml_string_of_jsbytes("Kilobytes")],
     _as2_=[0,caml_string_of_jsbytes("Bytes")],
     _as3_=[0,caml_string_of_jsbytes("Megabytes")],
     _asN_=
      [0,
       [12,
        39,
        [2,
         0,
         [11,
          caml_string_of_jsbytes
           ("' passed to Byte_units.of_string - too short"),
          0]]],
       caml_string_of_jsbytes
        ("'%s' passed to Byte_units.of_string - too short")],
     _asO_=
      [0,
       [12,
        39,
        [2,
         0,
         [11,
          caml_string_of_jsbytes("' passed to Byte_units.of_string - "),
          [2,
           0,
           [11,caml_string_of_jsbytes(" cannot be converted to float "),0]]]]],
       caml_string_of_jsbytes
        ("'%s' passed to Byte_units.of_string - %s cannot be converted to float ")],
     _asP_=
      [0,
       [12,
        39,
        [2,
         0,
         [11,
          caml_string_of_jsbytes
           ("' passed to Byte_units.of_string - illegal extension "),
          [0,0]]]],
       caml_string_of_jsbytes
        ("'%s' passed to Byte_units.of_string - illegal extension %c")],
     _atd_=[1,caml_string_of_jsbytes(" 1000b ")],
     _ate_=[0,caml_string_of_jsbytes("")],
     _ath_=[1,caml_string_of_jsbytes(" 1023b ")],
     _ati_=[0,caml_string_of_jsbytes("")],
     _atl_=[1,caml_string_of_jsbytes(" 1k ")],
     _atm_=[0,caml_string_of_jsbytes("")],
     _atp_=[1,caml_string_of_jsbytes(" 1.00098k ")],
     _atq_=[0,caml_string_of_jsbytes("")],
     _att_=[1,caml_string_of_jsbytes(" 1.46484k ")],
     _atu_=[0,caml_string_of_jsbytes("")],
     _atx_=[1,caml_string_of_jsbytes(" 9.76562k ")],
     _aty_=[0,caml_string_of_jsbytes("")],
     _atB_=[1,caml_string_of_jsbytes(" 97.6562k ")],
     _atC_=[0,caml_string_of_jsbytes("")],
     _atF_=[1,caml_string_of_jsbytes(" 976.562k ")],
     _atG_=[0,caml_string_of_jsbytes("")],
     _atJ_=[1,caml_string_of_jsbytes(" 9.53674m ")],
     _atK_=[0,caml_string_of_jsbytes("")],
     _atM_=[0,caml_string_of_jsbytes("no-js"),0],
     _at__=[1,caml_string_of_jsbytes(" 1000B ")],
     _at$_=[0,caml_string_of_jsbytes("")],
     _auc_=[1,caml_string_of_jsbytes(" 1023B ")],
     _aud_=[0,caml_string_of_jsbytes("")],
     _aug_=[1,caml_string_of_jsbytes(" 1.00K ")],
     _auh_=[0,caml_string_of_jsbytes("")],
     _auk_=[1,caml_string_of_jsbytes(" 1.00K ")],
     _aul_=[0,caml_string_of_jsbytes("")],
     _auo_=[1,caml_string_of_jsbytes(" 9.77K ")],
     _aup_=[0,caml_string_of_jsbytes("")],
     _aus_=[1,caml_string_of_jsbytes(" 97.7K ")],
     _aut_=[0,caml_string_of_jsbytes("")],
     _auw_=[1,caml_string_of_jsbytes(" 977K ")],
     _aux_=[0,caml_string_of_jsbytes("")],
     _auA_=[1,caml_string_of_jsbytes(" 9.54M ")],
     _auB_=[0,caml_string_of_jsbytes("")],
     _auE_=[1,caml_string_of_jsbytes(" 9.31G ")],
     _auF_=[0,caml_string_of_jsbytes("")],
     _auI_=[1,caml_string_of_jsbytes(" 931G ")],
     _auJ_=[0,caml_string_of_jsbytes("")],
     _auM_=[1,caml_string_of_jsbytes(" 90.9T ")],
     _auN_=[0,caml_string_of_jsbytes("")],
     _auQ_=[1,caml_string_of_jsbytes(" 88.8P ")],
     _auR_=[0,caml_string_of_jsbytes("")],
     _auU_=[1,caml_string_of_jsbytes(" 2.60E ")],
     _auV_=[0,caml_string_of_jsbytes("")],
     _awB_=[0,1000000],
     _awA_=
      [0,
       [11,
        caml_string_of_jsbytes("Gc.Control."),
        [2,
         0,
         [11,
          caml_string_of_jsbytes(": "),
          [2,0,[11,caml_string_of_jsbytes(" -> "),[2,0,0]]]]]],
       caml_string_of_jsbytes("Gc.Control.%s: %s -> %s")],
     _av5_=[0,caml_string_of_jsbytes("custom_minor_max_size")],
     _av6_=[0,caml_string_of_jsbytes("custom_minor_ratio")],
     _av7_=[0,caml_string_of_jsbytes("custom_major_ratio")],
     _av8_=[0,caml_string_of_jsbytes("window_size")],
     _av9_=[0,caml_string_of_jsbytes("allocation_policy")],
     _av__=[0,caml_string_of_jsbytes("stack_limit")],
     _av$_=[0,caml_string_of_jsbytes("max_overhead")],
     _awa_=[0,caml_string_of_jsbytes("verbose")],
     _awb_=[0,caml_string_of_jsbytes("space_overhead")],
     _awc_=[0,caml_string_of_jsbytes("major_heap_increment")],
     _awd_=[0,caml_string_of_jsbytes("minor_heap_size")],
     _av4_=[0,caml_string_of_jsbytes("src/gc.ml"),92,4],
     _avb_=[0,caml_string_of_jsbytes("forced_major_collections")],
     _avc_=[0,caml_string_of_jsbytes("stack_size")],
     _avd_=[0,caml_string_of_jsbytes("top_heap_words")],
     _ave_=[0,caml_string_of_jsbytes("compactions")],
     _avf_=[0,caml_string_of_jsbytes("fragments")],
     _avg_=[0,caml_string_of_jsbytes("largest_free")],
     _avh_=[0,caml_string_of_jsbytes("free_blocks")],
     _avi_=[0,caml_string_of_jsbytes("free_words")],
     _avj_=[0,caml_string_of_jsbytes("live_blocks")],
     _avk_=[0,caml_string_of_jsbytes("live_words")],
     _avl_=[0,caml_string_of_jsbytes("heap_chunks")],
     _avm_=[0,caml_string_of_jsbytes("heap_words")],
     _avn_=[0,caml_string_of_jsbytes("major_collections")],
     _avo_=[0,caml_string_of_jsbytes("minor_collections")],
     _avp_=[0,caml_string_of_jsbytes("major_words")],
     _avq_=[0,caml_string_of_jsbytes("promoted_words")],
     _avr_=[0,caml_string_of_jsbytes("minor_words")],
     _ava_=[0,caml_string_of_jsbytes("src/gc.ml"),21,4],
     _au5_=[0,caml_string_of_jsbytes("Next_fit")],
     _au6_=[0,caml_string_of_jsbytes("First_fit")],
     _au7_=[0,caml_string_of_jsbytes("Best_fit")],
     _au4_=
      [1,caml_string_of_jsbytes("src/gc.ml.Stable.Allocation_policy.V1.t")],
     _auZ_=
      [0,
       [0,caml_string_of_jsbytes("Next_fit"),0],
       [0,
        [0,caml_string_of_jsbytes("First_fit"),0],
        [0,[0,caml_string_of_jsbytes("Best_fit"),0],0]]],
     _aye_=[1,0],
     _ayf_=[1,1],
     _ayg_=[1,2],
     _ayh_=[1,3],
     _ayd_=[1,caml_string_of_jsbytes("src/sign_or_nan.ml.Stable.V1.t")],
     _ax6_=[0,caml_string_of_jsbytes("Neg")],
     _ax7_=[0,caml_string_of_jsbytes("Zero")],
     _ax8_=[0,caml_string_of_jsbytes("Pos")],
     _ax9_=[0,caml_string_of_jsbytes("Nan")],
     _ax__=
      [0,
       [0,caml_string_of_jsbytes("Neg"),0],
       [0,
        [0,caml_string_of_jsbytes("Zero"),0],
        [0,
         [0,caml_string_of_jsbytes("Pos"),0],
         [0,[0,caml_string_of_jsbytes("Nan"),0],0]]]],
     _azo_=
      [0,
       [11,
        caml_string_of_jsbytes("Memo.lru: max_cache_size of "),
        [4,3,0,0,[11,caml_string_of_jsbytes(" <= 0"),0]]],
       caml_string_of_jsbytes("Memo.lru: max_cache_size of %i <= 0")],
     _azn_=[0,0],
     _aAJ_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid index: "),
        [4,
         3,
         0,
         0,
         [11,
          caml_string_of_jsbytes(" for array with indices ("),
          [4,3,0,0,[12,44,[4,3,0,0,[12,41,0]]]]]]],
       caml_string_of_jsbytes
        ("invalid index: %i for array with indices (%i,%i)")],
     _aAI_=
      [0,
       [2,0,[11,caml_string_of_jsbytes(": Deque.t is empty"),0]],
       caml_string_of_jsbytes("%s: Deque.t is empty")],
     _aAH_=
      [0,
       [11,
        caml_string_of_jsbytes("Deque.drop:  negative input ("),
        [4,0,0,0,[12,41,0]]],
       caml_string_of_jsbytes("Deque.drop:  negative input (%d)")],
     _aAF_=[0,caml_string_of_jsbytes("src/deque.ml"),229,2],
     _aAG_=[0,caml_string_of_jsbytes("src/deque.ml"),266,2],
     _aAs_=
      [0,
       [11,
        caml_string_of_jsbytes
         ("passed negative initial_length to Deque.create: "),
        [4,3,0,0,0]],
       caml_string_of_jsbytes
        ("passed negative initial_length to Deque.create: %i")],
     _aAW_=
      [0,
       [2,0,[11,caml_string_of_jsbytes(":\n"),0]],
       caml_string_of_jsbytes("%s:\n")],
     _aAX_=[0,[2,0,[12,10,0]],caml_string_of_jsbytes("%s\n")],
     _aAY_=[0,[2,0,[12,10,0]],caml_string_of_jsbytes("%s\n")],
     _aAZ_=[0,[10,0],caml_string_of_jsbytes("%!")],
     _aAR_=[0,caml_string_of_jsbytes("")],
     _aAS_=[0,caml_string_of_jsbytes("src/debug.ml"),23,720,736],
     _aAT_=[0,caml_string_of_jsbytes("src/debug.ml"),33,1000,1016],
     _aAU_=[0,caml_string_of_jsbytes("-result"),0],
     _aAV_=[0,caml_string_of_jsbytes("")],
     _aAQ_=[0,[2,0,[12,10,[10,0]]],caml_string_of_jsbytes("%s\n%!")],
     _aA0_=[0,caml_string_of_jsbytes("init")],
     _aA1_=[0,caml_string_of_jsbytes("len")],
     _aA2_=[0,caml_string_of_jsbytes("pos")],
     _aA3_=[0,caml_string_of_jsbytes("bstr")],
     _aA7_=[0,caml_string_of_jsbytes("start")],
     _aA8_=[0,caml_string_of_jsbytes("closing")],
     _aA9_=[0,caml_string_of_jsbytes("opening")],
     _aA6_=[0,caml_string_of_jsbytes("src/bigbuffer.ml"),149,9],
     _aBO_=[0,caml_string_of_jsbytes("label")],
     _aBL_=[0,caml_string_of_jsbytes("max")],
     _aBM_=[0,caml_string_of_jsbytes("min")],
     _aBN_=[0,caml_string_of_jsbytes("index")];
    function bin_shape_sexp_opaque(a)
     {var _byi_=caml_call1(Bin_prot_Shape[2][1],cst_sexp_opaque$0);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group,_byi_),[0,a,0])}
    function bin_size_sexp_opaque(size_of_a){return size_of_a}
    function bin_write_sexp_opaque(write_a){return write_a}
    function bin_writer_sexp_opaque(bin_writer_a)
     {function _byh_(v){return caml_call1(bin_writer_a[2],v)}
      return [0,function(v){return caml_call1(bin_writer_a[1],v)},_byh_]}
    function bin_read_sexp_opaque(of_a,buf,pos_ref,vint)
     {return caml_call2(Bin_prot_Common[18],_eA_,pos_ref[1])}
    function bin_read_sexp_opaque$0(of_a){return of_a}
    function bin_reader_sexp_opaque(bin_reader_a)
     {function _byg_(buf,pos_ref,vtag)
       {return bin_read_sexp_opaque(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return caml_call2(bin_reader_a[1],buf,pos_ref)},
              _byg_]}
    function bin_sexp_opaque(bin_a)
     {var
       _bye_=bin_reader_sexp_opaque(bin_a[3]),
       _byf_=bin_writer_sexp_opaque(bin_a[2]);
      return [0,bin_shape_sexp_opaque(bin_a[1]),_byf_,_bye_]}
    function compare_sexp_opaque(cmp_a,a_001,b_002)
     {return caml_call2(cmp_a,a_001,b_002)}
    function hash_fold_sexp_opaque(hash_fold_a,hsv,arg)
     {return caml_call2(hash_fold_a,hsv,arg)}
    var
     Typename_of_sexp_opaque=caml_call1(Typerep_lib_Make_typename[2],[0,name]),
     typename_of_sexp_opaque=Typename_of_sexp_opaque[2];
    function typerep_of_sexp_opaque(of_a)
     {var name_of_sexp_opaque=caml_call1(Typename_of_sexp_opaque[1],of_a);
      return [9,[0,name_of_sexp_opaque,[0,of_a]]]}
    var
     _eF_=Typerep_lib_Std[42],
     _eM_=Typerep_lib_Std[35],
     _eN_=Typerep_lib_Std[34],
     _eO_=Typerep_lib_Std[33],
     _eP_=Typerep_lib_Std[32],
     _eQ_=Typerep_lib_Std[31],
     _eR_=Typerep_lib_Std[30],
     _eS_=Typerep_lib_Std[29],
     _eT_=Typerep_lib_Std[28],
     _eU_=Typerep_lib_Std[27],
     _eV_=Typerep_lib_Std[26],
     _eW_=Typerep_lib_Std[25],
     _eZ_=Typerep_lib_Std[22],
     _e0_=Typerep_lib_Std[21],
     _e1_=Typerep_lib_Std[20],
     _e3_=Typerep_lib_Std[18],
     _e4_=Typerep_lib_Std[17],
     _e5_=Typerep_lib_Std[16],
     _e7_=Typerep_lib_Std[14],
     _e8_=Typerep_lib_Std[13],
     _e9_=Typerep_lib_Std[12],
     _e__=Typerep_lib_Std[11],
     _e$_=Typerep_lib_Std[10],
     _fa_=Typerep_lib_Std[9],
     _fb_=Typerep_lib_Std[8],
     _fc_=Typerep_lib_Std[7],
     _fd_=Typerep_lib_Std[6],
     _fe_=Typerep_lib_Std[5],
     _ff_=Typerep_lib_Std[4],
     _fg_=Typerep_lib_Std[3],
     _fh_=Typerep_lib_Std[2],
     _fi_=Base_With_return[1],
     _fj_=Ppx_inline_test_lib_Runtime[13],
     _eB_=Typerep_lib_Std[46],
     _eC_=Typerep_lib_Std[45],
     _eD_=Typerep_lib_Std[44],
     _eE_=Typerep_lib_Std[43],
     _eG_=Typerep_lib_Std[41],
     _eH_=Typerep_lib_Std[40],
     _eI_=Typerep_lib_Std[39],
     _eJ_=Typerep_lib_Std[38],
     _eK_=Typerep_lib_Std[37],
     _eL_=Typerep_lib_Std[36],
     _eX_=Typerep_lib_Std[24],
     _eY_=Typerep_lib_Std[23],
     _e2_=Typerep_lib_Std[19],
     _e6_=Typerep_lib_Std[15];
    try
     {runtime.caml_sys_getenv(cst_TESTING_FRAMEWORK);
      var _aBT_=1,am_running_test=_aBT_}
    catch(_byd_)
     {_byd_ = caml_wrap_exception(_byd_);
      if(_byd_ !== include$0[103])throw _byd_;
      var am_running_test=0}
    var
     Not_found=Stdlib[8],
     Not_found_s=Base[225],
     include$1=[0,Not_found,Not_found_s],
     _fl_=include$1[2],
     _fk_=include$1[1];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$1);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Import$0);
    var
     Core_kernel_Import=
      [0,
       _b_,
       _c_,
       _d_,
       _e_,
       _f_,
       _g_,
       _h_,
       _i_,
       _j_,
       _k_,
       _l_,
       _m_,
       _n_,
       _o_,
       _p_,
       _q_,
       _r_,
       _s_,
       _t_,
       _u_,
       sexp_of_t,
       _v_,
       _w_,
       _x_,
       _y_,
       _z_,
       _A_,
       _B_,
       compare,
       _C_,
       hash_fold_t,
       _D_,
       t_of_sexp,
       sexp_of_t$0,
       _E_,
       _F_,
       _G_,
       _H_,
       _I_,
       _J_,
       _K_,
       _L_,
       _M_,
       _N_,
       _O_,
       _P_,
       _Q_,
       _R_,
       _S_,
       _T_,
       _U_,
       _V_,
       _W_,
       _X_,
       _Y_,
       _Z_,
       ___,
       _$_,
       _aa_,
       _ab_,
       _ac_,
       _ad_,
       _ae_,
       _af_,
       _ag_,
       _ah_,
       _ai_,
       _aj_,
       _ak_,
       _al_,
       _am_,
       _an_,
       _ao_,
       _ap_,
       _aq_,
       _ar_,
       _as_,
       _at_,
       _au_,
       _av_,
       _aw_,
       _ax_,
       _ay_,
       _az_,
       _aA_,
       _aB_,
       _aC_,
       _aD_,
       _aE_,
       _aF_,
       _aG_,
       _aH_,
       _aI_,
       _aJ_,
       _aK_,
       _aL_,
       _aM_,
       _aN_,
       _aO_,
       _aP_,
       _aQ_,
       _aR_,
       _aS_,
       _aT_,
       _aU_,
       _aV_,
       _aW_,
       _aX_,
       _aY_,
       _aZ_,
       _a0_,
       _a1_,
       _a2_,
       _a3_,
       _a4_,
       _a5_,
       _a6_,
       _a7_,
       _a8_,
       _a9_,
       _a__,
       _a$_,
       _ba_,
       _bb_,
       _bc_,
       _bd_,
       _be_,
       _bf_,
       _bg_,
       _bh_,
       _bi_,
       _bj_,
       _bk_,
       _bl_,
       _bm_,
       _bn_,
       _bo_,
       _bp_,
       _bq_,
       _br_,
       _bs_,
       _bt_,
       _bu_,
       _bv_,
       _bw_,
       _bx_,
       _by_,
       bin_size_t,
       bin_size_t$0,
       bin_size_t$1,
       bin_size_t$2,
       bin_size_t$3,
       bin_size_t$4,
       bin_size_t$5,
       bin_size_t$6,
       bin_size_t$7,
       bin_size_t$8,
       _bz_,
       _bA_,
       _bB_,
       _bC_,
       _bD_,
       _bE_,
       _bF_,
       _bG_,
       _bH_,
       _bI_,
       _bJ_,
       _bK_,
       _bL_,
       _bM_,
       _bN_,
       _bO_,
       bin_size_t_frozen,
       _bP_,
       _bQ_,
       _bR_,
       _bS_,
       _bT_,
       _bU_,
       _bV_,
       _bW_,
       _bX_,
       _bY_,
       _bZ_,
       _b0_,
       _b1_,
       _b2_,
       _b3_,
       _b4_,
       _b5_,
       _b6_,
       _b7_,
       bin_write_t,
       _b8_,
       bin_read_t,
       bin_read_t$0,
       _b9_,
       _b__,
       _b$_,
       bin_write_t$0,
       _ca_,
       bin_read_t$1,
       bin_read_t$2,
       _cb_,
       _cc_,
       _cd_,
       bin_write_t$1,
       _ce_,
       bin_read_t$3,
       bin_read_t$4,
       _cf_,
       _cg_,
       _ch_,
       bin_write_t$2,
       _ci_,
       bin_read_t$5,
       bin_read_t$6,
       _cj_,
       _ck_,
       _cl_,
       bin_write_t$3,
       _cm_,
       bin_read_t$7,
       bin_read_t$8,
       _cn_,
       _co_,
       _cp_,
       bin_write_t$4,
       _cq_,
       bin_read_t$9,
       bin_read_t$10,
       _cr_,
       _cs_,
       _ct_,
       bin_write_t$5,
       _cu_,
       bin_read_t$11,
       bin_read_t$12,
       _cv_,
       _cw_,
       _cx_,
       _cy_,
       _cz_,
       _cA_,
       _cB_,
       _cC_,
       _cD_,
       _cE_,
       bin_write_t$6,
       _cF_,
       bin_read_t$13,
       bin_read_t$14,
       _cG_,
       _cH_,
       _cI_,
       bin_write_t$7,
       _cJ_,
       bin_read_t$15,
       bin_read_t$16,
       _cK_,
       _cL_,
       _cM_,
       bin_write_t$8,
       _cN_,
       bin_read_t$17,
       bin_read_t$18,
       _cO_,
       _cP_,
       _cQ_,
       _cR_,
       _cS_,
       _cT_,
       _cU_,
       _cV_,
       _cW_,
       _cX_,
       _cY_,
       _cZ_,
       _c0_,
       _c1_,
       _c2_,
       _c3_,
       _c4_,
       _c5_,
       _c6_,
       _c7_,
       _c8_,
       _c9_,
       _c__,
       _c$_,
       _da_,
       _db_,
       _dc_,
       _dd_,
       _de_,
       _df_,
       _dg_,
       _dh_,
       _di_,
       _dj_,
       _dk_,
       _dl_,
       _dm_,
       _dn_,
       _do_,
       _dp_,
       _dq_,
       _dr_,
       _ds_,
       _dt_,
       _du_,
       _dv_,
       _dw_,
       _dx_,
       _dy_,
       _dz_,
       _dA_,
       _dB_,
       bin_write_t_frozen,
       _dC_,
       bin_read_t_frozen,
       bin_read_t_frozen$0,
       _dD_,
       _dE_,
       _dF_,
       _dG_,
       _dH_,
       _dI_,
       _dJ_,
       _dK_,
       _dL_,
       _dM_,
       _dN_,
       _dO_,
       _dP_,
       _dQ_,
       _dR_,
       _dS_,
       _dT_,
       _dU_,
       _dV_,
       _dW_,
       _dX_,
       _dY_,
       _dZ_,
       _d0_,
       _d1_,
       _d2_,
       _d3_,
       _d4_,
       _d5_,
       _d6_,
       _d7_,
       _d8_,
       _d9_,
       _d__,
       _d$_,
       _ea_,
       _eb_,
       _ec_,
       _ed_,
       _ee_,
       _ef_,
       _eg_,
       include,
       _eh_,
       _ei_,
       _ej_,
       _ek_,
       _el_,
       _em_,
       _en_,
       _eo_,
       _ep_,
       _eq_,
       _er_,
       _es_,
       _et_,
       bin_shape_sexp_opaque,
       bin_size_sexp_opaque,
       bin_write_sexp_opaque,
       bin_writer_sexp_opaque,
       bin_read_sexp_opaque$0,
       bin_read_sexp_opaque,
       bin_reader_sexp_opaque,
       bin_sexp_opaque,
       compare_sexp_opaque,
       hash_fold_sexp_opaque,
       typerep_of_sexp_opaque,
       typename_of_sexp_opaque,
       _fh_,
       _fg_,
       _ff_,
       _fe_,
       _fd_,
       _fc_,
       _fb_,
       _fa_,
       _e$_,
       _e__,
       _e9_,
       _e8_,
       _e7_,
       _e6_,
       _e5_,
       _e4_,
       _e3_,
       _e2_,
       _e1_,
       _e0_,
       _eZ_,
       _eY_,
       _eX_,
       _eW_,
       _eV_,
       _eU_,
       _eT_,
       _eS_,
       _eR_,
       _eQ_,
       _eP_,
       _eO_,
       _eN_,
       _eM_,
       _eL_,
       _eK_,
       _eJ_,
       _eI_,
       _eH_,
       _eG_,
       _eF_,
       _eE_,
       _eD_,
       _eC_,
       _eB_,
       _fi_,
       _fj_,
       am_running_test,
       include$1,
       _fk_,
       _fl_];
    caml_register_global(4907,Core_kernel_Import,"Core_kernel__Import");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Sexpable);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$2);
    caml_call1(Expect_test_collector[4][1],cst_src_sexpable_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$3,cst$0);
    function V1(Sexpable,M)
     {function t_of_sexp(sexp)
       {var s=caml_call1(Sexpable[1],sexp);
        try
         {var _byc_=caml_call1(M[2],s);return _byc_}
        catch(exn)
         {exn = caml_wrap_exception(exn);return caml_call2(_et_,exn,sexp)}}
      function sexp_of_t(t)
       {var _byb_=caml_call1(M[1],t);return caml_call1(Sexpable[2],_byb_)}
      return [0,t_of_sexp,sexp_of_t]}
    var Of_sexpable=[0,V1];
    function V1$0(Sexpable,M)
     {function t_of_sexp(a_of_sexp,sexp)
       {var s=caml_call2(Sexpable[1],a_of_sexp,sexp);
        try
         {var _bya_=caml_call1(M[2],s);return _bya_}
        catch(exn)
         {exn = caml_wrap_exception(exn);return caml_call2(_et_,exn,sexp)}}
      function sexp_of_t(sexp_of_a,t)
       {var _bx$_=caml_call1(M[1],t);
        return caml_call2(Sexpable[2],sexp_of_a,_bx$_)}
      return [0,t_of_sexp,sexp_of_t]}
    var Of_sexpable1=[0,V1$0];
    function V1$1(Sexpable,M)
     {function t_of_sexp(a_of_sexp,b_of_sexp,sexp)
       {var s=caml_call3(Sexpable[1],a_of_sexp,b_of_sexp,sexp);
        try
         {var _bx__=caml_call1(M[2],s);return _bx__}
        catch(exn)
         {exn = caml_wrap_exception(exn);return caml_call2(_et_,exn,sexp)}}
      function sexp_of_t(sexp_of_a,sexp_of_b,t)
       {var _bx9_=caml_call1(M[1],t);
        return caml_call3(Sexpable[2],sexp_of_a,sexp_of_b,_bx9_)}
      return [0,t_of_sexp,sexp_of_t]}
    var Of_sexpable2=[0,V1$1];
    function V1$2(Sexpable,M)
     {function t_of_sexp(a_of_sexp,b_of_sexp,c_of_sexp,sexp)
       {var s=caml_call4(Sexpable[1],a_of_sexp,b_of_sexp,c_of_sexp,sexp);
        try
         {var _bx8_=caml_call1(M[2],s);return _bx8_}
        catch(exn)
         {exn = caml_wrap_exception(exn);return caml_call2(_et_,exn,sexp)}}
      function sexp_of_t(sexp_of_a,sexp_of_b,sexp_of_c,t)
       {var _bx7_=caml_call1(M[1],t);
        return caml_call4(Sexpable[2],sexp_of_a,sexp_of_b,sexp_of_c,_bx7_)}
      return [0,t_of_sexp,sexp_of_t]}
    var Of_sexpable3=[0,V1$2];
    function V1$3(M)
     {function t_of_sexp(sexp)
       {if(0 === sexp[0])
         {var s=sexp[1];
          try
           {var _bx6_=caml_call1(M[1],s);return _bx6_}
          catch(exn)
           {exn = caml_wrap_exception(exn);return caml_call2(_et_,exn,sexp)}}
        return caml_call2(_es_,cst_Sexpable_Of_stringable_t_o,sexp)}
      function sexp_of_t(t){return [0,caml_call1(M[2],t)]}
      return [0,t_of_sexp,sexp_of_t]}
    var Of_stringable=[0,V1$3];
    function V1$4(M)
     {function of_string(x){return caml_call2(Sexplib_Conv[74],M[1],x)}
      function to_string(x){return caml_call2(Sexplib_Conv[59],M[2],x)}
      return [0,of_string,to_string]}
    var
     To_stringable=[0,V1$4],
     Stable=
      [0,
       Of_sexpable,
       Of_sexpable1,
       Of_sexpable2,
       Of_sexpable3,
       Of_stringable,
       To_stringable];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$4);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Sexpable$0);
    var _fm_=Stable[6][1],Core_kernel_Sexpable=[0,_fm_,Stable];
    caml_register_global(4908,Core_kernel_Sexpable,"Core_kernel__Sexpable");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Binable_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$5);
    caml_call1(Expect_test_collector[4][1],cst_src_binable_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$6,cst$1);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$7);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Binable_intf$0);
    var Core_kernel_Binable_intf=[0];
    caml_register_global
     (4909,Core_kernel_Binable_intf,"Core_kernel__Binable_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Binable0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$8);
    caml_call1(Expect_test_collector[4][1],cst_src_binable0_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$9,cst$2);
    var Minimal=include$2[1];
    function V1$5(Binable,M)
     {var to_binable=M[1],of_binable=M[2];
      return caml_call1(Bin_prot_Utils[11],[0,Binable,to_binable,of_binable])}
    function V2(Binable,M)
     {var to_binable=M[1],of_binable=M[2],caller_identity=M[3];
      return caml_call1
              (Bin_prot_Utils[7],
               [0,Binable,to_binable,of_binable,caller_identity])}
    var Of_binable=[0,V1$5,V2];
    function V1$6(Binable,M)
     {var to_binable=M[1],of_binable=M[2];
      return caml_call1(Bin_prot_Utils[12],[0,Binable,to_binable,of_binable])}
    function V2$0(Binable,M)
     {var to_binable=M[1],of_binable=M[2],caller_identity=M[3];
      return caml_call1
              (Bin_prot_Utils[8],
               [0,Binable,to_binable,of_binable,caller_identity])}
    var Of_binable1=[0,V1$6,V2$0];
    function V1$7(Binable,M)
     {var to_binable=M[1],of_binable=M[2];
      return caml_call1(Bin_prot_Utils[13],[0,Binable,to_binable,of_binable])}
    function V2$1(Binable,M)
     {var to_binable=M[1],of_binable=M[2],caller_identity=M[3];
      return caml_call1
              (Bin_prot_Utils[9],
               [0,Binable,to_binable,of_binable,caller_identity])}
    var Of_binable2=[0,V1$7,V2$1];
    function V1$8(Binable,M)
     {var to_binable=M[1],of_binable=M[2];
      return caml_call1(Bin_prot_Utils[14],[0,Binable,to_binable,of_binable])}
    function V2$2(Binable,M)
     {var to_binable=M[1],of_binable=M[2],caller_identity=M[3];
      return caml_call1
              (Bin_prot_Utils[10],
               [0,Binable,to_binable,of_binable,caller_identity])}
    var Of_binable3=[0,V1$8,V2$2];
    function V1$9(M)
     {var
       to_binable=M[2],
       of_binable=M[1],
       _bxY_=caml_call1(Bin_prot_Shape[2][1],cst_t),
       _bxZ_=
        [0,
         [0,cst_Atom,[0,_cc_,0]],
         [0,
          [0,
           cst_List,
           [0,
            caml_call1
             (_df_,caml_call1(caml_call1(Bin_prot_Shape[13],_bxY_),0)),
            0]],
          0]],
       _bx0_=caml_call1(Bin_prot_Shape[9],_bxZ_),
       _bx1_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$0),0,_bx0_],0],
       _bx2_=caml_call1(Bin_prot_Shape[4][1],cst_src_binable0_ml_88_10),
       group=caml_call2(Bin_prot_Shape[6],_bx2_,_bx1_),
       _bx3_=caml_call1(Bin_prot_Shape[2][1],cst_t$1),
       bin_shape_t=caml_call1(caml_call2(Bin_prot_Shape[14],group,_bx3_),0),
       _bxX_=[0,to_binable,of_binable];
      function bin_size_t(param)
       {if(0 === param[0])
         {var v1=param[1],_bx4_=caml_call1(bin_size_t$1,v1);
          return caml_call2(Bin_prot_Common[23],1,_bx4_)}
        var v1$0=param[1],_bx5_=caml_call2(_bG_,bin_size_t,v1$0);
        return caml_call2(Bin_prot_Common[23],1,_bx5_)}
      function bin_write_t(buf,pos,param)
       {if(0 === param[0])
         {var v1=param[1],pos$0=caml_call3(Bin_prot_Write[30],buf,pos,0);
          return caml_call3(bin_write_t$1,buf,pos$0,v1)}
        var v1$0=param[1],pos$1=caml_call3(Bin_prot_Write[30],buf,pos,1);
        return caml_call3(caml_call1(_dh_,bin_write_t),buf,pos$1,v1$0)}
      function bin_read_t(buf,pos_ref,vint)
       {return caml_call2
                (Bin_prot_Common[19],
                 cst_src_binable0_ml_Stable_Of_,
                 pos_ref[1])}
      function bin_read_t$0(buf,pos_ref)
       {var match=caml_call2(Bin_prot_Read[29],buf,pos_ref);
        if(0 === match)
         {var arg_1=caml_call2(bin_read_t$3,buf,pos_ref);return [0,arg_1]}
        if(1 === match)
         {var arg_1$0=caml_call2(caml_call1(_dj_,bin_read_t$0),buf,pos_ref);
          return [1,arg_1$0]}
        return caml_call2(Bin_prot_Common[18],_fn_,pos_ref[1])}
      return caml_call1
              (caml_call1
                (Of_binable[1],
                 [0,
                  bin_shape_t,
                  bin_size_t,
                  bin_write_t,
                  bin_read_t$0,
                  bin_read_t]),
               _bxX_)}
    function V2$3(M)
     {var
       to_binable=M[2],
       of_binable=M[1],
       caller_identity=M[3],
       _bxP_=caml_call1(Bin_prot_Shape[2][1],cst_t$2),
       _bxQ_=
        [0,
         [0,cst_Atom$0,[0,_cc_,0]],
         [0,
          [0,
           cst_List$0,
           [0,
            caml_call1
             (_df_,caml_call1(caml_call1(Bin_prot_Shape[13],_bxP_),0)),
            0]],
          0]],
       _bxR_=caml_call1(Bin_prot_Shape[9],_bxQ_),
       _bxS_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$3),0,_bxR_],0],
       _bxT_=caml_call1(Bin_prot_Shape[4][1],cst_src_binable0_ml_103_10),
       group=caml_call2(Bin_prot_Shape[6],_bxT_,_bxS_),
       _bxU_=caml_call1(Bin_prot_Shape[2][1],cst_t$4),
       bin_shape_t=caml_call1(caml_call2(Bin_prot_Shape[14],group,_bxU_),0),
       _bxO_=[0,to_binable,of_binable,caller_identity];
      function bin_size_t(param)
       {if(0 === param[0])
         {var v1=param[1],_bxV_=caml_call1(bin_size_t$1,v1);
          return caml_call2(Bin_prot_Common[23],1,_bxV_)}
        var v1$0=param[1],_bxW_=caml_call2(_bG_,bin_size_t,v1$0);
        return caml_call2(Bin_prot_Common[23],1,_bxW_)}
      function bin_write_t(buf,pos,param)
       {if(0 === param[0])
         {var v1=param[1],pos$0=caml_call3(Bin_prot_Write[30],buf,pos,0);
          return caml_call3(bin_write_t$1,buf,pos$0,v1)}
        var v1$0=param[1],pos$1=caml_call3(Bin_prot_Write[30],buf,pos,1);
        return caml_call3(caml_call1(_dh_,bin_write_t),buf,pos$1,v1$0)}
      function bin_read_t(buf,pos_ref,vint)
       {return caml_call2
                (Bin_prot_Common[19],
                 cst_src_binable0_ml_Stable_Of_$0,
                 pos_ref[1])}
      function bin_read_t$0(buf,pos_ref)
       {var match=caml_call2(Bin_prot_Read[29],buf,pos_ref);
        if(0 === match)
         {var arg_1=caml_call2(bin_read_t$3,buf,pos_ref);return [0,arg_1]}
        if(1 === match)
         {var arg_1$0=caml_call2(caml_call1(_dj_,bin_read_t$0),buf,pos_ref);
          return [1,arg_1$0]}
        return caml_call2(Bin_prot_Common[18],_fo_,pos_ref[1])}
      return caml_call1
              (caml_call1
                (Of_binable[2],
                 [0,
                  bin_shape_t,
                  bin_size_t,
                  bin_write_t,
                  bin_read_t$0,
                  bin_read_t]),
               _bxO_)}
    var Of_sexpable$0=[0,V1$9,V2$3];
    function V1$10(M)
     {var
       _bxI_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$5),0,_cc_],0],
       _bxJ_=caml_call1(Bin_prot_Shape[4][1],cst_src_binable0_ml_120_10),
       group=caml_call2(Bin_prot_Shape[6],_bxJ_,_bxI_),
       _bxK_=caml_call1(Bin_prot_Shape[2][1],cst_t$6),
       bin_shape_t=caml_call1(caml_call2(Bin_prot_Shape[14],group,_bxK_),0),
       _bxL_=M[2],
       Of_binable=[248,cst_Of_binable,caml_fresh_oo_id(0)];
      function _bxM_(param)
       {if(param[1] === Of_binable)
         {var
           v1=param[3],
           v0=param[2],
           v0$0=caml_call1(_au_,v0),
           v1$0=caml_call1(sexp_of_t,v1);
          return [1,[0,_fp_,[0,v0$0,[0,v1$0,0]]]]}
        throw [0,Assert_failure,_fq_]}
      caml_call3(Sexplib0_Sexp_conv[51][2],0,Of_binable,_bxM_);
      function of_binable(s)
       {try
         {var _bxN_=caml_call1(M[1],s);return _bxN_}
        catch(x){x = caml_wrap_exception(x);throw [0,Of_binable,s,x]}}
      return caml_call1
              (Bin_prot_Utils[11],
               [0,
                [0,
                 bin_shape_t,
                 bin_size_t$1,
                 bin_write_t$1,
                 bin_read_t$3,
                 bin_read_t$4],
                _bxL_,
                of_binable])}
    function V2$4(M)
     {var
       _bxC_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$7),0,_cc_],0],
       _bxD_=caml_call1(Bin_prot_Shape[4][1],cst_src_binable0_ml_139_10),
       group=caml_call2(Bin_prot_Shape[6],_bxD_,_bxC_),
       _bxE_=caml_call1(Bin_prot_Shape[2][1],cst_t$8),
       bin_shape_t=caml_call1(caml_call2(Bin_prot_Shape[14],group,_bxE_),0),
       _bxF_=M[2],
       Of_binable=[248,cst_Of_binable$0,caml_fresh_oo_id(0)];
      function _bxG_(param)
       {if(param[1] === Of_binable)
         {var
           v1=param[3],
           v0=param[2],
           v0$0=caml_call1(_au_,v0),
           v1$0=caml_call1(sexp_of_t,v1);
          return [1,[0,_fr_,[0,v0$0,[0,v1$0,0]]]]}
        throw [0,Assert_failure,_fs_]}
      caml_call3(Sexplib0_Sexp_conv[51][2],0,Of_binable,_bxG_);
      function of_binable(s)
       {try
         {var _bxH_=caml_call1(M[1],s);return _bxH_}
        catch(x){x = caml_wrap_exception(x);throw [0,Of_binable,s,x]}}
      var caller_identity=M[3];
      return caml_call1
              (Bin_prot_Utils[7],
               [0,
                [0,
                 bin_shape_t,
                 bin_size_t$1,
                 bin_write_t$1,
                 bin_read_t$3,
                 bin_read_t$4],
                _bxF_,
                of_binable,
                caller_identity])}
    var
     Of_stringable$0=[0,V1$10,V2$4],
     Stable$0=
      [0,
       Of_binable,
       Of_binable1,
       Of_binable2,
       Of_binable3,
       Of_sexpable$0,
       Of_stringable$0];
    function of_bigstring(m,bigstring)
     {var
       pos_ref=[0,0],
       t=caml_call2(m[3],bigstring,pos_ref),
       _bxB_=runtime.caml_ba_dim_1(bigstring);
      if(caml_call2(_a5_,pos_ref[1],_bxB_))return t;
      throw [0,Assert_failure,_ft_]}
    function create_bigstring(size)
     {return caml_call3
              (Stdlib_bigarray[19][1],
               Stdlib_bigarray[13],
               Stdlib_bigarray[15],
               size)}
    function to_bigstring(opt,m,t)
     {if(opt)
       var sth=opt[1],prefix_with_length=sth;
      else
       var prefix_with_length=0;
      var
       t_length=caml_call1(m[1],t),
       bigstring_length=
        prefix_with_length?caml_call2(_aJ_,t_length,8):t_length,
       bigstring=create_bigstring(bigstring_length),
       pos=
        prefix_with_length
         ?caml_call3(Bin_prot_Write[33],bigstring,0,t_length)
         :0,
       pos$0=caml_call3(m[2],bigstring,pos,t);
      if(caml_call2(_a5_,pos$0,bigstring_length))return bigstring;
      throw [0,Assert_failure,_fu_]}
    function Of_only_functions_and_shape(X)
     {var
       _bxx_=X[5],
       _bxy_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$9),0,_bxx_],0],
       _bxz_=caml_call1(Bin_prot_Shape[4][1],cst_src_binable0_ml_227_2),
       group=caml_call2(Bin_prot_Shape[6],_bxz_,_bxy_),
       _bxA_=caml_call1(Bin_prot_Shape[2][1],cst_t$10),
       bin_shape_t=caml_call1(caml_call2(Bin_prot_Shape[14],group,_bxA_),0),
       bin_size_t=X[1],
       bin_write_t=X[2],
       bin_writer_t=[0,bin_size_t,bin_write_t],
       bin_read_t=X[4],
       bin_read_t$0=X[3],
       bin_reader_t=[0,bin_read_t$0,bin_read_t],
       bin_t=[0,bin_shape_t,bin_writer_t,bin_reader_t];
      return [0,
              bin_size_t,
              bin_write_t,
              bin_read_t$0,
              bin_read_t,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$10);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Binable0$0);
    var
     include$3=
      [0,
       Minimal,
       Stable$0,
       of_bigstring,
       create_bigstring,
       to_bigstring,
       Of_only_functions_and_shape];
    caml_register_global(4917,include$3,"Core_kernel__Binable0");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Printf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$11);
    caml_call1(Expect_test_collector[4][1],cst_src_printf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$12,cst$3);
    var
     _fv_=include$4[1],
     _fw_=include$4[2],
     _fx_=include$4[3],
     _fy_=include$4[4],
     failwithf=include$4[6],
     _fB_=Stdio_Out_channel[26],
     _fC_=Stdio_Out_channel[22],
     _fE_=Stdio_Out_channel[23],
     _fz_=include$4[5],
     _fA_=include$4[7],
     _fD_=Stdio_Out_channel[27];
    function exitf(fmt)
     {return caml_call2
              (_fy_,
               function(s,param)
                {caml_call2(_fB_,_fF_,s);return caml_call1(Stdlib[99],1)},
               fmt)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$13);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Printf$0);
    var
     Core_kernel_Printf=
      [0,_fv_,_fw_,_fx_,_fy_,_fz_,failwithf,_fA_,_fB_,_fC_,_fD_,_fE_,exitf];
    caml_register_global(4920,Core_kernel_Printf,"Core_kernel__Printf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Perms);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$14);
    caml_call1(Expect_test_collector[4][1],cst_src_perms_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$15,cst$4);
    var
     _fG_=caml_call1(Bin_prot_Shape[9],0),
     _fH_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$11),0,_fG_],0],
     _fI_=caml_call1(Bin_prot_Shape[4][1],cst_src_perms_ml_9_4),
     group$0=caml_call2(Bin_prot_Shape[6],_fI_,_fH_),
     _fJ_=caml_call1(Bin_prot_Shape[2][1],cst_t$12),
     bin_shape_t=caml_call1(caml_call2(Bin_prot_Shape[14],group$0,_fJ_),0);
    function bin_size_t$9(v)
     {throw [0,Bin_prot_Common[17],cst_src_perms_ml_Types_Nobody_]}
    function bin_write_t$9(buf,param,v)
     {throw [0,Bin_prot_Common[17],cst_src_perms_ml_Types_Nobody_$0]}
    var bin_writer_t=[0,bin_size_t$9,bin_write_t$9];
    function bin_read_t$19(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],
               cst_src_perms_ml_Types_Nobody_$1,
               pos_ref[1])}
    function bin_read_t$20(buf,pos_ref)
     {return caml_call2(Bin_prot_Common[18],_fK_,pos_ref[1])}
    var
     bin_reader_t=[0,bin_read_t$20,bin_read_t$19],
     bin_t=[0,bin_shape_t,bin_writer_t,bin_reader_t];
    function compare$0(a_001,b_002)
     {return caml_call3(Ppx_compare_lib[2],cst_t$13,a_001,b_002)}
    function hash_fold_t$0(hsv,arg)
     {return caml_call1(_bl_,cst_hash_called_on_the_type_t_)}
    function hash(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_bxw_=hash_fold_t$0(hsv,x);
      return caml_call1(Base_Hash[9],_bxw_)}
    function t_of_sexp$0(sexp)
     {return caml_call2(Sexplib0_Sexp_conv_error[26],tp_loc,sexp)}
    function sexp_of_t$1(v){throw [0,Assert_failure,_fL_]}
    var
     _fM_=caml_call1(Bin_prot_Shape[9],0),
     _fN_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$14),0,_fM_],0],
     _fO_=caml_call1(Bin_prot_Shape[4][1],cst_src_perms_ml_15_4),
     group$1=caml_call2(Bin_prot_Shape[6],_fO_,_fN_),
     _fP_=caml_call1(Bin_prot_Shape[2][1],cst_t$15),
     bin_shape_t$0=caml_call1(caml_call2(Bin_prot_Shape[14],group$1,_fP_),0);
    function bin_size_t$10(v)
     {throw [0,Bin_prot_Common[17],cst_src_perms_ml_Types_Me_t]}
    function bin_write_t$10(buf,param,v)
     {throw [0,Bin_prot_Common[17],cst_src_perms_ml_Types_Me_t$0]}
    var bin_writer_t$0=[0,bin_size_t$10,bin_write_t$10];
    function bin_read_t$21(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_src_perms_ml_Types_Me_t$1,pos_ref[1])}
    function bin_read_t$22(buf,pos_ref)
     {return caml_call2(Bin_prot_Common[18],_fQ_,pos_ref[1])}
    var
     bin_reader_t$0=[0,bin_read_t$22,bin_read_t$21],
     bin_t$0=[0,bin_shape_t$0,bin_writer_t$0,bin_reader_t$0];
    function compare$1(a_003,b_004)
     {return caml_call3(Ppx_compare_lib[2],cst_t$16,a_003,b_004)}
    function hash_fold_t$1(hsv,arg)
     {return caml_call1(_bl_,cst_hash_called_on_the_type_t_$0)}
    function hash$0(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_bxv_=hash_fold_t$1(hsv,x);
      return caml_call1(Base_Hash[9],_bxv_)}
    function t_of_sexp$1(sexp)
     {return caml_call2(Sexplib0_Sexp_conv_error[26],tp_loc$0,sexp)}
    function sexp_of_t$2(v){throw [0,Assert_failure,_fR_]}
    var
     _fS_=[0,caml_call2(Bin_prot_Shape[10],cst_Read,0),0],
     _fT_=caml_call1(Bin_prot_Shape[4][1],cst_src_perms_ml_21_13),
     _fU_=caml_call2(Bin_prot_Shape[12],_fT_,_fS_),
     _fV_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$17),0,_fU_],0],
     _fW_=caml_call1(Bin_prot_Shape[4][1],cst_src_perms_ml_21_4),
     group$2=caml_call2(Bin_prot_Shape[6],_fW_,_fV_),
     _fX_=caml_call1(Bin_prot_Shape[2][1],cst_t$18),
     bin_shape_t$1=caml_call1(caml_call2(Bin_prot_Shape[14],group$2,_fX_),0);
    function bin_size_t$11(param){return 4}
    function bin_write_t$11(buf,pos,param)
     {return caml_call3(Bin_prot_Write[29],buf,pos,914388854)}
    var bin_writer_t$1=[0,bin_size_t$11,bin_write_t$11];
    function bin_read_t$23(buf,param,vint)
     {if(914388854 === vint)return 914388854;throw Bin_prot_Common[13]}
    function bin_read_t$24(buf,pos_ref)
     {var vint=caml_call2(Bin_prot_Read[28],buf,pos_ref);
      try
       {var _bxt_=bin_read_t$23(buf,pos_ref,vint);return _bxt_}
      catch(_bxu_)
       {_bxu_ = caml_wrap_exception(_bxu_);
        if(_bxu_ === Bin_prot_Common[13])
         return caml_call2(Bin_prot_Common[18],err,pos_ref[1]);
        throw _bxu_}}
    var
     bin_reader_t$1=[0,bin_read_t$24,bin_read_t$23],
     bin_t$1=[0,bin_shape_t$1,bin_writer_t$1,bin_reader_t$1];
    function compare$2(a_005,b_006)
     {return caml_call2(Ppx_compare_lib[1],a_005,b_006)?0:0}
    function hash_fold_t$2(hsv,arg)
     {return caml_call2(Base_Hash[3],hsv,914388854)}
    function hash$1(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_bxs_=hash_fold_t$2(hsv,x);
      return caml_call1(Base_Hash[9],_bxs_)}
    function t_of_sexp$2(sexp)
     {if(0 === sexp[0])
       {var atom=sexp[1];
        return caml_string_notequal(atom,cst_Read$0)
                ?caml_call1(Sexplib0_Sexp_conv_error[19],0)
                :914388854}
      var _bxq_=sexp[1];
      if(_bxq_)
       {var _bxr_=_bxq_[1];
        if(0 === _bxr_[0])
         {var atom$0=_bxr_[1];
          return caml_string_notequal(atom$0,cst_Read$1)
                  ?caml_call1(Sexplib0_Sexp_conv_error[19],0)
                  :caml_call2(Sexplib0_Sexp_conv_error[21],tp_loc$1,sexp)}
        return caml_call2(Sexplib0_Sexp_conv_error[24],tp_loc$1,sexp)}
      return caml_call2(Sexplib0_Sexp_conv_error[25],tp_loc$1,sexp)}
    function t_of_sexp$3(sexp)
     {try
       {var _bxo_=t_of_sexp$2(sexp);return _bxo_}
      catch(_bxp_)
       {_bxp_ = caml_wrap_exception(_bxp_);
        if(_bxp_ === Sexplib0_Sexp_conv_error[18])
         return caml_call2(Sexplib0_Sexp_conv_error[20],tp_loc$2,sexp);
        throw _bxp_}}
    function sexp_of_t$3(param){return _fY_}
    var
     _fZ_=
      [0,caml_call2(Bin_prot_Shape[10],cst_Who_can_write,[0,bin_shape_t$0]),0],
     _f0_=caml_call1(Bin_prot_Shape[4][1],cst_src_perms_ml_27_13),
     _f1_=caml_call2(Bin_prot_Shape[12],_f0_,_fZ_),
     _f2_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$19),0,_f1_],0],
     _f3_=caml_call1(Bin_prot_Shape[4][1],cst_src_perms_ml_27_4),
     group$3=caml_call2(Bin_prot_Shape[6],_f3_,_f2_),
     _f4_=caml_call1(Bin_prot_Shape[2][1],cst_t$20),
     bin_shape_t$2=caml_call1(caml_call2(Bin_prot_Shape[14],group$3,_f4_),0);
    function bin_size_t$12(param)
     {var args=param[2],size_args=bin_size_t$10(args);
      return caml_call2(Bin_prot_Common[23],size_args,4)}
    function bin_write_t$12(buf,pos,param)
     {var
       args=param[2],
       pos$0=caml_call3(Bin_prot_Write[29],buf,pos,271892623);
      return bin_write_t$10(buf,pos$0,args)}
    var bin_writer_t$2=[0,bin_size_t$12,bin_write_t$12];
    function bin_read_t$25(buf,pos_ref,vint)
     {if(271892623 === vint)
       {var arg_1=bin_read_t$22(buf,pos_ref);return [0,271892623,arg_1]}
      throw Bin_prot_Common[13]}
    function bin_read_t$26(buf,pos_ref)
     {var vint=caml_call2(Bin_prot_Read[28],buf,pos_ref);
      try
       {var _bxm_=bin_read_t$25(buf,pos_ref,vint);return _bxm_}
      catch(_bxn_)
       {_bxn_ = caml_wrap_exception(_bxn_);
        if(_bxn_ === Bin_prot_Common[13])
         return caml_call2(Bin_prot_Common[18],err$0,pos_ref[1]);
        throw _bxn_}}
    var
     bin_reader_t$2=[0,bin_read_t$26,bin_read_t$25],
     bin_t$2=[0,bin_shape_t$2,bin_writer_t$2,bin_reader_t$2];
    function compare$3(a_007,b_008)
     {if(caml_call2(Ppx_compare_lib[1],a_007,b_008))return 0;
      var right_010=b_008[2],left_009=a_007[2];
      return compare$1(left_009,right_010)}
    function hash_fold_t$3(hsv,arg)
     {var v=arg[2],hsv$0=caml_call2(Base_Hash[3],hsv,271892623);
      return hash_fold_t$1(hsv$0,v)}
    function hash$2(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_bxl_=hash_fold_t$3(hsv,x);
      return caml_call1(Base_Hash[9],_bxl_)}
    function t_of_sexp$4(sexp)
     {if(0 === sexp[0])
       {var atom=sexp[1];
        return caml_string_notequal(atom,cst_Who_can_write$0)
                ?caml_call1(Sexplib0_Sexp_conv_error[19],0)
                :caml_call2(Sexplib0_Sexp_conv_error[23],tp_loc$3,sexp)}
      var _bxj_=sexp[1];
      if(_bxj_)
       {var _bxk_=_bxj_[1];
        if(0 === _bxk_[0])
         {var sexp_args=_bxj_[2],atom$0=_bxk_[1];
          if(caml_string_notequal(atom$0,cst_Who_can_write$1))
           return caml_call1(Sexplib0_Sexp_conv_error[19],0);
          if(sexp_args && ! sexp_args[2])
           {var v0=sexp_args[1],v0$0=t_of_sexp$1(v0);
            return [0,271892623,v0$0]}
          return caml_call3(Sexplib0_Sexp_conv_error[22],tp_loc$3,atom$0,sexp)}
        return caml_call2(Sexplib0_Sexp_conv_error[24],tp_loc$3,sexp)}
      return caml_call2(Sexplib0_Sexp_conv_error[25],tp_loc$3,sexp)}
    function t_of_sexp$5(sexp)
     {try
       {var _bxh_=t_of_sexp$4(sexp);return _bxh_}
      catch(_bxi_)
       {_bxi_ = caml_wrap_exception(_bxi_);
        if(_bxi_ === Sexplib0_Sexp_conv_error[18])
         return caml_call2(Sexplib0_Sexp_conv_error[20],tp_loc$4,sexp);
        throw _bxi_}}
    function sexp_of_t$4(param)
     {var v0=param[2];return [1,[0,_f5_,[0,sexp_of_t$2(v0),0]]]}
    var
     _f6_=
      [0,caml_call2(Bin_prot_Shape[10],cst_Who_can_write$2,[0,bin_shape_t]),0],
     _f7_=caml_call1(Bin_prot_Shape[4][1],cst_src_perms_ml_34_8),
     _f8_=[0,caml_call2(Bin_prot_Shape[11],_f7_,bin_shape_t$1),_f6_],
     _f9_=caml_call1(Bin_prot_Shape[4][1],cst_src_perms_ml_34_6),
     _f__=caml_call2(Bin_prot_Shape[12],_f9_,_f8_),
     _f$_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$21),0,_f__],0],
     _ga_=caml_call1(Bin_prot_Shape[4][1],cst_src_perms_ml_33_4),
     group$4=caml_call2(Bin_prot_Shape[6],_ga_,_f$_),
     _gb_=caml_call1(Bin_prot_Shape[2][1],cst_t$22),
     bin_shape_t$3=caml_call1(caml_call2(Bin_prot_Shape[14],group$4,_gb_),0);
    function bin_size_t$13(v)
     {if(typeof v === "number")return 4;
      var args=v[2],size_args=bin_size_t$9(args);
      return caml_call2(Bin_prot_Common[23],size_args,4)}
    function bin_write_t$13(buf,pos,v)
     {if(typeof v === "number")return bin_write_t$11(buf,pos,v);
      var args=v[2],pos$0=caml_call3(Bin_prot_Write[29],buf,pos,271892623);
      return bin_write_t$9(buf,pos$0,args)}
    var bin_writer_t$3=[0,bin_size_t$13,bin_write_t$13];
    function bin_read_t$27(buf,pos_ref,vint)
     {try
       {var _bxf_=bin_read_t$23(buf,pos_ref,vint);return _bxf_}
      catch(_bxg_)
       {_bxg_ = caml_wrap_exception(_bxg_);
        if(_bxg_ === Bin_prot_Common[13])
         {if(271892623 === vint)
           {var arg_1=bin_read_t$20(buf,pos_ref);return [0,271892623,arg_1]}
          throw Bin_prot_Common[13]}
        throw _bxg_}}
    function bin_read_t$28(buf,pos_ref)
     {var vint=caml_call2(Bin_prot_Read[28],buf,pos_ref);
      try
       {var _bxd_=bin_read_t$27(buf,pos_ref,vint);return _bxd_}
      catch(_bxe_)
       {_bxe_ = caml_wrap_exception(_bxe_);
        if(_bxe_ === Bin_prot_Common[13])
         return caml_call2(Bin_prot_Common[18],err$1,pos_ref[1]);
        throw _bxe_}}
    var
     bin_reader_t$3=[0,bin_read_t$28,bin_read_t$27],
     bin_t$3=[0,bin_shape_t$3,bin_writer_t$3,bin_reader_t$3];
    function compare$4(a_011,b_012)
     {if(caml_call2(Ppx_compare_lib[1],a_011,b_012))return 0;
      if(typeof a_011 === "number")
       {if(914388854 === b_012)return compare$2(a_011,b_012)}
      else
       if(typeof b_012 !== "number" && 271892623 === b_012[1])
        {var right_016=b_012[2],left_015=a_011[2];
         return compare$0(left_015,right_016)}
      return caml_compare(a_011,b_012)}
    function hash_fold_t$4(hsv,arg)
     {if(typeof arg === "number")return hash_fold_t$2(hsv,arg);
      var v=arg[2],hsv$0=caml_call2(Base_Hash[3],hsv,271892623);
      return hash_fold_t$0(hsv$0,v)}
    function hash$3(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_bxc_=hash_fold_t$4(hsv,x);
      return caml_call1(Base_Hash[9],_bxc_)}
    function t_of_sexp$6(sexp)
     {try
       {try
         {var _bw__=t_of_sexp$2(sexp),_bw$_=_bw__}
        catch(_bxb_)
         {_bxb_ = caml_wrap_exception(_bxb_);
          if(_bxb_ !== Sexplib0_Sexp_conv_error[18])throw _bxb_;
          if(0 === sexp[0])
           var
            atom=sexp[1],
            _bw$_=
             caml_string_notequal(atom,cst_Who_can_write$3)
              ?caml_call1(Sexplib0_Sexp_conv_error[19],0)
              :caml_call2(Sexplib0_Sexp_conv_error[23],tp_loc$5,sexp);
          else
           {var _bw8_=sexp[1];
            if(_bw8_)
             {var _bw9_=_bw8_[1];
              if(0 === _bw9_[0])
               {var sexp_args=_bw8_[2],atom$0=_bw9_[1];
                if(caml_string_notequal(atom$0,cst_Who_can_write$4))
                 var _bw$_=caml_call1(Sexplib0_Sexp_conv_error[19],0);
                else
                 {var switch$0=0;
                  if(sexp_args && ! sexp_args[2])
                   var
                    v0=sexp_args[1],
                    v0$0=t_of_sexp$0(v0),
                    _bw$_=[0,271892623,v0$0];
                  else
                   switch$0 = 1;
                  if(switch$0)
                   var
                    _bw$_=
                     caml_call3
                      (Sexplib0_Sexp_conv_error[22],tp_loc$5,atom$0,sexp)}}
              else
               var
                _bw$_=
                 caml_call2(Sexplib0_Sexp_conv_error[24],tp_loc$5,sexp)}
            else
             var _bw$_=caml_call2(Sexplib0_Sexp_conv_error[25],tp_loc$5,sexp)}}
        return _bw$_}
      catch(_bxa_)
       {_bxa_ = caml_wrap_exception(_bxa_);
        if(_bxa_ === Sexplib0_Sexp_conv_error[18])
         return caml_call2(Sexplib0_Sexp_conv_error[20],tp_loc$6,sexp);
        throw _bxa_}}
    function sexp_of_t$5(v)
     {if(typeof v === "number")return sexp_of_t$3(v);
      var v0=v[2];
      return [1,[0,_gc_,[0,sexp_of_t$1(v0),0]]]}
    var
     _gd_=caml_call1(Bin_prot_Shape[4][1],cst_src_perms_ml_45_8),
     _ge_=[0,caml_call2(Bin_prot_Shape[11],_gd_,bin_shape_t$2),0],
     _gf_=caml_call1(Bin_prot_Shape[4][1],cst_src_perms_ml_44_8),
     _gg_=[0,caml_call2(Bin_prot_Shape[11],_gf_,bin_shape_t$1),_ge_],
     _gh_=caml_call1(Bin_prot_Shape[4][1],cst_src_perms_ml_44_6),
     _gi_=caml_call2(Bin_prot_Shape[12],_gh_,_gg_),
     _gj_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$23),0,_gi_],0],
     _gk_=caml_call1(Bin_prot_Shape[4][1],cst_src_perms_ml_43_4),
     group$5=caml_call2(Bin_prot_Shape[6],_gk_,_gj_),
     _gl_=caml_call1(Bin_prot_Shape[2][1],cst_t$24),
     bin_shape_t$4=caml_call1(caml_call2(Bin_prot_Shape[14],group$5,_gl_),0);
    function bin_size_t$14(v){return typeof v === "number"?4:bin_size_t$12(v)}
    function bin_write_t$14(buf,pos,v)
     {return typeof v === "number"
              ?bin_write_t$11(buf,pos,v)
              :bin_write_t$12(buf,pos,v)}
    var bin_writer_t$4=[0,bin_size_t$14,bin_write_t$14];
    function bin_read_t$29(buf,pos_ref,vint)
     {try
       {var _bw6_=bin_read_t$23(buf,pos_ref,vint);return _bw6_}
      catch(_bw7_)
       {_bw7_ = caml_wrap_exception(_bw7_);
        if(_bw7_ === Bin_prot_Common[13])
         return bin_read_t$25(buf,pos_ref,vint);
        throw _bw7_}}
    function bin_read_t$30(buf,pos_ref)
     {var vint=caml_call2(Bin_prot_Read[28],buf,pos_ref);
      try
       {var _bw4_=bin_read_t$29(buf,pos_ref,vint);return _bw4_}
      catch(_bw5_)
       {_bw5_ = caml_wrap_exception(_bw5_);
        if(_bw5_ === Bin_prot_Common[13])
         return caml_call2(Bin_prot_Common[18],err$2,pos_ref[1]);
        throw _bw5_}}
    var
     bin_reader_t$4=[0,bin_read_t$30,bin_read_t$29],
     bin_t$4=[0,bin_shape_t$4,bin_writer_t$4,bin_reader_t$4];
    function compare$5(a_017,b_018)
     {if(caml_call2(Ppx_compare_lib[1],a_017,b_018))return 0;
      if(typeof a_017 === "number")
       {if(914388854 === b_018)return compare$2(a_017,b_018)}
      else
       if(typeof b_018 !== "number" && 271892623 === b_018[1])
        return compare$3(a_017,b_018);
      return caml_compare(a_017,b_018)}
    function hash_fold_t$5(hsv,arg)
     {return typeof arg === "number"
              ?hash_fold_t$2(hsv,arg)
              :hash_fold_t$3(hsv,arg)}
    function hash$4(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_bw3_=hash_fold_t$5(hsv,x);
      return caml_call1(Base_Hash[9],_bw3_)}
    function t_of_sexp$7(sexp)
     {try
       {try
         {var _bwZ_=t_of_sexp$2(sexp),_bw0_=_bwZ_}
        catch(_bw2_)
         {_bw2_ = caml_wrap_exception(_bw2_);
          if(_bw2_ !== Sexplib0_Sexp_conv_error[18])throw _bw2_;
          var _bw0_=t_of_sexp$4(sexp)}
        return _bw0_}
      catch(_bw1_)
       {_bw1_ = caml_wrap_exception(_bw1_);
        if(_bw1_ === Sexplib0_Sexp_conv_error[18])
         return caml_call2(Sexplib0_Sexp_conv_error[20],tp_loc$7,sexp);
        throw _bw1_}}
    function sexp_of_t$6(v)
     {return typeof v === "number"?sexp_of_t$3(v):sexp_of_t$4(v)}
    var
     _gm_=caml_call1(Bin_prot_Shape[3][1],cst_a$1),
     _gn_=caml_call1(Bin_prot_Shape[4][1],cst_src_perms_ml_55_26),
     _go_=[0,caml_call2(Bin_prot_Shape[15],_gn_,_gm_)],
     _gp_=[0,caml_call2(Bin_prot_Shape[10],cst_Who_can_write$5,_go_),0],
     _gq_=caml_call1(Bin_prot_Shape[4][1],cst_src_perms_ml_54_8),
     _gr_=[0,caml_call2(Bin_prot_Shape[11],_gq_,bin_shape_t$1),_gp_],
     _gs_=caml_call1(Bin_prot_Shape[4][1],cst_src_perms_ml_54_6),
     _gt_=caml_call2(Bin_prot_Shape[12],_gs_,_gr_),
     _gu_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$2),0],
     _gv_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$25),_gu_,_gt_],0],
     _gw_=caml_call1(Bin_prot_Shape[4][1],cst_src_perms_ml_53_4),
     group$6=caml_call2(Bin_prot_Shape[6],_gw_,_gv_);
    function bin_shape_t$5(a)
     {var _bwY_=caml_call1(Bin_prot_Shape[2][1],cst_t$26);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$6,_bwY_),[0,a,0])}
    function bin_read_t$31(of_a,buf,pos_ref,vint)
     {try
       {var _bwW_=bin_read_t$23(buf,pos_ref,vint);return _bwW_}
      catch(_bwX_)
       {_bwX_ = caml_wrap_exception(_bwX_);
        if(_bwX_ === Bin_prot_Common[13])
         {if(271892623 === vint)
           {var arg_1=caml_call2(of_a,buf,pos_ref);return [0,271892623,arg_1]}
          throw Bin_prot_Common[13]}
        throw _bwX_}}
    function bin_read_t$32(of_a,buf,pos_ref)
     {var vint=caml_call2(Bin_prot_Read[28],buf,pos_ref);
      try
       {var
         _bwR_=
          function(_bwT_,_bwU_,_bwV_)
            {return bin_read_t$31(of_a,_bwT_,_bwU_,_bwV_)}
           (buf,pos_ref,vint);
        return _bwR_}
      catch(_bwS_)
       {_bwS_ = caml_wrap_exception(_bwS_);
        if(_bwS_ === Bin_prot_Common[13])
         return caml_call2(Bin_prot_Common[18],err$3,pos_ref[1]);
        throw _bwS_}}
    function Only_used_as_phantom_type1(Name)
     {function sexp_of_t(param,_bwQ_)
       {return caml_call3(failwithf,_gy_,Name[1],0)}
      function t_of_sexp(param,_bwP_)
       {return caml_call3(failwithf,_gz_,Name[1],0)}
      function compare(param,_bwO_,_bwN_)
       {return caml_call3(failwithf,_gA_,Name[1],0)}
      function hash_fold_t(param,_bwM_,_bwL_)
       {return caml_call3(failwithf,_gB_,Name[1],0)}
      function to_binable(param){return caml_call3(failwithf,_gC_,Name[1],0)}
      function of_binable(param){return caml_call3(failwithf,_gD_,Name[1],0)}
      var
       _bwE_=caml_call1(Bin_prot_Shape[3][1],cst_a$3),
       _bwF_=caml_call1(Bin_prot_Shape[4][1],cst_src_perms_ml_84_20),
       _bwG_=caml_call2(Bin_prot_Shape[15],_bwF_,_bwE_),
       _bwH_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$4),0],
       _bwI_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$27),_bwH_,_bwG_],0],
       _bwJ_=caml_call1(Bin_prot_Shape[4][1],cst_src_perms_ml_84_8),
       group=caml_call2(Bin_prot_Shape[6],_bwJ_,_bwI_),
       _bwD_=[0,to_binable,of_binable];
      function bin_shape_t(a)
       {var _bwK_=caml_call1(Bin_prot_Shape[2][1],cst_t$28);
        return caml_call1(caml_call2(Bin_prot_Shape[14],group,_bwK_),[0,a,0])}
      function bin_size_t(size_of_a){return size_of_a}
      function bin_write_t(write_a){return write_a}
      function bin_read_t(of_a,buf,pos_ref,vint)
       {return caml_call2(Bin_prot_Common[18],_gE_,pos_ref[1])}
      function bin_read_t$0(of_a){return of_a}
      var
       include=
        caml_call1
         (caml_call1
           (Stable$0[2][1],
            [0,bin_shape_t,bin_size_t,bin_write_t,bin_read_t$0,bin_read_t]),
          _bwD_),
       bin_shape_t$0=include[1],
       bin_size_t$0=include[2],
       bin_write_t$0=include[3],
       bin_read_t$1=include[4],
       bin_read_t$2=include[5],
       bin_writer_t=include[6],
       bin_reader_t=include[7],
       bin_t=include[8];
      return [0,
              bin_shape_t$0,
              bin_size_t$0,
              bin_write_t$0,
              bin_read_t$1,
              bin_read_t$2,
              bin_writer_t,
              bin_reader_t,
              bin_t,
              compare,
              hash_fold_t,
              t_of_sexp,
              sexp_of_t]}
    function Only_used_as_phantom_type0(T)
     {var
       M=Only_used_as_phantom_type1([0,T[14]]),
       _bwx_=caml_call1(M[1],T[5]),
       _bwy_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$29),0,_bwx_],0],
       _bwz_=caml_call1(Bin_prot_Shape[4][1],cst_src_perms_ml_108_2),
       group=caml_call2(Bin_prot_Shape[6],_bwz_,_bwy_),
       _bwA_=caml_call1(Bin_prot_Shape[2][1],cst_t$30),
       bin_shape_t=caml_call1(caml_call2(Bin_prot_Shape[14],group,_bwA_),0);
      function bin_size_t(v){return caml_call2(M[2],T[1],v)}
      function bin_write_t(buf,pos,v)
       {return caml_call3(caml_call1(M[3],T[2]),buf,pos,v)}
      var bin_writer_t=[0,bin_size_t,bin_write_t];
      function bin_read_t(buf,pos_ref,vint)
       {return caml_call3(caml_call1(M[5],T[3]),buf,pos_ref,vint)}
      function bin_read_t$0(buf,pos_ref)
       {return caml_call2(caml_call1(M[4],T[3]),buf,pos_ref)}
      var
       bin_reader_t=[0,bin_read_t$0,bin_read_t],
       bin_t=[0,bin_shape_t,bin_writer_t,bin_reader_t];
      function compare(a_029,b_030)
       {function _bwC_(a_031,b_032){return caml_call2(T[9],a_031,b_032)}
        return caml_call3(M[9],_bwC_,a_029,b_030)}
      function hash_fold_t(hsv,arg){return caml_call3(M[10],T[10],hsv,arg)}
      function hash(x)
       {var hsv=caml_call2(Base_Hash[11],0,0),_bwB_=hash_fold_t(hsv,x);
        return caml_call1(Base_Hash[9],_bwB_)}
      function t_of_sexp(t){return caml_call2(M[11],T[12],t)}
      function sexp_of_t(v){return caml_call2(M[12],T[13],v)}
      return [0,
              bin_size_t,
              bin_write_t,
              bin_read_t$0,
              bin_read_t,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t,
              compare,
              hash_fold_t,
              hash,
              t_of_sexp,
              t_of_sexp,
              sexp_of_t]}
    var
     Nobody=
      Only_used_as_phantom_type0
       ([0,
         bin_size_t$9,
         bin_write_t$9,
         bin_read_t$20,
         bin_read_t$19,
         bin_shape_t,
         bin_writer_t,
         bin_reader_t,
         bin_t,
         compare$0,
         hash_fold_t$0,
         hash,
         t_of_sexp$0,
         sexp_of_t$1,
         name$0]),
     Me=
      Only_used_as_phantom_type0
       ([0,
         bin_size_t$10,
         bin_write_t$10,
         bin_read_t$22,
         bin_read_t$21,
         bin_shape_t$0,
         bin_writer_t$0,
         bin_reader_t$0,
         bin_t$0,
         compare$1,
         hash_fold_t$1,
         hash$0,
         t_of_sexp$1,
         sexp_of_t$2,
         name$1]),
     Read=
      Only_used_as_phantom_type0
       ([0,
         bin_size_t$11,
         bin_write_t$11,
         bin_read_t$24,
         bin_read_t$23,
         bin_shape_t$1,
         bin_writer_t$1,
         bin_reader_t$1,
         bin_t$1,
         compare$2,
         hash_fold_t$2,
         hash$1,
         t_of_sexp$3,
         sexp_of_t$3,
         name$2]),
     Write=
      Only_used_as_phantom_type0
       ([0,
         bin_size_t$12,
         bin_write_t$12,
         bin_read_t$26,
         bin_read_t$25,
         bin_shape_t$2,
         bin_writer_t$2,
         bin_reader_t$2,
         bin_t$2,
         compare$3,
         hash_fold_t$3,
         hash$2,
         t_of_sexp$5,
         sexp_of_t$4,
         name$3]),
     Read_write=
      Only_used_as_phantom_type0
       ([0,
         bin_size_t$14,
         bin_write_t$14,
         bin_read_t$30,
         bin_read_t$29,
         bin_shape_t$4,
         bin_writer_t$4,
         bin_reader_t$4,
         bin_t$4,
         compare$5,
         hash_fold_t$5,
         hash$4,
         t_of_sexp$7,
         sexp_of_t$6,
         name$5]),
     Immutable=
      Only_used_as_phantom_type0
       ([0,
         bin_size_t$13,
         bin_write_t$13,
         bin_read_t$28,
         bin_read_t$27,
         bin_shape_t$3,
         bin_writer_t$3,
         bin_reader_t$3,
         bin_t$3,
         compare$4,
         hash_fold_t$4,
         hash$3,
         t_of_sexp$6,
         sexp_of_t$5,
         name$4]),
     _gF_=Nobody[5],
     _gG_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_nobody),0,_gF_],0],
     _gH_=caml_call1(Bin_prot_Shape[4][1],cst_src_perms_ml_122_4),
     group$7=caml_call2(Bin_prot_Shape[6],_gH_,_gG_),
     _gI_=caml_call1(Bin_prot_Shape[2][1],cst_nobody$0),
     bin_shape_nobody=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$7,_gI_),0),
     bin_size_nobody=Nobody[1],
     bin_write_nobody=Nobody[2],
     bin_writer_nobody=[0,bin_size_nobody,bin_write_nobody],
     bin_read_nobody=Nobody[4],
     bin_read_nobody$0=Nobody[3],
     bin_reader_nobody=[0,bin_read_nobody$0,bin_read_nobody],
     bin_nobody=[0,bin_shape_nobody,bin_writer_nobody,bin_reader_nobody],
     compare_nobody=Nobody[9],
     hash_fold_nobody=Nobody[10],
     func=Nobody[11];
    function hash_nobody(x){return caml_call1(func,x)}
    var
     nobody_of_sexp=Nobody[12],
     sexp_of_nobody=Nobody[14],
     _gJ_=Me[5],
     _gK_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_me),0,_gJ_],0],
     _gL_=caml_call1(Bin_prot_Shape[4][1],cst_src_perms_ml_123_4),
     group$8=caml_call2(Bin_prot_Shape[6],_gL_,_gK_),
     _gM_=caml_call1(Bin_prot_Shape[2][1],cst_me$0),
     bin_shape_me=caml_call1(caml_call2(Bin_prot_Shape[14],group$8,_gM_),0),
     bin_size_me=Me[1],
     bin_write_me=Me[2],
     bin_writer_me=[0,bin_size_me,bin_write_me],
     bin_read_me=Me[4],
     bin_read_me$0=Me[3],
     bin_reader_me=[0,bin_read_me$0,bin_read_me],
     bin_me=[0,bin_shape_me,bin_writer_me,bin_reader_me],
     compare_me=Me[9],
     hash_fold_me=Me[10],
     func$0=Me[11];
    function hash_me(x){return caml_call1(func$0,x)}
    var
     me_of_sexp=Me[12],
     sexp_of_me=Me[14],
     M=Only_used_as_phantom_type1([0,name$6]),
     _gN_=caml_call1(Bin_prot_Shape[3][1],cst_a$5),
     _gO_=caml_call1(Bin_prot_Shape[4][1],cst_src_perms_ml_128_18),
     _gP_=bin_shape_t$5(caml_call2(Bin_prot_Shape[15],_gO_,_gN_)),
     _gQ_=caml_call1(M[1],_gP_),
     _gR_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$6),0],
     _gS_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$31),_gR_,_gQ_],0],
     _gT_=caml_call1(Bin_prot_Shape[4][1],cst_src_perms_ml_128_6),
     group$9=caml_call2(Bin_prot_Shape[6],_gT_,_gS_);
    function bin_shape_t$6(a)
     {var _bww_=caml_call1(Bin_prot_Shape[2][1],cst_t$32);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$9,_bww_),[0,a,0])}
    function bin_size_t$15(size_of_a,v)
     {function _bwv_(v)
       {if(typeof v === "number")return 4;
        var args=v[2],size_args=caml_call1(size_of_a,args);
        return caml_call2(Bin_prot_Common[23],size_args,4)}
      return caml_call2(M[2],_bwv_,v)}
    function bin_write_t$15(write_a,buf,pos,v)
     {function _bwu_(buf,pos$0,v)
       {if(typeof v === "number")return bin_write_t$11(buf,pos$0,v);
        var args=v[2],pos=caml_call3(Bin_prot_Write[29],buf,pos$0,271892623);
        return caml_call3(write_a,buf,pos,args)}
      return caml_call3(caml_call1(M[3],_bwu_),buf,pos,v)}
    function bin_writer_t$5(bin_writer_a)
     {function _bwq_(v)
       {var _bwr_=bin_writer_a[2];
        return function(_bws_,_bwt_)
         {return bin_write_t$15(_bwr_,v,_bws_,_bwt_)}}
      return [0,function(v){return bin_size_t$15(bin_writer_a[1],v)},_bwq_]}
    function bin_read_t$33(of_a,buf,pos_ref,vint)
     {function _bwn_(_bwo_,_bwp_){return bin_read_t$32(of_a,_bwo_,_bwp_)}
      return caml_call3(caml_call1(M[5],_bwn_),buf,pos_ref,vint)}
    function bin_read_t$34(of_a,buf,pos_ref)
     {function _bwk_(_bwl_,_bwm_){return bin_read_t$32(of_a,_bwl_,_bwm_)}
      return caml_call2(caml_call1(M[4],_bwk_),buf,pos_ref)}
    function bin_reader_t$5(bin_reader_a)
     {function _bwj_(buf,pos_ref,vtag)
       {return bin_read_t$33(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$34(bin_reader_a[1],buf,pos_ref)},
              _bwj_]}
    function bin_t$5(bin_a)
     {var _bwh_=bin_reader_t$5(bin_a[3]),_bwi_=bin_writer_t$5(bin_a[2]);
      return [0,bin_shape_t$6(bin_a[1]),_bwi_,_bwh_]}
    function compare$6(cmp_a,a_037,b_038)
     {function _bwg_(a_039,b_040)
       {if(caml_call2(Ppx_compare_lib[1],a_039,b_040))return 0;
        if(typeof a_039 === "number")
         {if(914388854 === b_040)return compare$2(a_039,b_040)}
        else
         if(typeof b_040 !== "number" && 271892623 === b_040[1])
          {var right_028=b_040[2],left_027=a_039[2];
           return caml_call2(cmp_a,left_027,right_028)}
        return caml_compare(a_039,b_040)}
      return caml_call3(M[9],_bwg_,a_037,b_038)}
    function hash_fold_perms(hash_fold_a,hsv,arg)
     {function _bwf_(hsv$0,arg)
       {if(typeof arg === "number")return hash_fold_t$2(hsv$0,arg);
        var v=arg[2],hsv=caml_call2(Base_Hash[3],hsv$0,271892623);
        return caml_call2(hash_fold_a,hsv,v)}
      return caml_call3(M[10],_bwf_,hsv,arg)}
    function perms_of_sexp(of_a,t)
     {function _bv__(sexp)
       {try
         {try
           {var _bwb_=t_of_sexp$2(sexp),_bwc_=_bwb_}
          catch(_bwe_)
           {_bwe_ = caml_wrap_exception(_bwe_);
            if(_bwe_ !== Sexplib0_Sexp_conv_error[18])throw _bwe_;
            if(0 === sexp[0])
             var
              atom=sexp[1],
              _bwc_=
               caml_string_notequal(atom,cst_Who_can_write$6)
                ?caml_call1(Sexplib0_Sexp_conv_error[19],0)
                :caml_call2(Sexplib0_Sexp_conv_error[23],tp_loc$8,sexp);
            else
             {var _bv$_=sexp[1];
              if(_bv$_)
               {var _bwa_=_bv$_[1];
                if(0 === _bwa_[0])
                 {var sexp_args=_bv$_[2],atom$0=_bwa_[1];
                  if(caml_string_notequal(atom$0,cst_Who_can_write$7))
                   var _bwc_=caml_call1(Sexplib0_Sexp_conv_error[19],0);
                  else
                   {var switch$0=0;
                    if(sexp_args && ! sexp_args[2])
                     var
                      v0=sexp_args[1],
                      v0$0=caml_call1(of_a,v0),
                      _bwc_=[0,271892623,v0$0];
                    else
                     switch$0 = 1;
                    if(switch$0)
                     var
                      _bwc_=
                       caml_call3
                        (Sexplib0_Sexp_conv_error[22],tp_loc$8,atom$0,sexp)}}
                else
                 var
                  _bwc_=
                   caml_call2(Sexplib0_Sexp_conv_error[24],tp_loc$8,sexp)}
              else
               var
                _bwc_=
                 caml_call2(Sexplib0_Sexp_conv_error[25],tp_loc$8,sexp)}}
          return _bwc_}
        catch(_bwd_)
         {_bwd_ = caml_wrap_exception(_bwd_);
          if(_bwd_ === Sexplib0_Sexp_conv_error[18])
           return caml_call2(Sexplib0_Sexp_conv_error[20],tp_loc$9,sexp);
          throw _bwd_}}
      return caml_call2(M[11],_bv__,t)}
    function sexp_of_perms(of_a,v)
     {function _bv9_(v)
       {if(typeof v === "number")return sexp_of_t$3(v);
        var v0=v[2];
        return [1,[0,_gx_,[0,caml_call1(of_a,v0),0]]]}
      return caml_call2(M[12],_bv9_,v)}
    var
     _gU_=Read[5],
     _gV_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_read),0,_gU_],0],
     _gW_=caml_call1(Bin_prot_Shape[4][1],cst_src_perms_ml_135_4),
     group$10=caml_call2(Bin_prot_Shape[6],_gW_,_gV_),
     _gX_=caml_call1(Bin_prot_Shape[2][1],cst_read$0),
     bin_shape_read=caml_call1(caml_call2(Bin_prot_Shape[14],group$10,_gX_),0),
     bin_size_read=Read[1],
     bin_write_read=Read[2],
     bin_writer_read=[0,bin_size_read,bin_write_read],
     bin_read_read=Read[4],
     bin_read_read$0=Read[3],
     bin_reader_read=[0,bin_read_read$0,bin_read_read],
     bin_read=[0,bin_shape_read,bin_writer_read,bin_reader_read],
     compare_read=Read[9],
     hash_fold_read=Read[10],
     func$1=Read[11];
    function hash_read(x){return caml_call1(func$1,x)}
    var
     read_of_sexp=Read[12],
     sexp_of_read=Read[14],
     compare_write=Write[9],
     hash_fold_write=Write[10],
     func$2=Write[11];
    function hash_write(x){return caml_call1(func$2,x)}
    var
     write_of_sexp=Write[12],
     sexp_of_write=Write[14],
     _gY_=Immutable[5],
     _gZ_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_immutable),0,_gY_],0],
     _g0_=caml_call1(Bin_prot_Shape[4][1],cst_src_perms_ml_137_4),
     group$11=caml_call2(Bin_prot_Shape[6],_g0_,_gZ_),
     _g1_=caml_call1(Bin_prot_Shape[2][1],cst_immutable$0),
     bin_shape_immutable=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$11,_g1_),0),
     bin_size_immutable=Immutable[1],
     bin_write_immutable=Immutable[2],
     bin_writer_immutable=[0,bin_size_immutable,bin_write_immutable],
     bin_read_immutable=Immutable[4],
     bin_read_immutable$0=Immutable[3],
     bin_reader_immutable=[0,bin_read_immutable$0,bin_read_immutable],
     bin_immutable=
      [0,bin_shape_immutable,bin_writer_immutable,bin_reader_immutable],
     compare_immutable=Immutable[9],
     hash_fold_immutable=Immutable[10],
     func$3=Immutable[11];
    function hash_immutable(x){return caml_call1(func$3,x)}
    var
     immutable_of_sexp=Immutable[12],
     sexp_of_immutable=Immutable[14],
     _g2_=Read_write[5],
     _g3_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_read_write),0,_g2_],0],
     _g4_=caml_call1(Bin_prot_Shape[4][1],cst_src_perms_ml_138_4),
     group$12=caml_call2(Bin_prot_Shape[6],_g4_,_g3_),
     _g5_=caml_call1(Bin_prot_Shape[2][1],cst_read_write$0),
     bin_shape_read_write=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$12,_g5_),0),
     bin_size_read_write=Read_write[1],
     bin_write_read_write=Read_write[2],
     bin_writer_read_write=[0,bin_size_read_write,bin_write_read_write],
     bin_read_read_write=Read_write[4],
     bin_read_read_write$0=Read_write[3],
     bin_reader_read_write=[0,bin_read_read_write$0,bin_read_read_write],
     bin_read_write=
      [0,bin_shape_read_write,bin_writer_read_write,bin_reader_read_write],
     compare_read_write=Read_write[9],
     hash_fold_read_write=Read_write[10],
     func$4=Read_write[11];
    function hash_read_write(x){return caml_call1(func$4,x)}
    var
     read_write_of_sexp=Read_write[12],
     sexp_of_read_write=Read_write[14],
     _g6_=caml_call1(Bin_prot_Shape[3][1],cst_a$7),
     _g7_=caml_call1(Bin_prot_Shape[4][1],cst_src_perms_ml_139_20),
     _g8_=bin_shape_t$6(caml_call2(Bin_prot_Shape[15],_g7_,_g6_)),
     _g9_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$8),0],
     _g__=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_perms),_g9_,_g8_],0],
     _g$_=caml_call1(Bin_prot_Shape[4][1],cst_src_perms_ml_139_4),
     group$13=caml_call2(Bin_prot_Shape[6],_g$_,_g__);
    function bin_shape_perms(a)
     {var _bv8_=caml_call1(Bin_prot_Shape[2][1],cst_perms$0);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$13,_bv8_),[0,a,0])}
    function bin_size_perms(size_of_a,v){return bin_size_t$15(size_of_a,v)}
    function bin_write_perms(write_a,buf,pos,v)
     {return bin_write_t$15(write_a,buf,pos,v)}
    function bin_writer_perms(bin_writer_a)
     {function _bv4_(v)
       {var _bv5_=bin_writer_a[2];
        return function(_bv6_,_bv7_)
         {return bin_write_perms(_bv5_,v,_bv6_,_bv7_)}}
      return [0,function(v){return bin_size_perms(bin_writer_a[1],v)},_bv4_]}
    function bin_read_perms(of_a,buf,pos_ref,vint)
     {return bin_read_t$33(of_a,buf,pos_ref,vint)}
    function bin_read_perms$0(of_a,buf,pos_ref)
     {return bin_read_t$34(of_a,buf,pos_ref)}
    function bin_reader_perms(bin_reader_a)
     {function _bv3_(buf,pos_ref,vtag)
       {return bin_read_perms(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_perms$0(bin_reader_a[1],buf,pos_ref)},
              _bv3_]}
    function bin_perms(bin_a)
     {var _bv1_=bin_reader_perms(bin_a[3]),_bv2_=bin_writer_perms(bin_a[2]);
      return [0,bin_shape_perms(bin_a[1]),_bv2_,_bv1_]}
    function compare_perms(cmp_a,a_051,b_052)
     {return compare$6
              (function(a_053,b_054){return caml_call2(cmp_a,a_053,b_054)},
               a_051,
               b_052)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$16);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Perms$0);
    var
     _ha_=
      [0,
       [0,
        bin_shape_nobody,
        bin_size_nobody,
        bin_write_nobody,
        bin_writer_nobody,
        bin_read_nobody$0,
        bin_read_nobody,
        bin_reader_nobody,
        bin_nobody,
        compare_nobody,
        hash_fold_nobody,
        hash_nobody,
        sexp_of_nobody,
        nobody_of_sexp,
        bin_shape_me,
        bin_size_me,
        bin_write_me,
        bin_writer_me,
        bin_read_me$0,
        bin_read_me,
        bin_reader_me,
        bin_me,
        compare_me,
        hash_fold_me,
        hash_me,
        sexp_of_me,
        me_of_sexp,
        [0,
         Read[1],
         Read[2],
         Read[3],
         Read[4],
         Read[5],
         Read[6],
         Read[7],
         Read[8],
         Read[9],
         Read[10],
         Read[11],
         Read[12],
         Read[14]],
        [0,
         Write[1],
         Write[2],
         Write[3],
         Write[4],
         Write[5],
         Write[6],
         Write[7],
         Write[8],
         Write[9],
         Write[10],
         Write[11],
         Write[12],
         Write[14]],
        [0,
         Immutable[1],
         Immutable[2],
         Immutable[3],
         Immutable[4],
         Immutable[5],
         Immutable[6],
         Immutable[7],
         Immutable[8],
         Immutable[9],
         Immutable[10],
         Immutable[11],
         Immutable[12],
         Immutable[14]],
        [0,
         Read_write[1],
         Read_write[2],
         Read_write[3],
         Read_write[4],
         Read_write[5],
         Read_write[6],
         Read_write[7],
         Read_write[8],
         Read_write[9],
         Read_write[10],
         Read_write[11],
         Read_write[12],
         Read_write[14]],
        [0,
         bin_shape_t$6,
         bin_size_t$15,
         bin_write_t$15,
         bin_read_t$34,
         bin_read_t$33,
         bin_writer_t$5,
         bin_reader_t$5,
         bin_t$5,
         compare$6,
         hash_fold_perms,
         perms_of_sexp,
         sexp_of_perms]],
       [0,
        bin_shape_read,
        bin_size_read,
        bin_write_read,
        bin_writer_read,
        bin_read_read$0,
        bin_read_read,
        bin_reader_read,
        bin_read,
        compare_read,
        hash_fold_read,
        hash_read,
        sexp_of_read,
        read_of_sexp,
        compare_write,
        hash_fold_write,
        hash_write,
        sexp_of_write,
        write_of_sexp,
        bin_shape_immutable,
        bin_size_immutable,
        bin_write_immutable,
        bin_writer_immutable,
        bin_read_immutable$0,
        bin_read_immutable,
        bin_reader_immutable,
        bin_immutable,
        compare_immutable,
        hash_fold_immutable,
        hash_immutable,
        sexp_of_immutable,
        immutable_of_sexp,
        bin_shape_read_write,
        bin_size_read_write,
        bin_write_read_write,
        bin_writer_read_write,
        bin_read_read_write$0,
        bin_read_read_write,
        bin_reader_read_write,
        bin_read_write,
        compare_read_write,
        hash_fold_read_write,
        hash_read_write,
        sexp_of_read_write,
        read_write_of_sexp,
        bin_shape_perms,
        bin_size_perms,
        bin_write_perms,
        bin_writer_perms,
        bin_read_perms$0,
        bin_read_perms,
        bin_reader_perms,
        bin_perms,
        compare_perms,
        hash_fold_perms,
        sexp_of_perms,
        perms_of_sexp]],
     _hb_=
      [0,
       bin_shape_read,
       bin_size_read,
       bin_write_read,
       bin_writer_read,
       bin_read_read$0,
       bin_read_read,
       bin_reader_read,
       bin_read,
       compare_read,
       hash_fold_read,
       hash_read,
       sexp_of_read,
       read_of_sexp,
       compare_write,
       hash_fold_write,
       hash_write,
       sexp_of_write,
       write_of_sexp,
       bin_shape_immutable,
       bin_size_immutable,
       bin_write_immutable,
       bin_writer_immutable,
       bin_read_immutable$0,
       bin_read_immutable,
       bin_reader_immutable,
       bin_immutable,
       compare_immutable,
       hash_fold_immutable,
       hash_immutable,
       sexp_of_immutable,
       immutable_of_sexp,
       bin_shape_read_write,
       bin_size_read_write,
       bin_write_read_write,
       bin_writer_read_write,
       bin_read_read_write$0,
       bin_read_read_write,
       bin_reader_read_write,
       bin_read_write,
       compare_read_write,
       hash_fold_read_write,
       hash_read_write,
       sexp_of_read_write,
       read_write_of_sexp,
       bin_shape_perms,
       bin_size_perms,
       bin_write_perms,
       bin_writer_perms,
       bin_read_perms$0,
       bin_read_perms,
       bin_reader_perms,
       bin_perms,
       compare_perms,
       hash_fold_perms,
       sexp_of_perms,
       perms_of_sexp],
     Core_kernel_Perms=
      [0,
       bin_shape_nobody,
       bin_size_nobody,
       bin_write_nobody,
       bin_writer_nobody,
       bin_read_nobody$0,
       bin_read_nobody,
       bin_reader_nobody,
       bin_nobody,
       compare_nobody,
       hash_fold_nobody,
       hash_nobody,
       sexp_of_nobody,
       nobody_of_sexp,
       bin_shape_me,
       bin_size_me,
       bin_write_me,
       bin_writer_me,
       bin_read_me$0,
       bin_read_me,
       bin_reader_me,
       bin_me,
       compare_me,
       hash_fold_me,
       hash_me,
       sexp_of_me,
       me_of_sexp,
       [0,
        Read[1],
        Read[2],
        Read[3],
        Read[4],
        Read[5],
        Read[6],
        Read[7],
        Read[8],
        Read[9],
        Read[10],
        Read[11],
        Read[14],
        Read[12],
        Read[13]],
       [0,
        Write[1],
        Write[2],
        Write[3],
        Write[4],
        Write[5],
        Write[6],
        Write[7],
        Write[8],
        Write[9],
        Write[10],
        Write[11],
        Write[14],
        Write[12],
        Write[13]],
       [0,
        Immutable[1],
        Immutable[2],
        Immutable[3],
        Immutable[4],
        Immutable[5],
        Immutable[6],
        Immutable[7],
        Immutable[8],
        Immutable[9],
        Immutable[10],
        Immutable[11],
        Immutable[14],
        Immutable[12],
        Immutable[13]],
       [0,
        Read_write[1],
        Read_write[2],
        Read_write[3],
        Read_write[4],
        Read_write[5],
        Read_write[6],
        Read_write[7],
        Read_write[8],
        Read_write[9],
        Read_write[10],
        Read_write[11],
        Read_write[14],
        Read_write[12],
        Read_write[13]],
       [0,
        bin_shape_t$6,
        bin_size_t$15,
        bin_write_t$15,
        bin_read_t$34,
        bin_read_t$33,
        bin_writer_t$5,
        bin_reader_t$5,
        bin_t$5,
        compare$6,
        hash_fold_perms,
        sexp_of_perms,
        perms_of_sexp,
        perms_of_sexp],
       _hb_,
       _ha_];
    caml_register_global(4924,Core_kernel_Perms,"Core_kernel__Perms");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Binary_searcha);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$17);
    caml_call1(Expect_test_collector[4][1],cst_src_binary_searchable_intf);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$18,cst$5);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$19);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Binary_searcha$0);
    var Core_kernel_Binary_searchable_=[0];
    caml_register_global
     (4925,
      Core_kernel_Binary_searchable_,
      "Core_kernel__Binary_searchable_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Binary_searcha$1);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$20);
    caml_call1(Expect_test_collector[4][1],cst_src_binary_searchable_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$21,cst$6);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$22);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Binary_searcha$2);
    var Core_kernel_Binary_searchable=[0];
    caml_register_global
     (4926,Core_kernel_Binary_searchable,"Core_kernel__Binary_searchable");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Blit_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$23);
    caml_call1(Expect_test_collector[4][1],cst_src_blit_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$24,cst$7);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$25);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Blit_intf$0);
    var Core_kernel_Blit_intf=[0];
    caml_register_global(4927,Core_kernel_Blit_intf,"Core_kernel__Blit_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Blit);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$26);
    caml_call1(Expect_test_collector[4][1],cst_src_blit_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$27,cst$8);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$28);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Blit$0);
    var Core_kernel_Blit=[0];
    caml_register_global(4928,Core_kernel_Blit,"Core_kernel__Blit");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Comparator);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$29);
    caml_call1(Expect_test_collector[4][1],cst_src_comparator_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$30,cst$9);
    var
     make=include$5[1],
     Poly=include$5[2],
     S_to_S1=include$5[3],
     Make=include$5[4],
     Make1=include$5[5],
     Derived=include$5[6],
     Derived2=include$5[7],
     Derived_phantom=include$5[8];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$31);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Comparator$0);
    var
     _hc_=[0,[0,make,Make,Make1]],
     Core_kernel_Comparator=
      [0,make,Poly,S_to_S1,Make,Make1,Derived,Derived2,Derived_phantom,_hc_];
    caml_register_global
     (4930,Core_kernel_Comparator,"Core_kernel__Comparator");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Result);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$32);
    caml_call1(Expect_test_collector[4][1],cst_src_result_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$33,cst$10);
    var
     _hd_=caml_call1(Bin_prot_Shape[3][1],cst_b),
     _he_=caml_call1(Bin_prot_Shape[4][1],cst_src_result_ml_8_17),
     _hf_=[0,[0,cst_Error,[0,caml_call2(Bin_prot_Shape[15],_he_,_hd_),0]],0],
     _hg_=caml_call1(Bin_prot_Shape[3][1],cst_a$9),
     _hh_=caml_call1(Bin_prot_Shape[4][1],cst_src_result_ml_7_14),
     _hi_=[0,[0,cst_Ok,[0,caml_call2(Bin_prot_Shape[15],_hh_,_hg_),0]],_hf_],
     _hj_=caml_call1(Bin_prot_Shape[9],_hi_),
     _hk_=[0,caml_call1(Bin_prot_Shape[3][1],cst_b$0),0],
     _hl_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$10),_hk_],
     _hm_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$33),_hl_,_hj_],0],
     _hn_=caml_call1(Bin_prot_Shape[4][1],cst_src_result_ml_6_4),
     group$14=caml_call2(Bin_prot_Shape[6],_hn_,_hm_);
    function bin_shape_t$7(a,b)
     {var _bv0_=caml_call1(Bin_prot_Shape[2][1],cst_t$34);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$14,_bv0_),[0,a,[0,b,0]])}
    function bin_size_t$16(size_of_a,size_of_b,param)
     {if(0 === param[0])
       {var v1=param[1],_bvY_=caml_call1(size_of_a,v1);
        return caml_call2(Bin_prot_Common[23],1,_bvY_)}
      var v1$0=param[1],_bvZ_=caml_call1(size_of_b,v1$0);
      return caml_call2(Bin_prot_Common[23],1,_bvZ_)}
    function bin_write_t$16(write_a,write_b,buf,pos,param)
     {if(0 === param[0])
       {var v1=param[1],pos$0=caml_call3(Bin_prot_Write[30],buf,pos,0);
        return caml_call3(write_a,buf,pos$0,v1)}
      var v1$0=param[1],pos$1=caml_call3(Bin_prot_Write[30],buf,pos,1);
      return caml_call3(write_b,buf,pos$1,v1$0)}
    function bin_writer_t$6(bin_writer_a,bin_writer_b)
     {function _bvT_(v)
       {var _bvU_=bin_writer_b[2],_bvV_=bin_writer_a[2];
        return function(_bvW_,_bvX_)
         {return bin_write_t$16(_bvV_,_bvU_,v,_bvW_,_bvX_)}}
      return [0,
              function(v)
               {return bin_size_t$16(bin_writer_a[1],bin_writer_b[1],v)},
              _bvT_]}
    function bin_read_t$35(of_a,of_b,buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_src_result_ml_Stable_V1_t,pos_ref[1])}
    function bin_read_t$36(of_a,of_b,buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[29],buf,pos_ref);
      if(0 === match){var arg_1=caml_call2(of_a,buf,pos_ref);return [0,arg_1]}
      if(1 === match)
       {var arg_1$0=caml_call2(of_b,buf,pos_ref);return [1,arg_1$0]}
      return caml_call2(Bin_prot_Common[18],_ho_,pos_ref[1])}
    function bin_reader_t$6(bin_reader_a,bin_reader_b)
     {function _bvS_(buf,pos_ref,vtag)
       {return bin_read_t$35(bin_reader_a[1],bin_reader_b[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$36
                        (bin_reader_a[1],bin_reader_b[1],buf,pos_ref)},
              _bvS_]}
    function bin_t$6(bin_a,bin_b)
     {var
       _bvQ_=bin_reader_t$6(bin_a[3],bin_b[3]),
       _bvR_=bin_writer_t$6(bin_a[2],bin_b[2]);
      return [0,bin_shape_t$7(bin_a[1],bin_b[1]),_bvR_,_bvQ_]}
    function compare$7(cmp_a,cmp_b,a_001,match)
     {if(caml_call2(Ppx_compare_lib[1],a_001,match))return 0;
      if(0 === a_001[0])
       {var _bvO_=a_001[1];
        if(0 === match[0])
         {var b_004=match[1];return caml_call2(cmp_a,_bvO_,b_004)}
        return -1}
      var _bvP_=a_001[1];
      if(0 === match[0])return 1;
      var b_006=match[1];
      return caml_call2(cmp_b,_bvP_,b_006)}
    function t_of_sexp$8(of_a,of_b,sexp)
     {if(0 === sexp[0])
       {var _bvK_=sexp[1],switch$0=0;
        if(caml_string_notequal(_bvK_,cst_Error$0))
         {var switch$1=0;
          if(caml_string_notequal(_bvK_,cst_Ok$0))
           if(caml_string_notequal(_bvK_,cst_error))
            {if(caml_string_notequal(_bvK_,cst_ok)){switch$0 = 1;switch$1 = 1}}
           else
            switch$1 = 1;
          if(! switch$1)
           return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$10,sexp)}
        if(! switch$0)
         return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$10,sexp)}
      else
       {var _bvL_=sexp[1];
        if(! _bvL_)
         return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$10,sexp);
        var _bvM_=_bvL_[1];
        if(0 !== _bvM_[0])
         return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$10,sexp);
        var _bvN_=_bvM_[1],switch$2=0;
        if(caml_string_notequal(_bvN_,cst_Error$1))
         {var switch$3=0;
          if(caml_string_notequal(_bvN_,cst_Ok$1))
           if(caml_string_notequal(_bvN_,cst_error$0))
            {if(caml_string_notequal(_bvN_,cst_ok$0))
              {switch$2 = 1;switch$3 = 1}}
           else
            switch$3 = 1;
          if(! switch$3)
           {var sexp_args=_bvL_[2];
            if(sexp_args && ! sexp_args[2])
             {var v0=sexp_args[1],v0$0=caml_call1(of_a,v0);return [0,v0$0]}
            return caml_call3
                    (Sexplib0_Sexp_conv_error[4],tp_loc$10,_bvN_,sexp)}}
        if(! switch$2)
         {var sexp_args$0=_bvL_[2];
          if(sexp_args$0 && ! sexp_args$0[2])
           {var v0$1=sexp_args$0[1],v0$2=caml_call1(of_b,v0$1);
            return [1,v0$2]}
          return caml_call3(Sexplib0_Sexp_conv_error[4],tp_loc$10,_bvN_,sexp)}}
      return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$10,sexp)}
    function sexp_of_t$7(of_a,of_b,param)
     {if(0 === param[0])
       {var v0=param[1],v0$0=caml_call1(of_a,v0);
        return [1,[0,_hp_,[0,v0$0,0]]]}
      var v0$1=param[1],v0$2=caml_call1(of_b,v0$1);
      return [1,[0,_hq_,[0,v0$2,0]]]}
    function map(x,f1,f2)
     {if(0 === x[0]){var x$0=x[1];return [0,caml_call1(f1,x$0)]}
      var err=x[1];
      return [1,caml_call1(f2,err)]}
    var
     _hr_=0,
     _hs_=function(_bvJ_){return bin_shape_t$7(_cc_,_bvJ_)}(_co_),
     _ht_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$35),0,_hs_],_hr_],
     _hu_=caml_call1(Bin_prot_Shape[4][1],cst_src_result_ml_19_4),
     group$15=caml_call2(Bin_prot_Shape[6],_hu_,_ht_),
     _hv_=caml_call1(Bin_prot_Shape[2][1],cst_t$36),
     bin_shape_t$8=caml_call1(caml_call2(Bin_prot_Shape[14],group$15,_hv_),0);
    function bin_size_t$17(v)
     {return bin_size_t$16(bin_size_t$1,bin_size_t$4,v)}
    function bin_write_t$17(buf,pos,v)
     {return bin_write_t$16(bin_write_t$1,bin_write_t$4,buf,pos,v)}
    var bin_writer_t$7=[0,bin_size_t$17,bin_write_t$17];
    function bin_read_t$37(buf,pos_ref,vint)
     {return bin_read_t$35(bin_read_t$3,bin_read_t$9,buf,pos_ref,vint)}
    function bin_read_t$38(buf,pos_ref)
     {return bin_read_t$36(bin_read_t$3,bin_read_t$9,buf,pos_ref)}
    var
     bin_reader_t$7=[0,bin_read_t$38,bin_read_t$37],
     bin_t$7=[0,bin_shape_t$8,bin_writer_t$7,bin_reader_t$7];
    function t_of_sexp$9(t){return t_of_sexp$8(_at_,t_of_sexp,t)}
    function sexp_of_t$8(v){return sexp_of_t$7(_au_,sexp_of_t$0,v)}
    function equal(x_013,x_014)
     {function _bvI_(a_011,b_012){return caml_call2(compare,a_011,b_012)}
      var
       match=
        compare$7
         (function(a_009,b_010){return caml_call2(_ap_,a_009,b_010)},
          _bvI_,
          x_013,
          x_014);
      return 0 === match?1:0}
    var
     _hx_=include$6[2],
     _hy_=include$6[3],
     _hA_=include$6[5],
     _hO_=include$6[19],
     _hR_=include$6[22],
     _hX_=include$6[28],
     _hY_=include$6[29],
     _h6_=include$6[37],
     _h7_=include$6[38],
     _hw_=include$6[1],
     _hz_=include$6[4],
     _hB_=include$6[6],
     _hC_=include$6[7],
     _hD_=include$6[8],
     _hE_=include$6[9],
     _hF_=include$6[10],
     _hG_=include$6[11],
     _hH_=include$6[12],
     _hI_=include$6[13],
     _hJ_=include$6[14],
     _hK_=include$6[15],
     _hL_=include$6[16],
     _hM_=include$6[17],
     _hN_=include$6[18],
     _hP_=include$6[20],
     _hQ_=include$6[21],
     _hS_=include$6[23],
     _hT_=include$6[24],
     _hU_=include$6[25],
     _hV_=include$6[26],
     _hW_=include$6[27],
     _hZ_=include$6[30],
     _h0_=include$6[31],
     _h1_=include$6[32],
     _h2_=include$6[33],
     _h3_=include$6[34],
     _h4_=include$6[35],
     _h5_=include$6[36];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$34);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Result$0);
    var
     _h8_=
      [0,
       [0,
        bin_shape_t$7,
        bin_size_t$16,
        bin_write_t$16,
        bin_read_t$36,
        bin_read_t$35,
        bin_writer_t$6,
        bin_reader_t$6,
        bin_t$6,
        compare$7,
        t_of_sexp$8,
        sexp_of_t$7,
        map],
       [0,
        t_of_sexp$9,
        sexp_of_t$8,
        bin_size_t$17,
        bin_write_t$17,
        bin_read_t$38,
        bin_read_t$37,
        bin_shape_t$8,
        bin_writer_t$7,
        bin_reader_t$7,
        bin_t$7,
        equal,
        tests]],
     Core_kernel_Result=
      [0,
       bin_shape_t$7,
       bin_size_t$16,
       bin_write_t$16,
       bin_read_t$36,
       bin_read_t$35,
       bin_writer_t$6,
       bin_reader_t$6,
       bin_t$6,
       _hw_,
       _hx_,
       _hy_,
       _hz_,
       _hA_,
       _hB_,
       _hC_,
       _hD_,
       _hE_,
       _hF_,
       _hG_,
       _hH_,
       _hI_,
       _hJ_,
       _hK_,
       _hL_,
       _hM_,
       _hN_,
       _hO_,
       _hP_,
       _hQ_,
       _hR_,
       _hS_,
       _hT_,
       _hU_,
       _hV_,
       _hW_,
       _hX_,
       _hY_,
       _hZ_,
       _h0_,
       _h1_,
       _h2_,
       _h3_,
       _h4_,
       _h5_,
       _h6_,
       _h7_,
       _h8_];
    caml_register_global(4932,Core_kernel_Result,"Core_kernel__Result");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Stable_module_);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$35);
    caml_call1(Expect_test_collector[4][1],cst_src_stable_module_types_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$36,cst$11);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$37);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Stable_module_$0);
    var Core_kernel_Stable_module_type=[0];
    caml_register_global
     (4933,Core_kernel_Stable_module_type,"Core_kernel__Stable_module_types");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Stable_unit_te);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$38);
    caml_call1(Expect_test_collector[4][1],cst_src_stable_unit_test_intf_);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$39,cst$12);
    var Unordered_container_test=[0];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$40);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Stable_unit_te$0);
    var Core_kernel_Stable_unit_test_i=[0,Unordered_container_test];
    caml_register_global
     (4934,
      Core_kernel_Stable_unit_test_i,
      "Core_kernel__Stable_unit_test_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Container_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$41);
    caml_call1(Expect_test_collector[4][1],cst_src_container_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$42,cst$13);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$43);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Container_intf$0);
    var Core_kernel_Container_intf=[0];
    caml_register_global
     (4935,Core_kernel_Container_intf,"Core_kernel__Container_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Container);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$44);
    caml_call1(Expect_test_collector[4][1],cst_src_container_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$45,cst$14);
    var
     _h__=include$7[2],
     _h$_=include$7[3],
     _ia_=include$7[4],
     _id_=include$7[7],
     _ie_=include$7[8],
     _if_=include$7[9],
     _h9_=include$7[1],
     _ib_=include$7[5],
     _ic_=include$7[6],
     _ig_=include$7[10],
     _ih_=include$7[11],
     _ii_=include$7[12],
     _ij_=include$7[13],
     _ik_=include$7[14],
     _il_=include$7[15];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$46);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Container$0);
    var
     Core_kernel_Container=
      [0,
       _h9_,
       _h__,
       _h$_,
       _ia_,
       _ib_,
       _ic_,
       _id_,
       _ie_,
       _if_,
       _ig_,
       _ih_,
       _ii_,
       _ij_,
       _ik_,
       _il_];
    caml_register_global(4937,Core_kernel_Container,"Core_kernel__Container");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Deprecate_pipe);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$47);
    caml_call1(Expect_test_collector[4][1],cst_src_deprecate_pipe_bang_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$48,cst$15);
    function symbol(x,y){return caml_call1(y,x)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$49);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Deprecate_pipe$0);
    var Core_kernel_Deprecate_pipe_ban=[0,symbol];
    caml_register_global
     (4938,Core_kernel_Deprecate_pipe_ban,"Core_kernel__Deprecate_pipe_bang");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Fn);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$50);
    caml_call1(Expect_test_collector[4][1],cst_src_fn_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$51,cst$16);
    var
     _im_=Base_Fn[1],
     _iq_=Base_Fn[5],
     _in_=Base_Fn[2],
     _io_=Base_Fn[3],
     _ip_=Base_Fn[4],
     _ir_=Base_Fn[6];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$52);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Fn$0);
    var Core_kernel_Fn=[0,_im_,_in_,_io_,_ip_,_iq_,_ir_,symbol];
    caml_register_global(4940,Core_kernel_Fn,"Core_kernel__Fn");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Ordered_collec);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$53);
    caml_call1(Expect_test_collector[4][1],cst_src_ordered_collection_com);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$54,cst$17);
    var _is_=include$8[1],_it_=include$8[2],_iu_=include$8[3];
    function normalize(length_fun,t,i)
     {return 0 <= i?i:i + caml_call1(length_fun,t) | 0}
    function slice(length_fun,sub_fun,t,start,stop)
     {var
       stop$0=0 === stop?caml_call1(length_fun,t):stop,
       pos=normalize(length_fun,t,start),
       len=normalize(length_fun,t,stop$0) - pos | 0;
      return caml_call3(sub_fun,t,pos,len)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$55);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Ordered_collec$0);
    var Core_kernel_Ordered_collection=[0,_is_,_it_,_iu_,normalize,slice];
    caml_register_global
     (4942,
      Core_kernel_Ordered_collection,
      "Core_kernel__Ordered_collection_common");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Sequence);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$56);
    caml_call1(Expect_test_collector[4][1],cst_src_sequence_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$57,cst$18);
    var
     _iB_=include$9[7],
     _iC_=include$9[8],
     _iL_=include$9[17],
     _iZ_=include$9[32],
     _i4_=include$9[38],
     _i7_=include$9[41],
     _i8_=include$9[42],
     _jh_=include$9[53],
     _jp_=include$9[61],
     _ju_=include$9[66],
     _jW_=include$9[95],
     _jY_=include$9[97],
     _jZ_=include$9[98],
     _j3_=include$9[102],
     _iv_=include$9[1],
     _iw_=include$9[2],
     _ix_=include$9[3],
     _iy_=include$9[4],
     _iz_=include$9[5],
     _iA_=include$9[6],
     _iD_=include$9[9],
     _iE_=include$9[10],
     _iF_=include$9[11],
     _iG_=include$9[12],
     _iH_=include$9[13],
     _iI_=include$9[14],
     _iJ_=include$9[15],
     _iK_=include$9[16],
     _iM_=include$9[18],
     _iN_=include$9[19],
     _iO_=include$9[20],
     _iP_=include$9[21],
     _iQ_=include$9[22],
     _iR_=include$9[23],
     _iS_=include$9[24],
     _iT_=include$9[25],
     _iU_=include$9[26],
     _iV_=include$9[27],
     _iW_=include$9[28],
     _iX_=include$9[30],
     _iY_=include$9[31],
     _i0_=include$9[33],
     _i1_=include$9[34],
     _i2_=include$9[35],
     _i3_=include$9[36],
     _i5_=include$9[39],
     _i6_=include$9[40],
     _i9_=include$9[43],
     _i__=include$9[44],
     _i$_=include$9[45],
     _ja_=include$9[46],
     _jb_=include$9[47],
     _jc_=include$9[48],
     _jd_=include$9[49],
     _je_=include$9[50],
     _jf_=include$9[51],
     _jg_=include$9[52],
     _ji_=include$9[54],
     _jj_=include$9[55],
     _jk_=include$9[56],
     _jl_=include$9[57],
     _jm_=include$9[58],
     _jn_=include$9[59],
     _jo_=include$9[60],
     _jq_=include$9[62],
     _jr_=include$9[63],
     _js_=include$9[64],
     _jt_=include$9[65],
     _jv_=include$9[67],
     _jw_=include$9[68],
     _jx_=include$9[69],
     _jy_=include$9[70],
     _jz_=include$9[71],
     _jA_=include$9[72],
     _jB_=include$9[73],
     _jC_=include$9[74],
     _jD_=include$9[75],
     _jE_=include$9[76],
     _jF_=include$9[77],
     _jG_=include$9[78],
     _jH_=include$9[79],
     _jI_=include$9[80],
     _jJ_=include$9[81],
     _jK_=include$9[82],
     _jL_=include$9[83],
     _jM_=include$9[84],
     _jN_=include$9[85],
     _jO_=include$9[86],
     _jP_=include$9[87],
     _jQ_=include$9[88],
     _jR_=include$9[89],
     _jS_=include$9[90],
     _jT_=include$9[92],
     _jU_=include$9[93],
     _jV_=include$9[94],
     _jX_=include$9[96],
     _j0_=include$9[99],
     _j1_=include$9[100],
     _j2_=include$9[101],
     _j4_=include$9[103],
     _j5_=include$9[104],
     _j6_=include$9[105],
     _j7_=include$9[106],
     _j8_=include$9[107],
     _j9_=include$9[108],
     _j__=include$9[109],
     _j$_=include$9[111],
     _ka_=caml_call1(Bin_prot_Shape[3][1],cst_a$11),
     _kb_=caml_call1(Bin_prot_Shape[4][1],cst_src_sequence_ml_6_18),
     _kc_=caml_call1(_df_,caml_call2(Bin_prot_Shape[15],_kb_,_ka_)),
     _kd_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$12),0],
     _ke_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$37),_kd_,_kc_],0],
     _kf_=caml_call1(Bin_prot_Shape[4][1],cst_src_sequence_ml_6_6),
     group$16=caml_call2(Bin_prot_Shape[6],_kf_,_ke_);
    function bin_shape_t$9(a)
     {var _bvH_=caml_call1(Bin_prot_Shape[2][1],cst_t$38);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$16,_bvH_),[0,a,0])}
    function bin_size_t$18(size_of_a,v){return caml_call2(_bG_,size_of_a,v)}
    function bin_write_t$18(write_a,buf,pos,v)
     {return caml_call3(caml_call1(_dh_,write_a),buf,pos,v)}
    function bin_read_t$39(of_a,buf,pos_ref,vint)
     {return caml_call3(caml_call1(_dk_,of_a),buf,pos_ref,vint)}
    function bin_read_t$40(of_a,buf,pos_ref)
     {return caml_call2(caml_call1(_dj_,of_a),buf,pos_ref)}
    var
     of_binable=include$9[102],
     to_binable=include$9[17],
     include$10=
      caml_call1
       (Bin_prot_Utils[12],
        [0,
         [0,
          bin_shape_t$9,
          bin_size_t$18,
          bin_write_t$18,
          bin_read_t$40,
          bin_read_t$39],
         to_binable,
         of_binable]),
     _kg_=include$10[1],
     _kh_=include$10[2],
     _ki_=include$10[3],
     _kj_=include$10[4],
     _kk_=include$10[5],
     _kl_=include$10[6],
     _km_=include$10[7],
     _kn_=include$10[8],
     _ko_=_i6_[1],
     _kp_=caml_call1(Bin_prot_Shape[3][1],cst_s),
     _kq_=caml_call1(Bin_prot_Shape[4][1],cst_src_sequence_ml_21_20),
     _kr_=[0,caml_call2(Bin_prot_Shape[15],_kq_,_kp_),0],
     _ks_=caml_call1(Bin_prot_Shape[3][1],cst_a$13),
     _kt_=caml_call1(Bin_prot_Shape[4][1],cst_src_sequence_ml_21_15),
     _ku_=
      [0,[0,cst_Yield,[0,caml_call2(Bin_prot_Shape[15],_kt_,_ks_),_kr_]],0],
     _kv_=caml_call1(Bin_prot_Shape[3][1],cst_s$0),
     _kw_=caml_call1(Bin_prot_Shape[4][1],cst_src_sequence_ml_20_14),
     _ky_=
      [0,
       _kx_,
       [0,[0,cst_Skip,[0,caml_call2(Bin_prot_Shape[15],_kw_,_kv_),0]],_ku_]],
     _kz_=caml_call1(Bin_prot_Shape[9],_ky_),
     _kA_=[0,caml_call1(Bin_prot_Shape[3][1],cst_s$1),0],
     _kB_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$14),_kA_],
     _kC_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$39),_kB_,_kz_],0],
     _kD_=caml_call1(Bin_prot_Shape[4][1],cst_src_sequence_ml_18_2),
     group$17=caml_call2(Bin_prot_Shape[6],_kD_,_kC_);
    function bin_shape_t$10(a,s)
     {var _bvG_=caml_call1(Bin_prot_Shape[2][1],cst_t$40);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$17,_bvG_),[0,a,[0,s,0]])}
    function bin_size_t$19(size_of_a,size_of_s,param)
     {if(typeof param === "number")
       return 1;
      else
       {if(0 === param[0])
         {var v1=param[1],_bvD_=caml_call1(size_of_s,v1);
          return caml_call2(Bin_prot_Common[23],1,_bvD_)}
        var
         v2=param[2],
         v1$0=param[1],
         _bvE_=caml_call1(size_of_a,v1$0),
         size=caml_call2(Bin_prot_Common[23],1,_bvE_),
         _bvF_=caml_call1(size_of_s,v2);
        return caml_call2(Bin_prot_Common[23],size,_bvF_)}}
    function bin_write_t$19(write_a,write_s,buf,pos,param)
     {if(typeof param === "number")
       return caml_call3(Bin_prot_Write[30],buf,pos,0);
      else
       {if(0 === param[0])
         {var v1=param[1],pos$0=caml_call3(Bin_prot_Write[30],buf,pos,1);
          return caml_call3(write_s,buf,pos$0,v1)}
        var
         v2=param[2],
         v1$0=param[1],
         pos$1=caml_call3(Bin_prot_Write[30],buf,pos,2),
         pos$2=caml_call3(write_a,buf,pos$1,v1$0);
        return caml_call3(write_s,buf,pos$2,v2)}}
    function bin_writer_t$8(bin_writer_a,bin_writer_s)
     {function _bvy_(v)
       {var _bvz_=bin_writer_s[2],_bvA_=bin_writer_a[2];
        return function(_bvB_,_bvC_)
         {return bin_write_t$19(_bvA_,_bvz_,v,_bvB_,_bvC_)}}
      return [0,
              function(v)
               {return bin_size_t$19(bin_writer_a[1],bin_writer_s[1],v)},
              _bvy_]}
    function bin_read_t$41(of_a,of_s,buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_src_sequence_ml_Step_t,pos_ref[1])}
    function bin_read_t$42(of_a,of_s,buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[29],buf,pos_ref);
      if(2 < match >>> 0)
       return caml_call2(Bin_prot_Common[18],_kE_,pos_ref[1]);
      switch(match)
       {case 0:return 0;
        case 1:var arg_1=caml_call2(of_s,buf,pos_ref);return [0,arg_1];
        default:
         var
          arg_1$0=caml_call2(of_a,buf,pos_ref),
          arg_2=caml_call2(of_s,buf,pos_ref);
         return [1,arg_1$0,arg_2]}}
    function bin_reader_t$8(bin_reader_a,bin_reader_s)
     {function _bvx_(buf,pos_ref,vtag)
       {return bin_read_t$41(bin_reader_a[1],bin_reader_s[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$42
                        (bin_reader_a[1],bin_reader_s[1],buf,pos_ref)},
              _bvx_]}
    function bin_t$8(bin_a,bin_s)
     {var
       _bvv_=bin_reader_t$8(bin_a[3],bin_s[3]),
       _bvw_=bin_writer_t$8(bin_a[2],bin_s[2]);
      return [0,bin_shape_t$10(bin_a[1],bin_s[1]),_bvw_,_bvv_]}
    var
     _kF_=_jh_[1],
     _kG_=_jh_[2],
     _kH_=_jh_[3],
     _kI_=_jh_[4],
     _kJ_=caml_call1(Bin_prot_Shape[3][1],cst_b$1),
     _kK_=caml_call1(Bin_prot_Shape[4][1],cst_src_sequence_ml_31_19),
     _kL_=[0,caml_call2(Bin_prot_Shape[15],_kK_,_kJ_),0],
     _kM_=caml_call1(Bin_prot_Shape[3][1],cst_a$15),
     _kN_=caml_call1(Bin_prot_Shape[4][1],cst_src_sequence_ml_31_14),
     _kO_=[0,[0,cst_Both,[0,caml_call2(Bin_prot_Shape[15],_kN_,_kM_),_kL_]],0],
     _kP_=caml_call1(Bin_prot_Shape[3][1],cst_b$2),
     _kQ_=caml_call1(Bin_prot_Shape[4][1],cst_src_sequence_ml_30_15),
     _kR_=
      [0,[0,cst_Right,[0,caml_call2(Bin_prot_Shape[15],_kQ_,_kP_),0]],_kO_],
     _kS_=caml_call1(Bin_prot_Shape[3][1],cst_a$16),
     _kT_=caml_call1(Bin_prot_Shape[4][1],cst_src_sequence_ml_29_14),
     _kU_=[0,[0,cst_Left,[0,caml_call2(Bin_prot_Shape[15],_kT_,_kS_),0]],_kR_],
     _kV_=caml_call1(Bin_prot_Shape[9],_kU_),
     _kW_=[0,caml_call1(Bin_prot_Shape[3][1],cst_b$3),0],
     _kX_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$17),_kW_],
     _kY_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$41),_kX_,_kV_],0],
     _kZ_=caml_call1(Bin_prot_Shape[4][1],cst_src_sequence_ml_28_2),
     group$18=caml_call2(Bin_prot_Shape[6],_kZ_,_kY_);
    function bin_shape_t$11(a,b)
     {var _bvu_=caml_call1(Bin_prot_Shape[2][1],cst_t$42);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$18,_bvu_),[0,a,[0,b,0]])}
    function bin_size_t$20(size_of_a,size_of_b,param)
     {switch(param[0])
       {case 0:
         var v1=param[1],_bvq_=caml_call1(size_of_a,v1);
         return caml_call2(Bin_prot_Common[23],1,_bvq_);
        case 1:
         var v1$0=param[1],_bvr_=caml_call1(size_of_b,v1$0);
         return caml_call2(Bin_prot_Common[23],1,_bvr_);
        default:
         var
          v2=param[2],
          v1$1=param[1],
          _bvs_=caml_call1(size_of_a,v1$1),
          size=caml_call2(Bin_prot_Common[23],1,_bvs_),
          _bvt_=caml_call1(size_of_b,v2);
         return caml_call2(Bin_prot_Common[23],size,_bvt_)}}
    function bin_write_t$20(write_a,write_b,buf,pos,param)
     {switch(param[0])
       {case 0:
         var v1=param[1],pos$0=caml_call3(Bin_prot_Write[30],buf,pos,0);
         return caml_call3(write_a,buf,pos$0,v1);
        case 1:
         var v1$0=param[1],pos$1=caml_call3(Bin_prot_Write[30],buf,pos,1);
         return caml_call3(write_b,buf,pos$1,v1$0);
        default:
         var
          v2=param[2],
          v1$1=param[1],
          pos$2=caml_call3(Bin_prot_Write[30],buf,pos,2),
          pos$3=caml_call3(write_a,buf,pos$2,v1$1);
         return caml_call3(write_b,buf,pos$3,v2)}}
    function bin_writer_t$9(bin_writer_a,bin_writer_b)
     {function _bvl_(v)
       {var _bvm_=bin_writer_b[2],_bvn_=bin_writer_a[2];
        return function(_bvo_,_bvp_)
         {return bin_write_t$20(_bvn_,_bvm_,v,_bvo_,_bvp_)}}
      return [0,
              function(v)
               {return bin_size_t$20(bin_writer_a[1],bin_writer_b[1],v)},
              _bvl_]}
    function bin_read_t$43(of_a,of_b,buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_src_sequence_ml_Merge_with,pos_ref[1])}
    function bin_read_t$44(of_a,of_b,buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[29],buf,pos_ref);
      if(2 < match >>> 0)
       return caml_call2(Bin_prot_Common[18],_k0_,pos_ref[1]);
      switch(match)
       {case 0:var arg_1=caml_call2(of_a,buf,pos_ref);return [0,arg_1];
        case 1:var arg_1$0=caml_call2(of_b,buf,pos_ref);return [1,arg_1$0];
        default:
         var
          arg_1$1=caml_call2(of_a,buf,pos_ref),
          arg_2=caml_call2(of_b,buf,pos_ref);
         return [2,arg_1$1,arg_2]}}
    function bin_reader_t$9(bin_reader_a,bin_reader_b)
     {function _bvk_(buf,pos_ref,vtag)
       {return bin_read_t$43(bin_reader_a[1],bin_reader_b[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$44
                        (bin_reader_a[1],bin_reader_b[1],buf,pos_ref)},
              _bvk_]}
    function bin_t$9(bin_a,bin_b)
     {var
       _bvi_=bin_reader_t$9(bin_a[3],bin_b[3]),
       _bvj_=bin_writer_t$9(bin_a[2],bin_b[2]);
      return [0,bin_shape_t$11(bin_a[1],bin_b[1]),_bvj_,_bvi_]}
    function merge_all(Heap,seqs,compare)
     {function _bvf_(param)
       {var not_yet_in_heap=param[2],heap=param[1];
        if(not_yet_in_heap)
         {var
           not_yet_in_heap$0=not_yet_in_heap[2],
           seq=not_yet_in_heap[1],
           match=caml_call1(_j$_[1],seq);
          if(typeof match === "number")
           return [0,[0,heap,not_yet_in_heap$0]];
          else
           {if(0 === match[0])
             {var seq$0=match[1];
              return [0,[0,heap,[0,seq$0,not_yet_in_heap$0]]]}
            var seq$1=match[2],elt=match[1];
            return [0,
                    [0,caml_call2(Heap[2],heap,[0,elt,seq$1]),not_yet_in_heap$0]]}}
        var match$0=caml_call1(Heap[3],heap);
        if(match$0)
         {var
           _bvh_=match$0[1],
           heap$0=_bvh_[2],
           match$1=_bvh_[1],
           seq$2=match$1[2],
           elt$0=match$1[1];
          return [1,elt$0,[0,heap$0,[0,seq$2,0]]]}
        return 0}
      var _bvg_=caml_call2(Base_Comparable[2],compare,_bj_);
      return caml_call2(_i7_,[0,caml_call1(Heap[1],_bvg_),seqs],_bvf_)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$58);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Sequence$0);
    var
     _k1_=
      [0,
       bin_shape_t$11,
       bin_size_t$20,
       bin_write_t$20,
       bin_read_t$44,
       bin_read_t$43,
       bin_writer_t$9,
       bin_reader_t$9,
       bin_t$9,
       _kF_,
       _kG_,
       _kH_,
       _kI_],
     Core_kernel_Sequence=
      [0,
       _kg_,
       _kh_,
       _ki_,
       _kj_,
       _kk_,
       _kl_,
       _km_,
       _kn_,
       [0,
        bin_shape_t$10,
        bin_size_t$19,
        bin_write_t$19,
        bin_read_t$42,
        bin_read_t$41,
        bin_writer_t$8,
        bin_reader_t$8,
        bin_t$8,
        _ko_],
       _k1_,
       _iv_,
       _iw_,
       _ix_,
       _iy_,
       _iz_,
       _iA_,
       _iB_,
       _iC_,
       _iD_,
       _iE_,
       _iF_,
       _iG_,
       _iH_,
       _iI_,
       _iJ_,
       _iK_,
       _iL_,
       _iM_,
       _iN_,
       _iO_,
       _iP_,
       _iQ_,
       _iR_,
       _iS_,
       _iT_,
       _iU_,
       _iV_,
       _iW_,
       _iX_,
       _iY_,
       _iZ_,
       _i0_,
       _i1_,
       _i2_,
       _i3_,
       _i4_,
       _i5_,
       _i7_,
       _i8_,
       _i9_,
       _i__,
       _i$_,
       _ja_,
       _jb_,
       _jc_,
       _jd_,
       _je_,
       _jf_,
       _jg_,
       _ji_,
       _jj_,
       _jk_,
       _jl_,
       _jm_,
       _jn_,
       _jo_,
       _jp_,
       _jq_,
       _jr_,
       _js_,
       _jt_,
       _ju_,
       _jv_,
       _jw_,
       _jx_,
       _jy_,
       _jz_,
       _jA_,
       _jB_,
       _jC_,
       _jD_,
       _jE_,
       _jF_,
       _jG_,
       _jH_,
       _jI_,
       _jJ_,
       _jK_,
       _jL_,
       _jM_,
       _jN_,
       _jO_,
       _jP_,
       _jQ_,
       _jR_,
       _jS_,
       _jT_,
       _jU_,
       _jV_,
       _jW_,
       _jX_,
       _jY_,
       _jZ_,
       _j0_,
       _j1_,
       _j2_,
       _j3_,
       _j4_,
       _j5_,
       _j6_,
       _j7_,
       _j8_,
       _j9_,
       _j__,
       merge_all];
    caml_register_global(4946,Core_kernel_Sequence,"Core_kernel__Sequence");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Array);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$59);
    caml_call1(Expect_test_collector[4][1],cst_src_array_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$60,cst$19);
    var
     _k2_=include$11[4],
     _k3_=include$11[1],
     _k4_=include$11[3],
     _k5_=include$11[2],
     _k6_=caml_call1(Bin_prot_Shape[3][1],cst_a$18),
     _k7_=caml_call1(Bin_prot_Shape[4][1],cst_src_array_ml_12_12),
     _k8_=caml_call1(_dm_,caml_call2(Bin_prot_Shape[15],_k7_,_k6_)),
     _k9_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$19),0],
     _k__=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$43),_k9_,_k8_],0],
     _k$_=caml_call1(Bin_prot_Shape[4][1],cst_src_array_ml_12_0),
     group$19=caml_call2(Bin_prot_Shape[6],_k$_,_k__);
    function bin_shape_t$12(a)
     {var _bve_=caml_call1(Bin_prot_Shape[2][1],cst_t$44);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$19,_bve_),[0,a,0])}
    function bin_size_t$21(size_of_a,v){return caml_call2(_bH_,size_of_a,v)}
    function bin_write_t$21(write_a,buf,pos,v)
     {return caml_call3(caml_call1(_do_,write_a),buf,pos,v)}
    function bin_writer_t$10(bin_writer_a)
     {function _bva_(v)
       {var _bvb_=bin_writer_a[2];
        return function(_bvc_,_bvd_)
         {return bin_write_t$21(_bvb_,v,_bvc_,_bvd_)}}
      return [0,function(v){return bin_size_t$21(bin_writer_a[1],v)},_bva_]}
    function bin_read_t$45(of_a,buf,pos_ref,vint)
     {return caml_call3(caml_call1(_dr_,of_a),buf,pos_ref,vint)}
    function bin_read_t$46(of_a,buf,pos_ref)
     {return caml_call2(caml_call1(_dq_,of_a),buf,pos_ref)}
    function bin_reader_t$10(bin_reader_a)
     {function _bu$_(buf,pos_ref,vtag)
       {return bin_read_t$45(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$46(bin_reader_a[1],buf,pos_ref)},
              _bu$_]}
    function bin_t$10(bin_a)
     {var _bu9_=bin_reader_t$10(bin_a[3]),_bu__=bin_writer_t$10(bin_a[2]);
      return [0,bin_shape_t$12(bin_a[1]),_bu__,_bu9_]}
    var
     Typename_of_t=caml_call1(Typerep_lib_Make_typename[2],[0,name$7]),
     typename_of_t=Typename_of_t[2];
    function typerep_of_t(of_a)
     {var name_of_t=caml_call1(Typename_of_t[1],of_a);
      return [9,
              [0,
               name_of_t,
               [0,[246,function(_bu8_){return caml_call1(_e5_,of_a)}]]]]}
    var
     binary_search=include$11[5],
     binary_search_segmented=include$11[6],
     mem=include$11[7],
     length=include$11[8],
     is_empty=include$11[9],
     iter=include$11[10],
     fold=include$11[11],
     fold_result=include$11[12],
     fold_until=include$11[13],
     exists=include$11[14],
     for_all=include$11[15],
     count=include$11[16],
     sum=include$11[17],
     find=include$11[18],
     find_map=include$11[19],
     to_list=include$11[20],
     to_array=include$11[21],
     min_elt=include$11[22],
     max_elt=include$11[23],
     create=include$11[26],
     init=include$11[27],
     make_matrix=include$11[28],
     append=include$11[29],
     concat=include$11[30],
     copy=include$11[31],
     fill=include$11[32],
     blit=include$11[33],
     blito=include$11[34],
     unsafe_blit=include$11[35],
     sub=include$11[36],
     subo=include$11[37],
     of_list=include$11[38],
     map$0=include$11[39],
     folding_map=include$11[40],
     folding_mapi=include$11[41],
     fold_map=include$11[42],
     fold_mapi=include$11[43],
     iteri=include$11[44],
     mapi=include$11[45],
     foldi=include$11[46],
     fold_right=include$11[47],
     sort=include$11[48],
     stable_sort=include$11[49],
     is_sorted=include$11[50],
     is_sorted_strictly=include$11[51],
     concat_map=include$11[52],
     concat_mapi=include$11[53],
     partition_tf=include$11[54],
     partitioni_tf=include$11[55],
     cartesian_product=include$11[56],
     transpose=include$11[57],
     transpose_exn=include$11[58],
     filter_opt=include$11[59],
     filter_map=include$11[60],
     filter_mapi=include$11[61],
     for_alli=include$11[62],
     existsi=include$11[63],
     counti=include$11[64],
     iter2_exn=include$11[65],
     map2_exn=include$11[66],
     fold2_exn=include$11[67],
     for_all2_exn=include$11[68],
     exists2_exn=include$11[69],
     filter=include$11[70],
     filteri=include$11[71],
     swap=include$11[72],
     rev_inplace=include$11[73],
     of_list_rev=include$11[74],
     of_list_map=include$11[75],
     of_list_mapi=include$11[76],
     of_list_rev_map=include$11[77],
     of_list_rev_mapi=include$11[78],
     map_inplace=include$11[79],
     find_exn=include$11[80],
     find_map_exn=include$11[81],
     findi=include$11[82],
     findi_exn=include$11[83],
     find_mapi=include$11[84],
     find_mapi_exn=include$11[85],
     find_consecutive_duplicate=include$11[86],
     reduce=include$11[87],
     reduce_exn=include$11[88],
     permute=include$11[89],
     random_element=include$11[90],
     random_element_exn=include$11[91],
     zip=include$11[92],
     zip_exn=include$11[93],
     unzip=include$11[94],
     sorted_copy=include$11[95],
     last=include$11[96],
     equal$0=include$11[97],
     to_sequence=include$11[98],
     to_sequence_mutable=include$11[99];
    function normalize$0(t,i){return normalize(length,t,i)}
    function slice$0(t,start,stop){return slice(length,sub,t,start,stop)}
    function nget(t,i)
     {var _bu7_=normalize$0(t,i);return caml_check_bound(t,_bu7_)[1 + _bu7_]}
    function nset(t,i,v)
     {var _bu6_=normalize$0(t,i);
      caml_check_bound(t,_bu6_)[1 + _bu6_] = v;
      return 0}
    var length$0=include$11[8];
    function get(_bu5_,_bu4_){return caml_check_bound(_bu5_,_bu4_)[1 + _bu4_]}
    function set(_bu3_,_bu2_,_bu1_)
     {caml_check_bound(_bu3_,_bu2_)[1 + _bu2_] = _bu1_;return 0}
    var
     _la_=caml_call1(_dm_,_co_),
     _lb_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$45),0,_la_],0],
     _lc_=caml_call1(Bin_prot_Shape[4][1],cst_src_array_ml_40_4),
     group$20=caml_call2(Bin_prot_Shape[6],_lc_,_lb_),
     _ld_=caml_call1(Bin_prot_Shape[2][1],cst_t$46),
     bin_shape_t$13=caml_call1(caml_call2(Bin_prot_Shape[14],group$20,_ld_),0);
    function bin_size_t$22(v){return caml_call2(_bH_,bin_size_t$4,v)}
    function bin_write_t$22(buf,pos,v)
     {return caml_call3(caml_call1(_do_,bin_write_t$4),buf,pos,v)}
    function bin_read_t$47(buf,pos_ref,vint)
     {return caml_call3(caml_call1(_dr_,bin_read_t$9),buf,pos_ref,vint)}
    function bin_read_t$48(buf,pos_ref)
     {return caml_call2(caml_call1(_dq_,bin_read_t$9),buf,pos_ref)}
    function compare$8(a_001,b_002)
     {return caml_call3
              (_c_,
               function(a_003,b_004){return caml_call2(compare,a_003,b_004)},
               a_001,
               b_002)}
    function t_of_sexp$10(t){return caml_call2(_e_,t_of_sexp,t)}
    function sexp_of_t$9(v){return caml_call2(_f_,sexp_of_t$0,v)}
    function create$0(len){return caml_call2(create,len,0)}
    var
     _le_=
      [0,
       create$0,
       length$0,
       get,
       set,
       function(_bu0_,_buZ_,_buY_,_buX_,_buW_)
        {return runtime.core_array_unsafe_int_blit
                 (_bu0_,_buZ_,_buY_,_buX_,_buW_)}];
    function of_bool(b){return b?1:0}
    var
     include$12=
      caml_call1
       (caml_call1(Base_for_tests_Test_blit[5],[0,_a5_,of_bool]),_le_),
     blit$0=include$12[1],
     blito$0=include$12[2],
     sub$0=include$12[4],
     subo$0=include$12[5],
     _lf_=caml_call1(_dm_,_cs_),
     _lg_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$47),0,_lf_],0],
     _lh_=caml_call1(Bin_prot_Shape[4][1],cst_src_array_ml_75_4),
     group$21=caml_call2(Bin_prot_Shape[6],_lh_,_lg_),
     _li_=caml_call1(Bin_prot_Shape[2][1],cst_t$48),
     bin_shape_t$14=caml_call1(caml_call2(Bin_prot_Shape[14],group$21,_li_),0);
    function bin_size_t$23(v){return caml_call2(_bH_,bin_size_t$5,v)}
    function bin_write_t$23(buf,pos,v)
     {return caml_call3(caml_call1(_do_,bin_write_t$5),buf,pos,v)}
    function bin_read_t$49(buf,pos_ref,vint)
     {return caml_call3(caml_call1(_dr_,bin_read_t$11),buf,pos_ref,vint)}
    function bin_read_t$50(buf,pos_ref)
     {return caml_call2(caml_call1(_dq_,bin_read_t$11),buf,pos_ref)}
    function compare$9(a_005,b_006)
     {return caml_call3
              (_c_,
               function(a_007,b_008){return caml_call2(_v_,a_007,b_008)},
               a_005,
               b_006)}
    function t_of_sexp$11(t){return caml_call2(_e_,_z_,t)}
    function sexp_of_t$10(v){return caml_call2(_f_,_A_,v)}
    function create$1(len){return caml_call2(create,len,0.)}
    var
     _lj_=
      [0,
       create$1,
       length$0,
       get,
       set,
       function(_buV_,_buU_,_buT_,_buS_,_buR_)
        {return runtime.core_array_unsafe_float_blit
                 (_buV_,_buU_,_buT_,_buS_,_buR_)}],
     equal$1=include$13[15];
    function of_bool$0(b){return b?1.:0.}
    var
     include$14=
      caml_call1
       (caml_call1(Base_for_tests_Test_blit[5],[0,equal$1,of_bool$0]),_lj_),
     blit$1=include$14[1],
     blito$1=include$14[2],
     sub$1=include$14[4],
     subo$1=include$14[5],
     _lk_=caml_call1(Bin_prot_Shape[3][1],cst_a$20),
     _ll_=caml_call1(Bin_prot_Shape[4][1],cst_src_array_ml_332_25),
     _lm_=caml_call1(_dm_,caml_call2(Bin_prot_Shape[15],_ll_,_lk_)),
     _ln_=[0,caml_call1(Bin_prot_Shape[3][1],cst_perms$1),0],
     _lo_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$21),_ln_],
     _lp_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$49),_lo_,_lm_],0],
     _lq_=caml_call1(Bin_prot_Shape[4][1],cst_src_array_ml_332_2),
     group$22=caml_call2(Bin_prot_Shape[6],_lq_,_lp_);
    function bin_shape_t$15(a,perms)
     {var _buQ_=caml_call1(Bin_prot_Shape[2][1],cst_t$50);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$22,_buQ_),
               [0,a,[0,perms,0]])}
    function bin_size_t$24(size_of_a,size_of_perms,v)
     {return caml_call2(_bH_,size_of_a,v)}
    function bin_write_t$24(write_a,write_perms,buf,pos,v)
     {return caml_call3(caml_call1(_do_,write_a),buf,pos,v)}
    function bin_writer_t$11(bin_writer_a,bin_writer_perms)
     {function _buL_(v)
       {var _buM_=bin_writer_perms[2],_buN_=bin_writer_a[2];
        return function(_buO_,_buP_)
         {return bin_write_t$24(_buN_,_buM_,v,_buO_,_buP_)}}
      return [0,
              function(v)
               {return bin_size_t$24(bin_writer_a[1],bin_writer_perms[1],v)},
              _buL_]}
    function bin_read_t$51(of_a,of_perms,buf,pos_ref,vint)
     {return caml_call3(caml_call1(_dr_,of_a),buf,pos_ref,vint)}
    function bin_read_t$52(of_a,of_perms,buf,pos_ref)
     {return caml_call2(caml_call1(_dq_,of_a),buf,pos_ref)}
    function bin_reader_t$11(bin_reader_a,bin_reader_perms)
     {function _buK_(buf,pos_ref,vtag)
       {return bin_read_t$51
                (bin_reader_a[1],bin_reader_perms[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$52
                        (bin_reader_a[1],bin_reader_perms[1],buf,pos_ref)},
              _buK_]}
    function bin_t$11(bin_a,bin_perms)
     {var
       _buI_=bin_reader_t$11(bin_a[3],bin_perms[3]),
       _buJ_=bin_writer_t$11(bin_a[2],bin_perms[2]);
      return [0,bin_shape_t$15(bin_a[1],bin_perms[1]),_buJ_,_buI_]}
    function compare$10(cmp_a,cmp_perms,a_009,b_010)
     {return caml_call3
              (_c_,
               function(a_011,b_012){return caml_call2(cmp_a,a_011,b_012)},
               a_009,
               b_010)}
    function t_of_sexp$12(of_a,of_perms,t){return caml_call2(_e_,of_a,t)}
    function sexp_of_t$11(of_a,of_perms,v){return caml_call2(_f_,of_a,v)}
    caml_call1(Typerep_lib_Make_typename[3],[0,name$8]);
    var
     _lr_=[0,caml_call1(Bin_prot_Shape[3][1],cst_perms$2),0],
     _ls_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$51),_lr_,bin_shape_t$13],0],
     _lt_=caml_call1(Bin_prot_Shape[4][1],cst_src_array_ml_337_4),
     group$23=caml_call2(Bin_prot_Shape[6],_lt_,_ls_);
    function bin_shape_t$16(perms)
     {var _buH_=caml_call1(Bin_prot_Shape[2][1],cst_t$52);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$23,_buH_),[0,perms,0])}
    function bin_size_t$25(size_of_perms){return bin_size_t$22}
    function bin_write_t$25(write_perms){return bin_write_t$22}
    function bin_writer_t$12(bin_writer_perms)
     {function _buG_(v)
       {return caml_call1(bin_write_t$25(bin_writer_perms[2]),v)}
      return [0,
              function(v)
               {return caml_call1(bin_size_t$25(bin_writer_perms[1]),v)},
              _buG_]}
    function bin_read_t$53(of_perms){return bin_read_t$47}
    function bin_read_t$54(of_perms){return bin_read_t$48}
    function bin_reader_t$12(bin_reader_perms)
     {function _buF_(buf,pos_ref,vtag)
       {return caml_call3(bin_read_t$53(bin_reader_perms[1]),buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return caml_call2
                        (bin_read_t$54(bin_reader_perms[1]),buf,pos_ref)},
              _buF_]}
    function bin_t$12(bin_perms)
     {var
       _buD_=bin_reader_t$12(bin_perms[3]),
       _buE_=bin_writer_t$12(bin_perms[2]);
      return [0,bin_shape_t$16(bin_perms[1]),_buE_,_buD_]}
    function compare$11(cmp_perms,a_013,b_014){return compare$8(a_013,b_014)}
    function t_of_sexp$13(of_perms,t){return t_of_sexp$10(t)}
    function sexp_of_t$12(of_perms,v){return sexp_of_t$9(v)}
    var
     _lu_=[0,caml_call1(Bin_prot_Shape[3][1],cst_perms$3),0],
     _lv_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$53),_lu_,bin_shape_t$14],0],
     _lw_=caml_call1(Bin_prot_Shape[4][1],cst_src_array_ml_343_4),
     group$24=caml_call2(Bin_prot_Shape[6],_lw_,_lv_);
    function bin_shape_t$17(perms)
     {var _buC_=caml_call1(Bin_prot_Shape[2][1],cst_t$54);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$24,_buC_),[0,perms,0])}
    function bin_size_t$26(size_of_perms){return bin_size_t$23}
    function bin_write_t$26(write_perms){return bin_write_t$23}
    function bin_writer_t$13(bin_writer_perms)
     {function _buB_(v)
       {return caml_call1(bin_write_t$26(bin_writer_perms[2]),v)}
      return [0,
              function(v)
               {return caml_call1(bin_size_t$26(bin_writer_perms[1]),v)},
              _buB_]}
    function bin_read_t$55(of_perms){return bin_read_t$49}
    function bin_read_t$56(of_perms){return bin_read_t$50}
    function bin_reader_t$13(bin_reader_perms)
     {function _buA_(buf,pos_ref,vtag)
       {return caml_call3(bin_read_t$55(bin_reader_perms[1]),buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return caml_call2
                        (bin_read_t$56(bin_reader_perms[1]),buf,pos_ref)},
              _buA_]}
    function bin_t$13(bin_perms)
     {var
       _buy_=bin_reader_t$13(bin_perms[3]),
       _buz_=bin_writer_t$13(bin_perms[2]);
      return [0,bin_shape_t$17(bin_perms[1]),_buz_,_buy_]}
    function compare$12(cmp_perms,a_015,b_016){return compare$9(a_015,b_016)}
    function t_of_sexp$14(of_perms,t){return t_of_sexp$11(t)}
    function sexp_of_t$13(of_perms,v){return sexp_of_t$10(v)}
    function to_array_id(_bux_){return _bux_}
    function of_array_id(_buw_){return _buw_}
    var
     _lx_=
      [0,
       bin_shape_t$17,
       bin_size_t$26,
       bin_write_t$26,
       bin_read_t$56,
       bin_read_t$55,
       bin_writer_t$13,
       bin_reader_t$13,
       bin_t$13,
       compare$12,
       t_of_sexp$14,
       sexp_of_t$13,
       blit$1,
       blito$1,
       sub$1,
       subo$1],
     _ly_=
      [0,
       bin_shape_t$16,
       bin_size_t$25,
       bin_write_t$25,
       bin_read_t$54,
       bin_read_t$53,
       bin_writer_t$12,
       bin_reader_t$12,
       bin_t$12,
       compare$11,
       t_of_sexp$13,
       sexp_of_t$12,
       blit$0,
       blito$0,
       sub$0,
       subo$0];
    function invariant(invariant_a,t){return caml_call2(iter,t,invariant_a)}
    var
     _lz_=Stdlib_sys[13],
     _lA_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$55),0,bin_shape_t$13],0],
     _lB_=caml_call1(Bin_prot_Shape[4][1],cst_src_array_ml_451_2),
     group$25=caml_call2(Bin_prot_Shape[6],_lB_,_lA_),
     _lC_=caml_call1(Bin_prot_Shape[2][1],cst_t$56),
     bin_shape_t$18=caml_call1(caml_call2(Bin_prot_Shape[14],group$25,_lC_),0),
     bin_writer_t$14=[0,bin_size_t$22,bin_write_t$22],
     bin_reader_t$14=[0,bin_read_t$48,bin_read_t$47],
     bin_t$14=[0,bin_shape_t$18,bin_writer_t$14,bin_reader_t$14],
     _lD_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$57),0,bin_shape_t$14],0],
     _lE_=caml_call1(Bin_prot_Shape[4][1],cst_src_array_ml_457_2),
     group$26=caml_call2(Bin_prot_Shape[6],_lE_,_lD_),
     _lF_=caml_call1(Bin_prot_Shape[2][1],cst_t$58),
     bin_shape_t$19=caml_call1(caml_call2(Bin_prot_Shape[14],group$26,_lF_),0),
     bin_writer_t$15=[0,bin_size_t$23,bin_write_t$23],
     bin_reader_t$15=[0,bin_read_t$50,bin_read_t$49],
     bin_t$15=[0,bin_shape_t$19,bin_writer_t$15,bin_reader_t$15];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$61);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Array$0);
    var
     Core_kernel_Array=
      [0,
       bin_shape_t$12,
       bin_size_t$21,
       bin_write_t$21,
       bin_read_t$46,
       bin_read_t$45,
       bin_writer_t$10,
       bin_reader_t$10,
       bin_t$10,
       typerep_of_t,
       typename_of_t,
       _k3_,
       _k5_,
       _k4_,
       _k2_,
       binary_search,
       binary_search_segmented,
       mem,
       length,
       is_empty,
       iter,
       fold,
       fold_result,
       fold_until,
       exists,
       for_all,
       count,
       sum,
       find,
       find_map,
       to_list,
       to_array,
       min_elt,
       max_elt,
       invariant,
       _lz_,
       create,
       init,
       make_matrix,
       append,
       concat,
       copy,
       fill,
       blit,
       blito,
       unsafe_blit,
       sub,
       subo,
       of_list,
       map$0,
       folding_map,
       folding_mapi,
       fold_map,
       fold_mapi,
       iteri,
       mapi,
       foldi,
       fold_right,
       sort,
       stable_sort,
       is_sorted,
       is_sorted_strictly,
       concat_map,
       concat_mapi,
       partition_tf,
       partitioni_tf,
       cartesian_product,
       transpose,
       transpose_exn,
       filter_opt,
       filter_map,
       filter_mapi,
       for_alli,
       existsi,
       counti,
       iter2_exn,
       map2_exn,
       fold2_exn,
       for_all2_exn,
       exists2_exn,
       filter,
       filteri,
       swap,
       rev_inplace,
       of_list_rev,
       of_list_map,
       of_list_mapi,
       of_list_rev_map,
       of_list_rev_mapi,
       map_inplace,
       find_exn,
       find_map_exn,
       findi,
       findi_exn,
       find_mapi,
       find_mapi_exn,
       find_consecutive_duplicate,
       reduce,
       reduce_exn,
       permute,
       random_element,
       random_element_exn,
       zip,
       zip_exn,
       unzip,
       sorted_copy,
       last,
       equal$0,
       to_sequence,
       to_sequence_mutable,
       [0,
        bin_size_t$22,
        bin_write_t$22,
        bin_read_t$48,
        bin_read_t$47,
        bin_shape_t$18,
        bin_writer_t$14,
        bin_reader_t$14,
        bin_t$14,
        compare$8,
        t_of_sexp$10,
        sexp_of_t$9,
        blit$0,
        blito$0,
        sub$0,
        subo$0],
       [0,
        bin_size_t$23,
        bin_write_t$23,
        bin_read_t$50,
        bin_read_t$49,
        bin_shape_t$19,
        bin_writer_t$15,
        bin_reader_t$15,
        bin_t$15,
        compare$9,
        t_of_sexp$11,
        sexp_of_t$10,
        blit$1,
        blito$1,
        sub$1,
        subo$1],
       normalize$0,
       slice$0,
       nget,
       nset,
       [0,
        bin_shape_t$15,
        bin_size_t$24,
        bin_write_t$24,
        bin_read_t$52,
        bin_read_t$51,
        bin_writer_t$11,
        bin_reader_t$11,
        bin_t$11,
        compare$10,
        t_of_sexp$12,
        sexp_of_t$11,
        _ly_,
        _lx_,
        of_array_id,
        to_array_id,
        to_sequence_mutable,
        mem,
        iter,
        fold,
        fold_result,
        fold_until,
        exists,
        for_all,
        count,
        sum,
        find,
        find_map,
        to_list,
        copy,
        min_elt,
        max_elt,
        blit,
        blito,
        unsafe_blit,
        sub,
        subo,
        binary_search,
        binary_search_segmented,
        length,
        is_empty,
        create,
        init,
        make_matrix,
        append,
        concat,
        copy,
        fill,
        of_list,
        map$0,
        mapi,
        folding_map,
        iteri,
        foldi,
        folding_mapi,
        fold_right,
        sort,
        stable_sort,
        is_sorted,
        is_sorted_strictly,
        concat_map,
        concat_mapi,
        partition_tf,
        partitioni_tf,
        cartesian_product,
        transpose,
        transpose_exn,
        normalize$0,
        slice$0,
        nget,
        nset,
        filter_opt,
        filter_map,
        filter_mapi,
        for_alli,
        existsi,
        counti,
        iter2_exn,
        map2_exn,
        fold2_exn,
        for_all2_exn,
        exists2_exn,
        filter,
        filteri,
        swap,
        rev_inplace,
        of_list_rev,
        of_list_map,
        of_list_mapi,
        of_list_rev_map,
        of_list_rev_mapi,
        map_inplace,
        find_exn,
        find_map_exn,
        findi,
        findi_exn,
        find_mapi,
        find_mapi_exn,
        find_consecutive_duplicate,
        reduce,
        reduce_exn,
        permute,
        zip,
        zip_exn,
        unzip,
        sorted_copy,
        last,
        equal$0,
        to_sequence,
        to_sequence_mutable]];
    caml_register_global(4951,Core_kernel_Array,"Core_kernel__Array");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Either);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$62);
    caml_call1(Expect_test_collector[4][1],cst_src_either_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$63,cst$20);
    var
     _lG_=caml_call1(Bin_prot_Shape[3][1],cst_s$2),
     _lH_=caml_call1(Bin_prot_Shape[4][1],cst_src_either_ml_5_18),
     _lI_=[0,[0,cst_Second,[0,caml_call2(Bin_prot_Shape[15],_lH_,_lG_),0]],0],
     _lJ_=caml_call1(Bin_prot_Shape[3][1],cst_f),
     _lK_=caml_call1(Bin_prot_Shape[4][1],cst_src_either_ml_4_17),
     _lL_=
      [0,[0,cst_First,[0,caml_call2(Bin_prot_Shape[15],_lK_,_lJ_),0]],_lI_],
     _lM_=caml_call1(Bin_prot_Shape[9],_lL_),
     _lN_=[0,caml_call1(Bin_prot_Shape[3][1],cst_s$3),0],
     _lO_=[0,caml_call1(Bin_prot_Shape[3][1],cst_f$0),_lN_],
     _lP_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$59),_lO_,_lM_],0],
     _lQ_=caml_call1(Bin_prot_Shape[4][1],cst_src_either_ml_3_4),
     group$27=caml_call2(Bin_prot_Shape[6],_lQ_,_lP_);
    function bin_shape_t$20(f,s)
     {var _buv_=caml_call1(Bin_prot_Shape[2][1],cst_t$60);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$27,_buv_),[0,f,[0,s,0]])}
    function bin_size_t$27(size_of_f,size_of_s,param)
     {if(0 === param[0])
       {var v1=param[1],_but_=caml_call1(size_of_f,v1);
        return caml_call2(Bin_prot_Common[23],1,_but_)}
      var v1$0=param[1],_buu_=caml_call1(size_of_s,v1$0);
      return caml_call2(Bin_prot_Common[23],1,_buu_)}
    function bin_write_t$27(write_f,write_s,buf,pos,param)
     {if(0 === param[0])
       {var v1=param[1],pos$0=caml_call3(Bin_prot_Write[30],buf,pos,0);
        return caml_call3(write_f,buf,pos$0,v1)}
      var v1$0=param[1],pos$1=caml_call3(Bin_prot_Write[30],buf,pos,1);
      return caml_call3(write_s,buf,pos$1,v1$0)}
    function bin_writer_t$16(bin_writer_f,bin_writer_s)
     {function _buo_(v)
       {var _bup_=bin_writer_s[2],_buq_=bin_writer_f[2];
        return function(_bur_,_bus_)
         {return bin_write_t$27(_buq_,_bup_,v,_bur_,_bus_)}}
      return [0,
              function(v)
               {return bin_size_t$27(bin_writer_f[1],bin_writer_s[1],v)},
              _buo_]}
    function bin_read_t$57(of_f,of_s,buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_src_either_ml_Stable_V1_t,pos_ref[1])}
    function bin_read_t$58(of_f,of_s,buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[29],buf,pos_ref);
      if(0 === match){var arg_1=caml_call2(of_f,buf,pos_ref);return [0,arg_1]}
      if(1 === match)
       {var arg_1$0=caml_call2(of_s,buf,pos_ref);return [1,arg_1$0]}
      return caml_call2(Bin_prot_Common[18],_lR_,pos_ref[1])}
    function bin_reader_t$16(bin_reader_f,bin_reader_s)
     {function _bun_(buf,pos_ref,vtag)
       {return bin_read_t$57(bin_reader_f[1],bin_reader_s[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$58
                        (bin_reader_f[1],bin_reader_s[1],buf,pos_ref)},
              _bun_]}
    function bin_t$16(bin_f,bin_s)
     {var
       _bul_=bin_reader_t$16(bin_f[3],bin_s[3]),
       _bum_=bin_writer_t$16(bin_f[2],bin_s[2]);
      return [0,bin_shape_t$20(bin_f[1],bin_s[1]),_bum_,_bul_]}
    function compare$13(cmp_f,cmp_s,a_001,match)
     {if(caml_call2(Ppx_compare_lib[1],a_001,match))return 0;
      if(0 === a_001[0])
       {var _buj_=a_001[1];
        if(0 === match[0])
         {var b_004=match[1];return caml_call2(cmp_f,_buj_,b_004)}
        return -1}
      var _buk_=a_001[1];
      if(0 === match[0])return 1;
      var b_006=match[1];
      return caml_call2(cmp_s,_buk_,b_006)}
    function t_of_sexp$15(of_f,of_s,sexp)
     {if(0 === sexp[0])
       {var _buf_=sexp[1],switch$0=0;
        if(caml_string_notequal(_buf_,cst_First$0))
         {var switch$1=0;
          if(caml_string_notequal(_buf_,cst_Second$0))
           if(caml_string_notequal(_buf_,cst_first))
            {if(caml_string_notequal(_buf_,cst_second))
              {switch$0 = 1;switch$1 = 1}}
           else
            switch$1 = 1;
          if(! switch$1)
           return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$11,sexp)}
        if(! switch$0)
         return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$11,sexp)}
      else
       {var _bug_=sexp[1];
        if(! _bug_)
         return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$11,sexp);
        var _buh_=_bug_[1];
        if(0 !== _buh_[0])
         return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$11,sexp);
        var _bui_=_buh_[1],switch$2=0;
        if(caml_string_notequal(_bui_,cst_First$1))
         {var switch$3=0;
          if(caml_string_notequal(_bui_,cst_Second$1))
           if(caml_string_notequal(_bui_,cst_first$0))
            {if(caml_string_notequal(_bui_,cst_second$0))
              {switch$2 = 1;switch$3 = 1}}
           else
            switch$3 = 1;
          if(! switch$3)
           {var sexp_args=_bug_[2];
            if(sexp_args && ! sexp_args[2])
             {var v0=sexp_args[1],v0$0=caml_call1(of_s,v0);return [1,v0$0]}
            return caml_call3
                    (Sexplib0_Sexp_conv_error[4],tp_loc$11,_bui_,sexp)}}
        if(! switch$2)
         {var sexp_args$0=_bug_[2];
          if(sexp_args$0 && ! sexp_args$0[2])
           {var v0$1=sexp_args$0[1],v0$2=caml_call1(of_f,v0$1);
            return [0,v0$2]}
          return caml_call3(Sexplib0_Sexp_conv_error[4],tp_loc$11,_bui_,sexp)}}
      return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$11,sexp)}
    function sexp_of_t$14(of_f,of_s,param)
     {if(0 === param[0])
       {var v0=param[1],v0$0=caml_call1(of_f,v0);
        return [1,[0,_lS_,[0,v0$0,0]]]}
      var v0$1=param[1],v0$2=caml_call1(of_s,v0$1);
      return [1,[0,_lT_,[0,v0$2,0]]]}
    var
     Typename_of_t$0=caml_call1(Typerep_lib_Make_typename[3],[0,name$9]),
     typename_of_t$0=Typename_of_t$0[2];
    function typerep_of_t$0(of_f,of_s)
     {var name_of_t=caml_call2(Typename_of_t$0[1],of_f,of_s);
      return [9,
              [0,
               name_of_t,
               [0,
                [246,
                 function(_bua_)
                  {var
                    _bub_=[0,function(v0){return [0,v0]}],
                    _buc_=
                     [0,
                      cst_First$2,
                      of_f,
                      1,
                      0,
                      0,
                      0,
                      caml_call2(Typerep_lib_Typename[1],0,0),
                      _bub_],
                    tag0=caml_call1(Typerep_lib_Std[1][4][9],_buc_),
                    _bud_=[0,function(v0){return [1,v0]}],
                    _bue_=
                     [0,
                      cst_Second$2,
                      of_s,
                      1,
                      0,
                      1,
                      1,
                      caml_call2(Typerep_lib_Typename[1],0,0),
                      _bud_],
                    tag1=caml_call1(Typerep_lib_Std[1][4][9],_bue_),
                    typename=caml_call1(Typerep_lib_Std[1][1][2],name_of_t),
                    tags=[0,[0,tag0],[0,tag1]],
                    polymorphic=0;
                   function value(param)
                    {if(0 === param[0]){var v0=param[1];return [0,tag0,v0]}
                     var v0$0=param[1];
                     return [0,tag1,v0$0]}
                   return [8,
                           caml_call1
                            (Typerep_lib_Std[1][6][7],
                             [0,typename,tags,polymorphic,value])]}]]]]}
    function map$1(x,f1,f2)
     {if(0 === x[0]){var x1=x[1];return [0,caml_call1(f1,x1)]}
      var x2=x[1];
      return [1,caml_call1(f2,x2)]}
    var
     _lU_=include$15[1],
     hash_fold_t$6=include$15[2],
     t_of_sexp$16=include$15[3],
     sexp_of_t$15=include$15[4],
     invariant$0=include$15[5],
     swap$0=include$15[6],
     value=include$15[7],
     iter$0=include$15[8],
     value_map=include$15[9],
     map$2=include$15[10],
     equal$2=include$15[11],
     is_first=include$15[14],
     is_second=include$15[15],
     first=include$15[16],
     second=include$15[17];
    function compare$14(cmp_a,cmp_b,a_007,b_008)
     {function _bt$_(a_011,b_012){return caml_call2(cmp_b,a_011,b_012)}
      return caml_call4
              (_lU_,
               function(a_009,b_010){return caml_call2(cmp_a,a_009,b_010)},
               _bt$_,
               a_007,
               b_008)}
    var
     include$16=caml_call1(Derived2,[0,compare$14,sexp_of_t$15]),
     _lV_=include$16[1],
     _lW_=Base_quickcheck_Generator[14],
     _lX_=Base_quickcheck_Observer[16],
     _lY_=Base_quickcheck_Shrinker[16];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$64);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Either$0);
    var
     Core_kernel_Either=
      [0,
       bin_shape_t$20,
       bin_size_t$27,
       bin_write_t$27,
       bin_read_t$58,
       bin_read_t$57,
       bin_writer_t$16,
       bin_reader_t$16,
       bin_t$16,
       typerep_of_t$0,
       typename_of_t$0,
       _lU_,
       hash_fold_t$6,
       t_of_sexp$16,
       sexp_of_t$15,
       invariant$0,
       swap$0,
       value,
       iter$0,
       value_map,
       map$2,
       equal$2,
       is_first,
       is_second,
       first,
       second,
       _lV_,
       _lW_,
       _lX_,
       _lY_,
       [0,
        [0,
         bin_shape_t$20,
         bin_size_t$27,
         bin_write_t$27,
         bin_read_t$58,
         bin_read_t$57,
         bin_writer_t$16,
         bin_reader_t$16,
         bin_t$16,
         compare$13,
         t_of_sexp$15,
         sexp_of_t$14,
         map$1]]];
    caml_register_global(4957,Core_kernel_Either,"Core_kernel__Either");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Info_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$65);
    caml_call1(Expect_test_collector[4][1],cst_src_info_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$66,cst$21);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$67);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Info_intf$0);
    var Core_kernel_Info_intf=[0];
    caml_register_global(4958,Core_kernel_Info_intf,"Core_kernel__Info_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Source_code_po);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$68);
    caml_call1(Expect_test_collector[4][1],cst_src_source_code_position0_);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$69,cst$22);
    var
     _lZ_=include$17[4],
     _l0_=include$17[5],
     _l1_=include$17[6],
     _l2_=include$17[7],
     _l3_=include$17[8],
     _l4_=include$17[9],
     _l5_=include$17[10],
     _l6_=include$17[12],
     _l7_=include$17[13],
     _l8_=include$17[14],
     _l9_=include$17[15],
     _l__=include$17[16],
     _l$_=include$17[17],
     _ma_=include$17[18],
     _mb_=include$17[19],
     _mc_=include$17[20],
     _md_=include$17[21],
     _me_=include$17[22],
     _mf_=include$17[23],
     _mg_=include$17[24],
     _mh_=
      caml_call1
       (Bin_prot_Shape[8],
        [0,
         [0,cst_pos_fname,_cc_],
         [0,
          [0,cst_pos_lnum,_co_],
          [0,[0,cst_pos_bol,_co_],[0,[0,cst_pos_cnum,_co_],0]]]]),
     _mi_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$61),0,_mh_],0],
     _mj_=caml_call1(Bin_prot_Shape[4][1],cst_src_source_code_position0_$0),
     group$28=caml_call2(Bin_prot_Shape[6],_mj_,_mi_),
     _mk_=caml_call1(Bin_prot_Shape[2][1],cst_t$62),
     bin_shape_t$21=caml_call1(caml_call2(Bin_prot_Shape[14],group$28,_mk_),0);
    function bin_size_t$28(param)
     {var
       v4=param[4],
       v3=param[3],
       v2=param[2],
       v1=param[1],
       _bt7_=caml_call1(bin_size_t$1,v1),
       size=caml_call2(Bin_prot_Common[23],0,_bt7_),
       _bt8_=caml_call1(bin_size_t$4,v2),
       size$0=caml_call2(Bin_prot_Common[23],size,_bt8_),
       _bt9_=caml_call1(bin_size_t$4,v3),
       size$1=caml_call2(Bin_prot_Common[23],size$0,_bt9_),
       _bt__=caml_call1(bin_size_t$4,v4);
      return caml_call2(Bin_prot_Common[23],size$1,_bt__)}
    function bin_write_t$28(buf,pos,param)
     {var
       v4=param[4],
       v3=param[3],
       v2=param[2],
       v1=param[1],
       pos$0=caml_call3(bin_write_t$1,buf,pos,v1),
       pos$1=caml_call3(bin_write_t$4,buf,pos$0,v2),
       pos$2=caml_call3(bin_write_t$4,buf,pos$1,v3);
      return caml_call3(bin_write_t$4,buf,pos$2,v4)}
    var bin_writer_t$17=[0,bin_size_t$28,bin_write_t$28];
    function bin_read_t$59(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],
               cst_src_source_code_position0_$1,
               pos_ref[1])}
    function bin_read_t$60(buf,pos_ref)
     {var
       v_pos_fname=caml_call2(bin_read_t$3,buf,pos_ref),
       v_pos_lnum=caml_call2(bin_read_t$9,buf,pos_ref),
       v_pos_bol=caml_call2(bin_read_t$9,buf,pos_ref),
       v_pos_cnum=caml_call2(bin_read_t$9,buf,pos_ref);
      return [0,v_pos_fname,v_pos_lnum,v_pos_bol,v_pos_cnum]}
    var
     bin_reader_t$17=[0,bin_read_t$60,bin_read_t$59],
     bin_t$17=[0,bin_shape_t$21,bin_writer_t$17,bin_reader_t$17];
    function compare$15(a_001,b_002)
     {if(caml_call2(Ppx_compare_lib[1],a_001,b_002))return 0;
      var n=caml_call2(_ap_,a_001[1],b_002[1]);
      if(0 === n)
       {var n$0=caml_call2(compare,a_001[2],b_002[2]);
        if(0 === n$0)
         {var n$1=caml_call2(compare,a_001[3],b_002[3]);
          return 0 === n$1?caml_call2(compare,a_001[4],b_002[4]):n$1}
        return n$0}
      return n}
    function hash_fold_t$7(hsv,arg)
     {var
       hsv$0=caml_call2(_ar_,hsv,arg[1]),
       hsv$1=caml_call2(hash_fold_t,hsv$0,arg[2]),
       hsv$2=caml_call2(hash_fold_t,hsv$1,arg[3]);
      return caml_call2(hash_fold_t,hsv$2,arg[4])}
    function hash$5(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_bt6_=hash_fold_t$7(hsv,x);
      return caml_call1(Base_Hash[9],_bt6_)}
    function t_of_sexp$17(sexp)
     {if(0 === sexp[0])
       return caml_call2(Sexplib0_Sexp_conv_error[16],tp_loc$12,sexp);
      var
       field_sexps=sexp[1],
       pos_fname_field=[0,0],
       pos_lnum_field=[0,0],
       pos_bol_field=[0,0],
       pos_cnum_field=[0,0],
       duplicates=[0,0],
       extra=[0,0],
       param=field_sexps;
      for(;;)
       {if(param)
         {var _btW_=param[1];
          if(1 === _btW_[0])
           {var _btX_=_btW_[1];
            if(_btX_)
             {var _btY_=_btX_[1];
              if(0 === _btY_[0])
               {var _btZ_=_btX_[2],_bt0_=_btY_[1],switch$0=0;
                if(! _btZ_ || ! _btZ_[2])switch$0 = 1;
                if(switch$0)
                 {var
                   tail=param[2],
                   field_sexp$4=
                    function(_bt5_)
                     {function field_sexp(param)
                       {if(_bt5_)
                         {if(_bt5_[2])throw [0,Assert_failure,_ml_];
                          var x=_bt5_[1];
                          return x}
                        return caml_call2
                                (Sexplib0_Sexp_conv_error[10],tp_loc$12,sexp)}
                      return field_sexp},
                   field_sexp=field_sexp$4(_btZ_);
                  if(caml_string_notequal(_bt0_,cst_pos_bol$0))
                   if(caml_string_notequal(_bt0_,cst_pos_cnum$0))
                    if(caml_string_notequal(_bt0_,cst_pos_fname$0))
                     if(caml_string_notequal(_bt0_,cst_pos_lnum$0))
                      {if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_bt0_,extra[1]]}
                     else
                      if(pos_lnum_field[1])
                       duplicates[1] = [0,_bt0_,duplicates[1]];
                      else
                       {var
                         field_sexp$0=field_sexp(0),
                         fvalue=caml_call1(t_of_sexp,field_sexp$0);
                        pos_lnum_field[1] = [0,fvalue]}
                    else
                     if(pos_fname_field[1])
                      duplicates[1] = [0,_bt0_,duplicates[1]];
                     else
                      {var
                        field_sexp$1=field_sexp(0),
                        fvalue$0=caml_call1(_at_,field_sexp$1);
                       pos_fname_field[1] = [0,fvalue$0]}
                   else
                    if(pos_cnum_field[1])
                     duplicates[1] = [0,_bt0_,duplicates[1]];
                    else
                     {var
                       field_sexp$2=field_sexp(0),
                       fvalue$1=caml_call1(t_of_sexp,field_sexp$2);
                      pos_cnum_field[1] = [0,fvalue$1]}
                  else
                   if(pos_bol_field[1])
                    duplicates[1] = [0,_bt0_,duplicates[1]];
                   else
                    {var
                      field_sexp$3=field_sexp(0),
                      fvalue$2=caml_call1(t_of_sexp,field_sexp$3);
                     pos_bol_field[1] = [0,fvalue$2]}
                  var param=tail;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[10],tp_loc$12,_btW_)}
        if(duplicates[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],tp_loc$12,duplicates[1],sexp);
        if(extra[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[13],tp_loc$12,extra[1],sexp);
        var
         _bt1_=pos_fname_field[1],
         _bt2_=pos_lnum_field[1],
         _bt3_=pos_bol_field[1],
         _bt4_=pos_cnum_field[1];
        if(_bt1_ && _bt2_ && _bt3_ && _bt4_)
         {var
           pos_cnum_value=_bt4_[1],
           pos_bol_value=_bt3_[1],
           pos_lnum_value=_bt2_[1],
           pos_fname_value=_bt1_[1];
          return [0,
                  pos_fname_value,
                  pos_lnum_value,
                  pos_bol_value,
                  pos_cnum_value]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[15],
                 tp_loc$12,
                 sexp,
                 [0,
                  [0,0 === pos_fname_field[1]?1:0,cst_pos_fname$1],
                  [0,
                   [0,0 === pos_lnum_field[1]?1:0,cst_pos_lnum$1],
                   [0,
                    [0,0 === pos_bol_field[1]?1:0,cst_pos_bol$1],
                    [0,[0,0 === pos_cnum_field[1]?1:0,cst_pos_cnum$1],0]]]])}}
    function sexp_of_t$16(param)
     {var
       v_pos_cnum=param[4],
       v_pos_bol=param[3],
       v_pos_lnum=param[2],
       v_pos_fname=param[1],
       arg=caml_call1(sexp_of_t$0,v_pos_cnum),
       bnds=[0,[1,[0,_mm_,[0,arg,0]]],0],
       arg$0=caml_call1(sexp_of_t$0,v_pos_bol),
       bnds$0=[0,[1,[0,_mn_,[0,arg$0,0]]],bnds],
       arg$1=caml_call1(sexp_of_t$0,v_pos_lnum),
       bnds$1=[0,[1,[0,_mo_,[0,arg$1,0]]],bnds$0],
       arg$2=caml_call1(_au_,v_pos_fname),
       bnds$2=[0,[1,[0,_mp_,[0,arg$2,0]]],bnds$1];
      return [1,bnds$2]}
    var
     V1$11=
      [0,
       _lZ_,
       _l0_,
       _l1_,
       _l2_,
       _l3_,
       _l4_,
       _l5_,
       _l6_,
       _l7_,
       _l8_,
       _l9_,
       _l__,
       _l$_,
       _ma_,
       _mb_,
       _mc_,
       _md_,
       _me_,
       _mf_,
       _mg_,
       bin_shape_t$21,
       bin_size_t$28,
       bin_write_t$28,
       bin_writer_t$17,
       bin_read_t$59,
       bin_read_t$60,
       bin_reader_t$17,
       bin_t$17,
       compare$15,
       hash_fold_t$7,
       hash$5,
       t_of_sexp$17,
       sexp_of_t$16],
     Stable$1=[0,V1$11],
     _mq_=Stable$1[1],
     _mJ_=_mq_[20],
     _mS_=_mq_[29],
     _mT_=_mq_[30],
     _mU_=_mq_[31],
     _mV_=_mq_[32],
     _mW_=include$17[23],
     _mX_=include$17[3],
     _mr_=_mq_[1],
     _ms_=_mq_[2],
     _mt_=_mq_[3],
     _mu_=_mq_[4],
     _mv_=_mq_[5],
     _mw_=_mq_[6],
     _mx_=_mq_[7],
     _my_=_mq_[8],
     _mz_=_mq_[9],
     _mA_=_mq_[10],
     _mB_=_mq_[11],
     _mC_=_mq_[12],
     _mD_=_mq_[13],
     _mE_=_mq_[14],
     _mF_=_mq_[15],
     _mG_=_mq_[16],
     _mH_=_mq_[17],
     _mI_=_mq_[18],
     _mK_=_mq_[21],
     _mL_=_mq_[22],
     _mM_=_mq_[23],
     _mN_=_mq_[24],
     _mO_=_mq_[25],
     _mP_=_mq_[26],
     _mQ_=_mq_[27],
     _mR_=_mq_[28];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$70);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Source_code_po$0);
    var
     Core_kernel_Source_code_positi=
      [0,
       Stable$1,
       _mr_,
       _ms_,
       _mt_,
       _mu_,
       _mv_,
       _mw_,
       _mx_,
       _my_,
       _mz_,
       _mA_,
       _mB_,
       _mC_,
       _mD_,
       _mE_,
       _mF_,
       _mG_,
       _mH_,
       _mI_,
       _mJ_,
       _mK_,
       _mL_,
       _mM_,
       _mN_,
       _mO_,
       _mP_,
       _mQ_,
       _mR_,
       _mS_,
       _mT_,
       _mU_,
       _mV_,
       _mW_,
       _mX_];
    caml_register_global
     (4960,
      Core_kernel_Source_code_positi,
      "Core_kernel__Source_code_position0");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Info);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$71);
    caml_call1(Expect_test_collector[4][1],cst_src_info_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$72,cst$23);
    var
     _mY_=include$18[58],
     _mZ_=include$18[59],
     _m0_=caml_call1(Bin_prot_Shape[2][1],cst_t$63),
     _m1_=
      [0,
       [0,cst_Atom$1,[0,_cc_,0]],
       [0,
        [0,
         cst_List$1,
         [0,
          caml_call1(_df_,caml_call1(caml_call1(Bin_prot_Shape[13],_m0_),0)),
          0]],
        0]],
     _m2_=caml_call1(Bin_prot_Shape[9],_m1_),
     _m3_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$64),0,_m2_],0],
     _m4_=caml_call1(Bin_prot_Shape[4][1],cst_src_info_ml_18_4),
     group$29=caml_call2(Bin_prot_Shape[6],_m4_,_m3_),
     _m5_=caml_call1(Bin_prot_Shape[2][1],cst_t$65),
     bin_shape_t$22=caml_call1(caml_call2(Bin_prot_Shape[14],group$29,_m5_),0);
    function bin_size_t$29(param)
     {if(0 === param[0])
       {var v1=param[1],_btU_=caml_call1(bin_size_t$1,v1);
        return caml_call2(Bin_prot_Common[23],1,_btU_)}
      var v1$0=param[1],_btV_=caml_call2(_bG_,bin_size_t$29,v1$0);
      return caml_call2(Bin_prot_Common[23],1,_btV_)}
    function bin_write_t$29(buf,pos,param)
     {if(0 === param[0])
       {var v1=param[1],pos$0=caml_call3(Bin_prot_Write[30],buf,pos,0);
        return caml_call3(bin_write_t$1,buf,pos$0,v1)}
      var v1$0=param[1],pos$1=caml_call3(Bin_prot_Write[30],buf,pos,1);
      return caml_call3(caml_call1(_dh_,bin_write_t$29),buf,pos$1,v1$0)}
    function bin_read_t$61(buf,pos_ref,vint)
     {return caml_call2(Bin_prot_Common[19],cst_src_info_ml_Sexp_t,pos_ref[1])}
    function bin_read_t$62(buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[29],buf,pos_ref);
      if(0 === match)
       {var arg_1=caml_call2(bin_read_t$3,buf,pos_ref);return [0,arg_1]}
      if(1 === match)
       {var arg_1$0=caml_call2(caml_call1(_dj_,bin_read_t$62),buf,pos_ref);
        return [1,arg_1$0]}
      return caml_call2(Bin_prot_Common[18],_m6_,pos_ref[1])}
    var
     hash_fold_t$8=function _btT_(_btR_,_btS_){return _btT_.fun(_btR_,_btS_)},
     hash$6=function _btQ_(_btP_){return _btQ_.fun(_btP_)};
    caml_update_dummy
     (hash_fold_t$8,
      function(hsv,arg)
       {if(0 === arg[0])
         {var a0=arg[1],hsv$0=caml_call2(Base_Hash[3],hsv,0);
          return caml_call2(_ar_,hsv$0,a0)}
        var a0$0=arg[1],hsv$1=caml_call2(Base_Hash[3],hsv,1);
        return caml_call3(_V_,hash_fold_t$8,hsv$1,a0$0)});
    caml_update_dummy
     (hash$6,
      function(x)
       {var
         hsv=caml_call2(Base_Hash[11],0,0),
         _btO_=caml_call2(hash_fold_t$8,hsv,x);
        return caml_call1(Base_Hash[9],_btO_)});
    function to_binable$0(t){return caml_call1(sexp_of_t,t)}
    var
     of_binable$0=Base_Exn[5],
     include$19=
      caml_call1
       (caml_call1
         (Stable$0[1][1],
          [0,
           bin_shape_t$22,
           bin_size_t$29,
           bin_write_t$29,
           bin_read_t$62,
           bin_read_t$61]),
        [0,to_binable$0,of_binable$0]),
     bin_size_t$30=include$19[1],
     bin_write_t$30=include$19[2],
     bin_read_t$63=include$19[3],
     bin_shape_t$23=include$19[5];
    function Extend(Info)
     {var
       _bsP_=Info[1],
       _bsQ_=Info[2],
       _bsR_=Info[3],
       _bsS_=Info[4],
       _bsT_=Info[5],
       _bsU_=Info[6],
       _bsV_=Info[7],
       _bsW_=Info[8],
       _bsX_=Info[9],
       _bsY_=Info[10],
       _bsZ_=Info[11],
       _bs0_=Info[12],
       _bs1_=Info[13],
       _bs2_=Info[14],
       _bs3_=Info[15],
       _bs4_=Info[16],
       _bs5_=Info[17],
       _bs6_=Info[18],
       _bs7_=Info[19],
       _bs8_=Info[20],
       _bs9_=Info[21],
       _bs__=Info[22],
       _bs$_=Info[23],
       _bta_=Info[24],
       _btb_=Stable$1[1][21],
       _btc_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$66),0,_btb_],0],
       _btd_=caml_call1(Bin_prot_Shape[4][1],cst_src_info_ml_59_10),
       group=caml_call2(Bin_prot_Shape[6],_btd_,_btc_),
       _bte_=caml_call1(Bin_prot_Shape[2][1],cst_t$67),
       bin_shape_t=caml_call1(caml_call2(Bin_prot_Shape[14],group,_bte_),0),
       bin_size_t=Stable$1[1][22],
       bin_write_t=Stable$1[1][23],
       bin_writer_t=[0,bin_size_t,bin_write_t],
       bin_read_t=Stable$1[1][25],
       bin_read_t$0=Stable$1[1][26],
       bin_reader_t=[0,bin_read_t$0,bin_read_t],
       bin_t=[0,bin_shape_t,bin_writer_t,bin_reader_t],
       V1=
        [0,
         bin_shape_t,
         bin_size_t,
         bin_write_t,
         bin_writer_t,
         bin_read_t,
         bin_read_t$0,
         bin_reader_t,
         bin_t,
         _mX_],
       Source_code_position=[0,V1],
       _btf_=caml_call1(Bin_prot_Shape[2][1],cst_t$68),
       _btg_=
        [0,
         [0,
          cst_With_backtrace,
          [0,caml_call1(caml_call1(Bin_prot_Shape[13],_btf_),0),[0,_cc_,0]]],
         0],
       _bth_=caml_call1(Bin_prot_Shape[2][1],cst_t$69),
       _bti_=
        [0,
         caml_call1(_df_,caml_call1(caml_call1(Bin_prot_Shape[13],_bth_),0)),
         0],
       _btj_=[0,[0,cst_Of_list,[0,caml_call1(_c__,_co_),_bti_]],_btg_],
       _btk_=caml_call1(Bin_prot_Shape[2][1],cst_t$70),
       _btl_=
        [0,
         [0,
          cst_Tag_arg,
          [0,
           _cc_,
           [0,
            bin_shape_t$22,
            [0,caml_call1(caml_call1(Bin_prot_Shape[13],_btk_),0),0]]]],
         _btj_],
       _btm_=caml_call1(Bin_prot_Shape[2][1],cst_t$71),
       _btn_=
        [0,
         [0,
          cst_Tag_t,
          [0,_cc_,[0,caml_call1(caml_call1(Bin_prot_Shape[13],_btm_),0),0]]],
         _btl_],
       _bto_=
        [0,
         [0,cst_Could_not_construct,[0,bin_shape_t$22,0]],
         [0,
          [0,cst_String,[0,_cc_,0]],
          [0,
           [0,cst_Exn,[0,bin_shape_t$23,0]],
           [0,
            [0,cst_Sexp,[0,bin_shape_t$22,0]],
            [0,
             [0,
              cst_Tag_sexp,
              [0,
               _cc_,
               [0,
                bin_shape_t$22,
                [0,caml_call1(_c__,Source_code_position[1][1]),0]]]],
             _btn_]]]]],
       _btp_=caml_call1(Bin_prot_Shape[9],_bto_),
       _btq_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$72),0,_btp_],0],
       _btr_=caml_call1(Bin_prot_Shape[4][1],cst_src_info_ml_69_8),
       group$0=caml_call2(Bin_prot_Shape[6],_btr_,_btq_),
       _bts_=caml_call1(Bin_prot_Shape[2][1],cst_t$73),
       bin_shape_t$0=
        caml_call1(caml_call2(Bin_prot_Shape[14],group$0,_bts_),0);
      function bin_size_t$0(param)
       {switch(param[0])
         {case 0:
           var v1=param[1],_bty_=bin_size_t$29(v1);
           return caml_call2(Bin_prot_Common[23],1,_bty_);
          case 1:
           var v1$0=param[1],_btz_=caml_call1(bin_size_t$1,v1$0);
           return caml_call2(Bin_prot_Common[23],1,_btz_);
          case 2:
           var v1$1=param[1],_btA_=caml_call1(bin_size_t$30,v1$1);
           return caml_call2(Bin_prot_Common[23],1,_btA_);
          case 3:
           var v1$2=param[1],_btB_=bin_size_t$29(v1$2);
           return caml_call2(Bin_prot_Common[23],1,_btB_);
          case 4:
           var
            v3=param[3],
            v2=param[2],
            v1$3=param[1],
            _btC_=caml_call1(bin_size_t$1,v1$3),
            size=caml_call2(Bin_prot_Common[23],1,_btC_),
            _btD_=bin_size_t$29(v2),
            size$0=caml_call2(Bin_prot_Common[23],size,_btD_),
            _btE_=caml_call2(_bD_,Source_code_position[1][2],v3);
           return caml_call2(Bin_prot_Common[23],size$0,_btE_);
          case 5:
           var
            v2$0=param[2],
            v1$4=param[1],
            _btF_=caml_call1(bin_size_t$1,v1$4),
            size$1=caml_call2(Bin_prot_Common[23],1,_btF_),
            _btG_=bin_size_t$0(v2$0);
           return caml_call2(Bin_prot_Common[23],size$1,_btG_);
          case 6:
           var
            v3$0=param[3],
            v2$1=param[2],
            v1$5=param[1],
            _btH_=caml_call1(bin_size_t$1,v1$5),
            size$2=caml_call2(Bin_prot_Common[23],1,_btH_),
            _btI_=bin_size_t$29(v2$1),
            size$3=caml_call2(Bin_prot_Common[23],size$2,_btI_),
            _btJ_=bin_size_t$0(v3$0);
           return caml_call2(Bin_prot_Common[23],size$3,_btJ_);
          case 7:
           var
            v2$2=param[2],
            v1$6=param[1],
            _btK_=caml_call2(_bD_,bin_size_t$4,v1$6),
            size$4=caml_call2(Bin_prot_Common[23],1,_btK_),
            _btL_=caml_call2(_bG_,bin_size_t$0,v2$2);
           return caml_call2(Bin_prot_Common[23],size$4,_btL_);
          default:
           var
            v2$3=param[2],
            v1$7=param[1],
            _btM_=bin_size_t$0(v1$7),
            size$5=caml_call2(Bin_prot_Common[23],1,_btM_),
            _btN_=caml_call1(bin_size_t$1,v2$3);
           return caml_call2(Bin_prot_Common[23],size$5,_btN_)}}
      function bin_write_t$0(buf,pos,param)
       {var pos$0=pos,param$0=param;
        for(;;)
         switch(param$0[0])
          {case 0:
            var
             v1=param$0[1],
             pos$1=caml_call3(Bin_prot_Write[30],buf,pos$0,0);
            return bin_write_t$29(buf,pos$1,v1);
           case 1:
            var
             v1$0=param$0[1],
             pos$2=caml_call3(Bin_prot_Write[30],buf,pos$0,1);
            return caml_call3(bin_write_t$1,buf,pos$2,v1$0);
           case 2:
            var
             v1$1=param$0[1],
             pos$3=caml_call3(Bin_prot_Write[30],buf,pos$0,2);
            return caml_call3(bin_write_t$30,buf,pos$3,v1$1);
           case 3:
            var
             v1$2=param$0[1],
             pos$4=caml_call3(Bin_prot_Write[30],buf,pos$0,3);
            return bin_write_t$29(buf,pos$4,v1$2);
           case 4:
            var
             v3=param$0[3],
             v2=param$0[2],
             v1$3=param$0[1],
             pos$5=caml_call3(Bin_prot_Write[30],buf,pos$0,4),
             pos$6=caml_call3(bin_write_t$1,buf,pos$5,v1$3),
             pos$7=bin_write_t$29(buf,pos$6,v2);
            return caml_call3
                    (caml_call1(_da_,Source_code_position[1][3]),buf,pos$7,v3);
           case 5:
            var
             v2$0=param$0[2],
             v1$4=param$0[1],
             pos$8=caml_call3(Bin_prot_Write[30],buf,pos$0,5),
             pos$9=caml_call3(bin_write_t$1,buf,pos$8,v1$4),
             pos$0=pos$9,
             param$0=v2$0;
            continue;
           case 6:
            var
             v3$0=param$0[3],
             v2$1=param$0[2],
             v1$5=param$0[1],
             pos$10=caml_call3(Bin_prot_Write[30],buf,pos$0,6),
             pos$11=caml_call3(bin_write_t$1,buf,pos$10,v1$5),
             pos$12=bin_write_t$29(buf,pos$11,v2$1),
             pos$0=pos$12,
             param$0=v3$0;
            continue;
           case 7:
            var
             v2$2=param$0[2],
             v1$6=param$0[1],
             pos$13=caml_call3(Bin_prot_Write[30],buf,pos$0,7),
             pos$14=caml_call3(caml_call1(_da_,bin_write_t$4),buf,pos$13,v1$6);
            return caml_call3(caml_call1(_dh_,bin_write_t$0),buf,pos$14,v2$2);
           default:
            var
             v2$3=param$0[2],
             v1$7=param$0[1],
             pos$15=caml_call3(Bin_prot_Write[30],buf,pos$0,8),
             pos$16=bin_write_t$0(buf,pos$15,v1$7);
            return caml_call3(bin_write_t$1,buf,pos$16,v2$3)}}
      var bin_writer_t$0=[0,bin_size_t$0,bin_write_t$0];
      function bin_read_t$1(buf,pos_ref,vint)
       {return caml_call2
                (Bin_prot_Common[19],
                 cst_src_info_ml_Extend_Interna,
                 pos_ref[1])}
      function bin_read_t$2(buf,pos_ref)
       {var match=caml_call2(Bin_prot_Read[29],buf,pos_ref);
        if(8 < match >>> 0)
         return caml_call2(Bin_prot_Common[18],_m7_,pos_ref[1]);
        switch(match)
         {case 0:var arg_1=bin_read_t$62(buf,pos_ref);return [0,arg_1];
          case 1:
           var arg_1$0=caml_call2(bin_read_t$3,buf,pos_ref);
           return [1,arg_1$0];
          case 2:
           var arg_1$1=caml_call2(bin_read_t$63,buf,pos_ref);
           return [2,arg_1$1];
          case 3:var arg_1$2=bin_read_t$62(buf,pos_ref);return [3,arg_1$2];
          case 4:
           var
            arg_1$3=caml_call2(bin_read_t$3,buf,pos_ref),
            arg_2=bin_read_t$62(buf,pos_ref),
            arg_3=
             caml_call2
              (caml_call1(_dc_,Source_code_position[1][6]),buf,pos_ref);
           return [4,arg_1$3,arg_2,arg_3];
          case 5:
           var
            arg_1$4=caml_call2(bin_read_t$3,buf,pos_ref),
            arg_2$0=bin_read_t$2(buf,pos_ref);
           return [5,arg_1$4,arg_2$0];
          case 6:
           var
            arg_1$5=caml_call2(bin_read_t$3,buf,pos_ref),
            arg_2$1=bin_read_t$62(buf,pos_ref),
            arg_3$0=bin_read_t$2(buf,pos_ref);
           return [6,arg_1$5,arg_2$1,arg_3$0];
          case 7:
           var
            arg_1$6=caml_call2(caml_call1(_dc_,bin_read_t$9),buf,pos_ref),
            arg_2$2=caml_call2(caml_call1(_dj_,bin_read_t$2),buf,pos_ref);
           return [7,arg_1$6,arg_2$2];
          default:
           var
            arg_1$7=bin_read_t$2(buf,pos_ref),
            arg_2$3=caml_call2(bin_read_t$3,buf,pos_ref);
           return [8,arg_1$7,arg_2$3]}}
      var
       bin_reader_t$0=[0,bin_read_t$2,bin_read_t$1],
       bin_t$0=[0,bin_shape_t$0,bin_writer_t$0,bin_reader_t$0];
      function sexp_of_t$1(param)
       {switch(param[0])
         {case 0:
           var v0=param[1],v0$0=caml_call1(_mY_,v0);
           return [1,[0,_m8_,[0,v0$0,0]]];
          case 1:
           var v0$1=param[1],v0$2=caml_call1(_au_,v0$1);
           return [1,[0,_m9_,[0,v0$2,0]]];
          case 2:
           var v0$3=param[1],v0$4=caml_call1(sexp_of_t,v0$3);
           return [1,[0,_m__,[0,v0$4,0]]];
          case 3:
           var v0$5=param[1],v0$6=caml_call1(_mY_,v0$5);
           return [1,[0,_m$_,[0,v0$6,0]]];
          case 4:
           var
            v2=param[3],
            v1=param[2],
            v0$7=param[1],
            v0$8=caml_call1(_au_,v0$7),
            v1$0=caml_call1(_mY_,v1),
            v2$0=caml_call2(_ai_,Source_code_position[1][9],v2);
           return [1,[0,_na_,[0,v0$8,[0,v1$0,[0,v2$0,0]]]]];
          case 5:
           var
            v1$1=param[2],
            v0$9=param[1],
            v0$10=caml_call1(_au_,v0$9),
            v1$2=sexp_of_t$1(v1$1);
           return [1,[0,_nb_,[0,v0$10,[0,v1$2,0]]]];
          case 6:
           var
            v2$1=param[3],
            v1$3=param[2],
            v0$11=param[1],
            v0$12=caml_call1(_au_,v0$11),
            v1$4=caml_call1(_mY_,v1$3),
            v2$2=sexp_of_t$1(v2$1);
           return [1,[0,_nc_,[0,v0$12,[0,v1$4,[0,v2$2,0]]]]];
          case 7:
           var
            v1$5=param[2],
            v0$13=param[1],
            v0$14=caml_call2(_ai_,sexp_of_t$0,v0$13),
            v1$6=caml_call2(_X_,sexp_of_t$1,v1$5);
           return [1,[0,_nd_,[0,v0$14,[0,v1$6,0]]]];
          default:
           var
            v1$7=param[2],
            v0$15=param[1],
            v0$16=sexp_of_t$1(v0$15),
            v1$8=caml_call1(_au_,v1$7);
           return [1,[0,_ne_,[0,v0$16,[0,v1$8,0]]]]}}
      var
       V2=
        [0,
         bin_shape_t$0,
         bin_size_t$0,
         bin_write_t$0,
         bin_writer_t$0,
         bin_read_t$1,
         bin_read_t$2,
         bin_reader_t$0,
         bin_t$0,
         sexp_of_t$1],
       Stable$2=[0,Source_code_position,V2],
       include=Stable$2[2],
       bin_shape_t$1=include[1],
       bin_size_t$2=include[2],
       bin_write_t$2=include[3],
       bin_writer_t$1=include[4],
       bin_read_t$4=include[5],
       bin_read_t$5=include[6],
       bin_reader_t$1=include[7],
       bin_t$1=include[8],
       sexp_of_t$2=include[9],
       to_info=Info[25][3],
       of_info=Info[25][2],
       Internal_repr=
        [0,
         Stable$2,
         bin_shape_t$1,
         bin_size_t$2,
         bin_write_t$2,
         bin_writer_t$1,
         bin_read_t$4,
         bin_read_t$5,
         bin_reader_t$1,
         bin_t$1,
         sexp_of_t$2,
         to_info,
         of_info],
       t_of_sexp=Info[5],
       sexp_of_t$3=Info[6],
       compare=Info[1],
       hash_fold_t=Info[3],
       func=Info[4];
      function hash(x){return caml_call1(func,x)}
      var
       T=[0,t_of_sexp,sexp_of_t$3,compare,hash_fold_t,hash],
       t_of_sexp$0=T[1],
       sexp_of_t$4=T[2],
       compare$0=T[3],
       hash_fold_t$0=T[4],
       hash$0=T[5],
       include$0=caml_call1(_hc_[1][2],[0,T[3],T[2]]),
       comparator=include$0[1],
       to_binable=Info[25][2],
       of_binable=Info[25][3],
       _btt_=Internal_repr[1][2],
       include$1=
        caml_call1
         (caml_call1
           (Stable$0[1][1],[0,_btt_[1],_btt_[2],_btt_[3],_btt_[6],_btt_[5]]),
          [0,to_binable,of_binable]),
       bin_size_t$3=include$1[1],
       bin_write_t$3=include$1[2],
       bin_read_t$6=include$1[3],
       bin_read_t$7=include$1[4],
       bin_shape_t$2=include$1[5],
       bin_writer_t$2=include$1[6],
       bin_reader_t$2=include$1[7],
       bin_t$2=include$1[8],
       V2$0=
        [0,
         T,
         t_of_sexp$0,
         sexp_of_t$4,
         compare$0,
         hash_fold_t$0,
         hash$0,
         comparator,
         bin_size_t$3,
         bin_write_t$3,
         bin_read_t$6,
         bin_read_t$7,
         bin_shape_t$2,
         bin_writer_t$2,
         bin_reader_t$2,
         bin_t$2],
       compare$1=Info[1],
       to_sexpable=Info[6],
       of_sexpable=Info[5],
       include$2=
        caml_call1
         (caml_call1(Stable[1][1],[0,_mZ_,_mY_]),[0,to_sexpable,of_sexpable]),
       t_of_sexp$1=include$2[1],
       sexp_of_t$5=include$2[2],
       T$0=[0,t_of_sexp$1,sexp_of_t$5,compare$1],
       t_of_sexp$2=T$0[1],
       sexp_of_t$6=T$0[2],
       compare$2=T$0[3],
       include$3=caml_call1(_hc_[1][2],[0,T$0[3],T$0[2]]),
       comparator$0=include$3[1],
       include$4=
        caml_call1
         (caml_call1
           (Stable$0[1][1],
            [0,
             bin_shape_t$22,
             bin_size_t$29,
             bin_write_t$29,
             bin_read_t$62,
             bin_read_t$61]),
          [0,sexp_of_t$6,t_of_sexp$2]),
       bin_size_t$5=include$4[1],
       bin_write_t$5=include$4[2],
       bin_read_t$8=include$4[3],
       bin_read_t$10=include$4[4],
       bin_shape_t$3=include$4[5],
       bin_writer_t$3=include$4[6],
       bin_reader_t$3=include$4[7],
       bin_t$3=include$4[8],
       V1$0=
        [0,
         T$0,
         t_of_sexp$2,
         sexp_of_t$6,
         compare$2,
         comparator$0,
         bin_size_t$5,
         bin_write_t$5,
         bin_read_t$8,
         bin_read_t$10,
         bin_shape_t$3,
         bin_writer_t$3,
         bin_reader_t$3,
         bin_t$3],
       Stable$3=[0,V2$0,V1$0],
       _btu_=Stable$3[1][12],
       _btv_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$74),0,_btu_],0],
       _btw_=caml_call1(Bin_prot_Shape[4][1],cst_src_info_ml_138_2),
       group$1=caml_call2(Bin_prot_Shape[6],_btw_,_btv_),
       _btx_=caml_call1(Bin_prot_Shape[2][1],cst_t$75),
       bin_shape_t$4=
        caml_call1(caml_call2(Bin_prot_Shape[14],group$1,_btx_),0),
       bin_size_t$6=Stable$3[1][8],
       bin_write_t$6=Stable$3[1][9],
       bin_writer_t$4=[0,bin_size_t$6,bin_write_t$6],
       bin_read_t$11=Stable$3[1][11],
       bin_read_t$12=Stable$3[1][10],
       bin_reader_t$4=[0,bin_read_t$12,bin_read_t$11],
       bin_t$4=[0,bin_shape_t$4,bin_writer_t$4,bin_reader_t$4];
      return [0,
              _bsP_,
              _bsQ_,
              _bsR_,
              _bsS_,
              _bsT_,
              _bsU_,
              _bsV_,
              _bsW_,
              _bsX_,
              _bsY_,
              _bsZ_,
              _bs0_,
              _bs1_,
              _bs2_,
              _bs3_,
              _bs4_,
              _bs5_,
              _bs6_,
              _bs7_,
              _bs8_,
              _bs9_,
              _bs__,
              _bs$_,
              _bta_,
              Internal_repr,
              Stable$3,
              bin_shape_t$4,
              bin_size_t$6,
              bin_write_t$6,
              bin_writer_t$4,
              bin_read_t$11,
              bin_read_t$12,
              bin_reader_t$4,
              bin_t$4]}
    var
     include$20=Extend(Base_Info),
     _nk_=include$20[6],
     _np_=include$20[11],
     _nD_=include$20[25],
     _nE_=include$20[26],
     _nf_=include$20[1],
     _ng_=include$20[2],
     _nh_=include$20[3],
     _ni_=include$20[4],
     _nj_=include$20[5],
     _nl_=include$20[7],
     _nm_=include$20[8],
     _nn_=include$20[9],
     _no_=include$20[10],
     _nq_=include$20[12],
     _nr_=include$20[13],
     _ns_=include$20[14],
     _nt_=include$20[15],
     _nu_=include$20[16],
     _nv_=include$20[17],
     _nw_=include$20[18],
     _nx_=include$20[19],
     _ny_=include$20[20],
     _nz_=include$20[21],
     _nA_=include$20[22],
     _nB_=include$20[23],
     _nC_=include$20[24],
     _nF_=include$20[27],
     _nG_=include$20[28],
     _nH_=include$20[29],
     _nI_=include$20[30],
     _nJ_=include$20[31],
     _nK_=include$20[32],
     _nL_=include$20[33],
     _nM_=include$20[34];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$73);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Info$0);
    function _nN_(_bsK_)
     {var _bsL_=Extend(_bsK_),_bsM_=_bsL_[26],_bsN_=_bsM_[1],_bsO_=_bsM_[2];
      return [0,
              _bsL_[28],
              _bsL_[29],
              _bsL_[32],
              _bsL_[31],
              _bsL_[27],
              _bsL_[30],
              _bsL_[33],
              _bsL_[34],
              [0,
               [0,
                _bsO_[6],
                _bsO_[7],
                _bsO_[8],
                _bsO_[9],
                _bsO_[10],
                _bsO_[11],
                _bsO_[12],
                _bsO_[13],
                _bsO_[4],
                _bsO_[2],
                _bsO_[3],
                _bsO_[5]],
               [0,
                _bsN_[5],
                _bsN_[6],
                _bsN_[8],
                _bsN_[9],
                _bsN_[10],
                _bsN_[11],
                _bsN_[12],
                _bsN_[13],
                _bsN_[14],
                _bsN_[15],
                _bsN_[4],
                _bsN_[2],
                _bsN_[3],
                _bsN_[7]]]]}
    var
     _nO_=_nE_[1],
     _nP_=_nE_[2],
     Core_kernel_Info=
      [0,
       _nf_,
       _ng_,
       _nh_,
       _ni_,
       _nj_,
       _nk_,
       _nl_,
       _nm_,
       _nn_,
       _no_,
       _np_,
       _nq_,
       _nr_,
       _ns_,
       _nt_,
       _nu_,
       _nv_,
       _nw_,
       _nx_,
       _ny_,
       _nz_,
       _nA_,
       _nB_,
       _nC_,
       [0,_nD_[10],_nD_[12],_nD_[11]],
       _nG_,
       _nH_,
       _nK_,
       _nJ_,
       _nF_,
       _nI_,
       _nL_,
       _nM_,
       [0,
        [0,
         _nP_[6],
         _nP_[7],
         _nP_[8],
         _nP_[9],
         _nP_[10],
         _nP_[11],
         _nP_[12],
         _nP_[13],
         _nP_[4],
         _nP_[2],
         _nP_[3],
         _nP_[5]],
        [0,
         _nO_[5],
         _nO_[6],
         _nO_[8],
         _nO_[9],
         _nO_[10],
         _nO_[11],
         _nO_[12],
         _nO_[13],
         _nO_[14],
         _nO_[15],
         _nO_[4],
         _nO_[2],
         _nO_[3],
         _nO_[7]]],
       _nN_];
    caml_register_global(4964,Core_kernel_Info,"Core_kernel__Info");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Error);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$74);
    caml_call1(Expect_test_collector[4][1],cst_src_error_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$75,cst$24);
    var
     _nQ_=Base_Error[1],
     _nS_=Base_Error[3],
     _nV_=Base_Error[6],
     _nY_=Base_Error[9],
     _n0_=Base_Error[11],
     _n4_=Base_Error[15],
     _n7_=Base_Error[18],
     _n$_=Base_Error[22],
     _oc_=Base_Error[26],
     _od_=Base_Error[27],
     _nR_=Base_Error[2],
     _nT_=Base_Error[4],
     _nU_=Base_Error[5],
     _nW_=Base_Error[7],
     _nX_=Base_Error[8],
     _nZ_=Base_Error[10],
     _n1_=Base_Error[12],
     _n2_=Base_Error[13],
     _n3_=Base_Error[14],
     _n5_=Base_Error[16],
     _n6_=Base_Error[17],
     _n8_=Base_Error[19],
     _n9_=Base_Error[20],
     _n__=Base_Error[21],
     _oa_=Base_Error[23],
     _ob_=Base_Error[24],
     _oe_=Base_Error[28],
     _of_=Base_Error[29],
     include$21=
      _nN_
       ([0,
         Base_Error[1],
         Base_Error[2],
         Base_Error[3],
         Base_Error[4],
         Base_Error[5],
         Base_Error[6],
         Base_Error[7],
         Base_Error[8],
         Base_Error[9],
         Base_Error[10],
         Base_Error[11],
         Base_Error[12],
         Base_Error[13],
         Base_Error[14],
         Base_Error[15],
         Base_Error[16],
         Base_Error[17],
         Base_Error[18],
         Base_Error[19],
         Base_Error[20],
         Base_Error[21],
         Base_Error[22],
         Base_Error[23],
         Base_Error[24],
         Base_Error[25]]),
     _og_=include$21[1],
     _oh_=include$21[2],
     _oi_=include$21[3],
     _ok_=include$21[5],
     _oo_=include$21[9],
     _oj_=include$21[4],
     _ol_=include$21[6],
     _om_=include$21[7],
     _on_=include$21[8];
    function failwiths(strict,here,message,a,sexp_of_a)
     {return caml_call1
              (_oc_,caml_call5(_n4_,[0,here],strict,message,a,sexp_of_a))}
    function failwithp(strict,here,message,a,sexp_of_a)
     {return caml_call1
              (_oc_,caml_call5(_n4_,[0,here],strict,message,a,sexp_of_a))}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$76);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Error$0);
    var
     Core_kernel_Error=
      [0,
       _nQ_,
       _nR_,
       _nS_,
       _nT_,
       _nU_,
       _nV_,
       _nW_,
       _nX_,
       _nY_,
       _nZ_,
       _n0_,
       _n1_,
       _n2_,
       _n3_,
       _n4_,
       _n5_,
       _n6_,
       _n7_,
       _n8_,
       _n9_,
       _n__,
       _n$_,
       _oa_,
       _ob_,
       _oc_,
       _od_,
       _oe_,
       _of_,
       _og_,
       _oh_,
       _oi_,
       _oj_,
       _ok_,
       _ol_,
       _om_,
       _on_,
       _oo_,
       failwiths,
       failwithp];
    caml_register_global(4966,Core_kernel_Error,"Core_kernel__Error");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_T);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$77);
    caml_call1(Expect_test_collector[4][1],cst_src_t_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$78,cst$25);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$79);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_T$0);
    var Core_kernel_T=[0];
    caml_register_global(4967,Core_kernel_T,"Core_kernel__T");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Hashtbl_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$80);
    caml_call1(Expect_test_collector[4][1],cst_src_hashtbl_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$81,cst$26);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$82);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Hashtbl_intf$0);
    var Core_kernel_Hashtbl_intf=[0];
    caml_register_global
     (4968,Core_kernel_Hashtbl_intf,"Core_kernel__Hashtbl_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Hash_set_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$83);
    caml_call1(Expect_test_collector[4][1],cst_src_hash_set_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$84,cst$27);
    var
     _op_=include$22[1],
     _oq_=include$22[2],
     _or_=include$22[3],
     _os_=include$22[4],
     _ot_=include$22[5],
     _ou_=include$22[6],
     _ov_=include$22[7],
     _ow_=include$22[8],
     _ox_=include$22[9],
     _oy_=include$22[10],
     _oz_=include$22[11],
     _oA_=include$22[12],
     _oB_=include$22[13],
     _oC_=include$22[14],
     _oD_=include$22[15],
     _oE_=include$22[16],
     _oF_=include$22[17],
     _oG_=include$22[18],
     _oH_=include$22[19],
     _oI_=include$22[20],
     _oJ_=include$22[21],
     _oK_=include$22[22],
     _oL_=include$22[23],
     _oM_=include$22[24],
     _oN_=include$22[25],
     _oO_=include$22[26],
     _oP_=include$22[27],
     _oQ_=include$22[28],
     _oR_=include$22[29],
     _oS_=include$22[30],
     _oT_=include$22[31],
     _oU_=include$22[32],
     _oV_=include$22[33],
     _oW_=include$22[34],
     _oX_=include$22[35],
     _oY_=include$22[36],
     _oZ_=include$22[37],
     _o0_=include$22[38],
     _o1_=include$22[39],
     _o2_=include$22[40],
     _o3_=include$22[41],
     _o4_=include$22[42],
     _o5_=include$22[43];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$85);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Hash_set_intf$0);
    var
     Core_kernel_Hash_set_intf=
      [0,
       _op_,
       _oq_,
       _or_,
       _os_,
       _ot_,
       _ou_,
       _ov_,
       _ow_,
       _ox_,
       _oy_,
       _oz_,
       _oA_,
       _oB_,
       _oC_,
       _oD_,
       _oE_,
       _oF_,
       _oG_,
       _oH_,
       _oI_,
       _oJ_,
       _oK_,
       _oL_,
       _oM_,
       _oN_,
       _oO_,
       _oP_,
       _oQ_,
       _oR_,
       _oS_,
       _oT_,
       _oU_,
       _oV_,
       _oW_,
       _oX_,
       _oY_,
       _oZ_,
       _o0_,
       _o1_,
       _o2_,
       _o3_,
       _o4_,
       _o5_];
    caml_register_global
     (4970,Core_kernel_Hash_set_intf,"Core_kernel__Hash_set_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_List0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$86);
    caml_call1(Expect_test_collector[4][1],cst_src_list0_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$87,cst$28);
    var
     _o6_=include$23[1],
     hash_fold_sexp_list=include$23[2],
     t_of_sexp$18=include$23[3],
     sexp_of_t$17=include$23[4],
     _o7_=include$23[5],
     _o8_=include$23[6],
     length$1=include$23[7],
     is_empty$0=include$23[8],
     _o9_=include$23[9],
     _o__=include$23[10],
     _o$_=include$23[11],
     _pa_=include$23[12],
     _pb_=include$23[13],
     _pc_=include$23[14],
     _pd_=include$23[15],
     _pe_=include$23[16],
     _pf_=include$23[17],
     _pg_=include$23[18],
     _ph_=include$23[19],
     _pi_=include$23[20],
     _pj_=include$23[21],
     _pk_=include$23[22],
     _pl_=include$23[23],
     _pm_=include$23[24],
     _po_=include$23[26],
     _pp_=include$23[27],
     _pq_=include$23[28],
     _pr_=include$23[29],
     _ps_=include$23[30],
     _pt_=include$23[31],
     _pw_=include$23[34],
     _px_=include$23[35],
     _py_=include$23[36],
     parts=include$23[37],
     _pz_=include$23[38],
     _pA_=include$23[39],
     _pB_=include$23[40],
     _pC_=include$23[41],
     _pD_=include$23[42],
     _pE_=include$23[43],
     _pF_=include$23[44],
     _pG_=include$23[45],
     _pH_=include$23[46],
     _pI_=include$23[47],
     _pJ_=include$23[48],
     _pK_=include$23[49],
     _pL_=include$23[50],
     _pM_=include$23[51],
     _pN_=include$23[52],
     _pO_=include$23[53],
     _pP_=include$23[54],
     _pQ_=include$23[55],
     _pR_=include$23[56],
     _pS_=include$23[57],
     _pT_=include$23[58],
     _pU_=include$23[59],
     _pV_=include$23[60],
     _pW_=include$23[61],
     _pX_=include$23[62],
     _pY_=include$23[63],
     _pZ_=include$23[64],
     _p0_=include$23[65],
     _p1_=include$23[66],
     _p2_=include$23[67],
     _p3_=include$23[68],
     _p4_=include$23[69],
     _p5_=include$23[70],
     _p6_=include$23[71],
     _p7_=include$23[72],
     _p8_=include$23[73],
     _p9_=include$23[74],
     _p__=include$23[75],
     _p$_=include$23[76],
     _qa_=include$23[77],
     _qb_=include$23[78],
     _qc_=include$23[79],
     _qd_=include$23[80],
     _qe_=include$23[81],
     _qf_=include$23[82],
     _qg_=include$23[83],
     _qh_=include$23[84],
     _qi_=include$23[85],
     _qj_=include$23[86],
     _qk_=include$23[87],
     _ql_=include$23[88],
     _qm_=include$23[89],
     _qn_=include$23[90],
     _qo_=include$23[91],
     _qp_=include$23[92],
     _qq_=include$23[93],
     _qr_=include$23[94],
     _qs_=include$23[95],
     _qt_=include$23[96],
     _qu_=include$23[97],
     _qv_=include$23[98],
     _qw_=include$23[99],
     _qx_=include$23[100],
     _qy_=include$23[101],
     _qz_=include$23[102],
     _qA_=include$23[103],
     _qB_=include$23[104],
     _qC_=include$23[105],
     _qD_=include$23[106],
     _qE_=include$23[107],
     _qF_=include$23[108],
     _qG_=include$23[109],
     _qH_=include$23[110],
     _qI_=include$23[111],
     _qJ_=include$23[112],
     _qK_=include$23[113],
     _qL_=include$23[114],
     _qM_=include$23[115],
     _qN_=include$23[116],
     _qO_=include$23[117],
     _qP_=include$23[118],
     _qQ_=include$23[119],
     _qR_=include$23[120],
     _qS_=include$23[121],
     _qT_=include$23[122],
     _qU_=include$23[123],
     _qV_=include$23[124],
     _qW_=include$23[125],
     _qX_=include$23[126],
     _qY_=include$23[127],
     _qZ_=include$23[128],
     _q0_=include$23[129],
     _q1_=include$23[130],
     _q2_=include$23[131],
     _q3_=include$23[132],
     _q4_=include$23[133],
     _q5_=include$23[134],
     _q6_=include$23[135],
     _q7_=include$23[136],
     _q8_=include$23[137],
     _q9_=include$23[138],
     _q__=include$23[139],
     _q$_=include$23[140],
     _ra_=include$23[141],
     _rb_=include$23[142],
     _rc_=include$23[143],
     _re_=include$23[145],
     _rf_=include$23[146],
     _rg_=include$23[147],
     _pn_=include$23[25],
     _pu_=include$23[32],
     _pv_=include$23[33],
     _rd_=include$23[144],
     _rh_=caml_call1(Bin_prot_Shape[3][1],cst_a$22),
     _ri_=caml_call1(Bin_prot_Shape[4][1],cst_src_list0_ml_6_12),
     _rj_=caml_call1(_df_,caml_call2(Bin_prot_Shape[15],_ri_,_rh_)),
     _rk_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$23),0],
     _rl_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$76),_rk_,_rj_],0],
     _rm_=caml_call1(Bin_prot_Shape[4][1],cst_src_list0_ml_6_0),
     group$30=caml_call2(Bin_prot_Shape[6],_rm_,_rl_);
    function bin_shape_t$24(a)
     {var _bsJ_=caml_call1(Bin_prot_Shape[2][1],cst_t$77);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$30,_bsJ_),[0,a,0])}
    function bin_size_t$31(size_of_a,v){return caml_call2(_bG_,size_of_a,v)}
    function bin_write_t$31(write_a,buf,pos,v)
     {return caml_call3(caml_call1(_dh_,write_a),buf,pos,v)}
    function bin_writer_t$18(bin_writer_a)
     {function _bsF_(v)
       {var _bsG_=bin_writer_a[2];
        return function(_bsH_,_bsI_)
         {return bin_write_t$31(_bsG_,v,_bsH_,_bsI_)}}
      return [0,function(v){return bin_size_t$31(bin_writer_a[1],v)},_bsF_]}
    function bin_read_t$64(of_a,buf,pos_ref,vint)
     {return caml_call3(caml_call1(_dk_,of_a),buf,pos_ref,vint)}
    function bin_read_t$65(of_a,buf,pos_ref)
     {return caml_call2(caml_call1(_dj_,of_a),buf,pos_ref)}
    function bin_reader_t$18(bin_reader_a)
     {function _bsE_(buf,pos_ref,vtag)
       {return bin_read_t$64(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$65(bin_reader_a[1],buf,pos_ref)},
              _bsE_]}
    function bin_t$18(bin_a)
     {var _bsC_=bin_reader_t$18(bin_a[3]),_bsD_=bin_writer_t$18(bin_a[2]);
      return [0,bin_shape_t$24(bin_a[1]),_bsD_,_bsC_]}
    var
     Typename_of_t$1=caml_call1(Typerep_lib_Make_typename[2],[0,name$10]),
     typename_of_t$1=Typename_of_t$1[2];
    function typerep_of_t$1(of_a)
     {var name_of_t=caml_call1(Typename_of_t$1[1],of_a);
      return [9,
              [0,
               name_of_t,
               [0,
                [246,
                 function(_bsB_){return caml_call1(Typerep_lib_Std[15],of_a)}]]]]}
    var
     _rn_=_qW_[1],
     _ro_=_qW_[2],
     _rp_=_qW_[3],
     _rq_=_qW_[4],
     _rr_=_qW_[5],
     _rs_=_qW_[6],
     _rt_=_qW_[7],
     _ru_=_qW_[8],
     _rv_=_qW_[9],
     _rw_=caml_call1(Bin_prot_Shape[3][1],cst_b$4),
     _rx_=caml_call1(Bin_prot_Shape[4][1],cst_src_list0_ml_11_26),
     _ry_=[0,caml_call2(Bin_prot_Shape[15],_rx_,_rw_),0],
     _rz_=caml_call1(Bin_prot_Shape[3][1],cst_a$24),
     _rA_=caml_call1(Bin_prot_Shape[4][1],cst_src_list0_ml_11_21),
     _rB_=[0,caml_call2(Bin_prot_Shape[15],_rA_,_rz_),_ry_],
     _rC_=caml_call1(_df_,caml_call1(Bin_prot_Shape[7],_rB_)),
     _rD_=[0,caml_call1(Bin_prot_Shape[3][1],cst_b$5),0],
     _rE_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$25),_rD_],
     _rF_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$78),_rE_,_rC_],0],
     _rG_=caml_call1(Bin_prot_Shape[4][1],cst_src_list0_ml_11_2),
     group$31=caml_call2(Bin_prot_Shape[6],_rG_,_rF_);
    function bin_shape_t$25(a,b)
     {var _bsA_=caml_call1(Bin_prot_Shape[2][1],cst_t$79);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$31,_bsA_),[0,a,[0,b,0]])}
    function bin_size_t$32(size_of_a,size_of_b,v)
     {return caml_call2
              (_bG_,
               function(param)
                {var
                  v2=param[2],
                  v1=param[1],
                  _bsy_=caml_call1(size_of_a,v1),
                  size=caml_call2(Bin_prot_Common[23],0,_bsy_),
                  _bsz_=caml_call1(size_of_b,v2);
                 return caml_call2(Bin_prot_Common[23],size,_bsz_)},
               v)}
    function bin_write_t$32(write_a,write_b,buf,pos,v)
     {return caml_call3
              (caml_call1
                (_dh_,
                 function(buf,pos,param)
                  {var
                    v2=param[2],
                    v1=param[1],
                    pos$0=caml_call3(write_a,buf,pos,v1);
                   return caml_call3(write_b,buf,pos$0,v2)}),
               buf,
               pos,
               v)}
    function bin_writer_t$19(bin_writer_a,bin_writer_b)
     {function _bst_(v)
       {var _bsu_=bin_writer_b[2],_bsv_=bin_writer_a[2];
        return function(_bsw_,_bsx_)
         {return bin_write_t$32(_bsv_,_bsu_,v,_bsw_,_bsx_)}}
      return [0,
              function(v)
               {return bin_size_t$32(bin_writer_a[1],bin_writer_b[1],v)},
              _bst_]}
    function bin_read_t$66(of_a,of_b,buf,pos_ref,vint)
     {return caml_call3
              (caml_call1
                (_dk_,
                 function(buf,pos_ref)
                  {var
                    v1=caml_call2(of_a,buf,pos_ref),
                    v2=caml_call2(of_b,buf,pos_ref);
                   return [0,v1,v2]}),
               buf,
               pos_ref,
               vint)}
    function bin_read_t$67(of_a,of_b,buf,pos_ref)
     {return caml_call2
              (caml_call1
                (_dj_,
                 function(buf,pos_ref)
                  {var
                    v1=caml_call2(of_a,buf,pos_ref),
                    v2=caml_call2(of_b,buf,pos_ref);
                   return [0,v1,v2]}),
               buf,
               pos_ref)}
    function bin_reader_t$19(bin_reader_a,bin_reader_b)
     {function _bss_(buf,pos_ref,vtag)
       {return bin_read_t$66(bin_reader_a[1],bin_reader_b[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$67
                        (bin_reader_a[1],bin_reader_b[1],buf,pos_ref)},
              _bss_]}
    function bin_t$19(bin_a,bin_b)
     {var
       _bsq_=bin_reader_t$19(bin_a[3],bin_b[3]),
       _bsr_=bin_writer_t$19(bin_a[2],bin_b[2]);
      return [0,bin_shape_t$25(bin_a[1],bin_b[1]),_bsr_,_bsq_]}
    function compare$16(compare_a,compare_b,a_001,b_002)
     {return caml_call3
              (_T_,
               function(a_003,b_004)
                {var
                  t_006=a_003[2],
                  t_005=a_003[1],
                  t_008=b_004[2],
                  t_007=b_004[1],
                  n=caml_call2(compare_a,t_005,t_007);
                 return 0 === n?caml_call2(compare_b,t_006,t_008):n},
               a_001,
               b_002)}
    var
     Assoc=
      [0,
       _rn_,
       _ro_,
       _rp_,
       _rq_,
       _rr_,
       _rs_,
       _rt_,
       _ru_,
       _rv_,
       bin_shape_t$25,
       bin_size_t$32,
       bin_write_t$32,
       bin_writer_t$19,
       bin_read_t$66,
       bin_read_t$67,
       bin_reader_t$19,
       bin_t$19,
       compare$16];
    function to_string(f,t)
     {var
       _bso_=caml_call2(_p9_,t,f),
       _bsp_=caml_call2(sexp_of_t$17,function(x){return [0,x]},_bso_);
      return caml_call1(include$18[51],_bsp_)}
    function compare$17(cmp_a,a_009,b_010)
     {return caml_call3
              (_o6_,
               function(a_011,b_012){return caml_call2(cmp_a,a_011,b_012)},
               a_009,
               b_010)}
    var
     include$24=caml_call1(Derived,[0,compare$17,sexp_of_t$17]),
     _rH_=include$24[1],
     _rI_=Base_quickcheck_Generator[13],
     _rJ_=Base_quickcheck_Generator[108];
    function gen_with_length(length,quickcheck_generator)
     {return caml_call2
              (Base_quickcheck_Generator[109],quickcheck_generator,length)}
    var
     _rK_=Base_quickcheck_Generator[110],
     _rL_=Base_quickcheck_Generator[111],
     _rM_=Base_quickcheck_Observer[14],
     _rN_=Base_quickcheck_Shrinker[14];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$88);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_List0$0);
    var
     include$25=
      [0,
       _o6_,
       hash_fold_sexp_list,
       t_of_sexp$18,
       sexp_of_t$17,
       _o7_,
       _o8_,
       length$1,
       is_empty$0,
       _o9_,
       _o__,
       _o$_,
       _pa_,
       _pb_,
       _pc_,
       _pd_,
       _pe_,
       _pf_,
       _pg_,
       _ph_,
       _pi_,
       _pj_,
       _pk_,
       _pl_,
       _pm_,
       _pn_,
       _po_,
       _pp_,
       _pq_,
       _pr_,
       _ps_,
       _pt_,
       _pu_,
       _pv_,
       _pw_,
       _px_,
       _py_,
       parts,
       _pz_,
       _pA_,
       _pB_,
       _pC_,
       _pD_,
       _pE_,
       _pF_,
       _pG_,
       _pH_,
       _pI_,
       _pJ_,
       _pK_,
       _pL_,
       _pM_,
       _pN_,
       _pO_,
       _pP_,
       _pQ_,
       _pR_,
       _pS_,
       _pT_,
       _pU_,
       _pV_,
       _pW_,
       _pX_,
       _pY_,
       _pZ_,
       _p0_,
       _p1_,
       _p2_,
       _p3_,
       _p4_,
       _p5_,
       _p6_,
       _p7_,
       _p8_,
       _p9_,
       _p__,
       _p$_,
       _qa_,
       _qb_,
       _qc_,
       _qd_,
       _qe_,
       _qf_,
       _qg_,
       _qh_,
       _qi_,
       _qj_,
       _qk_,
       _ql_,
       _qm_,
       _qn_,
       _qo_,
       _qp_,
       _qq_,
       _qr_,
       _qs_,
       _qt_,
       _qu_,
       _qv_,
       _qw_,
       _qx_,
       _qy_,
       _qz_,
       _qA_,
       _qB_,
       _qC_,
       _qD_,
       _qE_,
       _qF_,
       _qG_,
       _qH_,
       _qI_,
       _qJ_,
       _qK_,
       _qL_,
       _qM_,
       _qN_,
       _qO_,
       _qP_,
       _qQ_,
       _qR_,
       _qS_,
       _qT_,
       _qU_,
       _qV_,
       _qX_,
       _qY_,
       _qZ_,
       _q0_,
       _q1_,
       _q2_,
       _q3_,
       _q4_,
       _q5_,
       _q6_,
       _q7_,
       _q8_,
       _q9_,
       _q__,
       _q$_,
       _ra_,
       _rb_,
       _rc_,
       _rd_,
       _re_,
       _rf_,
       _rg_,
       bin_shape_t$24,
       bin_size_t$31,
       bin_write_t$31,
       bin_writer_t$18,
       bin_read_t$64,
       bin_read_t$65,
       bin_reader_t$18,
       bin_t$18,
       Typename_of_t$1,
       typename_of_t$1,
       typerep_of_t$1,
       Assoc,
       to_string,
       _rH_,
       _rI_,
       _rJ_,
       gen_with_length,
       _rK_,
       _rL_,
       _rM_,
       _rN_];
    caml_register_global(4972,include$25,"Core_kernel__List0");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Hashtbl);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$89);
    caml_call1(Expect_test_collector[4][1],cst_src_hashtbl_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$90,cst$29);
    var
     invariant$1=Base_Hashtbl[82],
     hashable_s=Base_Hashtbl[81],
     find_multi=Base_Hashtbl[80],
     remove_multi=Base_Hashtbl[79],
     add_multi=Base_Hashtbl[78],
     decr=Base_Hashtbl[77],
     incr=Base_Hashtbl[76],
     validate=Base_Hashtbl[75],
     to_alist=Base_Hashtbl[74],
     similar=Base_Hashtbl[73],
     equal$3=Base_Hashtbl[72],
     filter_mapi_inplace=Base_Hashtbl[71],
     filter_map_inplace=Base_Hashtbl[70],
     mapi_inplace=Base_Hashtbl[69],
     map_inplace$0=Base_Hashtbl[68],
     filteri_inplace=Base_Hashtbl[67],
     filter_inplace=Base_Hashtbl[66],
     filter_keys_inplace=Base_Hashtbl[65],
     data=Base_Hashtbl[64],
     keys=Base_Hashtbl[63],
     merge_into=Base_Hashtbl[62],
     merge=Base_Hashtbl[61],
     find_and_remove=Base_Hashtbl[60],
     findi_and_call2=Base_Hashtbl[59],
     findi_and_call1=Base_Hashtbl[58],
     findi_and_call=Base_Hashtbl[57],
     find_and_call2=Base_Hashtbl[56],
     find_and_call1=Base_Hashtbl[55],
     find_and_call=Base_Hashtbl[54],
     find_exn$0=Base_Hashtbl[53],
     find$0=Base_Hashtbl[52],
     findi_or_add=Base_Hashtbl[51],
     find_or_add=Base_Hashtbl[50],
     partitioni_tf$0=Base_Hashtbl[49],
     partition_tf$0=Base_Hashtbl[48],
     partition_mapi=Base_Hashtbl[47],
     partition_map=Base_Hashtbl[46],
     filteri$0=Base_Hashtbl[45],
     filter$0=Base_Hashtbl[44],
     filter_keys=Base_Hashtbl[43],
     filter_mapi$0=Base_Hashtbl[42],
     filter_map$0=Base_Hashtbl[41],
     mapi$0=Base_Hashtbl[40],
     map$3=Base_Hashtbl[39],
     update=Base_Hashtbl[38],
     change=Base_Hashtbl[37],
     add_exn=Base_Hashtbl[36],
     add=Base_Hashtbl[35],
     set$0=Base_Hashtbl[34],
     choose_exn=Base_Hashtbl[33],
     choose=Base_Hashtbl[32],
     remove=Base_Hashtbl[31],
     mem$0=Base_Hashtbl[30],
     is_empty$1=Base_Hashtbl[29],
     length$2=Base_Hashtbl[28],
     count$0=Base_Hashtbl[27],
     counti$0=Base_Hashtbl[26],
     for_all$0=Base_Hashtbl[25],
     for_alli$0=Base_Hashtbl[24],
     exists$0=Base_Hashtbl[23],
     existsi$0=Base_Hashtbl[22],
     iteri$0=Base_Hashtbl[21],
     iter$1=Base_Hashtbl[20],
     iter_keys=Base_Hashtbl[19],
     fold$0=Base_Hashtbl[18],
     copy$0=Base_Hashtbl[17],
     clear=Base_Hashtbl[16],
     sexp_of_key=Base_Hashtbl[15],
     group$32=Base_Hashtbl[14],
     create_with_key_exn=Base_Hashtbl[13],
     create_with_key_or_error=Base_Hashtbl[12],
     create_with_key=Base_Hashtbl[11],
     create_mapped=Base_Hashtbl[10],
     of_alist_multi=Base_Hashtbl[9],
     of_alist_exn=Base_Hashtbl[8],
     of_alist_or_error=Base_Hashtbl[7],
     of_alist_report_all_dups=Base_Hashtbl[6],
     of_alist=Base_Hashtbl[5],
     create$2=Base_Hashtbl[4],
     sexp_of_t$18=Base_Hashtbl[3],
     hash_param=Base_Hashtbl[2],
     hash$7=Base_Hashtbl[1];
    function create$3(growth_allowed,size,hashable,param)
     {return caml_call3
              (create$2,
               growth_allowed,
               size,
               caml_call1(Base_Hashable[4],hashable))}
    function of_alist$0(growth_allowed,size,hashable,l)
     {return caml_call4
              (of_alist,
               growth_allowed,
               size,
               caml_call1(Base_Hashable[4],hashable),
               l)}
    function of_alist_report_all_dups$0(growth_allowed,size,hashable,l)
     {return caml_call4
              (of_alist_report_all_dups,
               growth_allowed,
               size,
               caml_call1(Base_Hashable[4],hashable),
               l)}
    function of_alist_or_error$0(growth_allowed,size,hashable,l)
     {return caml_call4
              (of_alist_or_error,
               growth_allowed,
               size,
               caml_call1(Base_Hashable[4],hashable),
               l)}
    function of_alist_exn$0(growth_allowed,size,hashable,l)
     {return caml_call4
              (of_alist_exn,
               growth_allowed,
               size,
               caml_call1(Base_Hashable[4],hashable),
               l)}
    function of_alist_multi$0(growth_allowed,size,hashable,l)
     {return caml_call4
              (of_alist_multi,
               growth_allowed,
               size,
               caml_call1(Base_Hashable[4],hashable),
               l)}
    function create_mapped$0(growth_allowed,size,hashable,get_key,get_data,l)
     {return caml_call6
              (create_mapped,
               growth_allowed,
               size,
               caml_call1(Base_Hashable[4],hashable),
               get_key,
               get_data,
               l)}
    function create_with_key$0(growth_allowed,size,hashable,get_key,l)
     {return caml_call5
              (create_with_key,
               growth_allowed,
               size,
               caml_call1(Base_Hashable[4],hashable),
               get_key,
               l)}
    function create_with_key_or_error$0
     (growth_allowed,size,hashable,get_key,l)
     {return caml_call5
              (create_with_key_or_error,
               growth_allowed,
               size,
               caml_call1(Base_Hashable[4],hashable),
               get_key,
               l)}
    function create_with_key_exn$0(growth_allowed,size,hashable,get_key,l)
     {return caml_call5
              (create_with_key_exn,
               growth_allowed,
               size,
               caml_call1(Base_Hashable[4],hashable),
               get_key,
               l)}
    function group$33(growth_allowed,size,hashable,get_key,get_data,combine,l)
     {return caml_call7
              (group$32,
               growth_allowed,
               size,
               caml_call1(Base_Hashable[4],hashable),
               get_key,
               get_data,
               combine,
               l)}
    var
     _rO_=Base_Hashtbl[84],
     _rQ_=_rO_[2],
     _rT_=_rO_[5],
     _r__=_rO_[22],
     _sf_=_rO_[29],
     _sl_=_rO_[35],
     _sD_=_rO_[53],
     _rP_=_rO_[1],
     _rR_=_rO_[3],
     _rS_=_rO_[4],
     _rU_=_rO_[6],
     _rV_=_rO_[7],
     _rW_=_rO_[8],
     _rX_=_rO_[9],
     _rY_=_rO_[10],
     _rZ_=_rO_[11],
     _r0_=_rO_[12],
     _r1_=_rO_[13],
     _r2_=_rO_[14],
     _r3_=_rO_[15],
     _r4_=_rO_[16],
     _r5_=_rO_[17],
     _r6_=_rO_[18],
     _r7_=_rO_[19],
     _r8_=_rO_[20],
     _r9_=_rO_[21],
     _r$_=_rO_[23],
     _sa_=_rO_[24],
     _sb_=_rO_[25],
     _sc_=_rO_[26],
     _sd_=_rO_[27],
     _se_=_rO_[28],
     _sg_=_rO_[30],
     _sh_=_rO_[31],
     _si_=_rO_[32],
     _sj_=_rO_[33],
     _sk_=_rO_[34],
     _sm_=_rO_[36],
     _sn_=_rO_[37],
     _so_=_rO_[38],
     _sp_=_rO_[39],
     _sq_=_rO_[40],
     _sr_=_rO_[41],
     _ss_=_rO_[42],
     _st_=_rO_[43],
     _su_=_rO_[44],
     _sv_=_rO_[45],
     _sw_=_rO_[46],
     _sx_=_rO_[47],
     _sy_=_rO_[48],
     _sz_=_rO_[49],
     _sA_=_rO_[50],
     _sB_=_rO_[51],
     _sC_=_rO_[52],
     _sE_=_rO_[54],
     _sF_=_rO_[55],
     _sG_=_rO_[56],
     _sH_=_rO_[57],
     _sI_=_rO_[58],
     _sJ_=_rO_[59],
     _sK_=_rO_[60],
     _sL_=_rO_[61],
     _sM_=_rO_[62],
     _sN_=_rO_[63],
     _sO_=_rO_[64],
     _sP_=_rO_[65],
     _sQ_=_rO_[66],
     _sR_=_rO_[67],
     _sS_=_rO_[68],
     _sT_=_rO_[69],
     _sU_=_rO_[70],
     _sV_=_rO_[71],
     _sW_=_rO_[72],
     _sX_=_rO_[73],
     _sY_=_rO_[74],
     _sZ_=_rO_[75],
     _s0_=_rO_[76],
     _s1_=_rO_[77],
     _s2_=_rO_[78],
     _s3_=_rO_[79],
     _s4_=_rO_[80],
     _s5_=_rO_[81],
     _s6_=caml_call1(Bin_prot_Shape[3][1],cst_b$6),
     _s7_=caml_call1(Bin_prot_Shape[4][1],cst_src_hashtbl_ml_99_30),
     _s8_=[0,caml_call2(Bin_prot_Shape[15],_s7_,_s6_),0],
     _s9_=caml_call1(Bin_prot_Shape[3][1],cst_a$26),
     _s__=caml_call1(Bin_prot_Shape[4][1],cst_src_hashtbl_ml_99_25),
     _s$_=[0,caml_call2(Bin_prot_Shape[15],_s__,_s9_),_s8_],
     _ta_=caml_call1(Bin_prot_Shape[7],_s$_),
     _tb_=[0,caml_call1(Bin_prot_Shape[3][1],cst_b$7),0],
     _tc_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$27),_tb_],
     _td_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_el),_tc_,_ta_],0],
     _te_=caml_call1(Bin_prot_Shape[4][1],cst_src_hashtbl_ml_99_6),
     group$34=caml_call2(Bin_prot_Shape[6],_te_,_td_);
    function bin_shape_el(a,b)
     {var _bsn_=caml_call1(Bin_prot_Shape[2][1],cst_el$0);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$34,_bsn_),[0,a,[0,b,0]])}
    function bin_size_el(size_of_a,size_of_b,param)
     {var
       v2=param[2],
       v1=param[1],
       _bsl_=caml_call1(size_of_a,v1),
       size=caml_call2(Bin_prot_Common[23],0,_bsl_),
       _bsm_=caml_call1(size_of_b,v2);
      return caml_call2(Bin_prot_Common[23],size,_bsm_)}
    function bin_write_el(write_a,write_b,buf,pos,param)
     {var v2=param[2],v1=param[1],pos$0=caml_call3(write_a,buf,pos,v1);
      return caml_call3(write_b,buf,pos$0,v2)}
    function bin_read_el(of_a,of_b,buf,pos_ref)
     {var v1=caml_call2(of_a,buf,pos_ref),v2=caml_call2(of_b,buf,pos_ref);
      return [0,v1,v2]}
    var
     caller_identity=
      caml_call1(Bin_prot_Shape[5][1],cst_8f3e445c_4992_11e6_a279_37);
    function iter$2(t,f)
     {return caml_call2
              (_r__,t,function(key,data){return caml_call1(f,[0,key,data])})}
    function init$0(len,next)
     {var t=caml_call3(_rT_,0,[0,len],0),_bsj_=caml_call2(_aK_,len,1),_bsi_=0;
      if(! (_bsj_ < 0))
       {var i=_bsi_;
        for(;;)
         {var
           match=caml_call1(next,0),
           data=match[2],
           key=match[1],
           match$0=caml_call2(_sD_,t,key);
          if(match$0)
           caml_call1(_bl_,cst_Core_hashtbl_bin_read_t_du);
          else
           caml_call3(_sl_,t,key,data);
          var _bsk_=i + 1 | 0;
          if(_bsj_ !== i){var i=_bsk_;continue}
          break}}
      return t}
    var
     include$26=
      caml_call1
       (Bin_prot_Utils[17],
        [0,
         caller_identity,
         module_name,
         _sf_,
         iter$2,
         init$0,
         bin_size_el,
         bin_write_el,
         bin_read_el,
         bin_shape_el]),
     bin_shape_t$26=include$26[1],
     bin_size_t$33=include$26[2],
     bin_write_t$33=include$26[3],
     bin_read_t$68=include$26[4],
     bin_read_t$69=include$26[5],
     bin_writer_t$20=include$26[6],
     bin_reader_t$20=include$26[7],
     bin_t$20=include$26[8];
    function Make_plain(Key)
     {var
       hashable=[0,Key[3],Key[1],Key[2]],
       _br4_=caml_call1(Base_Hashtbl[83],[0,hashable]),
       t_of_sexp=_br4_[1],
       create=_br4_[2],
       of_alist=_br4_[3],
       of_alist_report_all_dups=_br4_[4],
       of_alist_or_error=_br4_[5],
       of_alist_exn=_br4_[6],
       of_alist_multi=_br4_[7],
       create_mapped=_br4_[8],
       create_with_key=_br4_[9],
       create_with_key_or_error=_br4_[10],
       create_with_key_exn=_br4_[11],
       group=_br4_[12],
       find_multi=Base_Hashtbl[80],
       remove_multi=Base_Hashtbl[79],
       add_multi=Base_Hashtbl[78],
       decr=Base_Hashtbl[77],
       incr=Base_Hashtbl[76],
       validate=Base_Hashtbl[75],
       to_alist=Base_Hashtbl[74],
       similar=Base_Hashtbl[73],
       equal=Base_Hashtbl[72],
       filter_mapi_inplace=Base_Hashtbl[71],
       filter_map_inplace=Base_Hashtbl[70],
       mapi_inplace=Base_Hashtbl[69],
       map_inplace=Base_Hashtbl[68],
       filteri_inplace=Base_Hashtbl[67],
       filter_inplace=Base_Hashtbl[66],
       filter_keys_inplace=Base_Hashtbl[65],
       data=Base_Hashtbl[64],
       keys=Base_Hashtbl[63],
       merge_into=Base_Hashtbl[62],
       merge=Base_Hashtbl[61],
       find_and_remove=Base_Hashtbl[60],
       findi_and_call2=Base_Hashtbl[59],
       findi_and_call1=Base_Hashtbl[58],
       findi_and_call=Base_Hashtbl[57],
       find_and_call2=Base_Hashtbl[56],
       find_and_call1=Base_Hashtbl[55],
       find_and_call=Base_Hashtbl[54],
       find_exn=Base_Hashtbl[53],
       find=Base_Hashtbl[52],
       findi_or_add=Base_Hashtbl[51],
       find_or_add=Base_Hashtbl[50],
       partitioni_tf=Base_Hashtbl[49],
       partition_tf=Base_Hashtbl[48],
       partition_mapi=Base_Hashtbl[47],
       partition_map=Base_Hashtbl[46],
       filteri=Base_Hashtbl[45],
       filter=Base_Hashtbl[44],
       filter_keys=Base_Hashtbl[43],
       filter_mapi=Base_Hashtbl[42],
       filter_map=Base_Hashtbl[41],
       mapi=Base_Hashtbl[40],
       map=Base_Hashtbl[39],
       update=Base_Hashtbl[38],
       change=Base_Hashtbl[37],
       add_exn=Base_Hashtbl[36],
       add=Base_Hashtbl[35],
       set=Base_Hashtbl[34],
       choose_exn=Base_Hashtbl[33],
       choose=Base_Hashtbl[32],
       remove=Base_Hashtbl[31],
       mem=Base_Hashtbl[30],
       is_empty=Base_Hashtbl[29],
       length=Base_Hashtbl[28],
       count=Base_Hashtbl[27],
       counti=Base_Hashtbl[26],
       for_all=Base_Hashtbl[25],
       for_alli=Base_Hashtbl[24],
       exists=Base_Hashtbl[23],
       existsi=Base_Hashtbl[22],
       iteri=Base_Hashtbl[21],
       iter=Base_Hashtbl[20],
       iter_keys=Base_Hashtbl[19],
       fold=Base_Hashtbl[18],
       copy=Base_Hashtbl[17],
       clear=Base_Hashtbl[16],
       sexp_of_key=Base_Hashtbl[15],
       _br5_=Base_Hashtbl[82];
      function invariant(invariant_key,t)
       {return caml_call3(_br5_,function(_bsh_){return 0},invariant_key,t)}
      function sexp_of_t(sexp_of_v,t)
       {return caml_call3(_rQ_,Key[2],sexp_of_v,t)}
      function Provide_of_sexp(Key)
       {function t_of_sexp$0(v_of_sexp,sexp)
         {return caml_call3(t_of_sexp,Key[1],v_of_sexp,sexp)}
        return [0,t_of_sexp$0]}
      function Provide_bin_io(Key$0)
       {var
         sexp_of_t=Key[2],
         bin_size_t=Key$0[1],
         bin_write_t=Key$0[2],
         bin_read_t=Key$0[3],
         bin_shape_t=Key$0[5],
         _br6_=caml_call1(Bin_prot_Shape[3][1],cst_a$28),
         _br7_=caml_call1(Bin_prot_Shape[4][1],cst_src_hashtbl_ml_177_27),
         _br8_=
          [0,bin_shape_t,[0,caml_call2(Bin_prot_Shape[15],_br7_,_br6_),0]],
         _br9_=caml_call1(Bin_prot_Shape[7],_br8_),
         _br__=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$29),0],
         _br$_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_el$1),_br__,_br9_],0],
         _bsa_=caml_call1(Bin_prot_Shape[4][1],cst_src_hashtbl_ml_177_6),
         group=caml_call2(Bin_prot_Shape[6],_bsa_,_br$_);
        function bin_shape_el(a)
         {var _bsg_=caml_call1(Bin_prot_Shape[2][1],cst_el$2);
          return caml_call1
                  (caml_call2(Bin_prot_Shape[14],group,_bsg_),[0,a,0])}
        function bin_size_el(size_of_a,param)
         {var
           v2=param[2],
           v1=param[1],
           _bse_=caml_call1(bin_size_t,v1),
           size=caml_call2(Bin_prot_Common[23],0,_bse_),
           _bsf_=caml_call1(size_of_a,v2);
          return caml_call2(Bin_prot_Common[23],size,_bsf_)}
        function bin_write_el(write_a,buf,pos,param)
         {var
           v2=param[2],
           v1=param[1],
           pos$0=caml_call3(bin_write_t,buf,pos,v1);
          return caml_call3(write_a,buf,pos$0,v2)}
        function bin_read_el(of_a,buf,pos_ref)
         {var
           v1=caml_call2(bin_read_t,buf,pos_ref),
           v2=caml_call2(of_a,buf,pos_ref);
          return [0,v1,v2]}
        var
         caller_identity=
          caml_call1(Bin_prot_Shape[5][1],cst_8fabab0a_4992_11e6_8cca_9b);
        function iter(t,f)
         {return caml_call2
                  (iteri,
                   t,
                   function(key,data){return caml_call1(f,[0,key,data])})}
        function init(len,next)
         {var
           t=caml_call3(create,0,[0,len],0),
           _bsc_=caml_call2(_aK_,len,1),
           _bsb_=0;
          if(! (_bsc_ < 0))
           {var i=_bsb_;
            for(;;)
             {var
               match=caml_call1(next,0),
               data=match[2],
               key=match[1],
               match$0=caml_call2(find,t,key);
              if(match$0)
               failwiths(0,_tf_,cst_Hashtbl_bin_read_t_duplica,key,sexp_of_t);
              else
               caml_call3(set,t,key,data);
              var _bsd_=i + 1 | 0;
              if(_bsc_ !== i){var i=_bsd_;continue}
              break}}
          return t}
        return caml_call1
                (Bin_prot_Utils[16],
                 [0,
                  caller_identity,
                  module_name$0,
                  length,
                  iter,
                  init,
                  bin_size_el,
                  bin_write_el,
                  bin_read_el,
                  bin_shape_el])}
      return [0,
              hashable,
              t_of_sexp,
              create,
              of_alist,
              of_alist_report_all_dups,
              of_alist_or_error,
              of_alist_exn,
              of_alist_multi,
              create_mapped,
              create_with_key,
              create_with_key_or_error,
              create_with_key_exn,
              group,
              sexp_of_key,
              clear,
              copy,
              fold,
              iter_keys,
              iter,
              iteri,
              existsi,
              exists,
              for_alli,
              for_all,
              counti,
              count,
              length,
              is_empty,
              mem,
              remove,
              choose,
              choose_exn,
              set,
              add,
              add_exn,
              change,
              update,
              map,
              mapi,
              filter_map,
              filter_mapi,
              filter_keys,
              filter,
              filteri,
              partition_map,
              partition_mapi,
              partition_tf,
              partitioni_tf,
              find_or_add,
              findi_or_add,
              find,
              find_exn,
              find_and_call,
              find_and_call1,
              find_and_call2,
              findi_and_call,
              findi_and_call1,
              findi_and_call2,
              find_and_remove,
              merge,
              merge_into,
              keys,
              data,
              filter_keys_inplace,
              filter_inplace,
              filteri_inplace,
              map_inplace,
              mapi_inplace,
              filter_map_inplace,
              filter_mapi_inplace,
              equal,
              similar,
              to_alist,
              validate,
              incr,
              decr,
              add_multi,
              remove_multi,
              find_multi,
              invariant,
              sexp_of_t,
              Provide_of_sexp,
              Provide_bin_io]}
    function Make$0(Key)
     {var
       _br3_=Make_plain([0,Key[2],Key[3],Key[4]]),
       hashable=_br3_[1],
       create=_br3_[3],
       of_alist=_br3_[4],
       of_alist_report_all_dups=_br3_[5],
       of_alist_or_error=_br3_[6],
       of_alist_exn=_br3_[7],
       of_alist_multi=_br3_[8],
       create_mapped=_br3_[9],
       create_with_key=_br3_[10],
       create_with_key_or_error=_br3_[11],
       create_with_key_exn=_br3_[12],
       group=_br3_[13],
       sexp_of_key=_br3_[14],
       clear=_br3_[15],
       copy=_br3_[16],
       fold=_br3_[17],
       iter_keys=_br3_[18],
       iter=_br3_[19],
       iteri=_br3_[20],
       existsi=_br3_[21],
       exists=_br3_[22],
       for_alli=_br3_[23],
       for_all=_br3_[24],
       counti=_br3_[25],
       count=_br3_[26],
       length=_br3_[27],
       is_empty=_br3_[28],
       mem=_br3_[29],
       remove=_br3_[30],
       choose=_br3_[31],
       choose_exn=_br3_[32],
       set=_br3_[33],
       add=_br3_[34],
       add_exn=_br3_[35],
       change=_br3_[36],
       update=_br3_[37],
       map=_br3_[38],
       mapi=_br3_[39],
       filter_map=_br3_[40],
       filter_mapi=_br3_[41],
       filter_keys=_br3_[42],
       filter=_br3_[43],
       filteri=_br3_[44],
       partition_map=_br3_[45],
       partition_mapi=_br3_[46],
       partition_tf=_br3_[47],
       partitioni_tf=_br3_[48],
       find_or_add=_br3_[49],
       findi_or_add=_br3_[50],
       find=_br3_[51],
       find_exn=_br3_[52],
       find_and_call=_br3_[53],
       find_and_call1=_br3_[54],
       find_and_call2=_br3_[55],
       findi_and_call=_br3_[56],
       findi_and_call1=_br3_[57],
       findi_and_call2=_br3_[58],
       find_and_remove=_br3_[59],
       merge=_br3_[60],
       merge_into=_br3_[61],
       keys=_br3_[62],
       data=_br3_[63],
       filter_keys_inplace=_br3_[64],
       filter_inplace=_br3_[65],
       filteri_inplace=_br3_[66],
       map_inplace=_br3_[67],
       mapi_inplace=_br3_[68],
       filter_map_inplace=_br3_[69],
       filter_mapi_inplace=_br3_[70],
       equal=_br3_[71],
       similar=_br3_[72],
       to_alist=_br3_[73],
       validate=_br3_[74],
       incr=_br3_[75],
       decr=_br3_[76],
       add_multi=_br3_[77],
       remove_multi=_br3_[78],
       find_multi=_br3_[79],
       invariant=_br3_[80],
       sexp_of_t=_br3_[81],
       Provide_of_sexp=_br3_[82],
       Provide_bin_io=_br3_[83],
       include=caml_call1(Provide_of_sexp,[0,Key[1]]),
       t_of_sexp=include[1];
      return [0,
              hashable,
              create,
              of_alist,
              of_alist_report_all_dups,
              of_alist_or_error,
              of_alist_exn,
              of_alist_multi,
              create_mapped,
              create_with_key,
              create_with_key_or_error,
              create_with_key_exn,
              group,
              sexp_of_key,
              clear,
              copy,
              fold,
              iter_keys,
              iter,
              iteri,
              existsi,
              exists,
              for_alli,
              for_all,
              counti,
              count,
              length,
              is_empty,
              mem,
              remove,
              choose,
              choose_exn,
              set,
              add,
              add_exn,
              change,
              update,
              map,
              mapi,
              filter_map,
              filter_mapi,
              filter_keys,
              filter,
              filteri,
              partition_map,
              partition_mapi,
              partition_tf,
              partitioni_tf,
              find_or_add,
              findi_or_add,
              find,
              find_exn,
              find_and_call,
              find_and_call1,
              find_and_call2,
              findi_and_call,
              findi_and_call1,
              findi_and_call2,
              find_and_remove,
              merge,
              merge_into,
              keys,
              data,
              filter_keys_inplace,
              filter_inplace,
              filteri_inplace,
              map_inplace,
              mapi_inplace,
              filter_map_inplace,
              filter_mapi_inplace,
              equal,
              similar,
              to_alist,
              validate,
              incr,
              decr,
              add_multi,
              remove_multi,
              find_multi,
              invariant,
              sexp_of_t,
              Provide_of_sexp,
              Provide_bin_io,
              t_of_sexp]}
    var _tg_=Base_Hashtbl[87],_th_=Base_Hashtbl[86],_ti_=Base_Hashtbl[88][1];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$91);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Hashtbl$0);
    var _tj_=Base_Hashtbl[85];
    function _tk_(Key)
     {var
       _br2_=Make$0([0,Key[9],Key[10],Key[11],Key[12]]),
       hashable=_br2_[1],
       create=_br2_[2],
       of_alist=_br2_[3],
       of_alist_report_all_dups=_br2_[4],
       of_alist_or_error=_br2_[5],
       of_alist_exn=_br2_[6],
       of_alist_multi=_br2_[7],
       create_mapped=_br2_[8],
       create_with_key=_br2_[9],
       create_with_key_or_error=_br2_[10],
       create_with_key_exn=_br2_[11],
       group=_br2_[12],
       sexp_of_key=_br2_[13],
       clear=_br2_[14],
       copy=_br2_[15],
       fold=_br2_[16],
       iter_keys=_br2_[17],
       iter=_br2_[18],
       iteri=_br2_[19],
       existsi=_br2_[20],
       exists=_br2_[21],
       for_alli=_br2_[22],
       for_all=_br2_[23],
       counti=_br2_[24],
       count=_br2_[25],
       length=_br2_[26],
       is_empty=_br2_[27],
       mem=_br2_[28],
       remove=_br2_[29],
       choose=_br2_[30],
       choose_exn=_br2_[31],
       set=_br2_[32],
       add=_br2_[33],
       add_exn=_br2_[34],
       change=_br2_[35],
       update=_br2_[36],
       map=_br2_[37],
       mapi=_br2_[38],
       filter_map=_br2_[39],
       filter_mapi=_br2_[40],
       filter_keys=_br2_[41],
       filter=_br2_[42],
       filteri=_br2_[43],
       partition_map=_br2_[44],
       partition_mapi=_br2_[45],
       partition_tf=_br2_[46],
       partitioni_tf=_br2_[47],
       find_or_add=_br2_[48],
       findi_or_add=_br2_[49],
       find=_br2_[50],
       find_exn=_br2_[51],
       find_and_call=_br2_[52],
       find_and_call1=_br2_[53],
       find_and_call2=_br2_[54],
       findi_and_call=_br2_[55],
       findi_and_call1=_br2_[56],
       findi_and_call2=_br2_[57],
       find_and_remove=_br2_[58],
       merge=_br2_[59],
       merge_into=_br2_[60],
       keys=_br2_[61],
       data=_br2_[62],
       filter_keys_inplace=_br2_[63],
       filter_inplace=_br2_[64],
       filteri_inplace=_br2_[65],
       map_inplace=_br2_[66],
       mapi_inplace=_br2_[67],
       filter_map_inplace=_br2_[68],
       filter_mapi_inplace=_br2_[69],
       equal=_br2_[70],
       similar=_br2_[71],
       to_alist=_br2_[72],
       validate=_br2_[73],
       incr=_br2_[74],
       decr=_br2_[75],
       add_multi=_br2_[76],
       remove_multi=_br2_[77],
       find_multi=_br2_[78],
       invariant=_br2_[79],
       sexp_of_t=_br2_[80],
       Provide_of_sexp=_br2_[81],
       Provide_bin_io=_br2_[82],
       t_of_sexp=_br2_[83],
       include=
        caml_call1
         (Provide_bin_io,
          [0,Key[1],Key[2],Key[3],Key[4],Key[5],Key[6],Key[7],Key[8]]),
       bin_shape_t=include[1],
       bin_size_t=include[2],
       bin_write_t=include[3],
       bin_read_t=include[4],
       bin_read_t$0=include[5],
       bin_writer_t=include[6],
       bin_reader_t=include[7],
       bin_t=include[8];
      return [0,
              sexp_of_t,
              hashable,
              invariant,
              create,
              of_alist,
              of_alist_report_all_dups,
              of_alist_or_error,
              of_alist_exn,
              of_alist_multi,
              create_mapped,
              create_with_key,
              create_with_key_or_error,
              create_with_key_exn,
              group,
              sexp_of_key,
              clear,
              copy,
              fold,
              iter_keys,
              iter,
              iteri,
              existsi,
              exists,
              for_alli,
              for_all,
              counti,
              count,
              length,
              is_empty,
              mem,
              remove,
              choose,
              choose_exn,
              set,
              add,
              add_exn,
              change,
              update,
              map,
              mapi,
              filter_map,
              filter_mapi,
              filter_keys,
              filter,
              filteri,
              partition_map,
              partition_mapi,
              partition_tf,
              partitioni_tf,
              find_or_add,
              findi_or_add,
              find,
              find_exn,
              find_and_call,
              find_and_call1,
              find_and_call2,
              findi_and_call,
              findi_and_call1,
              findi_and_call2,
              find_and_remove,
              merge,
              merge_into,
              keys,
              data,
              filter_keys_inplace,
              filter_inplace,
              filteri_inplace,
              map_inplace,
              mapi_inplace,
              filter_map_inplace,
              filter_mapi_inplace,
              equal,
              similar,
              to_alist,
              validate,
              incr,
              decr,
              add_multi,
              remove_multi,
              find_multi,
              Provide_of_sexp,
              Provide_bin_io,
              t_of_sexp,
              bin_shape_t,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_writer_t,
              bin_reader_t,
              bin_t]}
    function _tl_(_br0_)
     {var _br1_=Make$0(_br0_);
      return [0,
              _br1_[80],
              _br1_[1],
              _br1_[79],
              _br1_[2],
              _br1_[3],
              _br1_[4],
              _br1_[5],
              _br1_[6],
              _br1_[7],
              _br1_[8],
              _br1_[9],
              _br1_[10],
              _br1_[11],
              _br1_[12],
              _br1_[13],
              _br1_[14],
              _br1_[15],
              _br1_[16],
              _br1_[17],
              _br1_[18],
              _br1_[19],
              _br1_[20],
              _br1_[21],
              _br1_[22],
              _br1_[23],
              _br1_[24],
              _br1_[25],
              _br1_[26],
              _br1_[27],
              _br1_[28],
              _br1_[29],
              _br1_[30],
              _br1_[31],
              _br1_[32],
              _br1_[33],
              _br1_[34],
              _br1_[35],
              _br1_[36],
              _br1_[37],
              _br1_[38],
              _br1_[39],
              _br1_[40],
              _br1_[41],
              _br1_[42],
              _br1_[43],
              _br1_[44],
              _br1_[45],
              _br1_[46],
              _br1_[47],
              _br1_[48],
              _br1_[49],
              _br1_[50],
              _br1_[51],
              _br1_[52],
              _br1_[53],
              _br1_[54],
              _br1_[55],
              _br1_[56],
              _br1_[57],
              _br1_[58],
              _br1_[59],
              _br1_[60],
              _br1_[61],
              _br1_[62],
              _br1_[63],
              _br1_[64],
              _br1_[65],
              _br1_[66],
              _br1_[67],
              _br1_[68],
              _br1_[69],
              _br1_[70],
              _br1_[71],
              _br1_[72],
              _br1_[73],
              _br1_[74],
              _br1_[75],
              _br1_[76],
              _br1_[77],
              _br1_[78],
              _br1_[81],
              _br1_[82],
              _br1_[83]]}
    var
     Core_kernel_Hashtbl=
      [0,
       hash$7,
       hash_param,
       sexp_of_t$18,
       create$2,
       of_alist,
       of_alist_report_all_dups,
       of_alist_or_error,
       of_alist_exn,
       of_alist_multi,
       create_mapped,
       create_with_key,
       create_with_key_or_error,
       create_with_key_exn,
       group$32,
       sexp_of_key,
       clear,
       copy$0,
       fold$0,
       iter_keys,
       iter$1,
       iteri$0,
       existsi$0,
       exists$0,
       for_alli$0,
       for_all$0,
       counti$0,
       count$0,
       length$2,
       is_empty$1,
       mem$0,
       remove,
       choose,
       choose_exn,
       set$0,
       add,
       add_exn,
       change,
       update,
       map$3,
       mapi$0,
       filter_map$0,
       filter_mapi$0,
       filter_keys,
       filter$0,
       filteri$0,
       partition_map,
       partition_mapi,
       partition_tf$0,
       partitioni_tf$0,
       find_or_add,
       findi_or_add,
       find$0,
       find_exn$0,
       find_and_call,
       find_and_call1,
       find_and_call2,
       findi_and_call,
       findi_and_call1,
       findi_and_call2,
       find_and_remove,
       merge,
       merge_into,
       keys,
       data,
       filter_keys_inplace,
       filter_inplace,
       filteri_inplace,
       map_inplace$0,
       mapi_inplace,
       filter_map_inplace,
       filter_mapi_inplace,
       equal$3,
       similar,
       to_alist,
       validate,
       incr,
       decr,
       add_multi,
       remove_multi,
       find_multi,
       hashable_s,
       invariant$1,
       [0,
        create$3,
        of_alist$0,
        of_alist_report_all_dups$0,
        of_alist_or_error$0,
        of_alist_exn$0,
        of_alist_multi$0,
        create_mapped$0,
        create_with_key$0,
        create_with_key_or_error$0,
        create_with_key_exn$0,
        group$33],
       [0,
        bin_shape_t$26,
        bin_size_t$33,
        bin_write_t$33,
        bin_read_t$68,
        bin_read_t$69,
        bin_writer_t$20,
        bin_reader_t$20,
        bin_t$20,
        _rP_,
        _rQ_,
        _rR_,
        _rS_,
        _rT_,
        _rU_,
        _rV_,
        _rW_,
        _rX_,
        _rY_,
        _rZ_,
        _r0_,
        _r1_,
        _r2_,
        _r3_,
        _r4_,
        _r5_,
        _r6_,
        _r7_,
        _r8_,
        _r9_,
        _r__,
        _r$_,
        _sa_,
        _sb_,
        _sc_,
        _sd_,
        _se_,
        _sf_,
        _sg_,
        _sh_,
        _si_,
        _sj_,
        _sk_,
        _sl_,
        _sm_,
        _sn_,
        _so_,
        _sp_,
        _sq_,
        _sr_,
        _ss_,
        _st_,
        _su_,
        _sv_,
        _sw_,
        _sx_,
        _sy_,
        _sz_,
        _sA_,
        _sB_,
        _sC_,
        _sD_,
        _sE_,
        _sF_,
        _sG_,
        _sH_,
        _sI_,
        _sJ_,
        _sK_,
        _sL_,
        _sM_,
        _sN_,
        _sO_,
        _sP_,
        _sQ_,
        _sR_,
        _sS_,
        _sT_,
        _sU_,
        _sV_,
        _sW_,
        _sX_,
        _sY_,
        _sZ_,
        _s0_,
        _s1_,
        _s2_,
        _s3_,
        _s4_,
        _s5_],
       function(_brY_)
        {var _brZ_=Make_plain(_brY_);
         return [0,
                 _brZ_[81],
                 _brZ_[1],
                 _brZ_[80],
                 _brZ_[3],
                 _brZ_[4],
                 _brZ_[5],
                 _brZ_[6],
                 _brZ_[7],
                 _brZ_[8],
                 _brZ_[9],
                 _brZ_[10],
                 _brZ_[11],
                 _brZ_[12],
                 _brZ_[13],
                 _brZ_[14],
                 _brZ_[15],
                 _brZ_[16],
                 _brZ_[17],
                 _brZ_[18],
                 _brZ_[19],
                 _brZ_[20],
                 _brZ_[21],
                 _brZ_[22],
                 _brZ_[23],
                 _brZ_[24],
                 _brZ_[25],
                 _brZ_[26],
                 _brZ_[27],
                 _brZ_[28],
                 _brZ_[29],
                 _brZ_[30],
                 _brZ_[31],
                 _brZ_[32],
                 _brZ_[33],
                 _brZ_[34],
                 _brZ_[35],
                 _brZ_[36],
                 _brZ_[37],
                 _brZ_[38],
                 _brZ_[39],
                 _brZ_[40],
                 _brZ_[41],
                 _brZ_[42],
                 _brZ_[43],
                 _brZ_[44],
                 _brZ_[45],
                 _brZ_[46],
                 _brZ_[47],
                 _brZ_[48],
                 _brZ_[49],
                 _brZ_[50],
                 _brZ_[51],
                 _brZ_[52],
                 _brZ_[53],
                 _brZ_[54],
                 _brZ_[55],
                 _brZ_[56],
                 _brZ_[57],
                 _brZ_[58],
                 _brZ_[59],
                 _brZ_[60],
                 _brZ_[61],
                 _brZ_[62],
                 _brZ_[63],
                 _brZ_[64],
                 _brZ_[65],
                 _brZ_[66],
                 _brZ_[67],
                 _brZ_[68],
                 _brZ_[69],
                 _brZ_[70],
                 _brZ_[71],
                 _brZ_[72],
                 _brZ_[73],
                 _brZ_[74],
                 _brZ_[75],
                 _brZ_[76],
                 _brZ_[77],
                 _brZ_[78],
                 _brZ_[79],
                 _brZ_[82],
                 _brZ_[83]]},
       _tl_,
       _tk_,
       _tj_,
       _ti_,
       _th_,
       _tg_];
    caml_register_global(4975,Core_kernel_Hashtbl,"Core_kernel__Hashtbl");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Hash_set);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$92);
    caml_call1(Expect_test_collector[4][1],cst_src_hash_set_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$93,cst$30);
    var
     sexp_of_t$19=include$22[1],
     _tm_=include$22[2],
     _tn_=include$22[3],
     length$3=include$22[4],
     is_empty$2=include$22[5],
     iter$3=include$22[6],
     fold$1=include$22[7],
     fold_result$0=include$22[8],
     fold_until$0=include$22[9],
     exists$1=include$22[10],
     for_all$1=include$22[11],
     count$1=include$22[12],
     sum$0=include$22[13],
     find$1=include$22[14],
     find_map$0=include$22[15],
     to_list$0=include$22[16],
     to_array$0=include$22[17],
     min_elt$0=include$22[18],
     max_elt$0=include$22[19],
     mem$1=include$22[20],
     copy$1=include$22[21],
     add$0=include$22[22],
     strict_add=include$22[23],
     strict_add_exn=include$22[24],
     remove$0=include$22[25],
     strict_remove=include$22[26],
     strict_remove_exn=include$22[27],
     clear$0=include$22[28],
     equal$4=include$22[29],
     filter$1=include$22[30],
     filter_inplace$0=include$22[31],
     inter=include$22[32],
     union=include$22[33],
     diff=include$22[34],
     of_hashtbl_keys=include$22[35],
     to_hashtbl=include$22[36],
     Poly$0=include$22[38],
     M$0=include$22[39],
     sexp_of_m_t=include$22[40],
     m_t_of_sexp=include$22[41],
     Creators=include$22[42],
     Private=include$22[43];
    function Make_plain$0(Elt)
     {var
       hashable=caml_call1(Base_Hashable[3],Elt),
       include=caml_call1(Creators,[0,hashable]),
       t_of_sexp=include[1],
       create=include[2],
       of_list=include[3];
      function sexp_of_t(t){return caml_call2(Poly$0[2],Elt[2],t)}
      function Provide_of_sexp(X)
       {function t_of_sexp$0(sexp){return caml_call2(t_of_sexp,X[1],sexp)}
        return [0,t_of_sexp$0]}
      function Provide_bin_io(X)
       {var
         bin_size_el=X[1],
         bin_write_el=X[2],
         bin_read_el=X[3],
         bin_shape_t=X[5],
         _brS_=
          [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_el$3),0,bin_shape_t],0],
         _brT_=caml_call1(Bin_prot_Shape[4][1],cst_src_hash_set_ml_46_6),
         group=caml_call2(Bin_prot_Shape[6],_brT_,_brS_),
         _brU_=caml_call1(Bin_prot_Shape[2][1],cst_el$4),
         bin_shape_el=caml_call1(caml_call2(Bin_prot_Shape[14],group,_brU_),0),
         caller_identity=
          caml_call1(Bin_prot_Shape[5][1],cst_ad381672_4992_11e6_9e36_b7);
        function init(len,next)
         {var
           t=caml_call3(create,0,[0,len],0),
           _brW_=caml_call2(_aK_,len,1),
           _brV_=0;
          if(! (_brW_ < 0))
           {var i=_brV_;
            for(;;)
             {var v=caml_call1(next,0);
              caml_call2(add$0,t,v);
              var _brX_=i + 1 | 0;
              if(_brW_ !== i){var i=_brX_;continue}
              break}}
          return t}
        return caml_call1
                (Bin_prot_Utils[15],
                 [0,
                  caller_identity,
                  module_name$1,
                  length$3,
                  iter$3,
                  init,
                  bin_size_el,
                  bin_write_el,
                  bin_read_el,
                  bin_shape_el])}
      return [0,
              t_of_sexp,
              create,
              of_list,
              sexp_of_t,
              Provide_of_sexp,
              Provide_bin_io]}
    function Make$1(Elt)
     {var
       _brR_=Make_plain$0([0,Elt[2],Elt[3],Elt[4]]),
       create=_brR_[2],
       of_list=_brR_[3],
       sexp_of_t=_brR_[4],
       Provide_of_sexp=_brR_[5],
       Provide_bin_io=_brR_[6],
       include=caml_call1(Provide_of_sexp,[0,Elt[1]]),
       t_of_sexp=include[1];
      return [0,
              create,
              of_list,
              sexp_of_t,
              Provide_of_sexp,
              Provide_bin_io,
              t_of_sexp]}
    function create$4(growth_allowed,size,hashable,param)
     {return caml_call3
              (_tm_,growth_allowed,size,caml_call1(Base_Hashable[4],hashable))}
    function of_list$0(growth_allowed,size,hashable,l)
     {return caml_call4
              (_tn_,
               growth_allowed,
               size,
               caml_call1(Base_Hashable[4],hashable),
               l)}
    var Using_hashable=[0,create$4,of_list$0],_to_=Private[1];
    function create$5(growth_allowed,size,m)
     {return caml_call3(_tm_,growth_allowed,size,m)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$94);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Hash_set$0);
    function _tp_(Elt)
     {var
       _brQ_=Make$1([0,Elt[9],Elt[10],Elt[11],Elt[12]]),
       create=_brQ_[1],
       of_list=_brQ_[2],
       sexp_of_t=_brQ_[3],
       Provide_of_sexp=_brQ_[4],
       Provide_bin_io=_brQ_[5],
       t_of_sexp=_brQ_[6],
       include=
        caml_call1
         (Provide_bin_io,
          [0,Elt[1],Elt[2],Elt[3],Elt[4],Elt[5],Elt[6],Elt[7],Elt[8]]),
       bin_size_t=include[1],
       bin_write_t=include[2],
       bin_read_t=include[3],
       bin_read_t$0=include[4],
       bin_shape_t=include[5],
       bin_writer_t=include[6],
       bin_reader_t=include[7],
       bin_t=include[8];
      return [0,
              sexp_of_t,
              create,
              of_list,
              Provide_of_sexp,
              Provide_bin_io,
              t_of_sexp,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t]}
    function _tq_(_brO_)
     {var _brP_=Make$1(_brO_);
      return [0,_brP_[3],_brP_[1],_brP_[2],_brP_[4],_brP_[5],_brP_[6]]}
    function _tr_(_brM_)
     {var _brN_=Make_plain$0(_brM_);
      return [0,_brN_[4],_brN_[2],_brN_[3],_brN_[5],_brN_[6]]}
    var
     Core_kernel_Hash_set=
      [0,
       sexp_of_t$19,
       create$5,
       _tn_,
       length$3,
       is_empty$2,
       iter$3,
       fold$1,
       fold_result$0,
       fold_until$0,
       exists$1,
       for_all$1,
       count$1,
       sum$0,
       find$1,
       find_map$0,
       to_list$0,
       to_array$0,
       min_elt$0,
       max_elt$0,
       mem$1,
       copy$1,
       add$0,
       strict_add,
       strict_add_exn,
       remove$0,
       strict_remove,
       strict_remove_exn,
       clear$0,
       equal$4,
       filter$1,
       filter_inplace$0,
       inter,
       union,
       diff,
       of_hashtbl_keys,
       to_hashtbl,
       _to_,
       Using_hashable,
       Poly$0,
       _tr_,
       _tq_,
       _tp_,
       M$0,
       sexp_of_m_t,
       m_t_of_sexp];
    caml_register_global(4976,Core_kernel_Hash_set,"Core_kernel__Hash_set");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Or_error);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$95);
    caml_call1(Expect_test_collector[4][1],cst_src_or_error_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$96,cst$31);
    var
     _tI_=include$27[19],
     _tP_=include$27[27],
     _tS_=include$27[30],
     _tV_=include$27[33],
     _tW_=include$27[34],
     _tX_=include$27[35],
     _t1_=include$27[39],
     _t3_=include$27[41],
     _t6_=include$27[44],
     _t7_=include$27[45],
     _ts_=include$27[1],
     _tt_=include$27[2],
     _tu_=include$27[3],
     _tv_=include$27[4],
     _tw_=include$27[5],
     _tx_=include$27[6],
     _ty_=include$27[7],
     _tz_=include$27[8],
     _tA_=include$27[9],
     _tB_=include$27[10],
     _tC_=include$27[11],
     _tD_=include$27[12],
     _tE_=include$27[14],
     _tF_=include$27[15],
     _tG_=include$27[16],
     _tH_=include$27[18],
     _tJ_=include$27[20],
     _tK_=include$27[21],
     _tL_=include$27[22],
     _tM_=include$27[23],
     _tN_=include$27[25],
     _tO_=include$27[26],
     _tQ_=include$27[28],
     _tR_=include$27[29],
     _tT_=include$27[31],
     _tU_=include$27[32],
     _tY_=include$27[36],
     _tZ_=include$27[37],
     _t0_=include$27[38],
     _t2_=include$27[40],
     _t4_=include$27[42],
     _t5_=include$27[43],
     _t8_=include$27[46],
     _t9_=include$27[47],
     _t__=include$27[48],
     _ua_=caml_call1(Bin_prot_Shape[3][1],cst_a$30),
     _ub_=caml_call1(Bin_prot_Shape[4][1],cst_src_or_error_ml_4_13),
     _t$_=0,
     _uc_=caml_call2(Bin_prot_Shape[15],_ub_,_ua_),
     _ud_=function(_brL_){return bin_shape_t$7(_uc_,_brL_)}(_ok_),
     _ue_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$31),0],
     _uf_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$80),_ue_,_ud_],_t$_],
     _ug_=caml_call1(Bin_prot_Shape[4][1],cst_src_or_error_ml_4_0),
     group$35=caml_call2(Bin_prot_Shape[6],_ug_,_uf_);
    function bin_shape_t$27(a)
     {var _brK_=caml_call1(Bin_prot_Shape[2][1],cst_t$81);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$35,_brK_),[0,a,0])}
    function bin_size_t$34(size_of_a,v)
     {return bin_size_t$16(size_of_a,_og_,v)}
    function bin_write_t$34(write_a,buf,pos,v)
     {return bin_write_t$16(write_a,_oh_,buf,pos,v)}
    function bin_writer_t$21(bin_writer_a)
     {function _brG_(v)
       {var _brH_=bin_writer_a[2];
        return function(_brI_,_brJ_)
         {return bin_write_t$34(_brH_,v,_brI_,_brJ_)}}
      return [0,function(v){return bin_size_t$34(bin_writer_a[1],v)},_brG_]}
    function bin_read_t$70(of_a,buf,pos_ref,vint)
     {return bin_read_t$35(of_a,_oi_,buf,pos_ref,vint)}
    function bin_read_t$71(of_a,buf,pos_ref)
     {return bin_read_t$36(of_a,_oi_,buf,pos_ref)}
    function bin_reader_t$21(bin_reader_a)
     {function _brF_(buf,pos_ref,vtag)
       {return bin_read_t$70(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$71(bin_reader_a[1],buf,pos_ref)},
              _brF_]}
    function bin_t$21(bin_a)
     {var _brD_=bin_reader_t$21(bin_a[3]),_brE_=bin_writer_t$21(bin_a[2]);
      return [0,bin_shape_t$27(bin_a[1]),_brE_,_brD_]}
    var bind=include$27[18],return$0=include$27[19];
    function to_run(t){return t}
    function flush(param){return caml_call1(_tI_,0)}
    function run(f){return caml_call1(_tS_,caml_call1(f,0))}
    function flushed(param){return 1}
    var
     upon_unreleasable_issue=Expect_test_config[6],
     _uh_=_oo_[1][5],
     _ui_=caml_call1(Bin_prot_Shape[3][1],cst_a$32),
     _uj_=caml_call1(Bin_prot_Shape[4][1],cst_src_or_error_ml_24_17),
     _uk_=caml_call2(Bin_prot_Shape[15],_uj_,_ui_),
     _ul_=caml_call1(caml_call1(_h8_[1][1],_uk_),_uh_),
     _um_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$33),0],
     _un_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$82),_um_,_ul_],0],
     _uo_=caml_call1(Bin_prot_Shape[4][1],cst_src_or_error_ml_24_4),
     group$36=caml_call2(Bin_prot_Shape[6],_uo_,_un_);
    function bin_shape_t$28(a)
     {var _brC_=caml_call1(Bin_prot_Shape[2][1],cst_t$83);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$36,_brC_),[0,a,0])}
    function bin_size_t$35(size_of_a,v)
     {return caml_call3(_h8_[1][2],size_of_a,_oo_[1][1],v)}
    function bin_write_t$35(write_a,buf,pos,v)
     {return caml_call3(caml_call2(_h8_[1][3],write_a,_oo_[1][2]),buf,pos,v)}
    function bin_writer_t$22(bin_writer_a)
     {function _bry_(v)
       {var _brz_=bin_writer_a[2];
        return function(_brA_,_brB_)
         {return bin_write_t$35(_brz_,v,_brA_,_brB_)}}
      return [0,function(v){return bin_size_t$35(bin_writer_a[1],v)},_bry_]}
    function bin_read_t$72(of_a,buf,pos_ref,vint)
     {return caml_call3
              (caml_call2(_h8_[1][5],of_a,_oo_[1][3]),buf,pos_ref,vint)}
    function bin_read_t$73(of_a,buf,pos_ref)
     {return caml_call2(caml_call2(_h8_[1][4],of_a,_oo_[1][3]),buf,pos_ref)}
    function bin_reader_t$22(bin_reader_a)
     {function _brx_(buf,pos_ref,vtag)
       {return bin_read_t$72(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$73(bin_reader_a[1],buf,pos_ref)},
              _brx_]}
    function bin_t$22(bin_a)
     {var _brv_=bin_reader_t$22(bin_a[3]),_brw_=bin_writer_t$22(bin_a[2]);
      return [0,bin_shape_t$28(bin_a[1]),_brw_,_brv_]}
    function compare$18(cmp_a,a_001,b_002)
     {function _brt_(a_005,b_006){return caml_call2(_oo_[1][9],a_005,b_006)}
      function _bru_(a_003,b_004){return caml_call2(cmp_a,a_003,b_004)}
      return caml_call4(_h8_[1][9],_bru_,_brt_,a_001,b_002)}
    function t_of_sexp$19(of_a,t)
     {return caml_call3(_h8_[1][10],of_a,_oo_[1][10],t)}
    function sexp_of_t$20(of_a,v)
     {return caml_call3(_h8_[1][11],of_a,_oo_[1][11],v)}
    function map$4(x,f)
     {function _brr_(_brs_){return _brs_}
      return caml_call3(_h8_[1][12],x,f,_brr_)}
    var
     _up_=_oo_[2][7],
     _uq_=caml_call1(Bin_prot_Shape[3][1],cst_a$34),
     _ur_=caml_call1(Bin_prot_Shape[4][1],cst_src_or_error_ml_31_17),
     _us_=caml_call2(Bin_prot_Shape[15],_ur_,_uq_),
     _ut_=caml_call1(caml_call1(_h8_[1][1],_us_),_up_),
     _uu_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$35),0],
     _uv_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$84),_uu_,_ut_],0],
     _uw_=caml_call1(Bin_prot_Shape[4][1],cst_src_or_error_ml_31_4),
     group$37=caml_call2(Bin_prot_Shape[6],_uw_,_uv_);
    function bin_shape_t$29(a)
     {var _brq_=caml_call1(Bin_prot_Shape[2][1],cst_t$85);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$37,_brq_),[0,a,0])}
    function bin_size_t$36(size_of_a,v)
     {return caml_call3(_h8_[1][2],size_of_a,_oo_[2][3],v)}
    function bin_write_t$36(write_a,buf,pos,v)
     {return caml_call3(caml_call2(_h8_[1][3],write_a,_oo_[2][4]),buf,pos,v)}
    function bin_writer_t$23(bin_writer_a)
     {function _brm_(v)
       {var _brn_=bin_writer_a[2];
        return function(_bro_,_brp_)
         {return bin_write_t$36(_brn_,v,_bro_,_brp_)}}
      return [0,function(v){return bin_size_t$36(bin_writer_a[1],v)},_brm_]}
    function bin_read_t$74(of_a,buf,pos_ref,vint)
     {return caml_call3
              (caml_call2(_h8_[1][5],of_a,_oo_[2][5]),buf,pos_ref,vint)}
    function bin_read_t$75(of_a,buf,pos_ref)
     {return caml_call2(caml_call2(_h8_[1][4],of_a,_oo_[2][5]),buf,pos_ref)}
    function bin_reader_t$23(bin_reader_a)
     {function _brl_(buf,pos_ref,vtag)
       {return bin_read_t$74(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$75(bin_reader_a[1],buf,pos_ref)},
              _brl_]}
    function bin_t$23(bin_a)
     {var _brj_=bin_reader_t$23(bin_a[3]),_brk_=bin_writer_t$23(bin_a[2]);
      return [0,bin_shape_t$29(bin_a[1]),_brk_,_brj_]}
    function compare$19(cmp_a,a_007,b_008)
     {function _brh_(a_011,b_012){return caml_call2(_oo_[2][11],a_011,b_012)}
      function _bri_(a_009,b_010){return caml_call2(cmp_a,a_009,b_010)}
      return caml_call4(_h8_[1][9],_bri_,_brh_,a_007,b_008)}
    function t_of_sexp$20(of_a,t)
     {return caml_call3(_h8_[1][10],of_a,_oo_[2][12],t)}
    function sexp_of_t$21(of_a,v)
     {return caml_call3(_h8_[1][11],of_a,_oo_[2][13],v)}
    function map$5(x,f)
     {function _brf_(_brg_){return _brg_}
      return caml_call3(_h8_[1][12],x,f,_brf_)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$97);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Or_error$0);
    var
     Core_kernel_Or_error=
      [0,
       bin_shape_t$27,
       bin_size_t$34,
       bin_write_t$34,
       bin_read_t$71,
       bin_read_t$70,
       bin_writer_t$21,
       bin_reader_t$21,
       bin_t$21,
       _ts_,
       _tt_,
       _tu_,
       _tv_,
       _tw_,
       _tx_,
       _ty_,
       _tz_,
       _tA_,
       _tB_,
       _tC_,
       _tD_,
       _tE_,
       _tF_,
       _tG_,
       _tH_,
       _tI_,
       _tJ_,
       _tK_,
       _tL_,
       _tM_,
       _tN_,
       _tO_,
       _tP_,
       _tQ_,
       _tR_,
       _tS_,
       _tT_,
       _tU_,
       _tV_,
       _tW_,
       _tX_,
       _tY_,
       _tZ_,
       _t0_,
       _t1_,
       _t2_,
       _t3_,
       _t4_,
       _t5_,
       _t6_,
       _t7_,
       _t8_,
       _t9_,
       _t__,
       [0,
        [0],
        [0,return$0,bind,to_run],
        flush,
        run,
        flushed,
        upon_unreleasable_issue],
       [0,
        [0,
         bin_shape_t$28,
         bin_size_t$35,
         bin_write_t$35,
         bin_read_t$73,
         bin_read_t$72,
         bin_writer_t$22,
         bin_reader_t$22,
         bin_t$22,
         compare$18,
         t_of_sexp$19,
         sexp_of_t$20,
         map$4],
        [0,
         bin_shape_t$29,
         bin_size_t$36,
         bin_write_t$36,
         bin_read_t$75,
         bin_read_t$74,
         bin_writer_t$23,
         bin_reader_t$23,
         bin_t$23,
         compare$19,
         t_of_sexp$20,
         sexp_of_t$21,
         map$5]]];
    caml_register_global(4979,Core_kernel_Or_error,"Core_kernel__Or_error");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Quickcheck_int);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$98);
    caml_call1(Expect_test_collector[4][1],cst_src_quickcheck_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$99,cst$32);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$100);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Quickcheck_int$0);
    var Core_kernel_Quickcheck_intf=[0];
    caml_register_global
     (4980,Core_kernel_Quickcheck_intf,"Core_kernel__Quickcheck_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Quickcheck);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$101);
    caml_call1(Expect_test_collector[4][1],cst_src_quickcheck_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$102,cst$33);
    function variant2(generator_012,generator_013)
     {var _bra_=0;
      function _brb_(size_016,random_017)
       {return [0,
                66,
                caml_call3
                 (Base_quickcheck_Generator[114],
                  generator_013,
                  size_016,
                  random_017)]}
      var
       _brc_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[113],_brb_)],_bra_];
      function _brd_(size_014,random_015)
       {return [0,
                65,
                caml_call3
                 (Base_quickcheck_Generator[114],
                  generator_012,
                  size_014,
                  random_015)]}
      var
       _bre_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[113],_brd_)],_brc_];
      return caml_call1(Base_quickcheck_Generator[56],_bre_)}
    function variant2$0(observer_005,observer_006)
     {function _bq$_(x_007,size_008,hash_009)
       {if(66 <= x_007[1])
         {var
           x_011=x_007[2],
           hash_009$0=caml_call2(Base[117],hash_009,66),
           hash_009$1=
            caml_call4
             (Base_quickcheck_Observer[33],
              observer_006,
              x_011,
              size_008,
              hash_009$0);
          return hash_009$1}
        var
         x_010=x_007[2],
         hash_009$2=caml_call2(Base[117],hash_009,65),
         hash_009$3=
          caml_call4
           (Base_quickcheck_Observer[33],
            observer_005,
            x_010,
            size_008,
            hash_009$2);
        return hash_009$3}
      return caml_call1(Base_quickcheck_Observer[32],_bq$_)}
    function variant2$1(shrinker_001,shrinker_002)
     {function _bq2_(param)
       {if(66 <= param[1])
         {var
           x_004=param[2],
           _bq3_=0,
           _bq4_=function(x_004){return [0,66,x_004]},
           _bq5_=caml_call2(Base_quickcheck_Shrinker[33],shrinker_002,x_004),
           _bq6_=[0,caml_call2(include$9[32],_bq5_,_bq4_),_bq3_];
          return caml_call1(include$9[66],_bq6_)}
        var x_003=param[2],_bq7_=0;
        function _bq8_(x_003){return [0,65,x_003]}
        var
         _bq9_=caml_call2(Base_quickcheck_Shrinker[33],shrinker_001,x_003),
         _bq__=[0,caml_call2(include$9[32],_bq9_,_bq8_),_bq7_];
        return caml_call1(include$9[66],_bq__)}
      return caml_call1(Base_quickcheck_Shrinker[32],_bq2_)}
    function variant3(generator_033,generator_034,generator_035)
     {var _bqV_=0;
      function _bqW_(size_040,random_041)
       {return [0,
                67,
                caml_call3
                 (Base_quickcheck_Generator[114],
                  generator_035,
                  size_040,
                  random_041)]}
      var
       _bqX_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[113],_bqW_)],_bqV_];
      function _bqY_(size_038,random_039)
       {return [0,
                66,
                caml_call3
                 (Base_quickcheck_Generator[114],
                  generator_034,
                  size_038,
                  random_039)]}
      var
       _bqZ_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[113],_bqY_)],_bqX_];
      function _bq0_(size_036,random_037)
       {return [0,
                65,
                caml_call3
                 (Base_quickcheck_Generator[114],
                  generator_033,
                  size_036,
                  random_037)]}
      var
       _bq1_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[113],_bq0_)],_bqZ_];
      return caml_call1(Base_quickcheck_Generator[56],_bq1_)}
    function variant3$0(observer_024,observer_025,observer_026)
     {function _bqU_(x_027,size_028,hash_029)
       {var switcher=x_027[1] - 65 | 0;
        switch(switcher)
         {case 0:
           var
            x_030=x_027[2],
            hash_029$0=caml_call2(Base[117],hash_029,65),
            hash_029$1=
             caml_call4
              (Base_quickcheck_Observer[33],
               observer_024,
               x_030,
               size_028,
               hash_029$0);
           return hash_029$1;
          case 1:
           var
            x_031=x_027[2],
            hash_029$2=caml_call2(Base[117],hash_029,66),
            hash_029$3=
             caml_call4
              (Base_quickcheck_Observer[33],
               observer_025,
               x_031,
               size_028,
               hash_029$2);
           return hash_029$3;
          default:
           var
            x_032=x_027[2],
            hash_029$4=caml_call2(Base[117],hash_029,67),
            hash_029$5=
             caml_call4
              (Base_quickcheck_Observer[33],
               observer_026,
               x_032,
               size_028,
               hash_029$4);
           return hash_029$5}}
      return caml_call1(Base_quickcheck_Observer[32],_bqU_)}
    function variant3$1(shrinker_018,shrinker_019,shrinker_020)
     {function _bqH_(param)
       {var switcher=param[1] - 65 | 0;
        switch(switcher)
         {case 0:
           var
            x_021=param[2],
            _bqI_=0,
            _bqJ_=function(x_021){return [0,65,x_021]},
            _bqK_=caml_call2(Base_quickcheck_Shrinker[33],shrinker_018,x_021),
            _bqL_=[0,caml_call2(include$9[32],_bqK_,_bqJ_),_bqI_];
           return caml_call1(include$9[66],_bqL_);
          case 1:
           var
            x_022=param[2],
            _bqM_=0,
            _bqN_=function(x_022){return [0,66,x_022]},
            _bqO_=caml_call2(Base_quickcheck_Shrinker[33],shrinker_019,x_022),
            _bqP_=[0,caml_call2(include$9[32],_bqO_,_bqN_),_bqM_];
           return caml_call1(include$9[66],_bqP_);
          default:
           var
            x_023=param[2],
            _bqQ_=0,
            _bqR_=function(x_023){return [0,67,x_023]},
            _bqS_=caml_call2(Base_quickcheck_Shrinker[33],shrinker_020,x_023),
            _bqT_=[0,caml_call2(include$9[32],_bqS_,_bqR_),_bqQ_];
           return caml_call1(include$9[66],_bqT_)}}
      return caml_call1(Base_quickcheck_Shrinker[32],_bqH_)}
    function variant4(generator_061,generator_062,generator_063,generator_064)
     {var _bqy_=0;
      function _bqz_(size_071,random_072)
       {return [0,
                68,
                caml_call3
                 (Base_quickcheck_Generator[114],
                  generator_064,
                  size_071,
                  random_072)]}
      var
       _bqA_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[113],_bqz_)],_bqy_];
      function _bqB_(size_069,random_070)
       {return [0,
                67,
                caml_call3
                 (Base_quickcheck_Generator[114],
                  generator_063,
                  size_069,
                  random_070)]}
      var
       _bqC_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[113],_bqB_)],_bqA_];
      function _bqD_(size_067,random_068)
       {return [0,
                66,
                caml_call3
                 (Base_quickcheck_Generator[114],
                  generator_062,
                  size_067,
                  random_068)]}
      var
       _bqE_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[113],_bqD_)],_bqC_];
      function _bqF_(size_065,random_066)
       {return [0,
                65,
                caml_call3
                 (Base_quickcheck_Generator[114],
                  generator_061,
                  size_065,
                  random_066)]}
      var
       _bqG_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[113],_bqF_)],_bqE_];
      return caml_call1(Base_quickcheck_Generator[56],_bqG_)}
    function variant4$0(observer_050,observer_051,observer_052,observer_053)
     {function _bqx_(x_054,size_055,hash_056)
       {var switcher=x_054[1] - 65 | 0;
        switch(switcher)
         {case 0:
           var
            x_057=x_054[2],
            hash_056$0=caml_call2(Base[117],hash_056,65),
            hash_056$1=
             caml_call4
              (Base_quickcheck_Observer[33],
               observer_050,
               x_057,
               size_055,
               hash_056$0);
           return hash_056$1;
          case 1:
           var
            x_058=x_054[2],
            hash_056$2=caml_call2(Base[117],hash_056,66),
            hash_056$3=
             caml_call4
              (Base_quickcheck_Observer[33],
               observer_051,
               x_058,
               size_055,
               hash_056$2);
           return hash_056$3;
          case 2:
           var
            x_059=x_054[2],
            hash_056$4=caml_call2(Base[117],hash_056,67),
            hash_056$5=
             caml_call4
              (Base_quickcheck_Observer[33],
               observer_052,
               x_059,
               size_055,
               hash_056$4);
           return hash_056$5;
          default:
           var
            x_060=x_054[2],
            hash_056$6=caml_call2(Base[117],hash_056,68),
            hash_056$7=
             caml_call4
              (Base_quickcheck_Observer[33],
               observer_053,
               x_060,
               size_055,
               hash_056$6);
           return hash_056$7}}
      return caml_call1(Base_quickcheck_Observer[32],_bqx_)}
    function variant4$1(shrinker_042,shrinker_043,shrinker_044,shrinker_045)
     {function _bqg_(param)
       {var switcher=param[1] - 65 | 0;
        switch(switcher)
         {case 0:
           var
            x_046=param[2],
            _bqh_=0,
            _bqi_=function(x_046){return [0,65,x_046]},
            _bqj_=caml_call2(Base_quickcheck_Shrinker[33],shrinker_042,x_046),
            _bqk_=[0,caml_call2(include$9[32],_bqj_,_bqi_),_bqh_];
           return caml_call1(include$9[66],_bqk_);
          case 1:
           var
            x_047=param[2],
            _bql_=0,
            _bqm_=function(x_047){return [0,66,x_047]},
            _bqn_=caml_call2(Base_quickcheck_Shrinker[33],shrinker_043,x_047),
            _bqo_=[0,caml_call2(include$9[32],_bqn_,_bqm_),_bql_];
           return caml_call1(include$9[66],_bqo_);
          case 2:
           var
            x_048=param[2],
            _bqp_=0,
            _bqq_=function(x_048){return [0,67,x_048]},
            _bqr_=caml_call2(Base_quickcheck_Shrinker[33],shrinker_044,x_048),
            _bqs_=[0,caml_call2(include$9[32],_bqr_,_bqq_),_bqp_];
           return caml_call1(include$9[66],_bqs_);
          default:
           var
            x_049=param[2],
            _bqt_=0,
            _bqu_=function(x_049){return [0,68,x_049]},
            _bqv_=caml_call2(Base_quickcheck_Shrinker[33],shrinker_045,x_049),
            _bqw_=[0,caml_call2(include$9[32],_bqv_,_bqu_),_bqt_];
           return caml_call1(include$9[66],_bqw_)}}
      return caml_call1(Base_quickcheck_Shrinker[32],_bqg_)}
    function variant5
     (generator_096,generator_097,generator_098,generator_099,generator_100)
     {var _bp7_=0;
      function _bp8_(size_109,random_110)
       {return [0,
                69,
                caml_call3
                 (Base_quickcheck_Generator[114],
                  generator_100,
                  size_109,
                  random_110)]}
      var
       _bp9_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[113],_bp8_)],_bp7_];
      function _bp__(size_107,random_108)
       {return [0,
                68,
                caml_call3
                 (Base_quickcheck_Generator[114],
                  generator_099,
                  size_107,
                  random_108)]}
      var
       _bp$_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[113],_bp__)],_bp9_];
      function _bqa_(size_105,random_106)
       {return [0,
                67,
                caml_call3
                 (Base_quickcheck_Generator[114],
                  generator_098,
                  size_105,
                  random_106)]}
      var
       _bqb_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[113],_bqa_)],_bp$_];
      function _bqc_(size_103,random_104)
       {return [0,
                66,
                caml_call3
                 (Base_quickcheck_Generator[114],
                  generator_097,
                  size_103,
                  random_104)]}
      var
       _bqd_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[113],_bqc_)],_bqb_];
      function _bqe_(size_101,random_102)
       {return [0,
                65,
                caml_call3
                 (Base_quickcheck_Generator[114],
                  generator_096,
                  size_101,
                  random_102)]}
      var
       _bqf_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[113],_bqe_)],_bqd_];
      return caml_call1(Base_quickcheck_Generator[56],_bqf_)}
    function variant5$0
     (observer_083,observer_084,observer_085,observer_086,observer_087)
     {function _bp6_(x_088,size_089,hash_090)
       {var switcher=x_088[1] - 65 | 0;
        switch(switcher)
         {case 0:
           var
            x_091=x_088[2],
            hash_090$0=caml_call2(Base[117],hash_090,65),
            hash_090$1=
             caml_call4
              (Base_quickcheck_Observer[33],
               observer_083,
               x_091,
               size_089,
               hash_090$0);
           return hash_090$1;
          case 1:
           var
            x_092=x_088[2],
            hash_090$2=caml_call2(Base[117],hash_090,66),
            hash_090$3=
             caml_call4
              (Base_quickcheck_Observer[33],
               observer_084,
               x_092,
               size_089,
               hash_090$2);
           return hash_090$3;
          case 2:
           var
            x_093=x_088[2],
            hash_090$4=caml_call2(Base[117],hash_090,67),
            hash_090$5=
             caml_call4
              (Base_quickcheck_Observer[33],
               observer_085,
               x_093,
               size_089,
               hash_090$4);
           return hash_090$5;
          case 3:
           var
            x_094=x_088[2],
            hash_090$6=caml_call2(Base[117],hash_090,68),
            hash_090$7=
             caml_call4
              (Base_quickcheck_Observer[33],
               observer_086,
               x_094,
               size_089,
               hash_090$6);
           return hash_090$7;
          default:
           var
            x_095=x_088[2],
            hash_090$8=caml_call2(Base[117],hash_090,69),
            hash_090$9=
             caml_call4
              (Base_quickcheck_Observer[33],
               observer_087,
               x_095,
               size_089,
               hash_090$8);
           return hash_090$9}}
      return caml_call1(Base_quickcheck_Observer[32],_bp6_)}
    function variant5$1
     (shrinker_073,shrinker_074,shrinker_075,shrinker_076,shrinker_077)
     {function _bpL_(param)
       {var switcher=param[1] - 65 | 0;
        switch(switcher)
         {case 0:
           var
            x_078=param[2],
            _bpM_=0,
            _bpN_=function(x_078){return [0,65,x_078]},
            _bpO_=caml_call2(Base_quickcheck_Shrinker[33],shrinker_073,x_078),
            _bpP_=[0,caml_call2(include$9[32],_bpO_,_bpN_),_bpM_];
           return caml_call1(include$9[66],_bpP_);
          case 1:
           var
            x_079=param[2],
            _bpQ_=0,
            _bpR_=function(x_079){return [0,66,x_079]},
            _bpS_=caml_call2(Base_quickcheck_Shrinker[33],shrinker_074,x_079),
            _bpT_=[0,caml_call2(include$9[32],_bpS_,_bpR_),_bpQ_];
           return caml_call1(include$9[66],_bpT_);
          case 2:
           var
            x_080=param[2],
            _bpU_=0,
            _bpV_=function(x_080){return [0,67,x_080]},
            _bpW_=caml_call2(Base_quickcheck_Shrinker[33],shrinker_075,x_080),
            _bpX_=[0,caml_call2(include$9[32],_bpW_,_bpV_),_bpU_];
           return caml_call1(include$9[66],_bpX_);
          case 3:
           var
            x_081=param[2],
            _bpY_=0,
            _bpZ_=function(x_081){return [0,68,x_081]},
            _bp0_=caml_call2(Base_quickcheck_Shrinker[33],shrinker_076,x_081),
            _bp1_=[0,caml_call2(include$9[32],_bp0_,_bpZ_),_bpY_];
           return caml_call1(include$9[66],_bp1_);
          default:
           var
            x_082=param[2],
            _bp2_=0,
            _bp3_=function(x_082){return [0,69,x_082]},
            _bp4_=caml_call2(Base_quickcheck_Shrinker[33],shrinker_077,x_082),
            _bp5_=[0,caml_call2(include$9[32],_bp4_,_bp3_),_bp2_];
           return caml_call1(include$9[66],_bp5_)}}
      return caml_call1(Base_quickcheck_Shrinker[32],_bpL_)}
    function variant6
     (generator_138,
      generator_139,
      generator_140,
      generator_141,
      generator_142,
      generator_143)
     {var _bpy_=0;
      function _bpz_(size_154,random_155)
       {return [0,
                70,
                caml_call3
                 (Base_quickcheck_Generator[114],
                  generator_143,
                  size_154,
                  random_155)]}
      var
       _bpA_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[113],_bpz_)],_bpy_];
      function _bpB_(size_152,random_153)
       {return [0,
                69,
                caml_call3
                 (Base_quickcheck_Generator[114],
                  generator_142,
                  size_152,
                  random_153)]}
      var
       _bpC_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[113],_bpB_)],_bpA_];
      function _bpD_(size_150,random_151)
       {return [0,
                68,
                caml_call3
                 (Base_quickcheck_Generator[114],
                  generator_141,
                  size_150,
                  random_151)]}
      var
       _bpE_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[113],_bpD_)],_bpC_];
      function _bpF_(size_148,random_149)
       {return [0,
                67,
                caml_call3
                 (Base_quickcheck_Generator[114],
                  generator_140,
                  size_148,
                  random_149)]}
      var
       _bpG_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[113],_bpF_)],_bpE_];
      function _bpH_(size_146,random_147)
       {return [0,
                66,
                caml_call3
                 (Base_quickcheck_Generator[114],
                  generator_139,
                  size_146,
                  random_147)]}
      var
       _bpI_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[113],_bpH_)],_bpG_];
      function _bpJ_(size_144,random_145)
       {return [0,
                65,
                caml_call3
                 (Base_quickcheck_Generator[114],
                  generator_138,
                  size_144,
                  random_145)]}
      var
       _bpK_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[113],_bpJ_)],_bpI_];
      return caml_call1(Base_quickcheck_Generator[56],_bpK_)}
    function variant6$0
     (observer_123,
      observer_124,
      observer_125,
      observer_126,
      observer_127,
      observer_128)
     {function _bpx_(x_129,size_130,hash_131)
       {var switcher=x_129[1] - 65 | 0;
        switch(switcher)
         {case 0:
           var
            x_132=x_129[2],
            hash_131$0=caml_call2(Base[117],hash_131,65),
            hash_131$1=
             caml_call4
              (Base_quickcheck_Observer[33],
               observer_123,
               x_132,
               size_130,
               hash_131$0);
           return hash_131$1;
          case 1:
           var
            x_133=x_129[2],
            hash_131$2=caml_call2(Base[117],hash_131,66),
            hash_131$3=
             caml_call4
              (Base_quickcheck_Observer[33],
               observer_124,
               x_133,
               size_130,
               hash_131$2);
           return hash_131$3;
          case 2:
           var
            x_134=x_129[2],
            hash_131$4=caml_call2(Base[117],hash_131,67),
            hash_131$5=
             caml_call4
              (Base_quickcheck_Observer[33],
               observer_125,
               x_134,
               size_130,
               hash_131$4);
           return hash_131$5;
          case 3:
           var
            x_135=x_129[2],
            hash_131$6=caml_call2(Base[117],hash_131,68),
            hash_131$7=
             caml_call4
              (Base_quickcheck_Observer[33],
               observer_126,
               x_135,
               size_130,
               hash_131$6);
           return hash_131$7;
          case 4:
           var
            x_136=x_129[2],
            hash_131$8=caml_call2(Base[117],hash_131,69),
            hash_131$9=
             caml_call4
              (Base_quickcheck_Observer[33],
               observer_127,
               x_136,
               size_130,
               hash_131$8);
           return hash_131$9;
          default:
           var
            x_137=x_129[2],
            hash_131$10=caml_call2(Base[117],hash_131,70),
            hash_131$11=
             caml_call4
              (Base_quickcheck_Observer[33],
               observer_128,
               x_137,
               size_130,
               hash_131$10);
           return hash_131$11}}
      return caml_call1(Base_quickcheck_Observer[32],_bpx_)}
    function variant6$1
     (shrinker_111,
      shrinker_112,
      shrinker_113,
      shrinker_114,
      shrinker_115,
      shrinker_116)
     {function _bo__(param)
       {var switcher=param[1] - 65 | 0;
        switch(switcher)
         {case 0:
           var
            x_117=param[2],
            _bo$_=0,
            _bpa_=function(x_117){return [0,65,x_117]},
            _bpb_=caml_call2(Base_quickcheck_Shrinker[33],shrinker_111,x_117),
            _bpc_=[0,caml_call2(include$9[32],_bpb_,_bpa_),_bo$_];
           return caml_call1(include$9[66],_bpc_);
          case 1:
           var
            x_118=param[2],
            _bpd_=0,
            _bpe_=function(x_118){return [0,66,x_118]},
            _bpf_=caml_call2(Base_quickcheck_Shrinker[33],shrinker_112,x_118),
            _bpg_=[0,caml_call2(include$9[32],_bpf_,_bpe_),_bpd_];
           return caml_call1(include$9[66],_bpg_);
          case 2:
           var
            x_119=param[2],
            _bph_=0,
            _bpi_=function(x_119){return [0,67,x_119]},
            _bpj_=caml_call2(Base_quickcheck_Shrinker[33],shrinker_113,x_119),
            _bpk_=[0,caml_call2(include$9[32],_bpj_,_bpi_),_bph_];
           return caml_call1(include$9[66],_bpk_);
          case 3:
           var
            x_120=param[2],
            _bpl_=0,
            _bpm_=function(x_120){return [0,68,x_120]},
            _bpn_=caml_call2(Base_quickcheck_Shrinker[33],shrinker_114,x_120),
            _bpo_=[0,caml_call2(include$9[32],_bpn_,_bpm_),_bpl_];
           return caml_call1(include$9[66],_bpo_);
          case 4:
           var
            x_121=param[2],
            _bpp_=0,
            _bpq_=function(x_121){return [0,69,x_121]},
            _bpr_=caml_call2(Base_quickcheck_Shrinker[33],shrinker_115,x_121),
            _bps_=[0,caml_call2(include$9[32],_bpr_,_bpq_),_bpp_];
           return caml_call1(include$9[66],_bps_);
          default:
           var
            x_122=param[2],
            _bpt_=0,
            _bpu_=function(x_122){return [0,70,x_122]},
            _bpv_=caml_call2(Base_quickcheck_Shrinker[33],shrinker_116,x_122),
            _bpw_=[0,caml_call2(include$9[32],_bpv_,_bpu_),_bpt_];
           return caml_call1(include$9[66],_bpw_)}}
      return caml_call1(Base_quickcheck_Shrinker[32],_bo__)}
    function tuple2(generator_166,generator_167)
     {function _bo8_(size_168,random_169)
       {var
         _bo9_=
          caml_call3
           (Base_quickcheck_Generator[114],generator_167,size_168,random_169);
        return [0,
                caml_call3
                 (Base_quickcheck_Generator[114],
                  generator_166,
                  size_168,
                  random_169),
                _bo9_]}
      return caml_call1(Base_quickcheck_Generator[113],_bo8_)}
    function tuple2$0(observer_160,observer_161)
     {function _bo7_(param,size_164,hash_165)
       {var
         x_163=param[2],
         x_162=param[1],
         hash_165$0=
          caml_call4
           (Base_quickcheck_Observer[33],observer_160,x_162,size_164,hash_165),
         hash_165$1=
          caml_call4
           (Base_quickcheck_Observer[33],
            observer_161,
            x_163,
            size_164,
            hash_165$0);
        return hash_165$1}
      return caml_call1(Base_quickcheck_Observer[32],_bo7_)}
    function tuple2$1(shrinker_156,shrinker_157)
     {function _boZ_(param)
       {var x_159=param[2],x_158=param[1],_bo0_=0;
        function _bo1_(x_159){return [0,x_158,x_159]}
        var
         _bo2_=caml_call2(Base_quickcheck_Shrinker[33],shrinker_157,x_159),
         _bo3_=[0,caml_call2(include$9[32],_bo2_,_bo1_),_bo0_];
        function _bo4_(x_158){return [0,x_158,x_159]}
        var
         _bo5_=caml_call2(Base_quickcheck_Shrinker[33],shrinker_156,x_158),
         _bo6_=[0,caml_call2(include$9[32],_bo5_,_bo4_),_bo3_];
        return caml_call1(include$9[66],_bo6_)}
      return caml_call1(Base_quickcheck_Shrinker[32],_boZ_)}
    function tuple3(generator_184,generator_185,generator_186)
     {function _boW_(size_187,random_188)
       {var
         _boX_=
          caml_call3
           (Base_quickcheck_Generator[114],generator_186,size_187,random_188),
         _boY_=
          caml_call3
           (Base_quickcheck_Generator[114],generator_185,size_187,random_188);
        return [0,
                caml_call3
                 (Base_quickcheck_Generator[114],
                  generator_184,
                  size_187,
                  random_188),
                _boY_,
                _boX_]}
      return caml_call1(Base_quickcheck_Generator[113],_boW_)}
    function tuple3$0(observer_176,observer_177,observer_178)
     {function _boV_(param,size_182,hash_183)
       {var
         x_181=param[3],
         x_180=param[2],
         x_179=param[1],
         hash_183$0=
          caml_call4
           (Base_quickcheck_Observer[33],observer_176,x_179,size_182,hash_183),
         hash_183$1=
          caml_call4
           (Base_quickcheck_Observer[33],
            observer_177,
            x_180,
            size_182,
            hash_183$0),
         hash_183$2=
          caml_call4
           (Base_quickcheck_Observer[33],
            observer_178,
            x_181,
            size_182,
            hash_183$1);
        return hash_183$2}
      return caml_call1(Base_quickcheck_Observer[32],_boV_)}
    function tuple3$1(shrinker_170,shrinker_171,shrinker_172)
     {function _boK_(param)
       {var x_175=param[3],x_174=param[2],x_173=param[1],_boL_=0;
        function _boM_(x_175){return [0,x_173,x_174,x_175]}
        var
         _boN_=caml_call2(Base_quickcheck_Shrinker[33],shrinker_172,x_175),
         _boO_=[0,caml_call2(include$9[32],_boN_,_boM_),_boL_];
        function _boP_(x_174){return [0,x_173,x_174,x_175]}
        var
         _boQ_=caml_call2(Base_quickcheck_Shrinker[33],shrinker_171,x_174),
         _boR_=[0,caml_call2(include$9[32],_boQ_,_boP_),_boO_];
        function _boS_(x_173){return [0,x_173,x_174,x_175]}
        var
         _boT_=caml_call2(Base_quickcheck_Shrinker[33],shrinker_170,x_173),
         _boU_=[0,caml_call2(include$9[32],_boT_,_boS_),_boR_];
        return caml_call1(include$9[66],_boU_)}
      return caml_call1(Base_quickcheck_Shrinker[32],_boK_)}
    function tuple4(generator_207,generator_208,generator_209,generator_210)
     {function _boG_(size_211,random_212)
       {var
         _boH_=
          caml_call3
           (Base_quickcheck_Generator[114],generator_210,size_211,random_212),
         _boI_=
          caml_call3
           (Base_quickcheck_Generator[114],generator_209,size_211,random_212),
         _boJ_=
          caml_call3
           (Base_quickcheck_Generator[114],generator_208,size_211,random_212);
        return [0,
                caml_call3
                 (Base_quickcheck_Generator[114],
                  generator_207,
                  size_211,
                  random_212),
                _boJ_,
                _boI_,
                _boH_]}
      return caml_call1(Base_quickcheck_Generator[113],_boG_)}
    function tuple4$0(observer_197,observer_198,observer_199,observer_200)
     {function _boF_(param,size_205,hash_206)
       {var
         x_204=param[4],
         x_203=param[3],
         x_202=param[2],
         x_201=param[1],
         hash_206$0=
          caml_call4
           (Base_quickcheck_Observer[33],observer_197,x_201,size_205,hash_206),
         hash_206$1=
          caml_call4
           (Base_quickcheck_Observer[33],
            observer_198,
            x_202,
            size_205,
            hash_206$0),
         hash_206$2=
          caml_call4
           (Base_quickcheck_Observer[33],
            observer_199,
            x_203,
            size_205,
            hash_206$1),
         hash_206$3=
          caml_call4
           (Base_quickcheck_Observer[33],
            observer_200,
            x_204,
            size_205,
            hash_206$2);
        return hash_206$3}
      return caml_call1(Base_quickcheck_Observer[32],_boF_)}
    function tuple4$1(shrinker_189,shrinker_190,shrinker_191,shrinker_192)
     {function _bor_(param)
       {var
         x_196=param[4],
         x_195=param[3],
         x_194=param[2],
         x_193=param[1],
         _bos_=0;
        function _bot_(x_196){return [0,x_193,x_194,x_195,x_196]}
        var
         _bou_=caml_call2(Base_quickcheck_Shrinker[33],shrinker_192,x_196),
         _bov_=[0,caml_call2(include$9[32],_bou_,_bot_),_bos_];
        function _bow_(x_195){return [0,x_193,x_194,x_195,x_196]}
        var
         _box_=caml_call2(Base_quickcheck_Shrinker[33],shrinker_191,x_195),
         _boy_=[0,caml_call2(include$9[32],_box_,_bow_),_bov_];
        function _boz_(x_194){return [0,x_193,x_194,x_195,x_196]}
        var
         _boA_=caml_call2(Base_quickcheck_Shrinker[33],shrinker_190,x_194),
         _boB_=[0,caml_call2(include$9[32],_boA_,_boz_),_boy_];
        function _boC_(x_193){return [0,x_193,x_194,x_195,x_196]}
        var
         _boD_=caml_call2(Base_quickcheck_Shrinker[33],shrinker_189,x_193),
         _boE_=[0,caml_call2(include$9[32],_boD_,_boC_),_boB_];
        return caml_call1(include$9[66],_boE_)}
      return caml_call1(Base_quickcheck_Shrinker[32],_bor_)}
    function tuple5
     (generator_235,generator_236,generator_237,generator_238,generator_239)
     {function _bom_(size_240,random_241)
       {var
         _bon_=
          caml_call3
           (Base_quickcheck_Generator[114],generator_239,size_240,random_241),
         _boo_=
          caml_call3
           (Base_quickcheck_Generator[114],generator_238,size_240,random_241),
         _bop_=
          caml_call3
           (Base_quickcheck_Generator[114],generator_237,size_240,random_241),
         _boq_=
          caml_call3
           (Base_quickcheck_Generator[114],generator_236,size_240,random_241);
        return [0,
                caml_call3
                 (Base_quickcheck_Generator[114],
                  generator_235,
                  size_240,
                  random_241),
                _boq_,
                _bop_,
                _boo_,
                _bon_]}
      return caml_call1(Base_quickcheck_Generator[113],_bom_)}
    function tuple5$0
     (observer_223,observer_224,observer_225,observer_226,observer_227)
     {function _bol_(param,size_233,hash_234)
       {var
         x_232=param[5],
         x_231=param[4],
         x_230=param[3],
         x_229=param[2],
         x_228=param[1],
         hash_234$0=
          caml_call4
           (Base_quickcheck_Observer[33],observer_223,x_228,size_233,hash_234),
         hash_234$1=
          caml_call4
           (Base_quickcheck_Observer[33],
            observer_224,
            x_229,
            size_233,
            hash_234$0),
         hash_234$2=
          caml_call4
           (Base_quickcheck_Observer[33],
            observer_225,
            x_230,
            size_233,
            hash_234$1),
         hash_234$3=
          caml_call4
           (Base_quickcheck_Observer[33],
            observer_226,
            x_231,
            size_233,
            hash_234$2),
         hash_234$4=
          caml_call4
           (Base_quickcheck_Observer[33],
            observer_227,
            x_232,
            size_233,
            hash_234$3);
        return hash_234$4}
      return caml_call1(Base_quickcheck_Observer[32],_bol_)}
    function tuple5$1
     (shrinker_213,shrinker_214,shrinker_215,shrinker_216,shrinker_217)
     {function _bn6_(param)
       {var
         x_222=param[5],
         x_221=param[4],
         x_220=param[3],
         x_219=param[2],
         x_218=param[1],
         _bn7_=0;
        function _bn8_(x_222){return [0,x_218,x_219,x_220,x_221,x_222]}
        var
         _bn9_=caml_call2(Base_quickcheck_Shrinker[33],shrinker_217,x_222),
         _bn__=[0,caml_call2(include$9[32],_bn9_,_bn8_),_bn7_];
        function _bn$_(x_221){return [0,x_218,x_219,x_220,x_221,x_222]}
        var
         _boa_=caml_call2(Base_quickcheck_Shrinker[33],shrinker_216,x_221),
         _bob_=[0,caml_call2(include$9[32],_boa_,_bn$_),_bn__];
        function _boc_(x_220){return [0,x_218,x_219,x_220,x_221,x_222]}
        var
         _bod_=caml_call2(Base_quickcheck_Shrinker[33],shrinker_215,x_220),
         _boe_=[0,caml_call2(include$9[32],_bod_,_boc_),_bob_];
        function _bof_(x_219){return [0,x_218,x_219,x_220,x_221,x_222]}
        var
         _bog_=caml_call2(Base_quickcheck_Shrinker[33],shrinker_214,x_219),
         _boh_=[0,caml_call2(include$9[32],_bog_,_bof_),_boe_];
        function _boi_(x_218){return [0,x_218,x_219,x_220,x_221,x_222]}
        var
         _boj_=caml_call2(Base_quickcheck_Shrinker[33],shrinker_213,x_218),
         _bok_=[0,caml_call2(include$9[32],_boj_,_boi_),_boh_];
        return caml_call1(include$9[66],_bok_)}
      return caml_call1(Base_quickcheck_Shrinker[32],_bn6_)}
    function tuple6
     (generator_268,
      generator_269,
      generator_270,
      generator_271,
      generator_272,
      generator_273)
     {function _bn0_(size_274,random_275)
       {var
         _bn1_=
          caml_call3
           (Base_quickcheck_Generator[114],generator_273,size_274,random_275),
         _bn2_=
          caml_call3
           (Base_quickcheck_Generator[114],generator_272,size_274,random_275),
         _bn3_=
          caml_call3
           (Base_quickcheck_Generator[114],generator_271,size_274,random_275),
         _bn4_=
          caml_call3
           (Base_quickcheck_Generator[114],generator_270,size_274,random_275),
         _bn5_=
          caml_call3
           (Base_quickcheck_Generator[114],generator_269,size_274,random_275);
        return [0,
                caml_call3
                 (Base_quickcheck_Generator[114],
                  generator_268,
                  size_274,
                  random_275),
                _bn5_,
                _bn4_,
                _bn3_,
                _bn2_,
                _bn1_]}
      return caml_call1(Base_quickcheck_Generator[113],_bn0_)}
    function tuple6$0
     (observer_254,
      observer_255,
      observer_256,
      observer_257,
      observer_258,
      observer_259)
     {function _bnZ_(param,size_266,hash_267)
       {var
         x_265=param[6],
         x_264=param[5],
         x_263=param[4],
         x_262=param[3],
         x_261=param[2],
         x_260=param[1],
         hash_267$0=
          caml_call4
           (Base_quickcheck_Observer[33],observer_254,x_260,size_266,hash_267),
         hash_267$1=
          caml_call4
           (Base_quickcheck_Observer[33],
            observer_255,
            x_261,
            size_266,
            hash_267$0),
         hash_267$2=
          caml_call4
           (Base_quickcheck_Observer[33],
            observer_256,
            x_262,
            size_266,
            hash_267$1),
         hash_267$3=
          caml_call4
           (Base_quickcheck_Observer[33],
            observer_257,
            x_263,
            size_266,
            hash_267$2),
         hash_267$4=
          caml_call4
           (Base_quickcheck_Observer[33],
            observer_258,
            x_264,
            size_266,
            hash_267$3),
         hash_267$5=
          caml_call4
           (Base_quickcheck_Observer[33],
            observer_259,
            x_265,
            size_266,
            hash_267$4);
        return hash_267$5}
      return caml_call1(Base_quickcheck_Observer[32],_bnZ_)}
    function tuple6$1
     (shrinker_242,
      shrinker_243,
      shrinker_244,
      shrinker_245,
      shrinker_246,
      shrinker_247)
     {function _bnF_(param)
       {var
         x_253=param[6],
         x_252=param[5],
         x_251=param[4],
         x_250=param[3],
         x_249=param[2],
         x_248=param[1],
         _bnG_=0;
        function _bnH_(x_253){return [0,x_248,x_249,x_250,x_251,x_252,x_253]}
        var
         _bnI_=caml_call2(Base_quickcheck_Shrinker[33],shrinker_247,x_253),
         _bnJ_=[0,caml_call2(include$9[32],_bnI_,_bnH_),_bnG_];
        function _bnK_(x_252){return [0,x_248,x_249,x_250,x_251,x_252,x_253]}
        var
         _bnL_=caml_call2(Base_quickcheck_Shrinker[33],shrinker_246,x_252),
         _bnM_=[0,caml_call2(include$9[32],_bnL_,_bnK_),_bnJ_];
        function _bnN_(x_251){return [0,x_248,x_249,x_250,x_251,x_252,x_253]}
        var
         _bnO_=caml_call2(Base_quickcheck_Shrinker[33],shrinker_245,x_251),
         _bnP_=[0,caml_call2(include$9[32],_bnO_,_bnN_),_bnM_];
        function _bnQ_(x_250){return [0,x_248,x_249,x_250,x_251,x_252,x_253]}
        var
         _bnR_=caml_call2(Base_quickcheck_Shrinker[33],shrinker_244,x_250),
         _bnS_=[0,caml_call2(include$9[32],_bnR_,_bnQ_),_bnP_];
        function _bnT_(x_249){return [0,x_248,x_249,x_250,x_251,x_252,x_253]}
        var
         _bnU_=caml_call2(Base_quickcheck_Shrinker[33],shrinker_243,x_249),
         _bnV_=[0,caml_call2(include$9[32],_bnU_,_bnT_),_bnS_];
        function _bnW_(x_248){return [0,x_248,x_249,x_250,x_251,x_252,x_253]}
        var
         _bnX_=caml_call2(Base_quickcheck_Shrinker[33],shrinker_242,x_248),
         _bnY_=[0,caml_call2(include$9[32],_bnX_,_bnW_),_bnV_];
        return caml_call1(include$9[66],_bnY_)}
      return caml_call1(Base_quickcheck_Shrinker[32],_bnF_)}
    function fn2(observer_282,observer_283,generator_284)
     {var
       _bnE_=
        caml_call2(Base_quickcheck_Generator[21],observer_283,generator_284);
      return caml_call2(Base_quickcheck_Generator[21],observer_282,_bnE_)}
    function fn3(observer_293,observer_294,observer_295,generator_296)
     {var
       _bnC_=
        caml_call2(Base_quickcheck_Generator[21],observer_295,generator_296),
       _bnD_=caml_call2(Base_quickcheck_Generator[21],observer_294,_bnC_);
      return caml_call2(Base_quickcheck_Generator[21],observer_293,_bnD_)}
    function fn4
     (observer_307,observer_308,observer_309,observer_310,generator_311)
     {var
       _bnz_=
        caml_call2(Base_quickcheck_Generator[21],observer_310,generator_311),
       _bnA_=caml_call2(Base_quickcheck_Generator[21],observer_309,_bnz_),
       _bnB_=caml_call2(Base_quickcheck_Generator[21],observer_308,_bnA_);
      return caml_call2(Base_quickcheck_Generator[21],observer_307,_bnB_)}
    function fn5
     (observer_324,
      observer_325,
      observer_326,
      observer_327,
      observer_328,
      generator_329)
     {var
       _bnv_=
        caml_call2(Base_quickcheck_Generator[21],observer_328,generator_329),
       _bnw_=caml_call2(Base_quickcheck_Generator[21],observer_327,_bnv_),
       _bnx_=caml_call2(Base_quickcheck_Generator[21],observer_326,_bnw_),
       _bny_=caml_call2(Base_quickcheck_Generator[21],observer_325,_bnx_);
      return caml_call2(Base_quickcheck_Generator[21],observer_324,_bny_)}
    function fn6
     (observer_344,
      observer_345,
      observer_346,
      observer_347,
      observer_348,
      observer_349,
      generator_350)
     {var
       _bnq_=
        caml_call2(Base_quickcheck_Generator[21],observer_349,generator_350),
       _bnr_=caml_call2(Base_quickcheck_Generator[21],observer_348,_bnq_),
       _bns_=caml_call2(Base_quickcheck_Generator[21],observer_347,_bnr_),
       _bnt_=caml_call2(Base_quickcheck_Generator[21],observer_346,_bns_),
       _bnu_=caml_call2(Base_quickcheck_Generator[21],observer_345,_bnt_);
      return caml_call2(Base_quickcheck_Generator[21],observer_344,_bnu_)}
    var
     opaque=Base_quickcheck_Observer[1],
     bool=Base_quickcheck_Observer[3],
     char$0=Base_quickcheck_Observer[4],
     int$0=Base_quickcheck_Observer[6],
     fn=Base_quickcheck_Observer[23],
     of_hash_fold=Base_quickcheck_Observer[28],
     unmap=Base_quickcheck_Observer[29],
     fixed_point=Base_quickcheck_Observer[30],
     create$6=Base_quickcheck_Observer[32],
     observe=Base_quickcheck_Observer[33];
    function of_hash(M){return caml_call1(of_hash_fold,M[1])}
    function of_predicate(a,b,f)
     {function _bnp_(x){return caml_call1(f,x)?[0,65,x]:[0,66,x]}
      return caml_call2(unmap,variant2$0(a,b),_bnp_)}
    function singleton(param){return opaque}
    function doubleton(f)
     {var _bno_=singleton(0);return of_predicate(singleton(0),_bno_,f)}
    function enum$0(param,f){return caml_call2(unmap,int$0,f)}
    function of_list$1(list,equal)
     {function f(x)
       {function _bnn_(param,y){return caml_call2(equal,x,y)}
        var match=caml_call2(include$23[68],list,_bnn_);
        if(match){var match$0=match[1],i=match$0[1];return i}
        return caml_call1(_bl_,cst_Quickcheck_Observer_of_lis)}
      return enum$0(caml_call1(include$23[7],list),f)}
    function of_fun(f)
     {return caml_call1
              (create$6,
               function(x,size,hash)
                {return caml_call4(observe,caml_call1(f,0),x,size,hash)})}
    function comparison(compare,eq,lt,gt)
     {function _bnm_(x)
       {var c=caml_call2(compare,x,eq);
        return caml_call2(_a2_,c,0)
                ?[0,65,x]
                :caml_call2(_a6_,c,0)?[0,67,x]:[0,66,x]}
      return caml_call2(unmap,variant3$0(lt,singleton(0),gt),_bnm_)}
    var
     bool$0=Base_quickcheck_Generator[2],
     char$1=Base_quickcheck_Generator[3],
     int$1=Base_quickcheck_Generator[5],
     list=Base_quickcheck_Generator[13],
     fn$0=Base_quickcheck_Generator[21],
     of_list$2=Base_quickcheck_Generator[26],
     union$0=Base_quickcheck_Generator[27],
     both=Base_quickcheck_Generator[28],
     symbol$0=Base_quickcheck_Generator[29],
     symbol$1=Base_quickcheck_Generator[30],
     symbol$2=Base_quickcheck_Generator[31],
     apply=Base_quickcheck_Generator[32],
     map2=Base_quickcheck_Generator[33],
     map3=Base_quickcheck_Generator[34],
     Applicative_infix=Base_quickcheck_Generator[35],
     symbol_bind=Base_quickcheck_Generator[36],
     symbol_map=Base_quickcheck_Generator[37],
     include$28=Base_quickcheck_Generator[38],
     bind$0=Base_quickcheck_Generator[39],
     return$1=Base_quickcheck_Generator[40],
     map$6=Base_quickcheck_Generator[41],
     join=Base_quickcheck_Generator[42],
     ignore_m=Base_quickcheck_Generator[43],
     all=Base_quickcheck_Generator[44],
     all_unit=Base_quickcheck_Generator[45],
     Let_syntax=Base_quickcheck_Generator[46],
     size=Base_quickcheck_Generator[47],
     with_size=Base_quickcheck_Generator[48],
     filter$2=Base_quickcheck_Generator[50],
     filter_map$1=Base_quickcheck_Generator[51],
     recursive_union=Base_quickcheck_Generator[52],
     fixed_point$0=Base_quickcheck_Generator[53],
     weighted_union=Base_quickcheck_Generator[56],
     weighted_recursive_union=Base_quickcheck_Generator[57],
     small_non_negative_int=Base_quickcheck_Generator[58],
     small_positive_int=Base_quickcheck_Generator[59],
     char_lowercase=Base_quickcheck_Generator[94],
     char_uppercase=Base_quickcheck_Generator[95],
     char_digit=Base_quickcheck_Generator[96],
     char_alpha=Base_quickcheck_Generator[97],
     char_alphanum=Base_quickcheck_Generator[98],
     char_whitespace=Base_quickcheck_Generator[99],
     char_print=Base_quickcheck_Generator[100],
     list_non_empty=Base_quickcheck_Generator[108],
     create$7=Base_quickcheck_Generator[113],
     generate=Base_quickcheck_Generator[114],
     singleton$0=Let_syntax[1],
     _ux_=Base_quickcheck_Generator[109];
    function doubleton$0(x,y)
     {return caml_call1
              (create$7,
               function(param,random)
                {return caml_call1(Splittable_random[2],random)?x:y})}
    function of_fun$0(f)
     {return caml_call1
              (create$7,
               function(size,random)
                {return caml_call3(generate,caml_call1(f,0),size,random)})}
    function of_sequence(p,seq)
     {var
       _bnh_=caml_call2(include$13[10],p,0.),
       _bni_=_bnh_ || caml_call2(include$13[12],p,1.);
      if(_bni_)caml_call1(_bl_,caml_call2(_fw_,_uy_,p));
      function _bnj_(param)
       {return caml_call1(_bl_,cst_Generator_of_sequence_ran_)}
      return caml_call4
              (_jZ_,
               seq,
               0,
               function(param,x,k)
                {var
                  _bnk_=of_fun$0(k),
                  _bnl_=[0,[0,caml_call2(_bd_,1.,p),_bnk_],0];
                 return caml_call1
                         (weighted_union,[0,[0,p,caml_call1(singleton$0,x)],_bnl_])},
               _bnj_)}
    function bounded_geometric(p,maximum,init)
     {if(caml_call2(_a5_,init,maximum))return caml_call1(singleton$0,maximum);
      var
       _bne_=0,
       _bnf_=
        of_fun$0
         (function(param)
           {return bounded_geometric(p,maximum,caml_call2(_aJ_,init,1))}),
       _bng_=[0,[0,caml_call2(_bd_,1.,p),_bnf_],_bne_];
      return caml_call1
              (weighted_union,[0,[0,p,caml_call1(singleton$0,init)],_bng_])}
    function geometric(p,init)
     {return bounded_geometric(p,include$29[90],init)}
    function list_with_length(length,t){return caml_call2(_ux_,t,length)}
    function compare_fn(dom)
     {function _bnc_(get_index,x,y)
       {var b_352=caml_call1(get_index,y),a_351=caml_call1(get_index,x);
        return caml_call2(compare,a_351,b_352)}
      var _bnd_=caml_call2(fn$0,dom,int$1);
      return caml_call2(Let_syntax[3],_bnd_,_bnc_)}
    function equal_fn(dom)
     {function _bm$_(cmp,x,y)
       {var _bnb_=caml_call2(cmp,x,y);
        return caml_call2(include$29[14],_bnb_,0)}
      var _bna_=compare_fn(dom);
      return caml_call2(Let_syntax[3],_bna_,_bm$_)}
    var
     atomic=Base_quickcheck_Shrinker[1],
     bool$1=Base_quickcheck_Shrinker[3],
     char$2=Base_quickcheck_Shrinker[4],
     map$7=Base_quickcheck_Shrinker[27],
     filter$3=Base_quickcheck_Shrinker[28],
     filter_map$2=Base_quickcheck_Shrinker[29],
     fixed_point$1=Base_quickcheck_Shrinker[30],
     create$8=Base_quickcheck_Shrinker[32],
     shrink=Base_quickcheck_Shrinker[33];
    function empty(param){return atomic}
    var symbol_bind$0=include$28[1],symbol_map$0=include$28[2];
    function Configure(Config)
     {var
       default_seed=Config[1],
       default_sizes=Config[2],
       default_trial_count=Config[3],
       default_can_generate_trial_cou=Config[4],
       default_shrink_attempts=Config[5],
       nondeterministic_state=
        [246,function(_bm__){return caml_call2(Base_Random[18][3],0,0)}];
      function random_state_of_seed(seed)
       {if(typeof seed === "number")
         {var
           _bm7_=caml_obj_tag(nondeterministic_state),
           _bm8_=
            250 === _bm7_
             ?nondeterministic_state[1]
             :246 === _bm7_
               ?caml_call1(CamlinternalLazy[2],nondeterministic_state)
               :nondeterministic_state;
          return caml_call1(Splittable_random[1][1],_bm8_)}
        var str=seed[2],_bm9_=caml_call1(_as_,str);
        return caml_call1(Splittable_random[1][2],_bm9_)}
      function make_seed(seed)
       {if(typeof seed === "number")return 0;
        var string=seed[2];
        return [0,string]}
      function make_shrink_count(param)
       {if(typeof param === "number")return include$29[90];
        var n=param[2];
        return n}
      function make_config(seed,sizes,trials,shrink_attempts)
       {var
         _bm4_=caml_call2(include$30[41],sizes,default_sizes),
         _bm5_=
          make_shrink_count
           (caml_call2(include$30[41],shrink_attempts,default_shrink_attempts)),
         _bm6_=caml_call2(include$30[41],trials,default_trial_count);
        return [0,
                make_seed(caml_call2(include$30[41],seed,default_seed)),
                _bm6_,
                _bm5_,
                _bm4_]}
      function make_test_m(quickcheck_generator,shrinker,sexp_of)
       {var quickcheck_shrinker=caml_call2(include$30[41],shrinker,atomic);
        function _bm3_(param){return _uz_}
        var sexp_of_t=caml_call2(include$30[41],sexp_of,_bm3_);
        return [0,sexp_of_t,quickcheck_generator,quickcheck_shrinker]}
      function random_value(opt,_bm2_,gen)
       {if(opt)var sth=opt[1],seed=sth;else var seed=default_seed;
        if(_bm2_)var sth$0=_bm2_[1],size=sth$0;else var size=30;
        var random=random_state_of_seed(seed);
        return caml_call3(generate,gen,size,random)}
      function random_sequence(seed,sizes,gen)
       {var
         config=make_config(seed,sizes,[0,include$29[90]],0),
         return$0=[0,_i4_],
         _bmZ_=0,
         _bm0_=[0,config];
        function _bm1_(sequence){return$0[1] = sequence;return 0}
        caml_call4(Base_quickcheck_Test[7],_bm1_,_bm0_,_bmZ_,gen);
        return return$0[1]}
      function iter(seed,sizes,trials,gen,f)
       {var config=make_config(seed,sizes,trials,0),_bmW_=0,_bmX_=[0,config];
        function _bmY_(sequence){return caml_call2(_iB_,sequence,f)}
        return caml_call4(Base_quickcheck_Test[7],_bmY_,_bmX_,_bmW_,gen)}
      function test
       (seed,sizes,trials,shrinker,shrink_attempts,sexp_of,examples,gen,f)
       {var
         config=make_config(seed,sizes,trials,shrink_attempts),
         test_m=make_test_m(gen,shrinker,sexp_of);
        return caml_call4
                (Base_quickcheck_Test[4],f,[0,config],examples,test_m)}
      function test_or_error
       (seed,sizes,trials,shrinker,shrink_attempts,sexp_of,examples,gen,f)
       {var
         config=make_config(seed,sizes,trials,shrink_attempts),
         test_m=make_test_m(gen,shrinker,sexp_of);
        return caml_call4
                (Base_quickcheck_Test[3],f,[0,config],examples,test_m)}
      function test_distinct_values
       (seed,sizes,sexp_of,gen,trials,distinct_values,compare)
       {var S=caml_call1(Stdlib_set[1],[0,compare]);
        return caml_call1
                (_fi_,
                 function(r)
                  {var set=[0,S[1]];
                   iter
                    (seed,
                     sizes,
                     [0,trials],
                     gen,
                     function(elt)
                      {set[1] = caml_call2(S[4],elt,set[1]);
                       var
                        _bmV_=
                         caml_call2(_a7_,caml_call1(S[22],set[1]),distinct_values);
                       return _bmV_?caml_call1(r,0):_bmV_});
                   var _bmU_=set[1],actual_count=caml_call1(S[22],_bmU_);
                   if(sexp_of)
                    var
                     sexp_of_elt=sexp_of[1],
                     values=
                      [0,caml_call2(_X_,sexp_of_elt,caml_call1(S[23],_bmU_))];
                   else
                    var values=0;
                   var match=0;
                   if(values)
                    var
                     v=values[1],
                     _bmP_=[0,[1,[0,_uA_,[0,caml_call1(Base[84][4],v),0]]],match];
                   else
                    var _bmP_=match;
                   var
                    _bmQ_=
                     [0,
                      [1,[0,_uB_,[0,caml_call1(sexp_of_t$0,actual_count),0]]],
                      _bmP_],
                    _bmR_=
                     [0,
                      [1,[0,_uC_,[0,caml_call1(sexp_of_t$0,distinct_values),0]]],
                      _bmQ_],
                    _bmS_=
                     [0,[1,[0,_uD_,[0,caml_call1(sexp_of_t$0,trials),0]]],_bmR_],
                    res=
                     [0,
                      caml_call1
                       (Sexplib0_Sexp_conv[7],cst_insufficient_distinct_valu),
                      _bmS_],
                    switch$0=0;
                   if(res && ! res[2]){var h=res[1],_bmT_=h;switch$0 = 1}
                   if(! switch$0)var _bmT_=[1,res];
                   return caml_call1(_bn_,_bmT_)})}
      function test_can_generate(seed,sizes,opt,sexp_of,gen,f)
       {if(opt)
         var sth=opt[1],trials=sth;
        else
         var trials=default_can_generate_trial_cou;
        var r=[0,0];
        function _bmN_(return$0)
         {iter
           (seed,
            sizes,
            [0,trials],
            gen,
            function(x)
             {return caml_call1(f,x)
                      ?caml_call1(return$0,-895996764)
                      :(r[1] = [0,x,r[1]],0)});
          return 501585681}
        var match=caml_call1(Base_With_return[1],_bmN_);
        if(501585681 <= match)
         {if(sexp_of)
           {var
             sexp_of_value=sexp_of[1],
             _bmO_=[0,[1,[0,_uE_,[0,caml_call2(_X_,sexp_of_value,r[1]),0]]],0];
            return caml_call1
                    (_od_,
                     [1,
                      [0,
                       caml_call1(Sexplib0_Sexp_conv[7],cst_cannot_generate),
                       _bmO_]])}
          return caml_call1(_bl_,cst_cannot_generate$0)}
        return 0}
      return [0,
              default_seed,
              default_sizes,
              default_trial_count,
              default_can_generate_trial_cou,
              default_shrink_attempts,
              nondeterministic_state,
              random_state_of_seed,
              make_seed,
              make_shrink_count,
              make_config,
              make_test_m,
              random_value,
              random_sequence,
              iter,
              test,
              test_or_error,
              test_distinct_values,
              test_can_generate]}
    var
     _uF_=Base_Word_size[3]?10000:1000,
     default_sizes=caml_call1(_jW_,caml_call5(include$23[117],0,0,_uG_,0,30)),
     include$31=
      Configure
       ([0,default_seed,default_sizes,_uF_,10000,default_shrink_attempts]),
     _uP_=include$31[15],
     _uH_=include$31[1],
     _uI_=include$31[2],
     _uJ_=include$31[3],
     _uK_=include$31[4],
     _uL_=include$31[5],
     _uM_=include$31[12],
     _uN_=include$31[13],
     _uO_=include$31[14],
     _uQ_=include$31[16],
     _uR_=include$31[17],
     _uS_=include$31[18];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$103);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Quickcheck$0);
    var
     _uT_=
      [0,
       return$1,
       symbol_bind$0,
       symbol_map$0,
       [0,
        return$1,
        bind$0,
        map$6,
        both,
        [0,
         create$7,
         generate,
         symbol_bind,
         include$28,
         bind$0,
         join,
         ignore_m,
         return$1,
         map$6,
         both,
         symbol$0,
         symbol$1,
         symbol$2,
         symbol_map,
         apply,
         map2,
         map3,
         all,
         all_unit,
         Applicative_infix,
         size,
         with_size,
         bool$0,
         char$1,
         char_digit,
         char_lowercase,
         char_uppercase,
         char_alpha,
         char_alphanum,
         char_print,
         char_whitespace,
         singleton$0,
         doubleton$0,
         of_list$2,
         union$0,
         of_sequence,
         tuple2,
         tuple3,
         tuple4,
         tuple5,
         tuple6,
         variant2,
         variant3,
         variant4,
         variant5,
         variant6,
         geometric,
         small_non_negative_int,
         small_positive_int,
         fn$0,
         fn2,
         fn3,
         fn4,
         fn5,
         fn6,
         compare_fn,
         equal_fn,
         filter_map$1,
         filter$2,
         recursive_union,
         weighted_recursive_union,
         fixed_point$0,
         weighted_union,
         of_fun$0,
         list,
         list_non_empty,
         list_with_length]]],
     _uU_=
      [0,
       shrink,
       create$8,
       empty,
       bool$1,
       char$2,
       map$7,
       filter$3,
       filter_map$2,
       tuple2$1,
       tuple3$1,
       tuple4$1,
       tuple5$1,
       tuple6$1,
       variant2$1,
       variant3$1,
       variant4$1,
       variant5$1,
       variant6$1,
       fixed_point$1],
     _uV_=
      [0,
       create$6,
       observe,
       of_hash,
       bool,
       char$0,
       doubleton,
       enum$0,
       of_list$1,
       fixed_point,
       variant2$0,
       variant3$0,
       variant4$0,
       variant5$0,
       variant6$0,
       of_predicate,
       comparison,
       singleton,
       unmap,
       tuple2$0,
       tuple3$0,
       tuple4$0,
       tuple5$0,
       tuple6$0,
       fn,
       of_fun],
     _uW_=
      [0,
       create$7,
       generate,
       symbol_bind,
       include$28,
       bind$0,
       join,
       ignore_m,
       Let_syntax,
       return$1,
       map$6,
       both,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol_map,
       apply,
       map2,
       map3,
       all,
       all_unit,
       Applicative_infix,
       size,
       with_size,
       bool$0,
       char$1,
       char_digit,
       char_lowercase,
       char_uppercase,
       char_alpha,
       char_alphanum,
       char_print,
       char_whitespace,
       singleton$0,
       doubleton$0,
       of_list$2,
       union$0,
       of_sequence,
       tuple2,
       tuple3,
       tuple4,
       tuple5,
       tuple6,
       variant2,
       variant3,
       variant4,
       variant5,
       variant6,
       geometric,
       small_non_negative_int,
       small_positive_int,
       fn$0,
       fn2,
       fn3,
       fn4,
       fn5,
       fn6,
       compare_fn,
       equal_fn,
       filter_map$1,
       filter$2,
       recursive_union,
       weighted_recursive_union,
       fixed_point$0,
       weighted_union,
       of_fun$0,
       list,
       list_non_empty,
       list_with_length],
     Core_kernel_Quickcheck=
      [0,
       _uW_,
       _uV_,
       _uU_,
       _uT_,
       _uH_,
       _uI_,
       _uJ_,
       _uK_,
       _uL_,
       _uM_,
       _uO_,
       _uP_,
       _uQ_,
       _uS_,
       _uR_,
       _uN_,
       function(_bmL_)
        {var _bmM_=Configure(_bmL_);
         return [0,
                 _bmM_[1],
                 _bmM_[2],
                 _bmM_[3],
                 _bmM_[4],
                 _bmM_[5],
                 _bmM_[12],
                 _bmM_[14],
                 _bmM_[15],
                 _bmM_[16],
                 _bmM_[18],
                 _bmM_[17],
                 _bmM_[13]]}];
    caml_register_global
     (4989,Core_kernel_Quickcheck,"Core_kernel__Quickcheck");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Map_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$104);
    caml_call1(Expect_test_collector[4][1],cst_src_map_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$105,cst$34);
    var Key_bin_io=[0];
    function Check_accessors(T,Tree,Key,Cmp,Options,M){return [0]}
    function Check_accessors1(M){return [0]}
    function Check_accessors2(M){return [0]}
    function Check_accessors3(M){return [0]}
    function Check_accessors3_with_comparat(M){return [0]}
    function Check_creators(T,Tree,Key,Cmp,Options,M){return [0]}
    function Check_creators1(M){return [0]}
    function Check_creators2(M){return [0]}
    function Check_creators3_with_comparato(M){return [0]}
    function Make_S_plain_tree(Key){return [0]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$106);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Map_intf$0);
    var
     Core_kernel_Map_intf=
      [0,
       Key_bin_io,
       Check_accessors,
       Check_accessors1,
       Check_accessors2,
       Check_accessors3,
       Check_accessors3_with_comparat,
       Check_creators,
       Check_creators1,
       Check_creators2,
       Check_creators3_with_comparato,
       Make_S_plain_tree];
    caml_register_global(4991,Core_kernel_Map_intf,"Core_kernel__Map_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Map);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$107);
    caml_call1(Expect_test_collector[4][1],cst_src_map_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$108,cst$35);
    var
     _uX_=caml_call1(Bin_prot_Shape[3][1],cst_v),
     _uY_=caml_call1(Bin_prot_Shape[4][1],cst_src_map_ml_8_77),
     _uZ_=[0,caml_call2(Bin_prot_Shape[15],_uY_,_uX_),0],
     _u0_=caml_call1(Bin_prot_Shape[3][1],cst_v$0),
     _u1_=caml_call1(Bin_prot_Shape[4][1],cst_src_map_ml_8_72),
     _u2_=[0,caml_call2(Bin_prot_Shape[15],_u1_,_u0_),_uZ_],
     _u3_=[0,caml_call1(Bin_prot_Shape[7],_u2_)],
     _u4_=[0,caml_call2(Bin_prot_Shape[10],cst_Unequal,_u3_),0],
     _u5_=caml_call1(Bin_prot_Shape[3][1],cst_v$1),
     _u6_=caml_call1(Bin_prot_Shape[4][1],cst_src_map_ml_8_55),
     _u7_=[0,caml_call2(Bin_prot_Shape[15],_u6_,_u5_)],
     _u8_=[0,caml_call2(Bin_prot_Shape[10],cst_Right$0,_u7_),_u4_],
     _u9_=caml_call1(Bin_prot_Shape[3][1],cst_v$2),
     _u__=caml_call1(Bin_prot_Shape[4][1],cst_src_map_ml_8_40),
     _u$_=[0,caml_call2(Bin_prot_Shape[15],_u__,_u9_)],
     _va_=[0,caml_call2(Bin_prot_Shape[10],cst_Left$0,_u$_),_u8_],
     _vb_=caml_call1(Bin_prot_Shape[4][1],cst_src_map_ml_8_29),
     _vc_=[0,caml_call2(Bin_prot_Shape[12],_vb_,_va_),0],
     _vd_=caml_call1(Bin_prot_Shape[3][1],cst_k),
     _ve_=caml_call1(Bin_prot_Shape[4][1],cst_src_map_ml_8_24),
     _vf_=[0,caml_call2(Bin_prot_Shape[15],_ve_,_vd_),_vc_],
     _vg_=caml_call1(Bin_prot_Shape[7],_vf_),
     _vh_=[0,caml_call1(Bin_prot_Shape[3][1],cst_v$3),0],
     _vi_=[0,caml_call1(Bin_prot_Shape[3][1],cst_k$0),_vh_],
     _vj_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$86),_vi_,_vg_],0],
     _vk_=caml_call1(Bin_prot_Shape[4][1],cst_src_map_ml_8_6),
     group$38=caml_call2(Bin_prot_Shape[6],_vk_,_vj_);
    function bin_shape_t$30(k,v)
     {var _bmK_=caml_call1(Bin_prot_Shape[2][1],cst_t$87);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$38,_bmK_),[0,k,[0,v,0]])}
    function bin_size_t$37(size_of_k,size_of_v,param)
     {var
       v2=param[2],
       v1=param[1],
       _bmF_=caml_call1(size_of_k,v1),
       size=caml_call2(Bin_prot_Common[23],0,_bmF_),
       _bmG_=v2[1];
      if(847852583 === _bmG_)
       var
        args=v2[2],
        size_args=caml_call1(size_of_v,args),
        _bmH_=caml_call2(Bin_prot_Common[23],size_args,4);
      else
       if(1013247643 <= _bmG_)
        var
         args$0=v2[2],
         v2$0=args$0[2],
         v1$0=args$0[1],
         _bmI_=caml_call1(size_of_v,v1$0),
         size$0=caml_call2(Bin_prot_Common[23],0,_bmI_),
         _bmJ_=caml_call1(size_of_v,v2$0),
         size_args$0=caml_call2(Bin_prot_Common[23],size$0,_bmJ_),
         _bmH_=caml_call2(Bin_prot_Common[23],size_args$0,4);
       else
        var
         args$1=v2[2],
         size_args$1=caml_call1(size_of_v,args$1),
         _bmH_=caml_call2(Bin_prot_Common[23],size_args$1,4);
      return caml_call2(Bin_prot_Common[23],size,_bmH_)}
    function bin_write_t$37(write_k,write_v,buf,pos,param)
     {var
       v2=param[2],
       v1=param[1],
       pos$0=caml_call3(write_k,buf,pos,v1),
       _bmE_=v2[1];
      if(847852583 === _bmE_)
       {var
         args=v2[2],
         pos$1=caml_call3(Bin_prot_Write[29],buf,pos$0,847852583);
        return caml_call3(write_v,buf,pos$1,args)}
      if(1013247643 <= _bmE_)
       {var
         args$0=v2[2],
         pos$2=caml_call3(Bin_prot_Write[29],buf,pos$0,1013247643),
         v2$0=args$0[2],
         v1$0=args$0[1],
         pos$3=caml_call3(write_v,buf,pos$2,v1$0);
        return caml_call3(write_v,buf,pos$3,v2$0)}
      var
       args$1=v2[2],
       pos$4=caml_call3(Bin_prot_Write[29],buf,pos$0,-57574468);
      return caml_call3(write_v,buf,pos$4,args$1)}
    function bin_writer_t$24(bin_writer_k,bin_writer_v)
     {function _bmz_(v)
       {var _bmA_=bin_writer_v[2],_bmB_=bin_writer_k[2];
        return function(_bmC_,_bmD_)
         {return bin_write_t$37(_bmB_,_bmA_,v,_bmC_,_bmD_)}}
      return [0,
              function(v)
               {return bin_size_t$37(bin_writer_k[1],bin_writer_v[1],v)},
              _bmz_]}
    function bin_read_t$76(of_k,of_v,buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_src_map_ml_Symmetric_diff_,pos_ref[1])}
    function bin_read_t$77(of_k,of_v,buf,pos_ref)
     {var
       v1=caml_call2(of_k,buf,pos_ref),
       vint=caml_call2(Bin_prot_Read[28],buf,pos_ref);
      try
       {if(-57574468 === vint)
         var arg_1=caml_call2(of_v,buf,pos_ref),_bmx_=[0,-57574468,arg_1];
        else
         if(847852583 === vint)
          var
           arg_1$0=caml_call2(of_v,buf,pos_ref),
           _bmx_=[0,847852583,arg_1$0];
         else
          {if(1013247643 !== vint)throw Bin_prot_Common[13];
           var
            v1$0=caml_call2(of_v,buf,pos_ref),
            v2$0=caml_call2(of_v,buf,pos_ref),
            arg_1$1=[0,v1$0,v2$0],
            _bmx_=[0,1013247643,arg_1$1]}
        var v2=_bmx_}
      catch(_bmy_)
       {_bmy_ = caml_wrap_exception(_bmy_);
        if(_bmy_ !== Bin_prot_Common[13])throw _bmy_;
        var
         v2=
          caml_call2
           (Bin_prot_Common[19],cst_src_map_ml_Symmetric_diff_$0,pos_ref[1])}
      return [0,v1,v2]}
    function bin_reader_t$24(bin_reader_k,bin_reader_v)
     {function _bmw_(buf,pos_ref,vtag)
       {return bin_read_t$76(bin_reader_k[1],bin_reader_v[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$77
                        (bin_reader_k[1],bin_reader_v[1],buf,pos_ref)},
              _bmw_]}
    function bin_t$24(bin_k,bin_v)
     {var
       _bmu_=bin_reader_t$24(bin_k[3],bin_v[3]),
       _bmv_=bin_writer_t$24(bin_k[2],bin_v[2]);
      return [0,bin_shape_t$30(bin_k[1],bin_v[1]),_bmv_,_bmu_]}
    function compare$20(cmp_k,cmp_v,a_001,b_002)
     {var
       t_004=a_001[2],
       t_003=a_001[1],
       t_006=b_002[2],
       t_005=b_002[1],
       n=caml_call2(cmp_k,t_003,t_005);
      if(0 === n)
       {if(caml_call2(Ppx_compare_lib[1],t_004,t_006))return 0;
        var _bmt_=t_004[1];
        if(847852583 === _bmt_)
         {if(typeof t_006 !== "number" && 847852583 === t_006[1])
           {var right_008=t_006[2],left_007=t_004[2];
            return caml_call2(cmp_v,left_007,right_008)}}
        else
         if(1013247643 <= _bmt_)
          {if(typeof t_006 !== "number" && 1013247643 === t_006[1])
            {var
              right_012=t_006[2],
              left_011=t_004[2],
              t_014=left_011[2],
              t_013=left_011[1],
              t_016=right_012[2],
              t_015=right_012[1],
              n$0=caml_call2(cmp_v,t_013,t_015);
             return 0 === n$0?caml_call2(cmp_v,t_014,t_016):n$0}}
         else
          if(typeof t_006 !== "number" && -57574468 === t_006[1])
           {var right_010=t_006[2],left_009=t_004[2];
            return caml_call2(cmp_v,left_009,right_010)}
        return caml_compare(t_004,t_006)}
      return n}
    function t_of_sexp$21(of_k,of_v,sexp)
     {if(1 === sexp[0])
       {var _bme_=sexp[1];
        if(_bme_)
         {var _bmf_=_bme_[2];
          if(_bmf_ && ! _bmf_[2])
           {var
             v1=_bmf_[1],
             v0=_bme_[1],
             v0$0=caml_call1(of_k,v0),
             v1$0=
              function(sexp)
                {try
                  {if(0 === sexp[0])
                    var
                     atom=sexp[1],
                     _bmg_=
                      caml_string_notequal(atom,cst_Left$1)
                       ?caml_string_notequal(atom,cst_Right$1)
                         ?caml_string_notequal(atom,cst_Unequal$0)
                           ?caml_call1(Sexplib0_Sexp_conv_error[19],0)
                           :caml_call2(Sexplib0_Sexp_conv_error[23],tp_loc$13,sexp)
                         :caml_call2(Sexplib0_Sexp_conv_error[23],tp_loc$13,sexp)
                       :caml_call2(Sexplib0_Sexp_conv_error[23],tp_loc$13,sexp),
                     _bmh_=_bmg_;
                   else
                    {var _bmi_=sexp[1];
                     if(_bmi_)
                      {var _bmj_=_bmi_[1];
                       if(0 === _bmj_[0])
                        {var sexp_args=_bmi_[2],atom$0=_bmj_[1];
                         if(caml_string_notequal(atom$0,cst_Left$2))
                          if(caml_string_notequal(atom$0,cst_Right$2))
                           if(caml_string_notequal(atom$0,cst_Unequal$1))
                            var _bmk_=caml_call1(Sexplib0_Sexp_conv_error[19],0);
                           else
                            {var switch$0=0;
                             if(sexp_args && ! sexp_args[2])
                              {var v0=sexp_args[1],switch$1=0;
                               if(1 === v0[0])
                                {var _bmo_=v0[1];
                                 if(_bmo_)
                                  {var _bmp_=_bmo_[2];
                                   if(_bmp_ && ! _bmp_[2])
                                    {var
                                      v1=_bmp_[1],
                                      v0$1=_bmo_[1],
                                      v0$2=caml_call1(of_v,v0$1),
                                      v1$0=caml_call1(of_v,v1),
                                      v0$0=[0,v0$2,v1$0];
                                     switch$1 = 1}}}
                               if(! switch$1)
                                var
                                 v0$0=
                                  caml_call3(Sexplib0_Sexp_conv_error[2],tp_loc$13,2,v0);
                               var _bmn_=[0,1013247643,v0$0];
                               switch$0 = 1}
                             if(! switch$0)
                              var
                               _bmn_=
                                caml_call3
                                 (Sexplib0_Sexp_conv_error[22],tp_loc$13,atom$0,sexp);
                             var _bmk_=_bmn_}
                          else
                           {var switch$2=0;
                            if(sexp_args && ! sexp_args[2])
                             {var
                               v0$3=sexp_args[1],
                               v0$4=caml_call1(of_v,v0$3),
                               _bmq_=[0,-57574468,v0$4];
                              switch$2 = 1}
                            if(! switch$2)
                             var
                              _bmq_=
                               caml_call3
                                (Sexplib0_Sexp_conv_error[22],tp_loc$13,atom$0,sexp);
                            var _bmk_=_bmq_}
                         else
                          {var switch$3=0;
                           if(sexp_args && ! sexp_args[2])
                            {var
                              v0$5=sexp_args[1],
                              v0$6=caml_call1(of_v,v0$5),
                              _bmr_=[0,847852583,v0$6];
                             switch$3 = 1}
                           if(! switch$3)
                            var
                             _bmr_=
                              caml_call3
                               (Sexplib0_Sexp_conv_error[22],tp_loc$13,atom$0,sexp);
                           var _bmk_=_bmr_}
                         var _bml_=_bmk_}
                       else
                        var
                         _bml_=
                          caml_call2(Sexplib0_Sexp_conv_error[24],tp_loc$13,sexp);
                       var _bmm_=_bml_}
                     else
                      var
                       _bmm_=
                        caml_call2(Sexplib0_Sexp_conv_error[25],tp_loc$13,sexp);
                     var _bmh_=_bmm_}
                   return _bmh_}
                 catch(_bms_)
                  {_bms_ = caml_wrap_exception(_bms_);
                   if(_bms_ === Sexplib0_Sexp_conv_error[18])
                    return caml_call2
                            (Sexplib0_Sexp_conv_error[20],tp_loc$13,sexp);
                   throw _bms_}}
               (v1);
            return [0,v0$0,v1$0]}}}
      return caml_call3(Sexplib0_Sexp_conv_error[2],tp_loc$13,2,sexp)}
    function sexp_of_t$22(of_k,of_v,param)
     {var v1=param[2],v0=param[1],v0$0=caml_call1(of_k,v0),_bmd_=v1[1];
      if(847852583 === _bmd_)
       var v0$1=v1[2],v1$0=[1,[0,_vl_,[0,caml_call1(of_v,v0$1),0]]];
      else
       if(1013247643 <= _bmd_)
        var
         v0$2=v1[2],
         v1$1=v0$2[2],
         v0$3=v0$2[1],
         v0$4=caml_call1(of_v,v0$3),
         v1$2=caml_call1(of_v,v1$1),
         v1$0=[1,[0,_vm_,[0,[1,[0,v0$4,[0,v1$2,0]]],0]]];
       else
        var v0$5=v1[2],v1$0=[1,[0,_vn_,[0,caml_call1(of_v,v0$5),0]]];
      return [1,[0,v0$0,[0,v1$0,0]]]}
    var
     Expect_test_collector$0=
      caml_call1(Expect_test_collector[2],Expect_test_config);
    function _vo_(param)
     {var
       _bmc_=bin_shape_t$30(_co_,_cc_),
       _bma_=caml_call1(Bin_prot_Shape[21],_bmc_);
      caml_call1(_bx_,caml_call1(Bin_prot_Shape[18][4],_bma_));
      var
       _bmb_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_map_ml$0),
         13,
         339,
         349,
         355];
      return caml_call1(Expect_test_collector$0[1],_bmb_)}
    var
     _vp_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_map_ml$1),
       13,
       339,
       356,
       394],
     _vs_=
      [0,
       [0,
        _vr_,
        _vq_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_map_ml$2),
         13,
         339,
         349,
         355],
        _vp_],
       0],
     _vt_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_map_ml$4),
       11,
       259,
       265,
       395],
     _vu_=
      caml_call1(Expect_test_common_File[4][3],cst_9249a318f4c83c9f11a77240e9);
    caml_call9
     (Expect_test_collector$0[3],
      _vu_,
      _vt_,
      cst_src_map_ml$3,
      0,
      0,
      _vs_,
      0,
      Inline_test_config,
      _vo_);
    function map$8(param,f1,f2)
     {var diff=param[2],k=param[1],k$0=caml_call1(f1,k),_bl__=diff[1];
      if(847852583 === _bl__)
       var v=diff[2],diff$0=[0,847852583,caml_call1(f2,v)];
      else
       if(1013247643 <= _bl__)
        var
         match=diff[2],
         v2=match[2],
         v1=match[1],
         _bl$_=caml_call1(f2,v2),
         diff$0=[0,1013247643,[0,caml_call1(f2,v1),_bl$_]];
       else
        var v$0=diff[2],diff$0=[0,-57574468,caml_call1(f2,v$0)];
      return [0,k$0,diff$0]}
    function map_data(t,f){return map$8(t,function(_bl9_){return _bl9_},f)}
    function left(param)
     {var diff=param[2],_bl8_=diff[1];
      if(847852583 === _bl8_)
       var x=diff[2];
      else
       {if(! (1013247643 <= _bl8_))return 0;var x=diff[2][1]}
      return [0,x]}
    function right(param)
     {var diff=param[2],_bl7_=diff[1];
      if(847852583 === _bl7_)return 0;
      var x=1013247643 <= _bl7_?diff[2][2]:diff[2];
      return [0,x]}
    function gen_tree(comparator,k_gen,v_gen)
     {return caml_call3(Base_quickcheck_Generator[24],comparator,k_gen,v_gen)}
    function quickcheck_generator(comparator,k_gen,v_gen)
     {return caml_call3
              (Base_quickcheck_Generator[22],[0,comparator],k_gen,v_gen)}
    function obs_tree(k_obs,v_obs)
     {return caml_call2(Base_quickcheck_Observer[26],k_obs,v_obs)}
    function shr_tree(comparator,k_shr,v_shr)
     {return caml_call3(Base_quickcheck_Shrinker[25],comparator,k_shr,v_shr)}
    var
     quickcheck_generator$0=Base_quickcheck_Generator[22],
     quickcheck_observer=Base_quickcheck_Observer[24],
     quickcheck_shrinker=Base_quickcheck_Shrinker[23],
     _vv_=Base_Map[101],
     sexp_of_t$23=_vv_[1],
     t_of_sexp_direct=_vv_[2],
     keys$0=_vv_[41],
     to_tree=_vv_[68],
     empty$0=_vv_[72],
     singleton$1=_vv_[73],
     of_alist$1=_vv_[74],
     of_alist_or_error$1=_vv_[75],
     of_alist_exn$1=_vv_[76],
     of_alist_multi$1=_vv_[77],
     of_alist_fold=_vv_[78],
     of_alist_reduce=_vv_[79],
     of_sorted_array=_vv_[80],
     of_sorted_array_unchecked=_vv_[81],
     of_increasing_iterator_uncheck=_vv_[82],
     of_increasing_sequence=_vv_[83],
     of_sequence$0=_vv_[84],
     of_sequence_or_error=_vv_[85],
     of_sequence_exn=_vv_[86],
     of_sequence_multi=_vv_[87],
     of_sequence_fold=_vv_[88],
     of_sequence_reduce=_vv_[89],
     of_iteri=_vv_[90],
     of_tree=_vv_[91],
     comparator=_vv_[92],
     hash_fold_direct=_vv_[93],
     Empty_without_value_restrictio=_vv_[94];
    function of_hashtbl_exn(comparator,hashtbl)
     {var
       match=
        caml_call2
         (of_iteri,comparator,caml_call1(Core_kernel_Hashtbl[21],hashtbl));
      if(17724 <= match[1]){var map=match[2];return map}
      var key=match[2];
      return failwiths
              (0,_vw_,cst_Map_of_hashtbl_exn_duplica,key,comparator[2])}
    function of_hashtbl_exn$0(comparator,hashtbl)
     {return caml_call1(to_tree,of_hashtbl_exn(comparator,hashtbl))}
    function key_set(comparator,t)
     {var _bl6_=caml_call1(_ph_,caml_call1(keys$0,t));
      return caml_call2(Base_Set[72][58],comparator,_bl6_)}
    function key_set$0(comparator,t)
     {return key_set(comparator,caml_call2(of_tree,comparator,t))}
    function to_map(key_set,f)
     {function _bl4_(key){return [0,key,caml_call1(f,key)]}
      var _bl5_=caml_call2(map$0,caml_call1(Base_Set[35],key_set),_bl4_);
      return caml_call2
              (of_sorted_array_unchecked,
               caml_call1(Base_Set[4],key_set),
               _bl5_)}
    function of_key_set(key_set,f)
     {return caml_call1(to_tree,to_map(key_set,f))}
    var
     _vx_=Base_Map[101],
     binary_search_segmented$0=_vx_[71],
     binary_search$0=_vx_[70],
     to_sequence$0=_vx_[69],
     to_tree$0=_vx_[68],
     rank=_vx_[67],
     nth_exn=_vx_[66],
     nth=_vx_[65],
     closest_key=_vx_[64],
     range_to_alist=_vx_[63],
     fold_range_inclusive=_vx_[62],
     subrange=_vx_[61],
     append$0=_vx_[60],
     split=_vx_[59],
     counti$1=_vx_[58],
     count$2=_vx_[57],
     existsi$1=_vx_[56],
     exists$2=_vx_[55],
     for_alli$1=_vx_[54],
     for_all$2=_vx_[53],
     max_elt_exn=_vx_[52],
     max_elt$1=_vx_[51],
     min_elt_exn=_vx_[50],
     min_elt$1=_vx_[49],
     fold_symmetric_diff=_vx_[48],
     symmetric_diff=_vx_[47],
     merge$0=_vx_[46],
     validatei=_vx_[45],
     validate$0=_vx_[44],
     to_alist$0=_vx_[43],
     data$0=_vx_[42],
     keys$1=_vx_[41],
     equal$5=_vx_[40],
     compare_direct=_vx_[39],
     combine_errors=_vx_[38],
     partition_tf$1=_vx_[37],
     partitioni_tf$1=_vx_[36],
     partition_map$0=_vx_[35],
     partition_mapi$0=_vx_[34],
     filter_mapi$1=_vx_[33],
     filter_map$3=_vx_[32],
     filteri$1=_vx_[31],
     filter$4=_vx_[30],
     filter_keys$0=_vx_[29],
     fold2=_vx_[28],
     fold_right$0=_vx_[27],
     fold$2=_vx_[26],
     mapi$1=_vx_[25],
     map$9=_vx_[24],
     iter2=_vx_[23],
     iteri_until=_vx_[22],
     iteri$1=_vx_[21],
     iter$4=_vx_[20],
     iter_keys$0=_vx_[19],
     mem$2=_vx_[18],
     remove$1=_vx_[17],
     find_exn$1=_vx_[16],
     find$2=_vx_[15],
     update$0=_vx_[14],
     change$0=_vx_[13],
     find_multi$0=_vx_[12],
     remove_multi$0=_vx_[11],
     add_multi$0=_vx_[10],
     set$1=_vx_[9],
     add_exn$0=_vx_[8],
     add$1=_vx_[7],
     length$4=_vx_[6],
     is_empty$3=_vx_[5],
     invariants=_vx_[4];
    function quickcheck_observer$0(k,v)
     {return caml_call2(quickcheck_observer,k,v)}
    function quickcheck_shrinker$0(k,v)
     {return caml_call2(quickcheck_shrinker,k,v)}
    function key_set$1(t){return key_set(caml_call1(comparator,t),t)}
    function of_map_keys(t){return key_set(caml_call1(comparator,t),t)}
    var
     comparator_s=Base_Map[3],
     invariants$0=Base_Map[2],
     empty$1=Base_Map[5],
     singleton$2=Base_Map[6],
     of_alist$2=Base_Map[7],
     of_alist_or_error$2=Base_Map[8],
     of_alist_exn$2=Base_Map[9],
     of_alist_multi$2=Base_Map[10],
     of_alist_fold$0=Base_Map[11],
     of_alist_reduce$0=Base_Map[12],
     of_iteri$0=Base_Map[13],
     of_sorted_array$0=Base_Map[14],
     of_sorted_array_unchecked$0=Base_Map[15],
     of_increasing_iterator_uncheck$0=Base_Map[16],
     of_increasing_sequence$0=Base_Map[17],
     of_sequence$1=Base_Map[18],
     of_sequence_or_error$0=Base_Map[19],
     of_sequence_exn$0=Base_Map[20],
     of_sequence_multi$0=Base_Map[21],
     of_sequence_fold$0=Base_Map[22],
     of_sequence_reduce$0=Base_Map[23],
     is_empty$4=Base_Map[24],
     length$5=Base_Map[25],
     set$2=Base_Map[26],
     add$2=Base_Map[27],
     add_exn$1=Base_Map[28],
     add_multi$1=Base_Map[29],
     remove_multi$1=Base_Map[30],
     find_multi$1=Base_Map[31],
     change$1=Base_Map[32],
     update$1=Base_Map[33],
     find$3=Base_Map[34],
     find_exn$2=Base_Map[35],
     remove$2=Base_Map[36],
     mem$3=Base_Map[37],
     iter_keys$1=Base_Map[38],
     iter$5=Base_Map[39],
     iteri$2=Base_Map[40],
     iteri_until$0=Base_Map[41],
     iter2$0=Base_Map[42],
     map$10=Base_Map[43],
     mapi$2=Base_Map[44],
     fold$3=Base_Map[45],
     fold_right$1=Base_Map[46],
     fold2$0=Base_Map[47],
     filter_keys$1=Base_Map[48],
     filter$5=Base_Map[49],
     filteri$2=Base_Map[50],
     filter_map$4=Base_Map[51],
     filter_mapi$2=Base_Map[52],
     partition_mapi$1=Base_Map[53],
     partition_map$1=Base_Map[54],
     partitioni_tf$2=Base_Map[55],
     partition_tf$2=Base_Map[56],
     combine_errors$0=Base_Map[57],
     compare_direct$0=Base_Map[58],
     equal$6=Base_Map[60],
     keys$2=Base_Map[61],
     data$1=Base_Map[62],
     to_alist$1=Base_Map[63],
     validate$1=Base_Map[64],
     validatei$0=Base_Map[65],
     merge$1=Base_Map[66],
     symmetric_diff$0=Base_Map[69],
     fold_symmetric_diff$0=Base_Map[70],
     min_elt$2=Base_Map[71],
     min_elt_exn$0=Base_Map[72],
     max_elt$2=Base_Map[73],
     max_elt_exn$0=Base_Map[74],
     for_all$3=Base_Map[75],
     for_alli$2=Base_Map[76],
     exists$3=Base_Map[77],
     existsi$2=Base_Map[78],
     count$3=Base_Map[79],
     counti$2=Base_Map[80],
     split$0=Base_Map[81],
     append$1=Base_Map[82],
     subrange$0=Base_Map[83],
     fold_range_inclusive$0=Base_Map[84],
     range_to_alist$0=Base_Map[85],
     closest_key$0=Base_Map[86],
     nth$0=Base_Map[87],
     nth_exn$0=Base_Map[88],
     rank$0=Base_Map[89],
     to_sequence$1=Base_Map[90],
     binary_search$1=Base_Map[91],
     binary_search_segmented$1=Base_Map[92];
    function of_tree$0(m){return caml_call1(Base_Map[101][91],m[1])}
    var to_tree$1=Base_Map[101][68];
    function find_or_error(t,key)
     {var
       comparator$0=caml_call1(comparator,t),
       match=caml_call2(find$3,t,key);
      if(match){var data=match[1];return [0,data]}
      var sexp_of_key=comparator$0[2],_bl3_=[0,caml_call1(sexp_of_key,key),0];
      return caml_call1
              (_tW_,
               [1,
                [0,caml_call1(Sexplib0_Sexp_conv[7],cst_key_not_found),_bl3_]])}
    var _vy_=Base_Map[67];
    function of_hashtbl_exn$1(m,t){return of_hashtbl_exn(m[1],t)}
    function Creators$0(Key)
     {var
       comparator=Key[1],
       M_empty=caml_call1(Empty_without_value_restrictio,Key),
       empty=M_empty[1];
      function of_tree$0(tree){return caml_call2(of_tree,comparator,tree)}
      function singleton(k,v){return caml_call3(singleton$1,comparator,k,v)}
      function of_sorted_array_unchecked$0(array)
       {return caml_call2(of_sorted_array_unchecked,comparator,array)}
      function of_sorted_array$0(array)
       {return caml_call2(of_sorted_array,comparator,array)}
      function of_increasing_iterator_uncheck$0(len,f)
       {return caml_call3(of_increasing_iterator_uncheck,comparator,len,f)}
      function of_increasing_sequence$0(seq)
       {return caml_call2(of_increasing_sequence,comparator,seq)}
      function of_sequence(seq)
       {return caml_call2(of_sequence$0,comparator,seq)}
      function of_sequence_or_error$0(seq)
       {return caml_call2(of_sequence_or_error,comparator,seq)}
      function of_sequence_exn$0(seq)
       {return caml_call2(of_sequence_exn,comparator,seq)}
      function of_sequence_multi$0(seq)
       {return caml_call2(of_sequence_multi,comparator,seq)}
      function of_sequence_fold$0(seq,init,f)
       {return caml_call4(of_sequence_fold,comparator,seq,init,f)}
      function of_sequence_reduce$0(seq,f)
       {return caml_call3(of_sequence_reduce,comparator,seq,f)}
      function of_alist(alist){return caml_call2(of_alist$1,comparator,alist)}
      function of_alist_or_error(alist)
       {return caml_call2(of_alist_or_error$1,comparator,alist)}
      function of_alist_exn(alist)
       {return caml_call2(of_alist_exn$1,comparator,alist)}
      function of_hashtbl_exn$0(hashtbl)
       {return of_hashtbl_exn(comparator,hashtbl)}
      function of_alist_multi(alist)
       {return caml_call2(of_alist_multi$1,comparator,alist)}
      function of_alist_fold$0(alist,init,f)
       {return caml_call4(of_alist_fold,comparator,alist,init,f)}
      function of_alist_reduce$0(alist,f)
       {return caml_call3(of_alist_reduce,comparator,alist,f)}
      function of_iteri$0(iteri){return caml_call2(of_iteri,comparator,iteri)}
      function t_of_sexp(k_of_sexp,v_of_sexp,sexp)
       {return caml_call4
                (t_of_sexp_direct,comparator,k_of_sexp,v_of_sexp,sexp)}
      function of_key_set(key_set,f){return to_map(key_set,f)}
      function quickcheck_generator$0(gen_k,gen_v)
       {return quickcheck_generator(comparator,gen_k,gen_v)}
      return [0,
              t_of_sexp,
              empty,
              singleton,
              of_sorted_array$0,
              of_sorted_array_unchecked$0,
              of_increasing_iterator_uncheck$0,
              of_alist,
              of_alist_or_error,
              of_alist_exn,
              of_alist_multi,
              of_alist_fold$0,
              of_alist_reduce$0,
              of_increasing_sequence$0,
              of_sequence,
              of_sequence_or_error$0,
              of_sequence_exn$0,
              of_sequence_multi$0,
              of_sequence_fold$0,
              of_sequence_reduce$0,
              of_iteri$0,
              of_tree$0,
              of_hashtbl_exn$0,
              of_key_set,
              quickcheck_generator$0]}
    function Make_tree(Key)
     {var comparator=Key[1],sexp_of_t=Base_Map[101][3][1];
      function t_of_sexp(a,b,c)
       {return caml_call4(Base_Map[101][3][2],comparator,a,b,c)}
      var empty=Base_Map[101][3][91];
      function of_tree(tree){return tree}
      function singleton(a)
       {return caml_call2(Base_Map[101][3][4],comparator,a)}
      function of_sorted_array_unchecked(a)
       {return caml_call2(Base_Map[101][3][12],comparator,a)}
      function of_sorted_array(a)
       {return caml_call2(Base_Map[101][3][11],comparator,a)}
      function of_increasing_iterator_uncheck(len,f)
       {return caml_call3(Base_Map[101][3][13],comparator,len,f)}
      function of_increasing_sequence(seq)
       {return caml_call2(Base_Map[101][3][14],comparator,seq)}
      function of_sequence(s)
       {return caml_call2(Base_Map[101][3][15],comparator,s)}
      function of_sequence_or_error(s)
       {return caml_call2(Base_Map[101][3][16],comparator,s)}
      function of_sequence_exn(s)
       {return caml_call2(Base_Map[101][3][17],comparator,s)}
      function of_sequence_multi(s)
       {return caml_call2(Base_Map[101][3][18],comparator,s)}
      function of_sequence_fold(s,init,f)
       {return caml_call4(Base_Map[101][3][19],comparator,s,init,f)}
      function of_sequence_reduce(s,f)
       {return caml_call3(Base_Map[101][3][20],comparator,s,f)}
      function of_alist(a)
       {return caml_call2(Base_Map[101][3][5],comparator,a)}
      function of_alist_or_error(a)
       {return caml_call2(Base_Map[101][3][6],comparator,a)}
      function of_alist_exn(a)
       {return caml_call2(Base_Map[101][3][7],comparator,a)}
      function of_hashtbl_exn(a){return of_hashtbl_exn$0(comparator,a)}
      function of_alist_multi(a)
       {return caml_call2(Base_Map[101][3][8],comparator,a)}
      function of_alist_fold(a,init,f)
       {return caml_call4(Base_Map[101][3][9],comparator,a,init,f)}
      function of_alist_reduce(a,f)
       {return caml_call3(Base_Map[101][3][10],comparator,a,f)}
      function of_iteri(iteri)
       {return caml_call2(Base_Map[101][3][21],comparator,iteri)}
      function to_tree(t){return t}
      function invariants(a)
       {return caml_call2(Base_Map[101][3][23],comparator,a)}
      function is_empty(a){return caml_call1(Base_Map[101][3][24],a)}
      function length(a){return caml_call1(Base_Map[101][3][25],a)}
      function set(a,key,data)
       {return caml_call4(Base_Map[101][3][28],comparator,a,key,data)}
      function add(a,key,data)
       {return caml_call4(Base_Map[101][3][26],comparator,a,key,data)}
      function add_exn(a,key,data)
       {return caml_call4(Base_Map[101][3][27],comparator,a,key,data)}
      function add_multi(a,key,data)
       {return caml_call4(Base_Map[101][3][29],comparator,a,key,data)}
      function remove_multi(a,b)
       {return caml_call3(Base_Map[101][3][30],comparator,a,b)}
      function find_multi(a,b)
       {return caml_call3(Base_Map[101][3][31],comparator,a,b)}
      function change(a,b,f)
       {return caml_call4(Base_Map[101][3][32],comparator,a,b,f)}
      function update(a,b,f)
       {return caml_call4(Base_Map[101][3][33],comparator,a,b,f)}
      function find_exn(a,b)
       {return caml_call3(Base_Map[101][3][35],comparator,a,b)}
      function find(a,b)
       {return caml_call3(Base_Map[101][3][34],comparator,a,b)}
      function remove(a,b)
       {return caml_call3(Base_Map[101][3][36],comparator,a,b)}
      function mem(a,b)
       {return caml_call3(Base_Map[101][3][37],comparator,a,b)}
      var
       iter_keys=Base_Map[101][3][38],
       iter=Base_Map[101][3][39],
       iteri=Base_Map[101][3][40],
       iteri_until=Base_Map[101][3][41];
      function iter2(a,b,f)
       {return caml_call4(Base_Map[101][3][42],comparator,a,b,f)}
      var
       map=Base_Map[101][3][43],
       mapi=Base_Map[101][3][44],
       fold=Base_Map[101][3][45],
       fold_right=Base_Map[101][3][46];
      function fold2(a,b,init,f)
       {return caml_call5(Base_Map[101][3][47],comparator,a,b,init,f)}
      function filter_keys(a,f)
       {return caml_call3(Base_Map[101][3][48],comparator,a,f)}
      function filter(a,f)
       {return caml_call3(Base_Map[101][3][49],comparator,a,f)}
      function filteri(a,f)
       {return caml_call3(Base_Map[101][3][50],comparator,a,f)}
      function filter_map(a,f)
       {return caml_call3(Base_Map[101][3][51],comparator,a,f)}
      function filter_mapi(a,f)
       {return caml_call3(Base_Map[101][3][52],comparator,a,f)}
      function partition_mapi(t,f)
       {return caml_call3(Base_Map[101][3][53],comparator,t,f)}
      function partition_map(t,f)
       {return caml_call3(Base_Map[101][3][54],comparator,t,f)}
      function partitioni_tf(t,f)
       {return caml_call3(Base_Map[101][3][55],comparator,t,f)}
      function partition_tf(t,f)
       {return caml_call3(Base_Map[101][3][56],comparator,t,f)}
      function combine_errors(t)
       {return caml_call2(Base_Map[101][3][57],comparator,t)}
      function compare_direct(a,b,c)
       {return caml_call4(Base_Map[101][3][58],comparator,a,b,c)}
      function equal(a,b,c)
       {return caml_call4(Base_Map[101][3][59],comparator,a,b,c)}
      var
       keys=Base_Map[101][3][60],
       data=Base_Map[101][3][61],
       to_alist=Base_Map[101][3][62],
       validate=Base_Map[101][3][63],
       validatei=Base_Map[101][3][64];
      function symmetric_diff(a,b,data_equal)
       {return caml_call4(Base_Map[101][3][66],comparator,a,b,data_equal)}
      function fold_symmetric_diff(a,b,data_equal,init,f)
       {return caml_call6
                (Base_Map[101][3][67],comparator,a,b,data_equal,init,f)}
      function merge(a,b,f)
       {return caml_call4(Base_Map[101][3][65],comparator,a,b,f)}
      var
       min_elt=Base_Map[101][3][68],
       min_elt_exn=Base_Map[101][3][69],
       max_elt=Base_Map[101][3][70],
       max_elt_exn=Base_Map[101][3][71],
       for_all=Base_Map[101][3][72],
       for_alli=Base_Map[101][3][73],
       exists=Base_Map[101][3][74],
       existsi=Base_Map[101][3][75],
       count=Base_Map[101][3][76],
       counti=Base_Map[101][3][77];
      function split(a,b)
       {return caml_call3(Base_Map[101][3][78],comparator,a,b)}
      function append(lower_part,upper_part)
       {return caml_call3
                (Base_Map[101][3][79],comparator,lower_part,upper_part)}
      function subrange(t,lower_bound,upper_bound)
       {return caml_call4
                (Base_Map[101][3][80],comparator,t,lower_bound,upper_bound)}
      function fold_range_inclusive(t,min,max,init,f)
       {return caml_call6(Base_Map[101][3][81],comparator,t,min,max,init,f)}
      function range_to_alist(t,min,max)
       {return caml_call4(Base_Map[101][3][82],comparator,t,min,max)}
      function closest_key(a,b,c)
       {return caml_call4(Base_Map[101][3][83],comparator,a,b,c)}
      function nth(a){return caml_call2(Base_Map[101][3][84],comparator,a)}
      function nth_exn(a)
       {return caml_call2(Base_Map[101][3][85],comparator,a)}
      function rank(a,b)
       {return caml_call3(Base_Map[101][3][86],comparator,a,b)}
      function to_sequence
       (order,keys_greater_or_equal_to,keys_less_or_equal_to,t)
       {return caml_call5
                (Base_Map[101][3][88],
                 comparator,
                 order,
                 keys_greater_or_equal_to,
                 keys_less_or_equal_to,
                 t)}
      function binary_search(t,compare,how,v)
       {return caml_call5(Base_Map[101][3][89],comparator,t,compare,how,v)}
      function binary_search_segmented(t,segment_of,how)
       {return caml_call4(Base_Map[101][3][90],comparator,t,segment_of,how)}
      function key_set(t){return key_set$0(comparator,t)}
      function quickcheck_generator(k,v){return gen_tree(comparator,k,v)}
      function quickcheck_observer(k,v){return obs_tree(k,v)}
      function quickcheck_shrinker(k,v){return shr_tree(comparator,k,v)}
      return [0,
              comparator,
              sexp_of_t,
              t_of_sexp,
              empty,
              of_tree,
              singleton,
              of_sorted_array_unchecked,
              of_sorted_array,
              of_increasing_iterator_uncheck,
              of_increasing_sequence,
              of_sequence,
              of_sequence_or_error,
              of_sequence_exn,
              of_sequence_multi,
              of_sequence_fold,
              of_sequence_reduce,
              of_alist,
              of_alist_or_error,
              of_alist_exn,
              of_hashtbl_exn,
              of_alist_multi,
              of_alist_fold,
              of_alist_reduce,
              of_iteri,
              of_key_set,
              to_tree,
              invariants,
              is_empty,
              length,
              set,
              add,
              add_exn,
              add_multi,
              remove_multi,
              find_multi,
              change,
              update,
              find_exn,
              find,
              remove,
              mem,
              iter_keys,
              iter,
              iteri,
              iteri_until,
              iter2,
              map,
              mapi,
              fold,
              fold_right,
              fold2,
              filter_keys,
              filter,
              filteri,
              filter_map,
              filter_mapi,
              partition_mapi,
              partition_map,
              partitioni_tf,
              partition_tf,
              combine_errors,
              compare_direct,
              equal,
              keys,
              data,
              to_alist,
              validate,
              validatei,
              symmetric_diff,
              fold_symmetric_diff,
              merge,
              min_elt,
              min_elt_exn,
              max_elt,
              max_elt_exn,
              for_all,
              for_alli,
              exists,
              existsi,
              count,
              counti,
              split,
              append,
              subrange,
              fold_range_inclusive,
              range_to_alist,
              closest_key,
              nth,
              nth_exn,
              rank,
              to_sequence,
              binary_search,
              binary_search_segmented,
              key_set,
              quickcheck_generator,
              quickcheck_observer,
              quickcheck_shrinker]}
    function init_for_bin_prot(len,f,comparator)
     {var map=caml_call3(of_increasing_iterator_uncheck,comparator,len,f);
      if(caml_call1(invariants$0,map))return map;
      var match=caml_call2(of_iteri,comparator,caml_call1(iteri$2,map));
      if(17724 <= match[1]){var map$0=match[2];return map$0}
      return caml_call1(_bl_,cst_Map_bin_read_t_duplicate_e)}
    var
     _vz_=Creators$0(Poly),
     _vA_=_vz_[1],
     _vB_=_vz_[2],
     _vC_=_vz_[3],
     _vD_=_vz_[4],
     _vE_=_vz_[5],
     _vF_=_vz_[6],
     _vG_=_vz_[7],
     _vH_=_vz_[8],
     _vI_=_vz_[9],
     _vJ_=_vz_[10],
     _vK_=_vz_[11],
     _vL_=_vz_[12],
     _vM_=_vz_[13],
     _vN_=_vz_[14],
     _vO_=_vz_[15],
     _vP_=_vz_[16],
     _vQ_=_vz_[17],
     _vR_=_vz_[18],
     _vS_=_vz_[19],
     _vT_=_vz_[20],
     _vU_=_vz_[21],
     _vV_=_vz_[22],
     _vW_=_vz_[23],
     _vX_=_vz_[24];
    function compare$21(param,cmpv,t1,t2)
     {return caml_call3(compare_direct,cmpv,t1,t2)}
    function sexp_of_t$24(sexp_of_k,sexp_of_v,t)
     {return caml_call4
              (sexp_of_t$23,
               sexp_of_k,
               sexp_of_v,
               function(param){return _vY_},
               t)}
    var
     _vZ_=caml_call1(Bin_prot_Shape[3][1],cst_b$8),
     _v0_=caml_call1(Bin_prot_Shape[4][1],cst_src_map_ml_412_30),
     _v1_=[0,caml_call2(Bin_prot_Shape[15],_v0_,_vZ_),0],
     _v2_=caml_call1(Bin_prot_Shape[3][1],cst_a$36),
     _v3_=caml_call1(Bin_prot_Shape[4][1],cst_src_map_ml_412_25),
     _v4_=[0,caml_call2(Bin_prot_Shape[15],_v3_,_v2_),_v1_],
     _v5_=caml_call1(Bin_prot_Shape[7],_v4_),
     _v6_=[0,caml_call1(Bin_prot_Shape[3][1],cst_b$9),0],
     _v7_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$37),_v6_],
     _v8_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_el$5),_v7_,_v5_],0],
     _v9_=caml_call1(Bin_prot_Shape[4][1],cst_src_map_ml_412_6),
     group$39=caml_call2(Bin_prot_Shape[6],_v9_,_v8_);
    function bin_shape_el$0(a,b)
     {var _bl2_=caml_call1(Bin_prot_Shape[2][1],cst_el$6);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$39,_bl2_),[0,a,[0,b,0]])}
    function bin_size_el$0(size_of_a,size_of_b,param)
     {var
       v2=param[2],
       v1=param[1],
       _bl0_=caml_call1(size_of_a,v1),
       size=caml_call2(Bin_prot_Common[23],0,_bl0_),
       _bl1_=caml_call1(size_of_b,v2);
      return caml_call2(Bin_prot_Common[23],size,_bl1_)}
    function bin_write_el$0(write_a,write_b,buf,pos,param)
     {var v2=param[2],v1=param[1],pos$0=caml_call3(write_a,buf,pos,v1);
      return caml_call3(write_b,buf,pos$0,v2)}
    function bin_read_el$0(of_a,of_b,buf,pos_ref)
     {var v1=caml_call2(of_a,buf,pos_ref),v2=caml_call2(of_b,buf,pos_ref);
      return [0,v1,v2]}
    var
     caller_identity$0=
      caml_call1(Bin_prot_Shape[5][1],cst_b7d7b1a0_4992_11e6_8a32_bb);
    function iter$6(t,f)
     {return caml_call2
              (iteri$1,
               t,
               function(key,data){return caml_call1(f,[0,key,data])})}
    function init$1(len,next)
     {var _blZ_=Poly[1];
      return init_for_bin_prot
              (len,function(param){return caml_call1(next,0)},_blZ_)}
    var
     include$32=
      caml_call1
       (Bin_prot_Utils[17],
        [0,
         caller_identity$0,
         module_name$2,
         length$4,
         iter$6,
         init$1,
         bin_size_el$0,
         bin_write_el$0,
         bin_read_el$0,
         bin_shape_el$0]),
     bin_shape_t$31=include$32[1],
     bin_size_t$38=include$32[2],
     bin_write_t$38=include$32[3],
     bin_read_t$78=include$32[4],
     bin_read_t$79=include$32[5],
     bin_writer_t$25=include$32[6],
     bin_reader_t$25=include$32[7],
     bin_t$25=include$32[8],
     include$33=Make_tree(Poly),
     t_of_sexp$22=include$33[3],
     empty$2=include$33[4],
     of_tree$1=include$33[5],
     singleton$3=include$33[6],
     of_sorted_array_unchecked$1=include$33[7],
     of_sorted_array$1=include$33[8],
     of_increasing_iterator_uncheck$1=include$33[9],
     of_increasing_sequence$1=include$33[10],
     of_sequence$2=include$33[11],
     of_sequence_or_error$1=include$33[12],
     of_sequence_exn$1=include$33[13],
     of_sequence_multi$1=include$33[14],
     of_sequence_fold$1=include$33[15],
     of_sequence_reduce$1=include$33[16],
     of_alist$3=include$33[17],
     of_alist_or_error$3=include$33[18],
     of_alist_exn$3=include$33[19],
     of_hashtbl_exn$2=include$33[20],
     of_alist_multi$3=include$33[21],
     of_alist_fold$1=include$33[22],
     of_alist_reduce$1=include$33[23],
     of_iteri$1=include$33[24],
     of_key_set$0=include$33[25],
     to_tree$2=include$33[26],
     invariants$1=include$33[27],
     is_empty$5=include$33[28],
     length$6=include$33[29],
     set$3=include$33[30],
     add$3=include$33[31],
     add_exn$2=include$33[32],
     add_multi$2=include$33[33],
     remove_multi$2=include$33[34],
     find_multi$2=include$33[35],
     change$2=include$33[36],
     update$2=include$33[37],
     find_exn$3=include$33[38],
     find$4=include$33[39],
     remove$3=include$33[40],
     mem$4=include$33[41],
     iter_keys$2=include$33[42],
     iter$7=include$33[43],
     iteri$3=include$33[44],
     iteri_until$1=include$33[45],
     iter2$1=include$33[46],
     map$11=include$33[47],
     mapi$3=include$33[48],
     fold$4=include$33[49],
     fold_right$2=include$33[50],
     fold2$1=include$33[51],
     filter_keys$2=include$33[52],
     filter$6=include$33[53],
     filteri$3=include$33[54],
     filter_map$5=include$33[55],
     filter_mapi$3=include$33[56],
     partition_mapi$2=include$33[57],
     partition_map$2=include$33[58],
     partitioni_tf$3=include$33[59],
     partition_tf$3=include$33[60],
     combine_errors$1=include$33[61],
     compare_direct$1=include$33[62],
     equal$7=include$33[63],
     keys$3=include$33[64],
     data$2=include$33[65],
     to_alist$2=include$33[66],
     validate$2=include$33[67],
     validatei$1=include$33[68],
     symmetric_diff$1=include$33[69],
     fold_symmetric_diff$1=include$33[70],
     merge$2=include$33[71],
     min_elt$3=include$33[72],
     min_elt_exn$1=include$33[73],
     max_elt$3=include$33[74],
     max_elt_exn$1=include$33[75],
     for_all$4=include$33[76],
     for_alli$3=include$33[77],
     exists$4=include$33[78],
     existsi$3=include$33[79],
     count$4=include$33[80],
     counti$3=include$33[81],
     split$1=include$33[82],
     append$2=include$33[83],
     subrange$1=include$33[84],
     fold_range_inclusive$1=include$33[85],
     range_to_alist$1=include$33[86],
     closest_key$1=include$33[87],
     nth$1=include$33[88],
     nth_exn$1=include$33[89],
     rank$1=include$33[90],
     to_sequence$2=include$33[91],
     binary_search$2=include$33[92],
     binary_search_segmented$2=include$33[93],
     key_set$2=include$33[94],
     quickcheck_generator$1=include$33[95],
     quickcheck_observer$1=include$33[96],
     quickcheck_shrinker$1=include$33[97],
     _v__=include$33[2];
    function sexp_of_t$25(sexp_of_k,sexp_of_v,t)
     {return caml_call4
              (_v__,sexp_of_k,sexp_of_v,function(param){return _v$_},t)}
    function Provide_bin_io(Key)
     {var
       _blO_=caml_call1(Bin_prot_Shape[3][1],cst_v$4),
       _blP_=caml_call1(Bin_prot_Shape[4][1],cst_src_map_ml_455_25),
       _blQ_=[0,caml_call2(Bin_prot_Shape[15],_blP_,_blO_),0],
       _blR_=caml_call1(Bin_prot_Shape[7],[0,Key[5],_blQ_]),
       _blS_=[0,caml_call1(Bin_prot_Shape[3][1],cst_v$5),0],
       _blT_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_el$7),_blS_,_blR_],0],
       _blU_=caml_call1(Bin_prot_Shape[4][1],cst_src_map_ml_455_4),
       group=caml_call2(Bin_prot_Shape[6],_blU_,_blT_);
      function bin_shape_el(v)
       {var _blY_=caml_call1(Bin_prot_Shape[2][1],cst_el$8);
        return caml_call1(caml_call2(Bin_prot_Shape[14],group,_blY_),[0,v,0])}
      function bin_size_el(size_of_v,param)
       {var
         v2=param[2],
         v1=param[1],
         _blW_=caml_call1(Key[1],v1),
         size=caml_call2(Bin_prot_Common[23],0,_blW_),
         _blX_=caml_call1(size_of_v,v2);
        return caml_call2(Bin_prot_Common[23],size,_blX_)}
      function bin_write_el(write_v,buf,pos,param)
       {var v2=param[2],v1=param[1],pos$0=caml_call3(Key[2],buf,pos,v1);
        return caml_call3(write_v,buf,pos$0,v2)}
      function bin_read_el(of_v,buf,pos_ref)
       {var v1=caml_call2(Key[3],buf,pos_ref),v2=caml_call2(of_v,buf,pos_ref);
        return [0,v1,v2]}
      var
       caller_identity=
        caml_call1(Bin_prot_Shape[5][1],cst_dfb300f8_4992_11e6_9c15_73);
      function iter(t,f)
       {return caml_call2
                (iteri$2,
                 t,
                 function(key,data){return caml_call1(f,[0,key,data])})}
      function init(len,next)
       {var _blV_=Key[9];
        return init_for_bin_prot
                (len,function(param){return caml_call1(next,0)},_blV_)}
      return caml_call1
              (Bin_prot_Utils[16],
               [0,
                caller_identity,
                module_name$3,
                length$5,
                iter,
                init,
                bin_size_el,
                bin_write_el,
                bin_read_el,
                bin_shape_el])}
    function Make_plain_using_comparator(Key)
     {var
       Key_S1=caml_call1(S_to_S1,[0,Key[2]]),
       _blK_=Creators$0(Key_S1),
       t_of_sexp=_blK_[1],
       empty=_blK_[2],
       singleton=_blK_[3],
       of_sorted_array=_blK_[4],
       of_sorted_array_unchecked=_blK_[5],
       of_increasing_iterator_uncheck=_blK_[6],
       of_alist=_blK_[7],
       of_alist_or_error=_blK_[8],
       of_alist_exn=_blK_[9],
       of_alist_multi=_blK_[10],
       of_alist_fold=_blK_[11],
       of_alist_reduce=_blK_[12],
       of_increasing_sequence=_blK_[13],
       of_sequence=_blK_[14],
       of_sequence_or_error=_blK_[15],
       of_sequence_exn=_blK_[16],
       of_sequence_multi=_blK_[17],
       of_sequence_fold=_blK_[18],
       of_sequence_reduce=_blK_[19],
       of_iteri=_blK_[20],
       of_tree=_blK_[21],
       of_hashtbl_exn=_blK_[22],
       of_key_set=_blK_[23],
       quickcheck_generator=_blK_[24];
      function compare(cmpv,t1,t2)
       {return caml_call3(compare_direct,cmpv,t1,t2)}
      function sexp_of_t(sexp_of_v,t)
       {function _blN_(param){return _wa_}
        return caml_call4(sexp_of_t$23,Key[1],sexp_of_v,_blN_,t)}
      function Provide_of_sexp(Key)
       {function t_of_sexp$0(v_of_sexp,sexp)
         {return caml_call3(t_of_sexp,Key[1],v_of_sexp,sexp)}
        return [0,t_of_sexp$0]}
      function Provide_hash(Key)
       {function hash_fold_t(hash_fold_data,state,t)
         {return caml_call4(hash_fold_direct,Key[1],hash_fold_data,state,t)}
        return [0,hash_fold_t]}
      function Provide_bin_io$0(Key$0)
       {var
         comparator=Key[2],
         bin_size_t=Key$0[1],
         bin_write_t=Key$0[2],
         bin_read_t=Key$0[3],
         bin_read_t$0=Key$0[4],
         bin_shape_t=Key$0[5],
         bin_writer_t=Key$0[6],
         bin_reader_t=Key$0[7],
         bin_t=Key$0[8];
        return Provide_bin_io
                ([0,
                  bin_size_t,
                  bin_write_t,
                  bin_read_t,
                  bin_read_t$0,
                  bin_shape_t,
                  bin_writer_t,
                  bin_reader_t,
                  bin_t,
                  comparator])}
      var
       include=Make_tree(Key_S1),
       comparator=include[1],
       t_of_sexp$0=include[3],
       empty$0=include[4],
       of_tree$0=include[5],
       singleton$0=include[6],
       of_sorted_array_unchecked$0=include[7],
       of_sorted_array$0=include[8],
       of_increasing_iterator_uncheck$0=include[9],
       of_increasing_sequence$0=include[10],
       of_sequence$0=include[11],
       of_sequence_or_error$0=include[12],
       of_sequence_exn$0=include[13],
       of_sequence_multi$0=include[14],
       of_sequence_fold$0=include[15],
       of_sequence_reduce$0=include[16],
       of_alist$0=include[17],
       of_alist_or_error$0=include[18],
       of_alist_exn$0=include[19],
       of_hashtbl_exn$0=include[20],
       of_alist_multi$0=include[21],
       of_alist_fold$0=include[22],
       of_alist_reduce$0=include[23],
       of_iteri$0=include[24],
       of_key_set$0=include[25],
       to_tree=include[26],
       invariants$0=include[27],
       is_empty=include[28],
       length=include[29],
       set=include[30],
       add=include[31],
       add_exn=include[32],
       add_multi=include[33],
       remove_multi=include[34],
       find_multi=include[35],
       change=include[36],
       update=include[37],
       find_exn=include[38],
       find=include[39],
       remove=include[40],
       mem=include[41],
       iter_keys=include[42],
       iter=include[43],
       iteri=include[44],
       iteri_until$0=include[45],
       iter2$0=include[46],
       map=include[47],
       mapi=include[48],
       fold=include[49],
       fold_right=include[50],
       fold2$0=include[51],
       filter_keys=include[52],
       filter=include[53],
       filteri=include[54],
       filter_map=include[55],
       filter_mapi=include[56],
       partition_mapi=include[57],
       partition_map=include[58],
       partitioni_tf=include[59],
       partition_tf=include[60],
       combine_errors$0=include[61],
       compare_direct$0=include[62],
       equal=include[63],
       keys=include[64],
       data=include[65],
       to_alist=include[66],
       validate=include[67],
       validatei$0=include[68],
       symmetric_diff$0=include[69],
       fold_symmetric_diff$0=include[70],
       merge=include[71],
       min_elt=include[72],
       min_elt_exn$0=include[73],
       max_elt=include[74],
       max_elt_exn$0=include[75],
       for_all=include[76],
       for_alli=include[77],
       exists=include[78],
       existsi=include[79],
       count=include[80],
       counti=include[81],
       split$0=include[82],
       append=include[83],
       subrange$0=include[84],
       fold_range_inclusive$0=include[85],
       range_to_alist$0=include[86],
       closest_key$0=include[87],
       nth$0=include[88],
       nth_exn$0=include[89],
       rank$0=include[90],
       to_sequence=include[91],
       binary_search=include[92],
       binary_search_segmented=include[93],
       key_set=include[94],
       quickcheck_generator$0=include[95],
       quickcheck_observer=include[96],
       quickcheck_shrinker=include[97],
       _blL_=include[2];
      function sexp_of_t$0(sexp_of_v,t)
       {function _blM_(param){return _wb_}
        return caml_call4(_blL_,Key[1],sexp_of_v,_blM_,t)}
      function Provide_of_sexp$0(X)
       {function t_of_sexp(v_of_sexp,sexp)
         {return caml_call3(t_of_sexp$0,X[1],v_of_sexp,sexp)}
        return [0,t_of_sexp]}
      var
       Tree=
        [0,
         comparator,
         t_of_sexp$0,
         empty$0,
         of_tree$0,
         singleton$0,
         of_sorted_array_unchecked$0,
         of_sorted_array$0,
         of_increasing_iterator_uncheck$0,
         of_increasing_sequence$0,
         of_sequence$0,
         of_sequence_or_error$0,
         of_sequence_exn$0,
         of_sequence_multi$0,
         of_sequence_fold$0,
         of_sequence_reduce$0,
         of_alist$0,
         of_alist_or_error$0,
         of_alist_exn$0,
         of_hashtbl_exn$0,
         of_alist_multi$0,
         of_alist_fold$0,
         of_alist_reduce$0,
         of_iteri$0,
         of_key_set$0,
         to_tree,
         invariants$0,
         is_empty,
         length,
         set,
         add,
         add_exn,
         add_multi,
         remove_multi,
         find_multi,
         change,
         update,
         find_exn,
         find,
         remove,
         mem,
         iter_keys,
         iter,
         iteri,
         iteri_until$0,
         iter2$0,
         map,
         mapi,
         fold,
         fold_right,
         fold2$0,
         filter_keys,
         filter,
         filteri,
         filter_map,
         filter_mapi,
         partition_mapi,
         partition_map,
         partitioni_tf,
         partition_tf,
         combine_errors$0,
         compare_direct$0,
         equal,
         keys,
         data,
         to_alist,
         validate,
         validatei$0,
         symmetric_diff$0,
         fold_symmetric_diff$0,
         merge,
         min_elt,
         min_elt_exn$0,
         max_elt,
         max_elt_exn$0,
         for_all,
         for_alli,
         exists,
         existsi,
         count,
         counti,
         split$0,
         append,
         subrange$0,
         fold_range_inclusive$0,
         range_to_alist$0,
         closest_key$0,
         nth$0,
         nth_exn$0,
         rank$0,
         to_sequence,
         binary_search,
         binary_search_segmented,
         key_set,
         quickcheck_generator$0,
         quickcheck_observer,
         quickcheck_shrinker,
         sexp_of_t$0,
         Provide_of_sexp$0];
      return [0,
              Key,
              Key_S1,
              t_of_sexp,
              empty,
              singleton,
              of_sorted_array,
              of_sorted_array_unchecked,
              of_increasing_iterator_uncheck,
              of_alist,
              of_alist_or_error,
              of_alist_exn,
              of_alist_multi,
              of_alist_fold,
              of_alist_reduce,
              of_increasing_sequence,
              of_sequence,
              of_sequence_or_error,
              of_sequence_exn,
              of_sequence_multi,
              of_sequence_fold,
              of_sequence_reduce,
              of_iteri,
              of_tree,
              of_hashtbl_exn,
              of_key_set,
              quickcheck_generator,
              invariants,
              is_empty$3,
              length$4,
              add$1,
              add_exn$0,
              set$1,
              add_multi$0,
              remove_multi$0,
              find_multi$0,
              change$0,
              update$0,
              find$2,
              find_exn$1,
              remove$1,
              mem$2,
              iter_keys$0,
              iter$4,
              iteri$1,
              iteri_until,
              iter2,
              map$9,
              mapi$1,
              fold$2,
              fold_right$0,
              fold2,
              filter_keys$0,
              filter$4,
              filteri$1,
              filter_map$3,
              filter_mapi$1,
              partition_mapi$0,
              partition_map$0,
              partitioni_tf$1,
              partition_tf$1,
              combine_errors,
              compare_direct,
              equal$5,
              keys$1,
              data$0,
              to_alist$0,
              validate$0,
              validatei,
              merge$0,
              symmetric_diff,
              fold_symmetric_diff,
              min_elt$1,
              min_elt_exn,
              max_elt$1,
              max_elt_exn,
              for_all$2,
              for_alli$1,
              exists$2,
              existsi$1,
              count$2,
              counti$1,
              split,
              append$0,
              subrange,
              fold_range_inclusive,
              range_to_alist,
              closest_key,
              nth,
              nth_exn,
              rank,
              to_tree$0,
              to_sequence$0,
              binary_search$0,
              binary_search_segmented$0,
              quickcheck_observer$0,
              quickcheck_shrinker$0,
              key_set$1,
              compare,
              sexp_of_t,
              Provide_of_sexp,
              Provide_hash,
              Provide_bin_io$0,
              Tree]}
    function Make_using_comparator(Key_sexp)
     {var
       _blJ_=Make_plain_using_comparator([0,Key_sexp[2],Key_sexp[3]]),
       Key_S1=_blJ_[2],
       empty=_blJ_[4],
       singleton=_blJ_[5],
       of_sorted_array=_blJ_[6],
       of_sorted_array_unchecked=_blJ_[7],
       of_increasing_iterator_uncheck=_blJ_[8],
       of_alist=_blJ_[9],
       of_alist_or_error=_blJ_[10],
       of_alist_exn=_blJ_[11],
       of_alist_multi=_blJ_[12],
       of_alist_fold=_blJ_[13],
       of_alist_reduce=_blJ_[14],
       of_increasing_sequence=_blJ_[15],
       of_sequence=_blJ_[16],
       of_sequence_or_error=_blJ_[17],
       of_sequence_exn=_blJ_[18],
       of_sequence_multi=_blJ_[19],
       of_sequence_fold=_blJ_[20],
       of_sequence_reduce=_blJ_[21],
       of_iteri=_blJ_[22],
       of_tree=_blJ_[23],
       of_hashtbl_exn=_blJ_[24],
       of_key_set=_blJ_[25],
       quickcheck_generator=_blJ_[26],
       invariants=_blJ_[27],
       is_empty=_blJ_[28],
       length=_blJ_[29],
       add=_blJ_[30],
       add_exn=_blJ_[31],
       set=_blJ_[32],
       add_multi=_blJ_[33],
       remove_multi=_blJ_[34],
       find_multi=_blJ_[35],
       change=_blJ_[36],
       update=_blJ_[37],
       find=_blJ_[38],
       find_exn=_blJ_[39],
       remove=_blJ_[40],
       mem=_blJ_[41],
       iter_keys=_blJ_[42],
       iter=_blJ_[43],
       iteri=_blJ_[44],
       iteri_until=_blJ_[45],
       iter2=_blJ_[46],
       map=_blJ_[47],
       mapi=_blJ_[48],
       fold=_blJ_[49],
       fold_right=_blJ_[50],
       fold2=_blJ_[51],
       filter_keys=_blJ_[52],
       filter=_blJ_[53],
       filteri=_blJ_[54],
       filter_map=_blJ_[55],
       filter_mapi=_blJ_[56],
       partition_mapi=_blJ_[57],
       partition_map=_blJ_[58],
       partitioni_tf=_blJ_[59],
       partition_tf=_blJ_[60],
       combine_errors=_blJ_[61],
       compare_direct=_blJ_[62],
       equal=_blJ_[63],
       keys=_blJ_[64],
       data=_blJ_[65],
       to_alist=_blJ_[66],
       validate=_blJ_[67],
       validatei=_blJ_[68],
       merge=_blJ_[69],
       symmetric_diff=_blJ_[70],
       fold_symmetric_diff=_blJ_[71],
       min_elt=_blJ_[72],
       min_elt_exn=_blJ_[73],
       max_elt=_blJ_[74],
       max_elt_exn=_blJ_[75],
       for_all=_blJ_[76],
       for_alli=_blJ_[77],
       exists=_blJ_[78],
       existsi=_blJ_[79],
       count=_blJ_[80],
       counti=_blJ_[81],
       split=_blJ_[82],
       append=_blJ_[83],
       subrange=_blJ_[84],
       fold_range_inclusive=_blJ_[85],
       range_to_alist=_blJ_[86],
       closest_key=_blJ_[87],
       nth=_blJ_[88],
       nth_exn=_blJ_[89],
       rank=_blJ_[90],
       to_tree=_blJ_[91],
       to_sequence=_blJ_[92],
       binary_search=_blJ_[93],
       binary_search_segmented=_blJ_[94],
       quickcheck_observer=_blJ_[95],
       quickcheck_shrinker=_blJ_[96],
       key_set=_blJ_[97],
       compare=_blJ_[98],
       sexp_of_t=_blJ_[99],
       Provide_of_sexp=_blJ_[100],
       Provide_hash=_blJ_[101],
       Provide_bin_io=_blJ_[102],
       Tree=_blJ_[103],
       include=caml_call1(Provide_of_sexp,[0,Key_sexp[1]]),
       t_of_sexp=include[1],
       comparator=Tree[1],
       empty$0=Tree[3],
       of_tree$0=Tree[4],
       singleton$0=Tree[5],
       of_sorted_array_unchecked$0=Tree[6],
       of_sorted_array$0=Tree[7],
       of_increasing_iterator_uncheck$0=Tree[8],
       of_increasing_sequence$0=Tree[9],
       of_sequence$0=Tree[10],
       of_sequence_or_error$0=Tree[11],
       of_sequence_exn$0=Tree[12],
       of_sequence_multi$0=Tree[13],
       of_sequence_fold$0=Tree[14],
       of_sequence_reduce$0=Tree[15],
       of_alist$0=Tree[16],
       of_alist_or_error$0=Tree[17],
       of_alist_exn$0=Tree[18],
       of_hashtbl_exn$0=Tree[19],
       of_alist_multi$0=Tree[20],
       of_alist_fold$0=Tree[21],
       of_alist_reduce$0=Tree[22],
       of_iteri$0=Tree[23],
       of_key_set$0=Tree[24],
       to_tree$0=Tree[25],
       invariants$0=Tree[26],
       is_empty$0=Tree[27],
       length$0=Tree[28],
       set$0=Tree[29],
       add$0=Tree[30],
       add_exn$0=Tree[31],
       add_multi$0=Tree[32],
       remove_multi$0=Tree[33],
       find_multi$0=Tree[34],
       change$0=Tree[35],
       update$0=Tree[36],
       find_exn$0=Tree[37],
       find$0=Tree[38],
       remove$0=Tree[39],
       mem$0=Tree[40],
       iter_keys$0=Tree[41],
       iter$0=Tree[42],
       iteri$0=Tree[43],
       iteri_until$0=Tree[44],
       iter2$0=Tree[45],
       map$0=Tree[46],
       mapi$0=Tree[47],
       fold$0=Tree[48],
       fold_right$0=Tree[49],
       fold2$0=Tree[50],
       filter_keys$0=Tree[51],
       filter$0=Tree[52],
       filteri$0=Tree[53],
       filter_map$0=Tree[54],
       filter_mapi$0=Tree[55],
       partition_mapi$0=Tree[56],
       partition_map$0=Tree[57],
       partitioni_tf$0=Tree[58],
       partition_tf$0=Tree[59],
       combine_errors$0=Tree[60],
       compare_direct$0=Tree[61],
       equal$0=Tree[62],
       keys$0=Tree[63],
       data$0=Tree[64],
       to_alist$0=Tree[65],
       validate$0=Tree[66],
       validatei$0=Tree[67],
       symmetric_diff$0=Tree[68],
       fold_symmetric_diff$0=Tree[69],
       merge$0=Tree[70],
       min_elt$0=Tree[71],
       min_elt_exn$0=Tree[72],
       max_elt$0=Tree[73],
       max_elt_exn$0=Tree[74],
       for_all$0=Tree[75],
       for_alli$0=Tree[76],
       exists$0=Tree[77],
       existsi$0=Tree[78],
       count$0=Tree[79],
       counti$0=Tree[80],
       split$0=Tree[81],
       append$0=Tree[82],
       subrange$0=Tree[83],
       fold_range_inclusive$0=Tree[84],
       range_to_alist$0=Tree[85],
       closest_key$0=Tree[86],
       nth$0=Tree[87],
       nth_exn$0=Tree[88],
       rank$0=Tree[89],
       to_sequence$0=Tree[90],
       binary_search$0=Tree[91],
       binary_search_segmented$0=Tree[92],
       key_set$0=Tree[93],
       quickcheck_generator$0=Tree[94],
       quickcheck_observer$0=Tree[95],
       quickcheck_shrinker$0=Tree[96],
       sexp_of_t$0=Tree[97],
       Provide_of_sexp$0=Tree[98],
       include$0=caml_call1(Provide_of_sexp$0,[0,Key_sexp[1]]),
       t_of_sexp$0=include$0[1],
       Tree$0=
        [0,
         comparator,
         empty$0,
         of_tree$0,
         singleton$0,
         of_sorted_array_unchecked$0,
         of_sorted_array$0,
         of_increasing_iterator_uncheck$0,
         of_increasing_sequence$0,
         of_sequence$0,
         of_sequence_or_error$0,
         of_sequence_exn$0,
         of_sequence_multi$0,
         of_sequence_fold$0,
         of_sequence_reduce$0,
         of_alist$0,
         of_alist_or_error$0,
         of_alist_exn$0,
         of_hashtbl_exn$0,
         of_alist_multi$0,
         of_alist_fold$0,
         of_alist_reduce$0,
         of_iteri$0,
         of_key_set$0,
         to_tree$0,
         invariants$0,
         is_empty$0,
         length$0,
         set$0,
         add$0,
         add_exn$0,
         add_multi$0,
         remove_multi$0,
         find_multi$0,
         change$0,
         update$0,
         find_exn$0,
         find$0,
         remove$0,
         mem$0,
         iter_keys$0,
         iter$0,
         iteri$0,
         iteri_until$0,
         iter2$0,
         map$0,
         mapi$0,
         fold$0,
         fold_right$0,
         fold2$0,
         filter_keys$0,
         filter$0,
         filteri$0,
         filter_map$0,
         filter_mapi$0,
         partition_mapi$0,
         partition_map$0,
         partitioni_tf$0,
         partition_tf$0,
         combine_errors$0,
         compare_direct$0,
         equal$0,
         keys$0,
         data$0,
         to_alist$0,
         validate$0,
         validatei$0,
         symmetric_diff$0,
         fold_symmetric_diff$0,
         merge$0,
         min_elt$0,
         min_elt_exn$0,
         max_elt$0,
         max_elt_exn$0,
         for_all$0,
         for_alli$0,
         exists$0,
         existsi$0,
         count$0,
         counti$0,
         split$0,
         append$0,
         subrange$0,
         fold_range_inclusive$0,
         range_to_alist$0,
         closest_key$0,
         nth$0,
         nth_exn$0,
         rank$0,
         to_sequence$0,
         binary_search$0,
         binary_search_segmented$0,
         key_set$0,
         quickcheck_generator$0,
         quickcheck_observer$0,
         quickcheck_shrinker$0,
         sexp_of_t$0,
         Provide_of_sexp$0,
         t_of_sexp$0];
      return [0,
              Key_S1,
              empty,
              singleton,
              of_sorted_array,
              of_sorted_array_unchecked,
              of_increasing_iterator_uncheck,
              of_alist,
              of_alist_or_error,
              of_alist_exn,
              of_alist_multi,
              of_alist_fold,
              of_alist_reduce,
              of_increasing_sequence,
              of_sequence,
              of_sequence_or_error,
              of_sequence_exn,
              of_sequence_multi,
              of_sequence_fold,
              of_sequence_reduce,
              of_iteri,
              of_tree,
              of_hashtbl_exn,
              of_key_set,
              quickcheck_generator,
              invariants,
              is_empty,
              length,
              add,
              add_exn,
              set,
              add_multi,
              remove_multi,
              find_multi,
              change,
              update,
              find,
              find_exn,
              remove,
              mem,
              iter_keys,
              iter,
              iteri,
              iteri_until,
              iter2,
              map,
              mapi,
              fold,
              fold_right,
              fold2,
              filter_keys,
              filter,
              filteri,
              filter_map,
              filter_mapi,
              partition_mapi,
              partition_map,
              partitioni_tf,
              partition_tf,
              combine_errors,
              compare_direct,
              equal,
              keys,
              data,
              to_alist,
              validate,
              validatei,
              merge,
              symmetric_diff,
              fold_symmetric_diff,
              min_elt,
              min_elt_exn,
              max_elt,
              max_elt_exn,
              for_all,
              for_alli,
              exists,
              existsi,
              count,
              counti,
              split,
              append,
              subrange,
              fold_range_inclusive,
              range_to_alist,
              closest_key,
              nth,
              nth_exn,
              rank,
              to_tree,
              to_sequence,
              binary_search,
              binary_search_segmented,
              quickcheck_observer,
              quickcheck_shrinker,
              key_set,
              compare,
              sexp_of_t,
              Provide_of_sexp,
              Provide_hash,
              Provide_bin_io,
              Key_sexp,
              t_of_sexp,
              Tree$0]}
    function Make_binable_using_comparator(Key_bin_sexp)
     {var
       _blI_=
        Make_using_comparator
         ([0,Key_bin_sexp[9],Key_bin_sexp[10],Key_bin_sexp[11]]),
       Key_S1=_blI_[1],
       empty=_blI_[2],
       singleton=_blI_[3],
       of_sorted_array=_blI_[4],
       of_sorted_array_unchecked=_blI_[5],
       of_increasing_iterator_uncheck=_blI_[6],
       of_alist=_blI_[7],
       of_alist_or_error=_blI_[8],
       of_alist_exn=_blI_[9],
       of_alist_multi=_blI_[10],
       of_alist_fold=_blI_[11],
       of_alist_reduce=_blI_[12],
       of_increasing_sequence=_blI_[13],
       of_sequence=_blI_[14],
       of_sequence_or_error=_blI_[15],
       of_sequence_exn=_blI_[16],
       of_sequence_multi=_blI_[17],
       of_sequence_fold=_blI_[18],
       of_sequence_reduce=_blI_[19],
       of_iteri=_blI_[20],
       of_tree=_blI_[21],
       of_hashtbl_exn=_blI_[22],
       of_key_set=_blI_[23],
       quickcheck_generator=_blI_[24],
       invariants=_blI_[25],
       is_empty=_blI_[26],
       length=_blI_[27],
       add=_blI_[28],
       add_exn=_blI_[29],
       set=_blI_[30],
       add_multi=_blI_[31],
       remove_multi=_blI_[32],
       find_multi=_blI_[33],
       change=_blI_[34],
       update=_blI_[35],
       find=_blI_[36],
       find_exn=_blI_[37],
       remove=_blI_[38],
       mem=_blI_[39],
       iter_keys=_blI_[40],
       iter=_blI_[41],
       iteri=_blI_[42],
       iteri_until=_blI_[43],
       iter2=_blI_[44],
       map=_blI_[45],
       mapi=_blI_[46],
       fold=_blI_[47],
       fold_right=_blI_[48],
       fold2=_blI_[49],
       filter_keys=_blI_[50],
       filter=_blI_[51],
       filteri=_blI_[52],
       filter_map=_blI_[53],
       filter_mapi=_blI_[54],
       partition_mapi=_blI_[55],
       partition_map=_blI_[56],
       partitioni_tf=_blI_[57],
       partition_tf=_blI_[58],
       combine_errors=_blI_[59],
       compare_direct=_blI_[60],
       equal=_blI_[61],
       keys=_blI_[62],
       data=_blI_[63],
       to_alist=_blI_[64],
       validate=_blI_[65],
       validatei=_blI_[66],
       merge=_blI_[67],
       symmetric_diff=_blI_[68],
       fold_symmetric_diff=_blI_[69],
       min_elt=_blI_[70],
       min_elt_exn=_blI_[71],
       max_elt=_blI_[72],
       max_elt_exn=_blI_[73],
       for_all=_blI_[74],
       for_alli=_blI_[75],
       exists=_blI_[76],
       existsi=_blI_[77],
       count=_blI_[78],
       counti=_blI_[79],
       split=_blI_[80],
       append=_blI_[81],
       subrange=_blI_[82],
       fold_range_inclusive=_blI_[83],
       range_to_alist=_blI_[84],
       closest_key=_blI_[85],
       nth=_blI_[86],
       nth_exn=_blI_[87],
       rank=_blI_[88],
       to_tree=_blI_[89],
       to_sequence=_blI_[90],
       binary_search=_blI_[91],
       binary_search_segmented=_blI_[92],
       quickcheck_observer=_blI_[93],
       quickcheck_shrinker=_blI_[94],
       key_set=_blI_[95],
       compare=_blI_[96],
       sexp_of_t=_blI_[97],
       Provide_of_sexp=_blI_[98],
       Provide_hash=_blI_[99],
       Provide_bin_io=_blI_[100],
       t_of_sexp=_blI_[102],
       Tree=_blI_[103],
       include=
        caml_call1
         (Provide_bin_io,
          [0,
           Key_bin_sexp[1],
           Key_bin_sexp[2],
           Key_bin_sexp[3],
           Key_bin_sexp[4],
           Key_bin_sexp[5],
           Key_bin_sexp[6],
           Key_bin_sexp[7],
           Key_bin_sexp[8]]),
       bin_shape_t=include[1],
       bin_size_t=include[2],
       bin_write_t=include[3],
       bin_read_t=include[4],
       bin_read_t$0=include[5],
       bin_writer_t=include[6],
       bin_reader_t=include[7],
       bin_t=include[8];
      return [0,
              Key_S1,
              empty,
              singleton,
              of_sorted_array,
              of_sorted_array_unchecked,
              of_increasing_iterator_uncheck,
              of_alist,
              of_alist_or_error,
              of_alist_exn,
              of_alist_multi,
              of_alist_fold,
              of_alist_reduce,
              of_increasing_sequence,
              of_sequence,
              of_sequence_or_error,
              of_sequence_exn,
              of_sequence_multi,
              of_sequence_fold,
              of_sequence_reduce,
              of_iteri,
              of_tree,
              of_hashtbl_exn,
              of_key_set,
              quickcheck_generator,
              invariants,
              is_empty,
              length,
              add,
              add_exn,
              set,
              add_multi,
              remove_multi,
              find_multi,
              change,
              update,
              find,
              find_exn,
              remove,
              mem,
              iter_keys,
              iter,
              iteri,
              iteri_until,
              iter2,
              map,
              mapi,
              fold,
              fold_right,
              fold2,
              filter_keys,
              filter,
              filteri,
              filter_map,
              filter_mapi,
              partition_mapi,
              partition_map,
              partitioni_tf,
              partition_tf,
              combine_errors,
              compare_direct,
              equal,
              keys,
              data,
              to_alist,
              validate,
              validatei,
              merge,
              symmetric_diff,
              fold_symmetric_diff,
              min_elt,
              min_elt_exn,
              max_elt,
              max_elt_exn,
              for_all,
              for_alli,
              exists,
              existsi,
              count,
              counti,
              split,
              append,
              subrange,
              fold_range_inclusive,
              range_to_alist,
              closest_key,
              nth,
              nth_exn,
              rank,
              to_tree,
              to_sequence,
              binary_search,
              binary_search_segmented,
              quickcheck_observer,
              quickcheck_shrinker,
              key_set,
              compare,
              sexp_of_t,
              Provide_of_sexp,
              Provide_hash,
              Provide_bin_io,
              t_of_sexp,
              Tree,
              Key_bin_sexp,
              bin_shape_t,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_writer_t,
              bin_reader_t,
              bin_t]}
    function bin_shape_m_t(m){return Provide_bin_io(m)[1]}
    function bin_size_m_t(m){return Provide_bin_io(m)[2]}
    function bin_write_m_t(m){return Provide_bin_io(m)[3]}
    function bin_read_m_t(m){return Provide_bin_io(m)[4]}
    function bin_read_m_t$0(m){return Provide_bin_io(m)[5]}
    function quickcheck_generator_m_t(Key,v_generator)
     {return caml_call3(quickcheck_generator$0,[0,Key[1]],Key[2],v_generator)}
    function quickcheck_observer_m_t(Key,v_observer)
     {return caml_call2(quickcheck_observer,Key[2],v_observer)}
    function quickcheck_shrinker_m_t(Key,v_shrinker)
     {return caml_call2(quickcheck_shrinker,Key[2],v_shrinker)}
    var
     hash_fold_m_t=Base_Map[99],
     equal_m_t=Base_Map[98],
     compare_m_t=Base_Map[97],
     m_t_sexp_grammar=Base_Map[96],
     m_t_of_sexp$0=Base_Map[95],
     sexp_of_m_t$0=Base_Map[94],
     include$34=Base_Map[101][3],
     sexp_of_t$26=include$34[1],
     empty$3=include$34[3],
     singleton$4=include$34[4],
     of_alist$4=include$34[5],
     of_alist_or_error$4=include$34[6],
     of_alist_exn$4=include$34[7],
     of_alist_multi$4=include$34[8],
     of_alist_fold$2=include$34[9],
     of_alist_reduce$2=include$34[10],
     of_sorted_array$2=include$34[11],
     of_sorted_array_unchecked$2=include$34[12],
     of_increasing_iterator_uncheck$2=include$34[13],
     of_increasing_sequence$2=include$34[14],
     of_sequence$3=include$34[15],
     of_sequence_or_error$2=include$34[16],
     of_sequence_exn$2=include$34[17],
     of_sequence_multi$2=include$34[18],
     of_sequence_fold$2=include$34[19],
     of_sequence_reduce$2=include$34[20],
     of_iteri$2=include$34[21],
     of_tree$2=include$34[22],
     invariants$2=include$34[23],
     is_empty$6=include$34[24],
     length$7=include$34[25],
     add$4=include$34[26],
     add_exn$3=include$34[27],
     set$4=include$34[28],
     add_multi$3=include$34[29],
     remove_multi$3=include$34[30],
     find_multi$3=include$34[31],
     change$3=include$34[32],
     update$3=include$34[33],
     find$5=include$34[34],
     find_exn$4=include$34[35],
     remove$4=include$34[36],
     mem$5=include$34[37],
     iter_keys$3=include$34[38],
     iter$8=include$34[39],
     iteri$4=include$34[40],
     iteri_until$2=include$34[41],
     iter2$2=include$34[42],
     map$12=include$34[43],
     mapi$4=include$34[44],
     fold$5=include$34[45],
     fold_right$3=include$34[46],
     fold2$2=include$34[47],
     filter_keys$3=include$34[48],
     filter$7=include$34[49],
     filteri$4=include$34[50],
     filter_map$6=include$34[51],
     filter_mapi$4=include$34[52],
     partition_mapi$3=include$34[53],
     partition_map$3=include$34[54],
     partitioni_tf$4=include$34[55],
     partition_tf$4=include$34[56],
     combine_errors$2=include$34[57],
     compare_direct$2=include$34[58],
     equal$8=include$34[59],
     keys$4=include$34[60],
     data$3=include$34[61],
     to_alist$3=include$34[62],
     validate$3=include$34[63],
     validatei$2=include$34[64],
     merge$3=include$34[65],
     symmetric_diff$2=include$34[66],
     fold_symmetric_diff$2=include$34[67],
     min_elt$4=include$34[68],
     min_elt_exn$2=include$34[69],
     max_elt$4=include$34[70],
     max_elt_exn$2=include$34[71],
     for_all$5=include$34[72],
     for_alli$4=include$34[73],
     exists$5=include$34[74],
     existsi$4=include$34[75],
     count$5=include$34[76],
     counti$4=include$34[77],
     split$2=include$34[78],
     append$3=include$34[79],
     subrange$2=include$34[80],
     fold_range_inclusive$2=include$34[81],
     range_to_alist$2=include$34[82],
     closest_key$2=include$34[83],
     nth$2=include$34[84],
     nth_exn$2=include$34[85],
     rank$2=include$34[86],
     to_tree$3=include$34[87],
     to_sequence$3=include$34[88],
     binary_search$3=include$34[89],
     binary_search_segmented$3=include$34[90];
    function quickcheck_generator$2(comparator,k,v)
     {return gen_tree(comparator,k,v)}
    function quickcheck_observer$2(k,v){return obs_tree(k,v)}
    function quickcheck_shrinker$2(comparator,k,v)
     {return shr_tree(comparator,k,v)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$109);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Map$0);
    var
     _wc_=
      [0,
       [0,
        bin_shape_t$30,
        bin_size_t$37,
        bin_write_t$37,
        bin_read_t$77,
        bin_read_t$76,
        bin_writer_t$24,
        bin_reader_t$24,
        bin_t$24,
        compare$20,
        t_of_sexp$21,
        sexp_of_t$22,
        map$8]],
     _wd_=
      [0,
       [0,
        function(_blH_)
         {var
           _blG_=
            Make_binable_using_comparator
             ([0,
               _blH_[1],
               _blH_[2],
               _blH_[3],
               _blH_[4],
               _blH_[5],
               _blH_[6],
               _blH_[7],
               _blH_[8],
               _blH_[10],
               _blH_[11],
               _blH_[12]]);
          return [0,
                  _blG_[104],
                  _blG_[105],
                  _blG_[106],
                  _blG_[107],
                  _blG_[108],
                  _blG_[109],
                  _blG_[110],
                  _blG_[111],
                  _blG_[96],
                  _blG_[101],
                  _blG_[97],
                  _blG_[45]]}],
       _wc_];
    function _we_(_blD_)
     {var _blE_=Make_binable_using_comparator(_blD_),_blF_=_blE_[102];
      return [0,
              _blE_[103],
              [0,
               _blF_[2],
               _blF_[4],
               _blF_[15],
               _blF_[16],
               _blF_[17],
               _blF_[19],
               _blF_[20],
               _blF_[21],
               _blF_[6],
               _blF_[5],
               _blF_[7],
               _blF_[8],
               _blF_[9],
               _blF_[10],
               _blF_[11],
               _blF_[12],
               _blF_[13],
               _blF_[14],
               _blF_[22],
               _blF_[3],
               _blF_[18],
               _blF_[23],
               _blF_[93],
               _blF_[25],
               _blF_[26],
               _blF_[27],
               _blF_[29],
               _blF_[30],
               _blF_[28],
               _blF_[31],
               _blF_[32],
               _blF_[33],
               _blF_[34],
               _blF_[35],
               _blF_[37],
               _blF_[36],
               _blF_[38],
               _blF_[39],
               _blF_[40],
               _blF_[41],
               _blF_[42],
               _blF_[43],
               _blF_[44],
               _blF_[45],
               _blF_[46],
               _blF_[47],
               _blF_[48],
               _blF_[49],
               _blF_[50],
               _blF_[51],
               _blF_[52],
               _blF_[53],
               _blF_[54],
               _blF_[55],
               _blF_[56],
               _blF_[57],
               _blF_[58],
               _blF_[59],
               _blF_[60],
               _blF_[61],
               _blF_[62],
               _blF_[63],
               _blF_[64],
               _blF_[65],
               _blF_[66],
               _blF_[69],
               _blF_[67],
               _blF_[68],
               _blF_[70],
               _blF_[71],
               _blF_[72],
               _blF_[73],
               _blF_[74],
               _blF_[75],
               _blF_[76],
               _blF_[77],
               _blF_[78],
               _blF_[79],
               _blF_[80],
               _blF_[81],
               _blF_[82],
               _blF_[83],
               _blF_[84],
               _blF_[85],
               _blF_[86],
               _blF_[87],
               _blF_[88],
               _blF_[24],
               _blF_[89],
               _blF_[90],
               _blF_[91],
               _blF_[92],
               _blF_[94],
               _blF_[95],
               _blF_[97],
               _blF_[98],
               _blF_[96]],
              _blE_[96],
              _blE_[2],
              _blE_[3],
              _blE_[7],
              _blE_[8],
              _blE_[9],
              _blE_[10],
              _blE_[11],
              _blE_[12],
              _blE_[4],
              _blE_[5],
              _blE_[6],
              _blE_[13],
              _blE_[14],
              _blE_[15],
              _blE_[16],
              _blE_[17],
              _blE_[18],
              _blE_[19],
              _blE_[20],
              _blE_[21],
              _blE_[22],
              _blE_[23],
              _blE_[24],
              _blE_[25],
              _blE_[26],
              _blE_[27],
              _blE_[28],
              _blE_[29],
              _blE_[30],
              _blE_[31],
              _blE_[32],
              _blE_[33],
              _blE_[34],
              _blE_[35],
              _blE_[36],
              _blE_[37],
              _blE_[38],
              _blE_[39],
              _blE_[40],
              _blE_[41],
              _blE_[42],
              _blE_[43],
              _blE_[44],
              _blE_[45],
              _blE_[46],
              _blE_[47],
              _blE_[48],
              _blE_[49],
              _blE_[50],
              _blE_[51],
              _blE_[52],
              _blE_[53],
              _blE_[54],
              _blE_[55],
              _blE_[56],
              _blE_[57],
              _blE_[58],
              _blE_[59],
              _blE_[60],
              _blE_[61],
              _blE_[62],
              _blE_[63],
              _blE_[64],
              _blE_[65],
              _blE_[66],
              _blE_[67],
              _blE_[68],
              _blE_[69],
              _blE_[70],
              _blE_[71],
              _blE_[72],
              _blE_[73],
              _blE_[74],
              _blE_[75],
              _blE_[76],
              _blE_[77],
              _blE_[78],
              _blE_[79],
              _blE_[80],
              _blE_[81],
              _blE_[82],
              _blE_[83],
              _blE_[84],
              _blE_[85],
              _blE_[86],
              _blE_[87],
              _blE_[88],
              _blE_[89],
              _blE_[90],
              _blE_[91],
              _blE_[92],
              _blE_[95],
              _blE_[93],
              _blE_[94],
              _blE_[98],
              _blE_[100],
              _blE_[99],
              _blE_[101],
              _blE_[97],
              _blE_[104],
              _blE_[105],
              _blE_[106],
              _blE_[107],
              _blE_[108],
              _blE_[109],
              _blE_[110],
              _blE_[111]]}
    function _wf_(Key)
     {var
       bin_size_t=Key[1],
       bin_write_t=Key[2],
       bin_read_t=Key[3],
       bin_read_t$0=Key[4],
       bin_shape_t=Key[5],
       bin_writer_t=Key[6],
       bin_reader_t=Key[7],
       bin_t=Key[8],
       t_of_sexp=Key[10],
       sexp_of_t=Key[11],
       include=caml_call1(Make,[0,Key[9],Key[11]]),
       comparator=include[1],
       _blB_=
        Make_binable_using_comparator
         ([0,
           bin_size_t,
           bin_write_t,
           bin_read_t,
           bin_read_t$0,
           bin_shape_t,
           bin_writer_t,
           bin_reader_t,
           bin_t,
           t_of_sexp,
           sexp_of_t,
           comparator]),
       _blC_=_blB_[102];
      return [0,
              _blB_[103],
              [0,
               _blC_[2],
               _blC_[4],
               _blC_[15],
               _blC_[16],
               _blC_[17],
               _blC_[19],
               _blC_[20],
               _blC_[21],
               _blC_[6],
               _blC_[5],
               _blC_[7],
               _blC_[8],
               _blC_[9],
               _blC_[10],
               _blC_[11],
               _blC_[12],
               _blC_[13],
               _blC_[14],
               _blC_[22],
               _blC_[3],
               _blC_[18],
               _blC_[23],
               _blC_[93],
               _blC_[25],
               _blC_[26],
               _blC_[27],
               _blC_[29],
               _blC_[30],
               _blC_[28],
               _blC_[31],
               _blC_[32],
               _blC_[33],
               _blC_[34],
               _blC_[35],
               _blC_[37],
               _blC_[36],
               _blC_[38],
               _blC_[39],
               _blC_[40],
               _blC_[41],
               _blC_[42],
               _blC_[43],
               _blC_[44],
               _blC_[45],
               _blC_[46],
               _blC_[47],
               _blC_[48],
               _blC_[49],
               _blC_[50],
               _blC_[51],
               _blC_[52],
               _blC_[53],
               _blC_[54],
               _blC_[55],
               _blC_[56],
               _blC_[57],
               _blC_[58],
               _blC_[59],
               _blC_[60],
               _blC_[61],
               _blC_[62],
               _blC_[63],
               _blC_[64],
               _blC_[65],
               _blC_[66],
               _blC_[69],
               _blC_[67],
               _blC_[68],
               _blC_[70],
               _blC_[71],
               _blC_[72],
               _blC_[73],
               _blC_[74],
               _blC_[75],
               _blC_[76],
               _blC_[77],
               _blC_[78],
               _blC_[79],
               _blC_[80],
               _blC_[81],
               _blC_[82],
               _blC_[83],
               _blC_[84],
               _blC_[85],
               _blC_[86],
               _blC_[87],
               _blC_[88],
               _blC_[24],
               _blC_[89],
               _blC_[90],
               _blC_[91],
               _blC_[92],
               _blC_[94],
               _blC_[95],
               _blC_[97],
               _blC_[98],
               _blC_[96]],
              _blB_[96],
              _blB_[2],
              _blB_[3],
              _blB_[7],
              _blB_[8],
              _blB_[9],
              _blB_[10],
              _blB_[11],
              _blB_[12],
              _blB_[4],
              _blB_[5],
              _blB_[6],
              _blB_[13],
              _blB_[14],
              _blB_[15],
              _blB_[16],
              _blB_[17],
              _blB_[18],
              _blB_[19],
              _blB_[20],
              _blB_[21],
              _blB_[22],
              _blB_[23],
              _blB_[24],
              _blB_[25],
              _blB_[26],
              _blB_[27],
              _blB_[28],
              _blB_[29],
              _blB_[30],
              _blB_[31],
              _blB_[32],
              _blB_[33],
              _blB_[34],
              _blB_[35],
              _blB_[36],
              _blB_[37],
              _blB_[38],
              _blB_[39],
              _blB_[40],
              _blB_[41],
              _blB_[42],
              _blB_[43],
              _blB_[44],
              _blB_[45],
              _blB_[46],
              _blB_[47],
              _blB_[48],
              _blB_[49],
              _blB_[50],
              _blB_[51],
              _blB_[52],
              _blB_[53],
              _blB_[54],
              _blB_[55],
              _blB_[56],
              _blB_[57],
              _blB_[58],
              _blB_[59],
              _blB_[60],
              _blB_[61],
              _blB_[62],
              _blB_[63],
              _blB_[64],
              _blB_[65],
              _blB_[66],
              _blB_[67],
              _blB_[68],
              _blB_[69],
              _blB_[70],
              _blB_[71],
              _blB_[72],
              _blB_[73],
              _blB_[74],
              _blB_[75],
              _blB_[76],
              _blB_[77],
              _blB_[78],
              _blB_[79],
              _blB_[80],
              _blB_[81],
              _blB_[82],
              _blB_[83],
              _blB_[84],
              _blB_[85],
              _blB_[86],
              _blB_[87],
              _blB_[88],
              _blB_[89],
              _blB_[90],
              _blB_[91],
              _blB_[92],
              _blB_[95],
              _blB_[93],
              _blB_[94],
              _blB_[98],
              _blB_[100],
              _blB_[99],
              _blB_[101],
              _blB_[97],
              _blB_[104],
              _blB_[105],
              _blB_[106],
              _blB_[107],
              _blB_[108],
              _blB_[109],
              _blB_[110],
              _blB_[111]]}
    function _wg_(_bly_)
     {var _blz_=Make_using_comparator(_bly_),_blA_=_blz_[103];
      return [0,
              _blz_[101],
              [0,
               _blA_[2],
               _blA_[4],
               _blA_[15],
               _blA_[16],
               _blA_[17],
               _blA_[19],
               _blA_[20],
               _blA_[21],
               _blA_[6],
               _blA_[5],
               _blA_[7],
               _blA_[8],
               _blA_[9],
               _blA_[10],
               _blA_[11],
               _blA_[12],
               _blA_[13],
               _blA_[14],
               _blA_[22],
               _blA_[3],
               _blA_[18],
               _blA_[23],
               _blA_[93],
               _blA_[25],
               _blA_[26],
               _blA_[27],
               _blA_[29],
               _blA_[30],
               _blA_[28],
               _blA_[31],
               _blA_[32],
               _blA_[33],
               _blA_[34],
               _blA_[35],
               _blA_[37],
               _blA_[36],
               _blA_[38],
               _blA_[39],
               _blA_[40],
               _blA_[41],
               _blA_[42],
               _blA_[43],
               _blA_[44],
               _blA_[45],
               _blA_[46],
               _blA_[47],
               _blA_[48],
               _blA_[49],
               _blA_[50],
               _blA_[51],
               _blA_[52],
               _blA_[53],
               _blA_[54],
               _blA_[55],
               _blA_[56],
               _blA_[57],
               _blA_[58],
               _blA_[59],
               _blA_[60],
               _blA_[61],
               _blA_[62],
               _blA_[63],
               _blA_[64],
               _blA_[65],
               _blA_[66],
               _blA_[69],
               _blA_[67],
               _blA_[68],
               _blA_[70],
               _blA_[71],
               _blA_[72],
               _blA_[73],
               _blA_[74],
               _blA_[75],
               _blA_[76],
               _blA_[77],
               _blA_[78],
               _blA_[79],
               _blA_[80],
               _blA_[81],
               _blA_[82],
               _blA_[83],
               _blA_[84],
               _blA_[85],
               _blA_[86],
               _blA_[87],
               _blA_[88],
               _blA_[24],
               _blA_[89],
               _blA_[90],
               _blA_[91],
               _blA_[92],
               _blA_[94],
               _blA_[95],
               _blA_[97],
               _blA_[98],
               _blA_[96]],
              _blz_[96],
              _blz_[2],
              _blz_[3],
              _blz_[7],
              _blz_[8],
              _blz_[9],
              _blz_[10],
              _blz_[11],
              _blz_[12],
              _blz_[4],
              _blz_[5],
              _blz_[6],
              _blz_[13],
              _blz_[14],
              _blz_[15],
              _blz_[16],
              _blz_[17],
              _blz_[18],
              _blz_[19],
              _blz_[20],
              _blz_[21],
              _blz_[22],
              _blz_[23],
              _blz_[24],
              _blz_[25],
              _blz_[26],
              _blz_[27],
              _blz_[28],
              _blz_[29],
              _blz_[30],
              _blz_[31],
              _blz_[32],
              _blz_[33],
              _blz_[34],
              _blz_[35],
              _blz_[36],
              _blz_[37],
              _blz_[38],
              _blz_[39],
              _blz_[40],
              _blz_[41],
              _blz_[42],
              _blz_[43],
              _blz_[44],
              _blz_[45],
              _blz_[46],
              _blz_[47],
              _blz_[48],
              _blz_[49],
              _blz_[50],
              _blz_[51],
              _blz_[52],
              _blz_[53],
              _blz_[54],
              _blz_[55],
              _blz_[56],
              _blz_[57],
              _blz_[58],
              _blz_[59],
              _blz_[60],
              _blz_[61],
              _blz_[62],
              _blz_[63],
              _blz_[64],
              _blz_[65],
              _blz_[66],
              _blz_[67],
              _blz_[68],
              _blz_[69],
              _blz_[70],
              _blz_[71],
              _blz_[72],
              _blz_[73],
              _blz_[74],
              _blz_[75],
              _blz_[76],
              _blz_[77],
              _blz_[78],
              _blz_[79],
              _blz_[80],
              _blz_[81],
              _blz_[82],
              _blz_[83],
              _blz_[84],
              _blz_[85],
              _blz_[86],
              _blz_[87],
              _blz_[88],
              _blz_[89],
              _blz_[90],
              _blz_[91],
              _blz_[92],
              _blz_[95],
              _blz_[93],
              _blz_[94],
              _blz_[98],
              _blz_[100],
              _blz_[99],
              _blz_[102],
              _blz_[97]]}
    function _wh_(Key)
     {var
       t_of_sexp=Key[2],
       sexp_of_t=Key[3],
       include=caml_call1(Make,[0,Key[1],Key[3]]),
       comparator=include[1],
       _blw_=Make_using_comparator([0,t_of_sexp,sexp_of_t,comparator]),
       _blx_=_blw_[103];
      return [0,
              _blw_[101],
              [0,
               _blx_[2],
               _blx_[4],
               _blx_[15],
               _blx_[16],
               _blx_[17],
               _blx_[19],
               _blx_[20],
               _blx_[21],
               _blx_[6],
               _blx_[5],
               _blx_[7],
               _blx_[8],
               _blx_[9],
               _blx_[10],
               _blx_[11],
               _blx_[12],
               _blx_[13],
               _blx_[14],
               _blx_[22],
               _blx_[3],
               _blx_[18],
               _blx_[23],
               _blx_[93],
               _blx_[25],
               _blx_[26],
               _blx_[27],
               _blx_[29],
               _blx_[30],
               _blx_[28],
               _blx_[31],
               _blx_[32],
               _blx_[33],
               _blx_[34],
               _blx_[35],
               _blx_[37],
               _blx_[36],
               _blx_[38],
               _blx_[39],
               _blx_[40],
               _blx_[41],
               _blx_[42],
               _blx_[43],
               _blx_[44],
               _blx_[45],
               _blx_[46],
               _blx_[47],
               _blx_[48],
               _blx_[49],
               _blx_[50],
               _blx_[51],
               _blx_[52],
               _blx_[53],
               _blx_[54],
               _blx_[55],
               _blx_[56],
               _blx_[57],
               _blx_[58],
               _blx_[59],
               _blx_[60],
               _blx_[61],
               _blx_[62],
               _blx_[63],
               _blx_[64],
               _blx_[65],
               _blx_[66],
               _blx_[69],
               _blx_[67],
               _blx_[68],
               _blx_[70],
               _blx_[71],
               _blx_[72],
               _blx_[73],
               _blx_[74],
               _blx_[75],
               _blx_[76],
               _blx_[77],
               _blx_[78],
               _blx_[79],
               _blx_[80],
               _blx_[81],
               _blx_[82],
               _blx_[83],
               _blx_[84],
               _blx_[85],
               _blx_[86],
               _blx_[87],
               _blx_[88],
               _blx_[24],
               _blx_[89],
               _blx_[90],
               _blx_[91],
               _blx_[92],
               _blx_[94],
               _blx_[95],
               _blx_[97],
               _blx_[98],
               _blx_[96]],
              _blw_[96],
              _blw_[2],
              _blw_[3],
              _blw_[7],
              _blw_[8],
              _blw_[9],
              _blw_[10],
              _blw_[11],
              _blw_[12],
              _blw_[4],
              _blw_[5],
              _blw_[6],
              _blw_[13],
              _blw_[14],
              _blw_[15],
              _blw_[16],
              _blw_[17],
              _blw_[18],
              _blw_[19],
              _blw_[20],
              _blw_[21],
              _blw_[22],
              _blw_[23],
              _blw_[24],
              _blw_[25],
              _blw_[26],
              _blw_[27],
              _blw_[28],
              _blw_[29],
              _blw_[30],
              _blw_[31],
              _blw_[32],
              _blw_[33],
              _blw_[34],
              _blw_[35],
              _blw_[36],
              _blw_[37],
              _blw_[38],
              _blw_[39],
              _blw_[40],
              _blw_[41],
              _blw_[42],
              _blw_[43],
              _blw_[44],
              _blw_[45],
              _blw_[46],
              _blw_[47],
              _blw_[48],
              _blw_[49],
              _blw_[50],
              _blw_[51],
              _blw_[52],
              _blw_[53],
              _blw_[54],
              _blw_[55],
              _blw_[56],
              _blw_[57],
              _blw_[58],
              _blw_[59],
              _blw_[60],
              _blw_[61],
              _blw_[62],
              _blw_[63],
              _blw_[64],
              _blw_[65],
              _blw_[66],
              _blw_[67],
              _blw_[68],
              _blw_[69],
              _blw_[70],
              _blw_[71],
              _blw_[72],
              _blw_[73],
              _blw_[74],
              _blw_[75],
              _blw_[76],
              _blw_[77],
              _blw_[78],
              _blw_[79],
              _blw_[80],
              _blw_[81],
              _blw_[82],
              _blw_[83],
              _blw_[84],
              _blw_[85],
              _blw_[86],
              _blw_[87],
              _blw_[88],
              _blw_[89],
              _blw_[90],
              _blw_[91],
              _blw_[92],
              _blw_[95],
              _blw_[93],
              _blw_[94],
              _blw_[98],
              _blw_[100],
              _blw_[99],
              _blw_[102],
              _blw_[97]]}
    function _wi_(_blt_)
     {var _blu_=Make_plain_using_comparator(_blt_),_blv_=_blu_[103];
      return [0,
              _blu_[1],
              [0,
               _blv_[97],
               _blv_[3],
               _blv_[5],
               _blv_[16],
               _blv_[17],
               _blv_[18],
               _blv_[20],
               _blv_[21],
               _blv_[22],
               _blv_[7],
               _blv_[6],
               _blv_[8],
               _blv_[9],
               _blv_[10],
               _blv_[11],
               _blv_[12],
               _blv_[13],
               _blv_[14],
               _blv_[15],
               _blv_[23],
               _blv_[4],
               _blv_[19],
               _blv_[24],
               _blv_[94],
               _blv_[26],
               _blv_[27],
               _blv_[28],
               _blv_[30],
               _blv_[31],
               _blv_[29],
               _blv_[32],
               _blv_[33],
               _blv_[34],
               _blv_[35],
               _blv_[36],
               _blv_[38],
               _blv_[37],
               _blv_[39],
               _blv_[40],
               _blv_[41],
               _blv_[42],
               _blv_[43],
               _blv_[44],
               _blv_[45],
               _blv_[46],
               _blv_[47],
               _blv_[48],
               _blv_[49],
               _blv_[50],
               _blv_[51],
               _blv_[52],
               _blv_[53],
               _blv_[54],
               _blv_[55],
               _blv_[56],
               _blv_[57],
               _blv_[58],
               _blv_[59],
               _blv_[60],
               _blv_[61],
               _blv_[62],
               _blv_[63],
               _blv_[64],
               _blv_[65],
               _blv_[66],
               _blv_[67],
               _blv_[70],
               _blv_[68],
               _blv_[69],
               _blv_[71],
               _blv_[72],
               _blv_[73],
               _blv_[74],
               _blv_[75],
               _blv_[76],
               _blv_[77],
               _blv_[78],
               _blv_[79],
               _blv_[80],
               _blv_[81],
               _blv_[82],
               _blv_[83],
               _blv_[84],
               _blv_[85],
               _blv_[86],
               _blv_[87],
               _blv_[88],
               _blv_[89],
               _blv_[25],
               _blv_[90],
               _blv_[91],
               _blv_[92],
               _blv_[93],
               _blv_[95],
               _blv_[96],
               _blv_[98]],
              _blu_[98],
              _blu_[99],
              _blu_[4],
              _blu_[5],
              _blu_[9],
              _blu_[10],
              _blu_[11],
              _blu_[12],
              _blu_[13],
              _blu_[14],
              _blu_[6],
              _blu_[7],
              _blu_[8],
              _blu_[15],
              _blu_[16],
              _blu_[17],
              _blu_[18],
              _blu_[19],
              _blu_[20],
              _blu_[21],
              _blu_[22],
              _blu_[23],
              _blu_[24],
              _blu_[25],
              _blu_[26],
              _blu_[27],
              _blu_[28],
              _blu_[29],
              _blu_[30],
              _blu_[31],
              _blu_[32],
              _blu_[33],
              _blu_[34],
              _blu_[35],
              _blu_[36],
              _blu_[37],
              _blu_[38],
              _blu_[39],
              _blu_[40],
              _blu_[41],
              _blu_[42],
              _blu_[43],
              _blu_[44],
              _blu_[45],
              _blu_[46],
              _blu_[47],
              _blu_[48],
              _blu_[49],
              _blu_[50],
              _blu_[51],
              _blu_[52],
              _blu_[53],
              _blu_[54],
              _blu_[55],
              _blu_[56],
              _blu_[57],
              _blu_[58],
              _blu_[59],
              _blu_[60],
              _blu_[61],
              _blu_[62],
              _blu_[63],
              _blu_[64],
              _blu_[65],
              _blu_[66],
              _blu_[67],
              _blu_[68],
              _blu_[69],
              _blu_[70],
              _blu_[71],
              _blu_[72],
              _blu_[73],
              _blu_[74],
              _blu_[75],
              _blu_[76],
              _blu_[77],
              _blu_[78],
              _blu_[79],
              _blu_[80],
              _blu_[81],
              _blu_[82],
              _blu_[83],
              _blu_[84],
              _blu_[85],
              _blu_[86],
              _blu_[87],
              _blu_[88],
              _blu_[89],
              _blu_[90],
              _blu_[91],
              _blu_[92],
              _blu_[93],
              _blu_[94],
              _blu_[97],
              _blu_[95],
              _blu_[96],
              _blu_[100],
              _blu_[102],
              _blu_[101]]}
    var
     _wk_=
      [0,
       [0,
        t_of_sexp$22,
        sexp_of_t$25,
        empty$2,
        singleton$3,
        of_alist$3,
        of_alist_or_error$3,
        of_alist_exn$3,
        of_alist_multi$3,
        of_alist_fold$1,
        of_alist_reduce$1,
        of_sorted_array$1,
        of_sorted_array_unchecked$1,
        of_increasing_iterator_uncheck$1,
        of_increasing_sequence$1,
        of_sequence$2,
        of_sequence_or_error$1,
        of_sequence_exn$1,
        of_sequence_multi$1,
        of_sequence_fold$1,
        of_sequence_reduce$1,
        of_iteri$1,
        of_tree$1,
        of_hashtbl_exn$2,
        of_key_set$0,
        quickcheck_generator$1,
        invariants$1,
        is_empty$5,
        length$6,
        add$3,
        add_exn$2,
        set$3,
        add_multi$2,
        remove_multi$2,
        find_multi$2,
        change$2,
        update$2,
        find$4,
        find_exn$3,
        remove$3,
        mem$4,
        iter_keys$2,
        iter$7,
        iteri$3,
        iteri_until$1,
        iter2$1,
        map$11,
        mapi$3,
        fold$4,
        fold_right$2,
        fold2$1,
        filter_keys$2,
        filter$6,
        filteri$3,
        filter_map$5,
        filter_mapi$3,
        partition_mapi$2,
        partition_map$2,
        partitioni_tf$3,
        partition_tf$3,
        combine_errors$1,
        compare_direct$1,
        equal$7,
        keys$3,
        data$2,
        to_alist$2,
        validate$2,
        validatei$1,
        merge$2,
        symmetric_diff$1,
        fold_symmetric_diff$1,
        min_elt$3,
        min_elt_exn$1,
        max_elt$3,
        max_elt_exn$1,
        for_all$4,
        for_alli$3,
        exists$4,
        existsi$3,
        count$4,
        counti$3,
        split$1,
        append$2,
        subrange$1,
        fold_range_inclusive$1,
        range_to_alist$1,
        closest_key$1,
        nth$1,
        nth_exn$1,
        rank$1,
        to_tree$2,
        to_sequence$2,
        binary_search$2,
        binary_search_segmented$2,
        key_set$2,
        quickcheck_observer$1,
        quickcheck_shrinker$1],
       bin_shape_t$31,
       bin_size_t$38,
       bin_write_t$38,
       bin_read_t$78,
       bin_read_t$79,
       bin_writer_t$25,
       bin_reader_t$25,
       bin_t$25,
       _vA_,
       sexp_of_t$24,
       compare$21,
       _vB_,
       _vC_,
       _vG_,
       _vH_,
       _vI_,
       _vJ_,
       _vK_,
       _vL_,
       _vD_,
       _vE_,
       _vF_,
       _vM_,
       _vN_,
       _vO_,
       _vP_,
       _vQ_,
       _vR_,
       _vS_,
       _vT_,
       _vU_,
       _vV_,
       _vW_,
       _vX_,
       invariants,
       is_empty$3,
       length$4,
       add$1,
       add_exn$0,
       set$1,
       add_multi$0,
       remove_multi$0,
       find_multi$0,
       change$0,
       update$0,
       find$2,
       find_exn$1,
       remove$1,
       mem$2,
       iter_keys$0,
       iter$4,
       iteri$1,
       iteri_until,
       iter2,
       map$9,
       mapi$1,
       fold$2,
       fold_right$0,
       fold2,
       filter_keys$0,
       filter$4,
       filteri$1,
       filter_map$3,
       filter_mapi$1,
       partition_mapi$0,
       partition_map$0,
       partitioni_tf$1,
       partition_tf$1,
       combine_errors,
       compare_direct,
       equal$5,
       keys$1,
       data$0,
       to_alist$0,
       validate$0,
       validatei,
       merge$0,
       symmetric_diff,
       fold_symmetric_diff,
       min_elt$1,
       min_elt_exn,
       max_elt$1,
       max_elt_exn,
       for_all$2,
       for_alli$1,
       exists$2,
       existsi$1,
       count$2,
       counti$1,
       split,
       append$0,
       subrange,
       fold_range_inclusive,
       range_to_alist,
       closest_key,
       nth,
       nth_exn,
       rank,
       to_tree$0,
       to_sequence$0,
       binary_search$0,
       binary_search_segmented$0,
       key_set$1,
       quickcheck_observer$0,
       quickcheck_shrinker$0];
    function _wj_(Key)
     {var
       sexp_of_t=Key[2],
       include=caml_call1(Make,Key),
       comparator=include[1],
       _blr_=Make_plain_using_comparator([0,sexp_of_t,comparator]),
       _bls_=_blr_[103];
      return [0,
              _blr_[1],
              [0,
               _bls_[97],
               _bls_[3],
               _bls_[5],
               _bls_[16],
               _bls_[17],
               _bls_[18],
               _bls_[20],
               _bls_[21],
               _bls_[22],
               _bls_[7],
               _bls_[6],
               _bls_[8],
               _bls_[9],
               _bls_[10],
               _bls_[11],
               _bls_[12],
               _bls_[13],
               _bls_[14],
               _bls_[15],
               _bls_[23],
               _bls_[4],
               _bls_[19],
               _bls_[24],
               _bls_[94],
               _bls_[26],
               _bls_[27],
               _bls_[28],
               _bls_[30],
               _bls_[31],
               _bls_[29],
               _bls_[32],
               _bls_[33],
               _bls_[34],
               _bls_[35],
               _bls_[36],
               _bls_[38],
               _bls_[37],
               _bls_[39],
               _bls_[40],
               _bls_[41],
               _bls_[42],
               _bls_[43],
               _bls_[44],
               _bls_[45],
               _bls_[46],
               _bls_[47],
               _bls_[48],
               _bls_[49],
               _bls_[50],
               _bls_[51],
               _bls_[52],
               _bls_[53],
               _bls_[54],
               _bls_[55],
               _bls_[56],
               _bls_[57],
               _bls_[58],
               _bls_[59],
               _bls_[60],
               _bls_[61],
               _bls_[62],
               _bls_[63],
               _bls_[64],
               _bls_[65],
               _bls_[66],
               _bls_[67],
               _bls_[70],
               _bls_[68],
               _bls_[69],
               _bls_[71],
               _bls_[72],
               _bls_[73],
               _bls_[74],
               _bls_[75],
               _bls_[76],
               _bls_[77],
               _bls_[78],
               _bls_[79],
               _bls_[80],
               _bls_[81],
               _bls_[82],
               _bls_[83],
               _bls_[84],
               _bls_[85],
               _bls_[86],
               _bls_[87],
               _bls_[88],
               _bls_[89],
               _bls_[25],
               _bls_[90],
               _bls_[91],
               _bls_[92],
               _bls_[93],
               _bls_[95],
               _bls_[96],
               _bls_[98]],
              _blr_[98],
              _blr_[99],
              _blr_[4],
              _blr_[5],
              _blr_[9],
              _blr_[10],
              _blr_[11],
              _blr_[12],
              _blr_[13],
              _blr_[14],
              _blr_[6],
              _blr_[7],
              _blr_[8],
              _blr_[15],
              _blr_[16],
              _blr_[17],
              _blr_[18],
              _blr_[19],
              _blr_[20],
              _blr_[21],
              _blr_[22],
              _blr_[23],
              _blr_[24],
              _blr_[25],
              _blr_[26],
              _blr_[27],
              _blr_[28],
              _blr_[29],
              _blr_[30],
              _blr_[31],
              _blr_[32],
              _blr_[33],
              _blr_[34],
              _blr_[35],
              _blr_[36],
              _blr_[37],
              _blr_[38],
              _blr_[39],
              _blr_[40],
              _blr_[41],
              _blr_[42],
              _blr_[43],
              _blr_[44],
              _blr_[45],
              _blr_[46],
              _blr_[47],
              _blr_[48],
              _blr_[49],
              _blr_[50],
              _blr_[51],
              _blr_[52],
              _blr_[53],
              _blr_[54],
              _blr_[55],
              _blr_[56],
              _blr_[57],
              _blr_[58],
              _blr_[59],
              _blr_[60],
              _blr_[61],
              _blr_[62],
              _blr_[63],
              _blr_[64],
              _blr_[65],
              _blr_[66],
              _blr_[67],
              _blr_[68],
              _blr_[69],
              _blr_[70],
              _blr_[71],
              _blr_[72],
              _blr_[73],
              _blr_[74],
              _blr_[75],
              _blr_[76],
              _blr_[77],
              _blr_[78],
              _blr_[79],
              _blr_[80],
              _blr_[81],
              _blr_[82],
              _blr_[83],
              _blr_[84],
              _blr_[85],
              _blr_[86],
              _blr_[87],
              _blr_[88],
              _blr_[89],
              _blr_[90],
              _blr_[91],
              _blr_[92],
              _blr_[93],
              _blr_[94],
              _blr_[97],
              _blr_[95],
              _blr_[96],
              _blr_[100],
              _blr_[102],
              _blr_[101]]}
    var
     Core_kernel_Map=
      [0,
       invariants$0,
       comparator,
       comparator_s,
       empty$1,
       singleton$2,
       of_alist$2,
       of_alist_or_error$2,
       of_alist_exn$2,
       of_hashtbl_exn$1,
       of_alist_multi$2,
       of_alist_fold$0,
       of_alist_reduce$0,
       of_iteri$0,
       [0,
        sexp_of_t$26,
        empty$3,
        singleton$4,
        of_alist$4,
        of_alist_or_error$4,
        of_alist_exn$4,
        of_alist_multi$4,
        of_alist_fold$2,
        of_alist_reduce$2,
        of_sorted_array$2,
        of_sorted_array_unchecked$2,
        of_increasing_iterator_uncheck$2,
        of_increasing_sequence$2,
        of_sequence$3,
        of_sequence_or_error$2,
        of_sequence_exn$2,
        of_sequence_multi$2,
        of_sequence_fold$2,
        of_sequence_reduce$2,
        of_iteri$2,
        of_tree$2,
        of_hashtbl_exn$0,
        of_key_set,
        quickcheck_generator$2,
        invariants$2,
        is_empty$6,
        length$7,
        add$4,
        add_exn$3,
        set$4,
        add_multi$3,
        remove_multi$3,
        find_multi$3,
        change$3,
        update$3,
        find$5,
        find_exn$4,
        remove$4,
        mem$5,
        iter_keys$3,
        iter$8,
        iteri$4,
        iteri_until$2,
        iter2$2,
        map$12,
        mapi$4,
        fold$5,
        fold_right$3,
        fold2$2,
        filter_keys$3,
        filter$7,
        filteri$4,
        filter_map$6,
        filter_mapi$4,
        partition_mapi$3,
        partition_map$3,
        partitioni_tf$4,
        partition_tf$4,
        combine_errors$2,
        compare_direct$2,
        equal$8,
        keys$4,
        data$3,
        to_alist$3,
        validate$3,
        validatei$2,
        merge$3,
        symmetric_diff$2,
        fold_symmetric_diff$2,
        min_elt$4,
        min_elt_exn$2,
        max_elt$4,
        max_elt_exn$2,
        for_all$5,
        for_alli$4,
        exists$5,
        existsi$4,
        count$5,
        counti$4,
        split$2,
        append$3,
        subrange$2,
        fold_range_inclusive$2,
        range_to_alist$2,
        closest_key$2,
        nth$2,
        nth_exn$2,
        rank$2,
        to_tree$3,
        to_sequence$3,
        binary_search$3,
        binary_search_segmented$3,
        key_set$0,
        quickcheck_observer$2,
        quickcheck_shrinker$2],
       to_tree$1,
       of_tree$0,
       of_sorted_array$0,
       of_sorted_array_unchecked$0,
       of_increasing_iterator_uncheck$0,
       of_increasing_sequence$0,
       of_sequence$1,
       of_sequence_or_error$0,
       of_sequence_exn$0,
       of_sequence_multi$0,
       of_sequence_fold$0,
       of_sequence_reduce$0,
       is_empty$4,
       length$5,
       add$2,
       add_exn$1,
       set$2,
       add_multi$1,
       remove_multi$1,
       find_multi$1,
       change$1,
       update$1,
       find$3,
       find_exn$2,
       find_or_error,
       remove$2,
       mem$3,
       iter_keys$1,
       iter$5,
       iteri$2,
       Base_Map_intf[6],
       Base_Map[1],
       iteri_until$0,
       iter2$0,
       map$10,
       mapi$2,
       fold$3,
       fold_right$1,
       fold2$0,
       filter_keys$1,
       filter$5,
       filteri$2,
       filter_map$4,
       filter_mapi$2,
       partition_mapi$1,
       partition_map$1,
       partitioni_tf$2,
       partition_tf$2,
       combine_errors$0,
       compare_direct$0,
       hash_fold_direct,
       equal$6,
       keys$2,
       data$1,
       to_alist$1,
       validate$1,
       validatei$0,
       merge$1,
       _vy_,
       [0,
        bin_shape_t$30,
        bin_size_t$37,
        bin_write_t$37,
        bin_read_t$77,
        bin_read_t$76,
        bin_writer_t$24,
        bin_reader_t$24,
        bin_t$24,
        compare$20,
        t_of_sexp$21,
        sexp_of_t$22,
        map_data,
        left,
        right],
       symmetric_diff$0,
       fold_symmetric_diff$0,
       min_elt$2,
       min_elt_exn$0,
       max_elt$2,
       max_elt_exn$0,
       for_all$3,
       for_alli$2,
       exists$3,
       existsi$2,
       count$3,
       counti$2,
       split$0,
       append$1,
       subrange$0,
       fold_range_inclusive$0,
       range_to_alist$0,
       closest_key$0,
       nth$0,
       nth_exn$0,
       rank$0,
       to_sequence$1,
       binary_search$1,
       binary_search_segmented$1,
       to_map,
       of_map_keys,
       quickcheck_generator$0,
       quickcheck_observer,
       quickcheck_shrinker,
       [0,
        empty$0,
        singleton$1,
        of_alist$1,
        of_alist_or_error$1,
        of_alist_exn$1,
        of_alist_multi$1,
        of_alist_fold,
        of_alist_reduce,
        of_sorted_array,
        of_sorted_array_unchecked,
        of_increasing_iterator_uncheck,
        of_increasing_sequence,
        of_sequence$0,
        of_sequence_or_error,
        of_sequence_exn,
        of_sequence_multi,
        of_sequence_fold,
        of_sequence_reduce,
        of_iteri,
        of_tree,
        of_hashtbl_exn,
        to_map,
        quickcheck_generator],
       _wk_,
       _wj_,
       _wi_,
       _wh_,
       _wg_,
       _wf_,
       _we_,
       sexp_of_m_t$0,
       m_t_of_sexp$0,
       m_t_sexp_grammar,
       compare_m_t,
       equal_m_t,
       hash_fold_m_t,
       bin_shape_m_t,
       bin_size_m_t,
       bin_write_m_t,
       bin_read_m_t,
       bin_read_m_t$0,
       quickcheck_generator_m_t,
       quickcheck_observer_m_t,
       quickcheck_shrinker_m_t,
       _wd_];
    caml_register_global(4996,Core_kernel_Map,"Core_kernel__Map");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Maybe_bound);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$110);
    caml_call1(Expect_test_collector[4][1],cst_src_maybe_bound_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$111,cst$36);
    var
     _wm_=caml_call1(Bin_prot_Shape[3][1],cst_a$38),
     _wn_=caml_call1(Bin_prot_Shape[4][1],cst_src_maybe_bound_ml_7_16),
     _wo_=[0,[0,cst_Excl,[0,caml_call2(Bin_prot_Shape[15],_wn_,_wm_),0]],_wl_],
     _wp_=caml_call1(Bin_prot_Shape[3][1],cst_a$39),
     _wq_=caml_call1(Bin_prot_Shape[4][1],cst_src_maybe_bound_ml_6_16),
     _wr_=[0,[0,cst_Incl,[0,caml_call2(Bin_prot_Shape[15],_wq_,_wp_),0]],_wo_],
     _ws_=caml_call1(Bin_prot_Shape[9],_wr_),
     _wt_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$40),0],
     _wu_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$88),_wt_,_ws_],0],
     _wv_=caml_call1(Bin_prot_Shape[4][1],cst_src_maybe_bound_ml_5_4),
     group$40=caml_call2(Bin_prot_Shape[6],_wv_,_wu_);
    function bin_shape_t$32(a)
     {var _blq_=caml_call1(Bin_prot_Shape[2][1],cst_t$89);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$40,_blq_),[0,a,0])}
    function bin_size_t$39(size_of_a,param)
     {if(typeof param === "number")
       return 1;
      else
       {if(0 === param[0])
         {var v1=param[1],_blo_=caml_call1(size_of_a,v1);
          return caml_call2(Bin_prot_Common[23],1,_blo_)}
        var v1$0=param[1],_blp_=caml_call1(size_of_a,v1$0);
        return caml_call2(Bin_prot_Common[23],1,_blp_)}}
    function bin_write_t$39(write_a,buf,pos,param)
     {if(typeof param === "number")
       return caml_call3(Bin_prot_Write[30],buf,pos,2);
      else
       {if(0 === param[0])
         {var v1=param[1],pos$0=caml_call3(Bin_prot_Write[30],buf,pos,0);
          return caml_call3(write_a,buf,pos$0,v1)}
        var v1$0=param[1],pos$1=caml_call3(Bin_prot_Write[30],buf,pos,1);
        return caml_call3(write_a,buf,pos$1,v1$0)}}
    function bin_writer_t$26(bin_writer_a)
     {function _blk_(v)
       {var _bll_=bin_writer_a[2];
        return function(_blm_,_bln_)
         {return bin_write_t$39(_bll_,v,_blm_,_bln_)}}
      return [0,function(v){return bin_size_t$39(bin_writer_a[1],v)},_blk_]}
    function bin_read_t$80(of_a,buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_src_maybe_bound_ml_Stable_,pos_ref[1])}
    function bin_read_t$81(of_a,buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[29],buf,pos_ref);
      if(2 < match >>> 0)
       return caml_call2(Bin_prot_Common[18],_ww_,pos_ref[1]);
      switch(match)
       {case 0:var arg_1=caml_call2(of_a,buf,pos_ref);return [0,arg_1];
        case 1:var arg_1$0=caml_call2(of_a,buf,pos_ref);return [1,arg_1$0];
        default:return 0}}
    function bin_reader_t$26(bin_reader_a)
     {function _blj_(buf,pos_ref,vtag)
       {return bin_read_t$80(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$81(bin_reader_a[1],buf,pos_ref)},
              _blj_]}
    function bin_t$26(bin_a)
     {var _blh_=bin_reader_t$26(bin_a[3]),_bli_=bin_writer_t$26(bin_a[2]);
      return [0,bin_shape_t$32(bin_a[1]),_bli_,_blh_]}
    function compare$22(cmp_a,a_001,match)
     {if(caml_call2(Ppx_compare_lib[1],a_001,match))return 0;
      if(typeof a_001 === "number")
       {if(typeof match === "number")return 0;else if(1 === match[0])return 1}
      else
       {if(0 === a_001[0])
         {var _blf_=a_001[1];
          if(typeof match !== "number" && 0 === match[0])
           {var b_004=match[1];return caml_call2(cmp_a,_blf_,b_004)}
          return -1}
        var _blg_=a_001[1];
        if(typeof match === "number")
         return -1;
        else
         if(0 !== match[0])
          {var b_006=match[1];return caml_call2(cmp_a,_blg_,b_006)}}
      return 1}
    function t_of_sexp$23(of_a,sexp)
     {if(0 === sexp[0])
       {var _blb_=sexp[1],switch$0=0;
        if(caml_string_notequal(_blb_,cst_Excl$0))
         {var switch$1=0;
          if(caml_string_notequal(_blb_,cst_Incl$0))
           {var switch$2=0;
            if(caml_string_notequal(_blb_,cst_Unbounded))
             if(caml_string_notequal(_blb_,cst_excl))
              if(caml_string_notequal(_blb_,cst_incl))
               {if(caml_string_notequal(_blb_,cst_unbounded))
                 {switch$0 = 1;switch$1 = 1;switch$2 = 1}}
              else
               switch$2 = 1;
             else
              {switch$1 = 1;switch$2 = 1}
            if(! switch$2)return 0}
          if(! switch$1)
           return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$14,sexp)}
        if(! switch$0)
         return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$14,sexp)}
      else
       {var _blc_=sexp[1];
        if(! _blc_)
         return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$14,sexp);
        var _bld_=_blc_[1];
        if(0 !== _bld_[0])
         return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$14,sexp);
        var _ble_=_bld_[1],switch$3=0;
        if(caml_string_notequal(_ble_,cst_Excl$1))
         {var switch$4=0;
          if(caml_string_notequal(_ble_,cst_Incl$1))
           {var switch$5=0;
            if(caml_string_notequal(_ble_,cst_Unbounded$0))
             if(caml_string_notequal(_ble_,cst_excl$0))
              if(caml_string_notequal(_ble_,cst_incl$0))
               {if(caml_string_notequal(_ble_,cst_unbounded$0))
                 {switch$3 = 1;switch$4 = 1;switch$5 = 1}}
              else
               switch$5 = 1;
             else
              {switch$4 = 1;switch$5 = 1}
            if(! switch$5)
             return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$14,sexp)}
          if(! switch$4)
           {var sexp_args=_blc_[2];
            if(sexp_args && ! sexp_args[2])
             {var v0=sexp_args[1],v0$0=caml_call1(of_a,v0);return [0,v0$0]}
            return caml_call3
                    (Sexplib0_Sexp_conv_error[4],tp_loc$14,_ble_,sexp)}}
        if(! switch$3)
         {var sexp_args$0=_blc_[2];
          if(sexp_args$0 && ! sexp_args$0[2])
           {var v0$1=sexp_args$0[1],v0$2=caml_call1(of_a,v0$1);
            return [1,v0$2]}
          return caml_call3(Sexplib0_Sexp_conv_error[4],tp_loc$14,_ble_,sexp)}}
      return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$14,sexp)}
    function sexp_of_t$27(of_a,param)
     {if(typeof param === "number")
       return _wx_;
      else
       {if(0 === param[0])
         {var v0=param[1],v0$0=caml_call1(of_a,v0);
          return [1,[0,_wy_,[0,v0$0,0]]]}
        var v0$1=param[1],v0$2=caml_call1(of_a,v0$1);
        return [1,[0,_wz_,[0,v0$2,0]]]}}
    function map$13(x,f)
     {if(typeof x === "number")
       return 0;
      else
       {if(0 === x[0]){var x$0=x[1];return [0,caml_call1(f,x$0)]}
        var x$1=x[1];
        return [1,caml_call1(f,x$1)]}}
    var
     all$0=include$35[1],
     t_of_sexp$24=include$35[2],
     sexp_of_t$28=include$35[3],
     map$14=include$35[4],
     is_lower_bound=include$35[5],
     is_upper_bound=include$35[6],
     interval_contains_exn=include$35[7],
     bounds_crossed=include$35[8],
     sexp_of_interval_comparison=include$35[9],
     interval_comparison_of_sexp=include$35[10],
     compare_interval_comparison=include$35[11],
     hash_fold_interval_comparison=include$35[12],
     hash_interval_comparison=include$35[13],
     compare_to_interval_exn=include$35[14];
    function compare_one_sided(side,compare_a,t1,match)
     {if(typeof t1 === "number")
       return typeof match === "number"?0:996968770 <= side?1:-1;
      else
       if(0 === t1[0])
        {var _bk$_=t1[1];
         if(typeof match !== "number")
          {if(0 === match[0])
            {var a2=match[1];return caml_call2(compare_a,_bk$_,a2)}
           var a2$0=match[1],c=caml_call2(compare_a,_bk$_,a2$0);
           return caml_call2(_a5_,c,0)?996968770 <= side?1:-1:c}}
       else
        {var _bla_=t1[1];
         if(typeof match !== "number")
          {if(0 === match[0])
            {var a2$1=match[1],c$0=caml_call2(compare_a,_bla_,a2$1);
             return caml_call2(_a5_,c$0,0)?996968770 <= side?-1:1:c$0}
           var a2$2=match[1];
           return caml_call2(compare_a,_bla_,a2$2)}}
      return 996968770 <= side?-1:1}
    function compare$23(compare_a,t1,t2)
     {return compare_one_sided(204302817,compare_a,t1,t2)}
    var As_lower_bound=[0,compare$23];
    function compare$24(compare_a,t1,t2)
     {return compare_one_sided(996968770,compare_a,t1,t2)}
    var As_upper_bound=[0,compare$24];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$112);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Maybe_bound$0);
    var
     Core_kernel_Maybe_bound=
      [0,
       bin_shape_t$32,
       bin_size_t$39,
       bin_write_t$39,
       bin_read_t$81,
       bin_read_t$80,
       bin_writer_t$26,
       bin_reader_t$26,
       bin_t$26,
       all$0,
       t_of_sexp$24,
       sexp_of_t$28,
       map$14,
       is_lower_bound,
       is_upper_bound,
       interval_contains_exn,
       bounds_crossed,
       sexp_of_interval_comparison,
       interval_comparison_of_sexp,
       compare_interval_comparison,
       hash_fold_interval_comparison,
       hash_interval_comparison,
       compare_to_interval_exn,
       As_lower_bound,
       As_upper_bound,
       [0,
        [0,
         bin_shape_t$32,
         bin_size_t$39,
         bin_write_t$39,
         bin_read_t$81,
         bin_read_t$80,
         bin_writer_t$26,
         bin_reader_t$26,
         bin_t$26,
         compare$22,
         t_of_sexp$23,
         sexp_of_t$27,
         map$13]]];
    caml_register_global
     (4998,Core_kernel_Maybe_bound,"Core_kernel__Maybe_bound");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Quickcheckable);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$113);
    caml_call1(Expect_test_collector[4][1],cst_src_quickcheckable_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$114,cst$37);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$115);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Quickcheckable$0);
    var Core_kernel_Quickcheckable_int=[0];
    caml_register_global
     (4999,Core_kernel_Quickcheckable_int,"Core_kernel__Quickcheckable_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Quickcheckable$1);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$116);
    caml_call1(Expect_test_collector[4][1],cst_src_quickcheckable_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$117,cst$38);
    function Of_quickcheckable(Quickcheckable,Conv)
     {var
       quickcheck_generator=caml_call2(_uW_[10],Quickcheckable[1],Conv[1]),
       quickcheck_observer=caml_call2(_uV_[18],Quickcheckable[2],Conv[2]),
       quickcheck_shrinker=
        caml_call3(_uU_[6],Quickcheckable[3],Conv[1],Conv[2]);
      return [0,quickcheck_generator,quickcheck_observer,quickcheck_shrinker]}
    function Of_quickcheckable_filtered(Quickcheckable,Conv)
     {var
       quickcheck_generator=caml_call2(_uW_[59],Quickcheckable[1],Conv[1]),
       quickcheck_observer=caml_call2(_uV_[18],Quickcheckable[2],Conv[2]),
       quickcheck_shrinker=
        caml_call3(_uU_[8],Quickcheckable[3],Conv[1],Conv[2]);
      return [0,quickcheck_generator,quickcheck_observer,quickcheck_shrinker]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$118);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Quickcheckable$2);
    var
     Core_kernel_Quickcheckable=
      [0,Of_quickcheckable,Of_quickcheckable_filtered];
    caml_register_global
     (5000,Core_kernel_Quickcheckable,"Core_kernel__Quickcheckable");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Set_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$119);
    caml_call1(Expect_test_collector[4][1],cst_src_set_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$120,cst$39);
    var Elt_bin_io=[0];
    function Check_accessors$0(T,Tree,Elt,Named,Cmp,Options,M){return [0]}
    function Check_accessors0(M){return [0]}
    function Check_accessors1$0(M){return [0]}
    function Check_accessors2$0(M){return [0]}
    function Check_accessors2_with_comparat(M){return [0]}
    function Check_creators$0(T,Tree,Elt,Cmp,Options,M){return [0]}
    function Check_creators0(M){return [0]}
    function Check_creators1$0(M){return [0]}
    function Check_creators2$0(M){return [0]}
    function Check_creators2_with_comparato(M){return [0]}
    function Make_S_plain_tree$0(Elt){return [0]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$121);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Set_intf$0);
    var
     Core_kernel_Set_intf=
      [0,
       Elt_bin_io,
       Check_accessors$0,
       Check_accessors0,
       Check_accessors1$0,
       Check_accessors2$0,
       Check_accessors2_with_comparat,
       Check_creators$0,
       Check_creators0,
       Check_creators1$0,
       Check_creators2$0,
       Check_creators2_with_comparato,
       Make_S_plain_tree$0];
    caml_register_global(5001,Core_kernel_Set_intf,"Core_kernel__Set_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Set);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$122);
    caml_call1(Expect_test_collector[4][1],cst_src_set_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$123,cst$40);
    function quickcheck_generator$3(comparator,elt_gen)
     {return caml_call2(Base_quickcheck_Generator[23],[0,comparator],elt_gen)}
    function gen_tree$0(comparator,elt_gen)
     {return caml_call2(Base_quickcheck_Generator[25],comparator,elt_gen)}
    function quickcheck_observer$3(elt_obs)
     {return caml_call1(Base_quickcheck_Observer[25],elt_obs)}
    function obs_tree$0(elt_obs)
     {return caml_call1(Base_quickcheck_Observer[27],elt_obs)}
    function quickcheck_shrinker$3(elt_shr)
     {return caml_call1(Base_quickcheck_Shrinker[24],elt_shr)}
    function shr_tree$0(comparator,elt_shr)
     {return caml_call2(Base_quickcheck_Shrinker[26],comparator,elt_shr)}
    function quickcheck_generator$4(m,elt_gen)
     {return quickcheck_generator$3(m[1],elt_gen)}
    var
     include$36=Base_Set[72][3],
     sexp_of_t$29=include$36[1],
     t_of_sexp_direct$0=include$36[2],
     Named=include$36[3],
     length$8=include$36[4],
     is_empty$7=include$36[5],
     iter$9=include$36[6],
     fold$6=include$36[7],
     fold_result$1=include$36[8],
     exists$6=include$36[9],
     for_all$6=include$36[10],
     count$6=include$36[11],
     sum$1=include$36[12],
     find$6=include$36[13],
     find_map$1=include$36[14],
     to_list$1=include$36[15],
     to_array$1=include$36[16],
     invariants$3=include$36[17],
     mem$6=include$36[18],
     add$5=include$36[19],
     remove$5=include$36[20],
     union$1=include$36[21],
     inter$0=include$36[22],
     diff$0=include$36[23],
     symmetric_diff$3=include$36[24],
     compare_direct$3=include$36[25],
     equal$9=include$36[26],
     is_subset=include$36[27],
     are_disjoint=include$36[28],
     fold_until$1=include$36[29],
     fold_right$4=include$36[30],
     iter2$3=include$36[31],
     filter$8=include$36[32],
     partition_tf$5=include$36[33],
     elements=include$36[34],
     min_elt$5=include$36[35],
     min_elt_exn$3=include$36[36],
     max_elt$5=include$36[37],
     max_elt_exn$3=include$36[38],
     choose$0=include$36[39],
     choose_exn$0=include$36[40],
     split$3=include$36[41],
     group_by=include$36[42],
     find_exn$5=include$36[43],
     nth$3=include$36[44],
     remove_index=include$36[45],
     to_tree$4=include$36[46],
     to_sequence$4=include$36[47],
     binary_search$4=include$36[48],
     binary_search_segmented$4=include$36[49],
     merge_to_sequence=include$36[50],
     empty$4=include$36[51],
     singleton$5=include$36[52],
     union_list=include$36[53],
     of_list$3=include$36[54],
     of_array=include$36[55],
     of_sorted_array$3=include$36[56],
     of_sorted_array_unchecked$3=include$36[57],
     of_increasing_iterator_uncheck$3=include$36[58],
     stable_dedup_list=include$36[59],
     map$15=include$36[60],
     filter_map$7=include$36[61],
     of_tree$3=include$36[62],
     empty$5=include$36[63];
    function to_map$0(comparator,t)
     {var _bk9_=caml_call2(Base_Set[72][63],comparator,t);
      return function(_bk__){return to_map(_bk9_,_bk__)}}
    function of_map_keys$0(m)
     {var _bk8_=of_map_keys(m);return caml_call1(Base_Set[72][47],_bk8_)}
    function of_hash_set(comparator,hset)
     {function _bk7_(t,x){return caml_call3(add$5,comparator,t,x)}
      return caml_call3(fold$1,hset,caml_call1(empty$4,comparator),_bk7_)}
    function of_hashtbl_keys$0(comparator,hashtbl)
     {function _bk5_(x,param,t){return caml_call3(add$5,comparator,t,x)}
      var _bk6_=caml_call1(empty$4,comparator);
      return caml_call3(Core_kernel_Hashtbl[18],hashtbl,_bk6_,_bk5_)}
    var
     _wA_=Base_Set[72],
     merge_to_sequence$0=_wA_[51],
     binary_search_segmented$5=_wA_[50],
     binary_search$5=_wA_[49],
     to_sequence$5=_wA_[48],
     to_tree$5=_wA_[47],
     remove_index$0=_wA_[46],
     nth$4=_wA_[45],
     find_exn$6=_wA_[44],
     group_by$0=_wA_[43],
     split$4=_wA_[42],
     choose_exn$1=_wA_[41],
     choose$1=_wA_[40],
     max_elt_exn$4=_wA_[39],
     max_elt$6=_wA_[38],
     min_elt_exn$4=_wA_[37],
     min_elt$6=_wA_[36],
     elements$0=_wA_[35],
     partition_tf$6=_wA_[34],
     filter$9=_wA_[33],
     iter2$4=_wA_[32],
     fold_right$5=_wA_[31],
     fold_until$2=_wA_[30],
     Named$0=_wA_[29],
     are_disjoint$0=_wA_[28],
     is_subset$0=_wA_[27],
     equal$10=_wA_[26],
     compare_direct$4=_wA_[25],
     symmetric_diff$4=_wA_[24],
     diff$1=_wA_[23],
     inter$1=_wA_[22],
     union$2=_wA_[21],
     remove$6=_wA_[20],
     add$6=_wA_[19],
     mem$7=_wA_[18],
     invariants$4=_wA_[17],
     to_array$2=_wA_[16],
     to_list$2=_wA_[15],
     find_map$2=_wA_[14],
     find$7=_wA_[13],
     sum$2=_wA_[12],
     count$7=_wA_[11],
     for_all$7=_wA_[10],
     exists$7=_wA_[9],
     fold_result$2=_wA_[8],
     fold$7=_wA_[7],
     iter$10=_wA_[6],
     is_empty$8=_wA_[5],
     length$9=_wA_[4],
     invariants$5=Base_Set[2],
     empty$6=Base_Set[5],
     singleton$6=Base_Set[6],
     length$10=Base_Set[7],
     is_empty$9=Base_Set[8],
     mem$8=Base_Set[9],
     add$7=Base_Set[10],
     remove$7=Base_Set[11],
     union$3=Base_Set[12],
     union_list$0=Base_Set[13],
     inter$2=Base_Set[14],
     diff$2=Base_Set[15],
     symmetric_diff$5=Base_Set[16],
     compare_direct$5=Base_Set[17],
     equal$11=Base_Set[19],
     exists$8=Base_Set[20],
     for_all$8=Base_Set[21],
     count$8=Base_Set[22],
     sum$3=Base_Set[23],
     find$8=Base_Set[24],
     find_map$3=Base_Set[25],
     find_exn$7=Base_Set[26],
     nth$5=Base_Set[27],
     remove_index$1=Base_Set[28],
     is_subset$1=Base_Set[29],
     are_disjoint$1=Base_Set[30],
     of_list$4=Base_Set[32],
     of_array$0=Base_Set[33],
     to_list$3=Base_Set[34],
     to_array$3=Base_Set[35],
     of_sorted_array$4=Base_Set[36],
     of_sorted_array_unchecked$4=Base_Set[37],
     of_increasing_iterator_uncheck$4=Base_Set[38],
     stable_dedup_list$0=Base_Set[39],
     map$16=Base_Set[40],
     filter_map$8=Base_Set[41],
     filter$10=Base_Set[42],
     fold$8=Base_Set[43],
     fold_result$3=Base_Set[44],
     fold_until$3=Base_Set[45],
     fold_right$6=Base_Set[46],
     iter$11=Base_Set[47],
     iter2$5=Base_Set[48],
     partition_tf$7=Base_Set[49],
     elements$1=Base_Set[50],
     min_elt$7=Base_Set[51],
     min_elt_exn$5=Base_Set[52],
     max_elt$7=Base_Set[53],
     max_elt_exn$5=Base_Set[54],
     choose$2=Base_Set[55],
     choose_exn$2=Base_Set[56],
     split$5=Base_Set[57],
     group_by$1=Base_Set[58],
     to_sequence$6=Base_Set[59],
     binary_search$6=Base_Set[60],
     binary_search_segmented$6=Base_Set[61],
     merge_to_sequence$1=Base_Set[63];
    function of_tree$4(m){return caml_call1(Base_Set[72][63],m[1])}
    var to_tree$6=Base_Set[72][47],sexp_of_t$30=Base_Set[72][1];
    function compare$25(param,_bk4_,t1,t2)
     {return caml_call2(compare_direct$5,t1,t2)}
    var
     _wB_=Base_Set[72],
     hash_fold_direct$0=_wB_[65],
     comparator$0=_wB_[64],
     of_tree$5=_wB_[63],
     filter_map$9=_wB_[62],
     map$17=_wB_[61],
     stable_dedup_list$1=_wB_[60],
     of_increasing_iterator_uncheck$5=_wB_[59],
     of_sorted_array_unchecked$5=_wB_[58],
     of_sorted_array$5=_wB_[57],
     of_array$1=_wB_[56],
     of_list$5=_wB_[55],
     union_list$1=_wB_[54],
     singleton$7=_wB_[53],
     empty$7=_wB_[52];
    function of_hash_set$0(comparator,hset)
     {return caml_call2(of_tree$5,comparator,of_hash_set(comparator,hset))}
    function of_hashtbl_keys$1(comparator,hashtbl)
     {return caml_call2
              (of_tree$5,comparator,of_hashtbl_keys$0(comparator,hashtbl))}
    function of_hash_set$1(m,hset){return of_hash_set$0(m[1],hset)}
    function of_hashtbl_keys$2(m,hashtbl)
     {return of_hashtbl_keys$1(m[1],hashtbl)}
    function Creators$1(Elt)
     {var comparator=Elt[1];
      function of_tree(tree){return caml_call2(of_tree$5,comparator,tree)}
      function of_sorted_array_unchecked(array)
       {return caml_call2(of_sorted_array_unchecked$5,comparator,array)}
      function of_increasing_iterator_uncheck(len,f)
       {return caml_call3(of_increasing_iterator_uncheck$5,comparator,len,f)}
      function of_sorted_array(array)
       {return caml_call2(of_sorted_array$5,comparator,array)}
      var M_empty=caml_call1(Base_Set[72][66],Elt),empty=M_empty[1];
      function singleton(e){return caml_call2(singleton$7,comparator,e)}
      function union_list(l){return caml_call2(union_list$1,comparator,l)}
      function of_list(l){return caml_call2(of_list$5,comparator,l)}
      function of_hash_set(h){return of_hash_set$0(comparator,h)}
      function of_hashtbl_keys(h){return of_hashtbl_keys$1(comparator,h)}
      function of_array(a){return caml_call2(of_array$1,comparator,a)}
      function stable_dedup_list(xs)
       {return caml_call2(stable_dedup_list$1,comparator,xs)}
      function map(t,f){return caml_call3(map$17,comparator,t,f)}
      function filter_map(t,f){return caml_call3(filter_map$9,comparator,t,f)}
      function t_of_sexp(a_of_sexp,sexp)
       {return of_tree
                (caml_call3(t_of_sexp_direct$0,comparator,a_of_sexp,sexp))}
      function quickcheck_generator(elt)
       {return quickcheck_generator$3(comparator,elt)}
      return [0,
              t_of_sexp,
              empty,
              singleton,
              union_list,
              of_list,
              of_array,
              of_sorted_array,
              of_sorted_array_unchecked,
              of_increasing_iterator_uncheck,
              stable_dedup_list,
              map,
              filter_map,
              of_tree,
              of_hash_set,
              of_hashtbl_keys,
              of_map_keys,
              quickcheck_generator]}
    function Make_tree$0(Elt)
     {var comparator=Elt[1];
      function singleton(e){return caml_call2(singleton$5,comparator,e)}
      function invariants(t){return caml_call2(invariants$3,comparator,t)}
      function length(t){return caml_call1(length$8,t)}
      function is_empty(t){return caml_call1(is_empty$7,t)}
      function elements$0(t){return caml_call1(elements,t)}
      function min_elt(t){return caml_call1(min_elt$5,t)}
      function min_elt_exn(t){return caml_call1(min_elt_exn$3,t)}
      function max_elt(t){return caml_call1(max_elt$5,t)}
      function max_elt_exn(t){return caml_call1(max_elt_exn$3,t)}
      function choose(t){return caml_call1(choose$0,t)}
      function choose_exn(t){return caml_call1(choose_exn$0,t)}
      function to_list(t){return caml_call1(to_list$1,t)}
      function to_array(t){return caml_call1(to_array$1,t)}
      function iter(t,f){return caml_call2(iter$9,t,f)}
      function iter2(a,b,f){return caml_call4(iter2$3,comparator,a,b,f)}
      function exists(t,f){return caml_call2(exists$6,t,f)}
      function for_all(t,f){return caml_call2(for_all$6,t,f)}
      function count(t,f){return caml_call2(count$6,t,f)}
      function sum(m,t,f){return caml_call3(sum$1,m,t,f)}
      function find(t,f){return caml_call2(find$6,t,f)}
      function find_exn(t,f){return caml_call2(find_exn$5,t,f)}
      function find_map(t,f){return caml_call2(find_map$1,t,f)}
      function fold(t,init,f){return caml_call3(fold$6,t,init,f)}
      function fold_until(t,init,f){return caml_call3(fold_until$1,t,init,f)}
      function fold_right(t,init,f){return caml_call3(fold_right$4,t,init,f)}
      function fold_result(t,init,f)
       {return caml_call4(include$7[8],fold,init,f,t)}
      function map(t,f){return caml_call3(map$15,comparator,t,f)}
      function filter(t,f){return caml_call3(filter$8,comparator,t,f)}
      function filter_map(t,f){return caml_call3(filter_map$7,comparator,t,f)}
      function partition_tf(t,f)
       {return caml_call3(partition_tf$5,comparator,t,f)}
      function mem(t,a){return caml_call3(mem$6,comparator,t,a)}
      function add(t,a){return caml_call3(add$5,comparator,t,a)}
      function remove(t,a){return caml_call3(remove$5,comparator,t,a)}
      function union(t1,t2){return caml_call3(union$1,comparator,t1,t2)}
      function inter(t1,t2){return caml_call3(inter$0,comparator,t1,t2)}
      function diff(t1,t2){return caml_call3(diff$0,comparator,t1,t2)}
      function symmetric_diff(t1,t2)
       {return caml_call3(symmetric_diff$3,comparator,t1,t2)}
      function compare_direct(t1,t2)
       {return caml_call3(compare_direct$3,comparator,t1,t2)}
      function equal(t1,t2){return caml_call3(equal$9,comparator,t1,t2)}
      function is_subset$0(t,of){return caml_call3(is_subset,comparator,t,of)}
      function are_disjoint$0(t1,t2)
       {return caml_call3(are_disjoint,comparator,t1,t2)}
      function of_list(l){return caml_call2(of_list$3,comparator,l)}
      function of_hash_set$0(h){return of_hash_set(comparator,h)}
      function of_hashtbl_keys(h){return of_hashtbl_keys$0(comparator,h)}
      function of_array$0(a){return caml_call2(of_array,comparator,a)}
      function of_sorted_array_unchecked(a)
       {return caml_call2(of_sorted_array_unchecked$3,comparator,a)}
      function of_increasing_iterator_uncheck(len,f)
       {return caml_call3(of_increasing_iterator_uncheck$3,comparator,len,f)}
      function of_sorted_array(a)
       {return caml_call2(of_sorted_array$3,comparator,a)}
      function union_list$0(l){return caml_call2(union_list,comparator,l)}
      function stable_dedup_list$0(xs)
       {return caml_call2(stable_dedup_list,comparator,xs)}
      function group_by$0(t,equiv)
       {return caml_call3(group_by,comparator,t,equiv)}
      function split(t,a){return caml_call3(split$3,comparator,t,a)}
      function nth(t,i){return caml_call2(nth$3,t,i)}
      function remove_index$0(t,i)
       {return caml_call3(remove_index,comparator,t,i)}
      function to_tree(t){return t}
      function of_tree(t){return t}
      function to_sequence(order,greater_or_equal_to,less_or_equal_to,t)
       {return caml_call5
                (to_sequence$4,
                 comparator,
                 order,
                 greater_or_equal_to,
                 less_or_equal_to,
                 t)}
      function binary_search(t,compare,how,v)
       {return caml_call5(binary_search$4,comparator,t,compare,how,v)}
      function binary_search_segmented(t,segment_of,how)
       {return caml_call4
                (binary_search_segmented$4,comparator,t,segment_of,how)}
      function merge_to_sequence$0
       (order,greater_or_equal_to,less_or_equal_to,t$0,t)
       {return caml_call6
                (merge_to_sequence,
                 comparator,
                 order,
                 greater_or_equal_to,
                 less_or_equal_to,
                 t$0,
                 t)}
      function to_map(t,f){return caml_call1(to_map$0(comparator,t),f)}
      function is_subset$1(t,of){return caml_call3(Named[1],comparator,t,of)}
      function equal$0(t1,t2){return caml_call3(Named[2],comparator,t1,t2)}
      var Named$0=[0,is_subset$1,equal$0];
      function quickcheck_generator(elt){return gen_tree$0(comparator,elt)}
      function quickcheck_observer(elt){return obs_tree$0(elt)}
      function quickcheck_shrinker(elt){return shr_tree$0(comparator,elt)}
      return [0,
              comparator,
              empty$5,
              singleton,
              invariants,
              length,
              is_empty,
              elements$0,
              min_elt,
              min_elt_exn,
              max_elt,
              max_elt_exn,
              choose,
              choose_exn,
              to_list,
              to_array,
              iter,
              iter2,
              exists,
              for_all,
              count,
              sum,
              find,
              find_exn,
              find_map,
              fold,
              fold_until,
              fold_right,
              fold_result,
              map,
              filter,
              filter_map,
              partition_tf,
              mem,
              add,
              remove,
              union,
              inter,
              diff,
              symmetric_diff,
              compare_direct,
              equal,
              is_subset$0,
              are_disjoint$0,
              of_list,
              of_hash_set$0,
              of_hashtbl_keys,
              of_array$0,
              of_sorted_array_unchecked,
              of_increasing_iterator_uncheck,
              of_sorted_array,
              union_list$0,
              stable_dedup_list$0,
              group_by$0,
              split,
              nth,
              remove_index$0,
              to_tree,
              of_tree,
              to_sequence,
              binary_search,
              binary_search_segmented,
              merge_to_sequence$0,
              of_map_keys$0,
              to_map,
              Named$0,
              quickcheck_generator,
              quickcheck_observer,
              quickcheck_shrinker]}
    function init_for_bin_prot$0(len,f,comparator)
     {var set=caml_call3(of_increasing_iterator_uncheck$5,comparator,len,f);
      if(caml_call1(invariants$5,set))return set;
      function _bk3_(acc,elt)
       {return caml_call3(mem$6,comparator,acc,elt)
                ?caml_call1(_bl_,cst_Set_bin_read_t_duplicate_e)
                :caml_call3(add$5,comparator,acc,elt)}
      return caml_call2
              (of_tree$5,
               comparator,
               caml_call3(fold$8,set,caml_call1(empty$4,comparator),_bk3_))}
    var
     _wC_=Creators$1(Poly),
     _wD_=_wC_[1],
     _wE_=_wC_[2],
     _wF_=_wC_[3],
     _wG_=_wC_[4],
     _wH_=_wC_[5],
     _wI_=_wC_[6],
     _wJ_=_wC_[7],
     _wK_=_wC_[8],
     _wL_=_wC_[9],
     _wM_=_wC_[10],
     _wN_=_wC_[11],
     _wO_=_wC_[12],
     _wP_=_wC_[13],
     _wQ_=_wC_[14],
     _wR_=_wC_[15],
     _wS_=_wC_[16],
     _wT_=_wC_[17];
    function compare$26(param,t1,t2)
     {return caml_call2(compare_direct$4,t1,t2)}
    function sexp_of_t$31(sexp_of_k,t)
     {return caml_call3(sexp_of_t$30,sexp_of_k,function(param){return _wU_},t)}
    var
     _wV_=caml_call1(Bin_prot_Shape[3][1],cst_a$41),
     _wW_=caml_call1(Bin_prot_Shape[4][1],cst_src_set_ml_324_19),
     _wX_=caml_call2(Bin_prot_Shape[15],_wW_,_wV_),
     _wY_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$42),0],
     _wZ_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_el$9),_wY_,_wX_],0],
     _w0_=caml_call1(Bin_prot_Shape[4][1],cst_src_set_ml_324_6),
     group$41=caml_call2(Bin_prot_Shape[6],_w0_,_wZ_);
    function bin_shape_el$1(a)
     {var _bk2_=caml_call1(Bin_prot_Shape[2][1],cst_el$10);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$41,_bk2_),[0,a,0])}
    function bin_size_el$1(size_of_a){return size_of_a}
    function bin_write_el$1(write_a){return write_a}
    function bin_read_el$1(of_a){return of_a}
    var
     caller_identity$1=
      caml_call1(Bin_prot_Shape[5][1],cst_88bcc478_4992_11e6_a95d_ff);
    function iter$12(t,f)
     {return caml_call2(iter$10,t,function(key){return caml_call1(f,key)})}
    function init$2(len,next)
     {var _bk1_=Poly[1];
      return init_for_bin_prot$0
              (len,function(param){return caml_call1(next,0)},_bk1_)}
    var
     include$37=
      caml_call1
       (Bin_prot_Utils[16],
        [0,
         caller_identity$1,
         module_name$4,
         length$9,
         iter$12,
         init$2,
         bin_size_el$1,
         bin_write_el$1,
         bin_read_el$1,
         bin_shape_el$1]),
     bin_shape_t$33=include$37[1],
     bin_size_t$40=include$37[2],
     bin_write_t$40=include$37[3],
     bin_read_t$82=include$37[4],
     bin_read_t$83=include$37[5],
     bin_writer_t$27=include$37[6],
     bin_reader_t$27=include$37[7],
     bin_t$27=include$37[8],
     include$38=Make_tree$0(Poly),
     empty$8=include$38[2],
     singleton$8=include$38[3],
     invariants$6=include$38[4],
     length$11=include$38[5],
     is_empty$10=include$38[6],
     elements$2=include$38[7],
     min_elt$8=include$38[8],
     min_elt_exn$6=include$38[9],
     max_elt$8=include$38[10],
     max_elt_exn$6=include$38[11],
     choose$3=include$38[12],
     choose_exn$3=include$38[13],
     to_list$4=include$38[14],
     to_array$4=include$38[15],
     iter$13=include$38[16],
     iter2$6=include$38[17],
     exists$9=include$38[18],
     for_all$9=include$38[19],
     count$9=include$38[20],
     sum$4=include$38[21],
     find$9=include$38[22],
     find_exn$8=include$38[23],
     find_map$4=include$38[24],
     fold$9=include$38[25],
     fold_until$4=include$38[26],
     fold_right$7=include$38[27],
     fold_result$4=include$38[28],
     map$18=include$38[29],
     filter$11=include$38[30],
     filter_map$10=include$38[31],
     partition_tf$8=include$38[32],
     mem$9=include$38[33],
     add$8=include$38[34],
     remove$8=include$38[35],
     union$4=include$38[36],
     inter$3=include$38[37],
     diff$3=include$38[38],
     symmetric_diff$6=include$38[39],
     compare_direct$6=include$38[40],
     equal$12=include$38[41],
     is_subset$2=include$38[42],
     are_disjoint$2=include$38[43],
     of_list$6=include$38[44],
     of_hash_set$2=include$38[45],
     of_hashtbl_keys$3=include$38[46],
     of_array$2=include$38[47],
     of_sorted_array_unchecked$6=include$38[48],
     of_increasing_iterator_uncheck$6=include$38[49],
     of_sorted_array$6=include$38[50],
     union_list$2=include$38[51],
     stable_dedup_list$2=include$38[52],
     group_by$2=include$38[53],
     split$6=include$38[54],
     nth$6=include$38[55],
     remove_index$2=include$38[56],
     to_tree$7=include$38[57],
     of_tree$6=include$38[58],
     to_sequence$7=include$38[59],
     binary_search$7=include$38[60],
     binary_search_segmented$7=include$38[61],
     merge_to_sequence$2=include$38[62],
     of_map_keys$1=include$38[63],
     to_map$1=include$38[64],
     Named$1=include$38[65],
     quickcheck_generator$5=include$38[66],
     quickcheck_observer$4=include$38[67],
     quickcheck_shrinker$4=include$38[68];
    function sexp_of_t$32(sexp_of_elt,t)
     {return caml_call3
              (sexp_of_t$29,sexp_of_elt,function(param){return _w1_},t)}
    function t_of_sexp$25(elt_of_sexp,sexp)
     {return caml_call3(t_of_sexp_direct$0,Poly[1],elt_of_sexp,sexp)}
    function Provide_bin_io$0(Elt)
     {var
       _bkW_=Elt[5],
       _bkX_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_el$11),0,_bkW_],0],
       _bkY_=caml_call1(Bin_prot_Shape[4][1],cst_src_set_ml_363_4),
       group=caml_call2(Bin_prot_Shape[6],_bkY_,_bkX_),
       _bkZ_=caml_call1(Bin_prot_Shape[2][1],cst_el$12),
       bin_shape_el=caml_call1(caml_call2(Bin_prot_Shape[14],group,_bkZ_),0),
       bin_size_el=Elt[1],
       bin_write_el=Elt[2],
       bin_read_el=Elt[3],
       caller_identity=
        caml_call1(Bin_prot_Shape[5][1],cst_8989278e_4992_11e6_8f4a_6b);
      function iter(t,f)
       {return caml_call2(iter$11,t,function(key){return caml_call1(f,key)})}
      function init(len,next)
       {var _bk0_=Elt[9];
        return init_for_bin_prot$0
                (len,function(param){return caml_call1(next,0)},_bk0_)}
      return caml_call1
              (Bin_prot_Utils[15],
               [0,
                caller_identity,
                module_name$5,
                length$10,
                iter,
                init,
                bin_size_el,
                bin_write_el,
                bin_read_el,
                bin_shape_el])}
    function Make_plain_using_comparator$0(Elt)
     {var
       Elt_S1=caml_call1(S_to_S1,[0,Elt[2]]),
       _bkS_=Creators$1(Elt_S1),
       t_of_sexp=_bkS_[1],
       empty=_bkS_[2],
       singleton=_bkS_[3],
       union_list=_bkS_[4],
       of_list=_bkS_[5],
       of_array=_bkS_[6],
       of_sorted_array=_bkS_[7],
       of_sorted_array_unchecked=_bkS_[8],
       of_increasing_iterator_uncheck=_bkS_[9],
       stable_dedup_list=_bkS_[10],
       map=_bkS_[11],
       filter_map=_bkS_[12],
       of_tree=_bkS_[13],
       of_hash_set=_bkS_[14],
       of_hashtbl_keys=_bkS_[15],
       of_map_keys=_bkS_[16],
       quickcheck_generator=_bkS_[17];
      function compare(t1,t2){return caml_call2(compare_direct$4,t1,t2)}
      function sexp_of_t(t)
       {function _bkV_(param){return _w2_}
        return caml_call3(sexp_of_t$30,Elt[1],_bkV_,t)}
      function Provide_of_sexp(Elt)
       {function t_of_sexp$0(sexp){return caml_call2(t_of_sexp,Elt[1],sexp)}
        return [0,t_of_sexp$0]}
      function Provide_hash(Elt)
       {function hash_fold_t(state,t)
         {return caml_call3(hash_fold_direct$0,Elt[1],state,t)}
        function hash(t)
         {var _bkU_=hash_fold_t(caml_call2(Base_Hash[11],0,0),t);
          return caml_call1(Base_Hash[9],_bkU_)}
        return [0,hash_fold_t,hash]}
      function Provide_bin_io(Elt$0)
       {var
         comparator=Elt[2],
         bin_size_t=Elt$0[1],
         bin_write_t=Elt$0[2],
         bin_read_t=Elt$0[3],
         bin_read_t$0=Elt$0[4],
         bin_shape_t=Elt$0[5],
         bin_writer_t=Elt$0[6],
         bin_reader_t=Elt$0[7],
         bin_t=Elt$0[8];
        return Provide_bin_io$0
                ([0,
                  bin_size_t,
                  bin_write_t,
                  bin_read_t,
                  bin_read_t$0,
                  bin_shape_t,
                  bin_writer_t,
                  bin_reader_t,
                  bin_t,
                  comparator])}
      var
       include=Make_tree$0(Elt_S1),
       comparator=include[1],
       empty$0=include[2],
       singleton$0=include[3],
       invariants=include[4],
       length=include[5],
       is_empty=include[6],
       elements=include[7],
       min_elt=include[8],
       min_elt_exn=include[9],
       max_elt=include[10],
       max_elt_exn=include[11],
       choose=include[12],
       choose_exn=include[13],
       to_list=include[14],
       to_array=include[15],
       iter=include[16],
       iter2=include[17],
       exists=include[18],
       for_all=include[19],
       count=include[20],
       sum=include[21],
       find=include[22],
       find_exn=include[23],
       find_map=include[24],
       fold=include[25],
       fold_until=include[26],
       fold_right=include[27],
       fold_result=include[28],
       map$0=include[29],
       filter=include[30],
       filter_map$0=include[31],
       partition_tf=include[32],
       mem=include[33],
       add=include[34],
       remove=include[35],
       union=include[36],
       inter=include[37],
       diff=include[38],
       symmetric_diff=include[39],
       compare_direct=include[40],
       equal=include[41],
       is_subset=include[42],
       are_disjoint=include[43],
       of_list$0=include[44],
       of_hash_set$0=include[45],
       of_hashtbl_keys$0=include[46],
       of_array$0=include[47],
       of_sorted_array_unchecked$0=include[48],
       of_increasing_iterator_uncheck$0=include[49],
       of_sorted_array$0=include[50],
       union_list$0=include[51],
       stable_dedup_list$0=include[52],
       group_by=include[53],
       split=include[54],
       nth=include[55],
       remove_index=include[56],
       to_tree=include[57],
       of_tree$0=include[58],
       to_sequence=include[59],
       binary_search=include[60],
       binary_search_segmented=include[61],
       merge_to_sequence=include[62],
       of_map_keys$0=include[63],
       to_map$0=include[64],
       Named=include[65],
       quickcheck_generator$0=include[66],
       quickcheck_observer=include[67],
       quickcheck_shrinker=include[68];
      function compare$0(t1,t2){return caml_call2(compare_direct,t1,t2)}
      function sexp_of_t$0(t)
       {function _bkT_(param){return _w3_}
        return caml_call3(sexp_of_t$29,Elt[1],_bkT_,t)}
      function Provide_of_sexp$0(X)
       {function t_of_sexp(sexp)
         {return caml_call3(t_of_sexp_direct$0,Elt_S1[1],X[1],sexp)}
        return [0,t_of_sexp]}
      var
       Tree=
        [0,
         comparator,
         empty$0,
         singleton$0,
         invariants,
         length,
         is_empty,
         elements,
         min_elt,
         min_elt_exn,
         max_elt,
         max_elt_exn,
         choose,
         choose_exn,
         to_list,
         to_array,
         iter,
         iter2,
         exists,
         for_all,
         count,
         sum,
         find,
         find_exn,
         find_map,
         fold,
         fold_until,
         fold_right,
         fold_result,
         map$0,
         filter,
         filter_map$0,
         partition_tf,
         mem,
         add,
         remove,
         union,
         inter,
         diff,
         symmetric_diff,
         compare_direct,
         equal,
         is_subset,
         are_disjoint,
         of_list$0,
         of_hash_set$0,
         of_hashtbl_keys$0,
         of_array$0,
         of_sorted_array_unchecked$0,
         of_increasing_iterator_uncheck$0,
         of_sorted_array$0,
         union_list$0,
         stable_dedup_list$0,
         group_by,
         split,
         nth,
         remove_index,
         to_tree,
         of_tree$0,
         to_sequence,
         binary_search,
         binary_search_segmented,
         merge_to_sequence,
         of_map_keys$0,
         to_map$0,
         Named,
         quickcheck_generator$0,
         quickcheck_observer,
         quickcheck_shrinker,
         compare$0,
         sexp_of_t$0,
         Provide_of_sexp$0];
      return [0,
              Elt,
              Elt_S1,
              t_of_sexp,
              empty,
              singleton,
              union_list,
              of_list,
              of_array,
              of_sorted_array,
              of_sorted_array_unchecked,
              of_increasing_iterator_uncheck,
              stable_dedup_list,
              map,
              filter_map,
              of_tree,
              of_hash_set,
              of_hashtbl_keys,
              of_map_keys,
              quickcheck_generator,
              length$9,
              is_empty$8,
              iter$10,
              fold$7,
              fold_result$2,
              exists$7,
              for_all$7,
              count$7,
              sum$2,
              find$7,
              find_map$2,
              to_list$2,
              to_array$2,
              invariants$4,
              mem$7,
              add$6,
              remove$6,
              union$2,
              inter$1,
              diff$1,
              symmetric_diff$4,
              compare_direct$4,
              equal$10,
              is_subset$0,
              are_disjoint$0,
              Named$0,
              fold_until$2,
              fold_right$5,
              iter2$4,
              filter$9,
              partition_tf$6,
              elements$0,
              min_elt$6,
              min_elt_exn$4,
              max_elt$6,
              max_elt_exn$4,
              choose$1,
              choose_exn$1,
              split$4,
              group_by$0,
              find_exn$6,
              nth$4,
              remove_index$0,
              to_tree$5,
              to_sequence$5,
              binary_search$5,
              binary_search_segmented$5,
              merge_to_sequence$0,
              to_map,
              quickcheck_observer$3,
              quickcheck_shrinker$3,
              compare,
              sexp_of_t,
              Provide_of_sexp,
              Provide_hash,
              Provide_bin_io,
              Tree]}
    function Make_using_comparator$0(Elt_sexp)
     {var
       _bkR_=Make_plain_using_comparator$0([0,Elt_sexp[2],Elt_sexp[3]]),
       Elt_S1=_bkR_[2],
       empty=_bkR_[4],
       singleton=_bkR_[5],
       union_list=_bkR_[6],
       of_list=_bkR_[7],
       of_array=_bkR_[8],
       of_sorted_array=_bkR_[9],
       of_sorted_array_unchecked=_bkR_[10],
       of_increasing_iterator_uncheck=_bkR_[11],
       stable_dedup_list=_bkR_[12],
       map=_bkR_[13],
       filter_map=_bkR_[14],
       of_tree=_bkR_[15],
       of_hash_set=_bkR_[16],
       of_hashtbl_keys=_bkR_[17],
       of_map_keys=_bkR_[18],
       quickcheck_generator=_bkR_[19],
       length=_bkR_[20],
       is_empty=_bkR_[21],
       iter=_bkR_[22],
       fold=_bkR_[23],
       fold_result=_bkR_[24],
       exists=_bkR_[25],
       for_all=_bkR_[26],
       count=_bkR_[27],
       sum=_bkR_[28],
       find=_bkR_[29],
       find_map=_bkR_[30],
       to_list=_bkR_[31],
       to_array=_bkR_[32],
       invariants=_bkR_[33],
       mem=_bkR_[34],
       add=_bkR_[35],
       remove=_bkR_[36],
       union=_bkR_[37],
       inter=_bkR_[38],
       diff=_bkR_[39],
       symmetric_diff=_bkR_[40],
       compare_direct=_bkR_[41],
       equal=_bkR_[42],
       is_subset=_bkR_[43],
       are_disjoint=_bkR_[44],
       Named=_bkR_[45],
       fold_until=_bkR_[46],
       fold_right=_bkR_[47],
       iter2=_bkR_[48],
       filter=_bkR_[49],
       partition_tf=_bkR_[50],
       elements=_bkR_[51],
       min_elt=_bkR_[52],
       min_elt_exn=_bkR_[53],
       max_elt=_bkR_[54],
       max_elt_exn=_bkR_[55],
       choose=_bkR_[56],
       choose_exn=_bkR_[57],
       split=_bkR_[58],
       group_by=_bkR_[59],
       find_exn=_bkR_[60],
       nth=_bkR_[61],
       remove_index=_bkR_[62],
       to_tree=_bkR_[63],
       to_sequence=_bkR_[64],
       binary_search=_bkR_[65],
       binary_search_segmented=_bkR_[66],
       merge_to_sequence=_bkR_[67],
       to_map=_bkR_[68],
       quickcheck_observer=_bkR_[69],
       quickcheck_shrinker=_bkR_[70],
       compare=_bkR_[71],
       sexp_of_t=_bkR_[72],
       Provide_of_sexp=_bkR_[73],
       Provide_hash=_bkR_[74],
       Provide_bin_io=_bkR_[75],
       Tree=_bkR_[76],
       include=caml_call1(Provide_of_sexp,[0,Elt_sexp[1]]),
       t_of_sexp=include[1],
       comparator=Tree[1],
       empty$0=Tree[2],
       singleton$0=Tree[3],
       invariants$0=Tree[4],
       length$0=Tree[5],
       is_empty$0=Tree[6],
       elements$0=Tree[7],
       min_elt$0=Tree[8],
       min_elt_exn$0=Tree[9],
       max_elt$0=Tree[10],
       max_elt_exn$0=Tree[11],
       choose$0=Tree[12],
       choose_exn$0=Tree[13],
       to_list$0=Tree[14],
       to_array$0=Tree[15],
       iter$0=Tree[16],
       iter2$0=Tree[17],
       exists$0=Tree[18],
       for_all$0=Tree[19],
       count$0=Tree[20],
       sum$0=Tree[21],
       find$0=Tree[22],
       find_exn$0=Tree[23],
       find_map$0=Tree[24],
       fold$0=Tree[25],
       fold_until$0=Tree[26],
       fold_right$0=Tree[27],
       fold_result$0=Tree[28],
       map$0=Tree[29],
       filter$0=Tree[30],
       filter_map$0=Tree[31],
       partition_tf$0=Tree[32],
       mem$0=Tree[33],
       add$0=Tree[34],
       remove$0=Tree[35],
       union$0=Tree[36],
       inter$0=Tree[37],
       diff$0=Tree[38],
       symmetric_diff$0=Tree[39],
       compare_direct$0=Tree[40],
       equal$0=Tree[41],
       is_subset$0=Tree[42],
       are_disjoint$0=Tree[43],
       of_list$0=Tree[44],
       of_hash_set$0=Tree[45],
       of_hashtbl_keys$0=Tree[46],
       of_array$0=Tree[47],
       of_sorted_array_unchecked$0=Tree[48],
       of_increasing_iterator_uncheck$0=Tree[49],
       of_sorted_array$0=Tree[50],
       union_list$0=Tree[51],
       stable_dedup_list$0=Tree[52],
       group_by$0=Tree[53],
       split$0=Tree[54],
       nth$0=Tree[55],
       remove_index$0=Tree[56],
       to_tree$0=Tree[57],
       of_tree$0=Tree[58],
       to_sequence$0=Tree[59],
       binary_search$0=Tree[60],
       binary_search_segmented$0=Tree[61],
       merge_to_sequence$0=Tree[62],
       of_map_keys$0=Tree[63],
       to_map$0=Tree[64],
       Named$0=Tree[65],
       quickcheck_generator$0=Tree[66],
       quickcheck_observer$0=Tree[67],
       quickcheck_shrinker$0=Tree[68],
       compare$0=Tree[69],
       sexp_of_t$0=Tree[70],
       Provide_of_sexp$0=Tree[71],
       include$0=caml_call1(Provide_of_sexp$0,[0,Elt_sexp[1]]),
       t_of_sexp$0=include$0[1],
       Tree$0=
        [0,
         comparator,
         empty$0,
         singleton$0,
         invariants$0,
         length$0,
         is_empty$0,
         elements$0,
         min_elt$0,
         min_elt_exn$0,
         max_elt$0,
         max_elt_exn$0,
         choose$0,
         choose_exn$0,
         to_list$0,
         to_array$0,
         iter$0,
         iter2$0,
         exists$0,
         for_all$0,
         count$0,
         sum$0,
         find$0,
         find_exn$0,
         find_map$0,
         fold$0,
         fold_until$0,
         fold_right$0,
         fold_result$0,
         map$0,
         filter$0,
         filter_map$0,
         partition_tf$0,
         mem$0,
         add$0,
         remove$0,
         union$0,
         inter$0,
         diff$0,
         symmetric_diff$0,
         compare_direct$0,
         equal$0,
         is_subset$0,
         are_disjoint$0,
         of_list$0,
         of_hash_set$0,
         of_hashtbl_keys$0,
         of_array$0,
         of_sorted_array_unchecked$0,
         of_increasing_iterator_uncheck$0,
         of_sorted_array$0,
         union_list$0,
         stable_dedup_list$0,
         group_by$0,
         split$0,
         nth$0,
         remove_index$0,
         to_tree$0,
         of_tree$0,
         to_sequence$0,
         binary_search$0,
         binary_search_segmented$0,
         merge_to_sequence$0,
         of_map_keys$0,
         to_map$0,
         Named$0,
         quickcheck_generator$0,
         quickcheck_observer$0,
         quickcheck_shrinker$0,
         compare$0,
         sexp_of_t$0,
         Provide_of_sexp$0,
         t_of_sexp$0];
      return [0,
              Elt_S1,
              empty,
              singleton,
              union_list,
              of_list,
              of_array,
              of_sorted_array,
              of_sorted_array_unchecked,
              of_increasing_iterator_uncheck,
              stable_dedup_list,
              map,
              filter_map,
              of_tree,
              of_hash_set,
              of_hashtbl_keys,
              of_map_keys,
              quickcheck_generator,
              length,
              is_empty,
              iter,
              fold,
              fold_result,
              exists,
              for_all,
              count,
              sum,
              find,
              find_map,
              to_list,
              to_array,
              invariants,
              mem,
              add,
              remove,
              union,
              inter,
              diff,
              symmetric_diff,
              compare_direct,
              equal,
              is_subset,
              are_disjoint,
              Named,
              fold_until,
              fold_right,
              iter2,
              filter,
              partition_tf,
              elements,
              min_elt,
              min_elt_exn,
              max_elt,
              max_elt_exn,
              choose,
              choose_exn,
              split,
              group_by,
              find_exn,
              nth,
              remove_index,
              to_tree,
              to_sequence,
              binary_search,
              binary_search_segmented,
              merge_to_sequence,
              to_map,
              quickcheck_observer,
              quickcheck_shrinker,
              compare,
              sexp_of_t,
              Provide_of_sexp,
              Provide_hash,
              Provide_bin_io,
              Elt_sexp,
              t_of_sexp,
              Tree$0]}
    function Make_binable_using_comparator$0(Elt_bin_sexp)
     {var
       _bkQ_=
        Make_using_comparator$0
         ([0,Elt_bin_sexp[9],Elt_bin_sexp[10],Elt_bin_sexp[11]]),
       Elt_S1=_bkQ_[1],
       empty=_bkQ_[2],
       singleton=_bkQ_[3],
       union_list=_bkQ_[4],
       of_list=_bkQ_[5],
       of_array=_bkQ_[6],
       of_sorted_array=_bkQ_[7],
       of_sorted_array_unchecked=_bkQ_[8],
       of_increasing_iterator_uncheck=_bkQ_[9],
       stable_dedup_list=_bkQ_[10],
       map=_bkQ_[11],
       filter_map=_bkQ_[12],
       of_tree=_bkQ_[13],
       of_hash_set=_bkQ_[14],
       of_hashtbl_keys=_bkQ_[15],
       of_map_keys=_bkQ_[16],
       quickcheck_generator=_bkQ_[17],
       length=_bkQ_[18],
       is_empty=_bkQ_[19],
       iter=_bkQ_[20],
       fold=_bkQ_[21],
       fold_result=_bkQ_[22],
       exists=_bkQ_[23],
       for_all=_bkQ_[24],
       count=_bkQ_[25],
       sum=_bkQ_[26],
       find=_bkQ_[27],
       find_map=_bkQ_[28],
       to_list=_bkQ_[29],
       to_array=_bkQ_[30],
       invariants=_bkQ_[31],
       mem=_bkQ_[32],
       add=_bkQ_[33],
       remove=_bkQ_[34],
       union=_bkQ_[35],
       inter=_bkQ_[36],
       diff=_bkQ_[37],
       symmetric_diff=_bkQ_[38],
       compare_direct=_bkQ_[39],
       equal=_bkQ_[40],
       is_subset=_bkQ_[41],
       are_disjoint=_bkQ_[42],
       Named=_bkQ_[43],
       fold_until=_bkQ_[44],
       fold_right=_bkQ_[45],
       iter2=_bkQ_[46],
       filter=_bkQ_[47],
       partition_tf=_bkQ_[48],
       elements=_bkQ_[49],
       min_elt=_bkQ_[50],
       min_elt_exn=_bkQ_[51],
       max_elt=_bkQ_[52],
       max_elt_exn=_bkQ_[53],
       choose=_bkQ_[54],
       choose_exn=_bkQ_[55],
       split=_bkQ_[56],
       group_by=_bkQ_[57],
       find_exn=_bkQ_[58],
       nth=_bkQ_[59],
       remove_index=_bkQ_[60],
       to_tree=_bkQ_[61],
       to_sequence=_bkQ_[62],
       binary_search=_bkQ_[63],
       binary_search_segmented=_bkQ_[64],
       merge_to_sequence=_bkQ_[65],
       to_map=_bkQ_[66],
       quickcheck_observer=_bkQ_[67],
       quickcheck_shrinker=_bkQ_[68],
       compare=_bkQ_[69],
       sexp_of_t=_bkQ_[70],
       Provide_of_sexp=_bkQ_[71],
       Provide_hash=_bkQ_[72],
       Provide_bin_io=_bkQ_[73],
       t_of_sexp=_bkQ_[75],
       Tree=_bkQ_[76],
       include=
        caml_call1
         (Provide_bin_io,
          [0,
           Elt_bin_sexp[1],
           Elt_bin_sexp[2],
           Elt_bin_sexp[3],
           Elt_bin_sexp[4],
           Elt_bin_sexp[5],
           Elt_bin_sexp[6],
           Elt_bin_sexp[7],
           Elt_bin_sexp[8]]),
       bin_size_t=include[1],
       bin_write_t=include[2],
       bin_read_t=include[3],
       bin_read_t$0=include[4],
       bin_shape_t=include[5],
       bin_writer_t=include[6],
       bin_reader_t=include[7],
       bin_t=include[8];
      return [0,
              Elt_S1,
              empty,
              singleton,
              union_list,
              of_list,
              of_array,
              of_sorted_array,
              of_sorted_array_unchecked,
              of_increasing_iterator_uncheck,
              stable_dedup_list,
              map,
              filter_map,
              of_tree,
              of_hash_set,
              of_hashtbl_keys,
              of_map_keys,
              quickcheck_generator,
              length,
              is_empty,
              iter,
              fold,
              fold_result,
              exists,
              for_all,
              count,
              sum,
              find,
              find_map,
              to_list,
              to_array,
              invariants,
              mem,
              add,
              remove,
              union,
              inter,
              diff,
              symmetric_diff,
              compare_direct,
              equal,
              is_subset,
              are_disjoint,
              Named,
              fold_until,
              fold_right,
              iter2,
              filter,
              partition_tf,
              elements,
              min_elt,
              min_elt_exn,
              max_elt,
              max_elt_exn,
              choose,
              choose_exn,
              split,
              group_by,
              find_exn,
              nth,
              remove_index,
              to_tree,
              to_sequence,
              binary_search,
              binary_search_segmented,
              merge_to_sequence,
              to_map,
              quickcheck_observer,
              quickcheck_shrinker,
              compare,
              sexp_of_t,
              Provide_of_sexp,
              Provide_hash,
              Provide_bin_io,
              t_of_sexp,
              Tree,
              Elt_bin_sexp,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t]}
    function bin_shape_m_t$0(m){return Provide_bin_io$0(m)[5]}
    function bin_size_m_t$0(m){return Provide_bin_io$0(m)[1]}
    function bin_write_m_t$0(m){return Provide_bin_io$0(m)[2]}
    function bin_read_m_t$1(m){return Provide_bin_io$0(m)[3]}
    function bin_read_m_t$2(m){return Provide_bin_io$0(m)[4]}
    function quickcheck_generator_m_t$0(Elt)
     {return quickcheck_generator$4([0,Elt[1]],Elt[2])}
    function quickcheck_observer_m_t$0(Elt)
     {return quickcheck_observer$3(Elt[2])}
    function quickcheck_shrinker_m_t$0(Elt)
     {return quickcheck_shrinker$3(Elt[2])}
    var
     hash_m_t=Base_Set[70],
     hash_fold_m_t$0=Base_Set[69],
     equal_m_t$0=Base_Set[68],
     compare_m_t$0=Base_Set[67],
     m_t_of_sexp$1=Base_Set[66],
     sexp_of_m_t$1=Base_Set[65];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$124);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Set$0);
    var
     _w4_=
      [0,
       [0,
        sexp_of_m_t$1,
        m_t_of_sexp$1,
        compare_m_t$0,
        equal_m_t$0,
        hash_fold_m_t$0,
        hash_m_t,
        bin_shape_m_t$0,
        bin_size_m_t$0,
        bin_write_m_t$0,
        bin_read_m_t$1,
        bin_read_m_t$2,
        quickcheck_generator_m_t$0,
        quickcheck_observer_m_t$0,
        quickcheck_shrinker_m_t$0,
        function(_bkP_)
         {var
           _bkO_=
            Make_binable_using_comparator$0
             ([0,
               _bkP_[1],
               _bkP_[2],
               _bkP_[3],
               _bkP_[4],
               _bkP_[5],
               _bkP_[6],
               _bkP_[7],
               _bkP_[8],
               _bkP_[10],
               _bkP_[11],
               _bkP_[12]]);
          return [0,
                  _bkO_[77],
                  _bkO_[78],
                  _bkO_[79],
                  _bkO_[80],
                  _bkO_[81],
                  _bkO_[82],
                  _bkO_[83],
                  _bkO_[84],
                  _bkO_[69],
                  _bkO_[74],
                  _bkO_[70]]}]];
    function _w5_(_bkK_)
     {var
       _bkL_=Make_binable_using_comparator$0(_bkK_),
       _bkM_=_bkL_[75],
       _bkN_=_bkL_[76];
      return [0,
              [0,
               _bkN_[9],
               _bkN_[10],
               _bkN_[1],
               _bkN_[2],
               _bkN_[3],
               _bkN_[4],
               _bkN_[5],
               _bkN_[6],
               _bkN_[7],
               _bkN_[8],
               _bkN_[11]],
              [0,
               _bkM_[69],
               _bkM_[5],
               _bkM_[6],
               _bkM_[16],
               _bkM_[25],
               _bkM_[28],
               _bkM_[18],
               _bkM_[19],
               _bkM_[20],
               _bkM_[21],
               _bkM_[22],
               _bkM_[24],
               _bkM_[14],
               _bkM_[15],
               _bkM_[4],
               _bkM_[33],
               _bkM_[34],
               _bkM_[35],
               _bkM_[36],
               _bkM_[37],
               _bkM_[38],
               _bkM_[39],
               _bkM_[40],
               _bkM_[41],
               _bkM_[42],
               _bkM_[43],
               _bkM_[65],
               _bkM_[26],
               _bkM_[27],
               _bkM_[17],
               _bkM_[30],
               _bkM_[32],
               _bkM_[7],
               _bkM_[8],
               _bkM_[9],
               _bkM_[10],
               _bkM_[11],
               _bkM_[12],
               _bkM_[13],
               _bkM_[54],
               _bkM_[53],
               _bkM_[23],
               _bkM_[55],
               _bkM_[56],
               _bkM_[57],
               _bkM_[59],
               _bkM_[60],
               _bkM_[61],
               _bkM_[62],
               _bkM_[64],
               _bkM_[67],
               _bkM_[68],
               _bkM_[2],
               _bkM_[3],
               _bkM_[51],
               _bkM_[44],
               _bkM_[47],
               _bkM_[50],
               _bkM_[48],
               _bkM_[49],
               _bkM_[52],
               _bkM_[29],
               _bkM_[31],
               _bkM_[58],
               _bkM_[45],
               _bkM_[46],
               _bkM_[63],
               _bkM_[66],
               _bkM_[71],
               _bkM_[72],
               _bkM_[70]],
              _bkL_[69],
              _bkL_[18],
              _bkL_[19],
              _bkL_[20],
              _bkL_[21],
              _bkL_[22],
              _bkL_[23],
              _bkL_[24],
              _bkL_[25],
              _bkL_[26],
              _bkL_[27],
              _bkL_[28],
              _bkL_[29],
              _bkL_[30],
              _bkL_[31],
              _bkL_[32],
              _bkL_[33],
              _bkL_[34],
              _bkL_[35],
              _bkL_[36],
              _bkL_[37],
              _bkL_[38],
              _bkL_[39],
              _bkL_[40],
              _bkL_[41],
              _bkL_[42],
              _bkL_[43],
              _bkL_[44],
              _bkL_[45],
              _bkL_[46],
              _bkL_[47],
              _bkL_[48],
              _bkL_[49],
              _bkL_[50],
              _bkL_[51],
              _bkL_[52],
              _bkL_[53],
              _bkL_[54],
              _bkL_[55],
              _bkL_[56],
              _bkL_[57],
              _bkL_[58],
              _bkL_[59],
              _bkL_[60],
              _bkL_[61],
              _bkL_[62],
              _bkL_[63],
              _bkL_[64],
              _bkL_[65],
              _bkL_[66],
              _bkL_[67],
              _bkL_[68],
              _bkL_[2],
              _bkL_[3],
              _bkL_[4],
              _bkL_[5],
              _bkL_[6],
              _bkL_[7],
              _bkL_[8],
              _bkL_[9],
              _bkL_[10],
              _bkL_[11],
              _bkL_[12],
              _bkL_[13],
              _bkL_[14],
              _bkL_[15],
              _bkL_[16],
              _bkL_[17],
              _bkL_[71],
              _bkL_[73],
              _bkL_[72],
              _bkL_[74],
              _bkL_[70],
              _bkL_[77],
              _bkL_[78],
              _bkL_[79],
              _bkL_[80],
              _bkL_[81],
              _bkL_[82],
              _bkL_[83],
              _bkL_[84]]}
    function _w6_(_bkH_)
     {var _bkI_=Make_using_comparator$0(_bkH_),_bkJ_=_bkI_[76];
      return [0,
              _bkI_[74],
              [0,
               _bkJ_[69],
               _bkJ_[5],
               _bkJ_[6],
               _bkJ_[16],
               _bkJ_[25],
               _bkJ_[28],
               _bkJ_[18],
               _bkJ_[19],
               _bkJ_[20],
               _bkJ_[21],
               _bkJ_[22],
               _bkJ_[24],
               _bkJ_[14],
               _bkJ_[15],
               _bkJ_[4],
               _bkJ_[33],
               _bkJ_[34],
               _bkJ_[35],
               _bkJ_[36],
               _bkJ_[37],
               _bkJ_[38],
               _bkJ_[39],
               _bkJ_[40],
               _bkJ_[41],
               _bkJ_[42],
               _bkJ_[43],
               _bkJ_[65],
               _bkJ_[26],
               _bkJ_[27],
               _bkJ_[17],
               _bkJ_[30],
               _bkJ_[32],
               _bkJ_[7],
               _bkJ_[8],
               _bkJ_[9],
               _bkJ_[10],
               _bkJ_[11],
               _bkJ_[12],
               _bkJ_[13],
               _bkJ_[54],
               _bkJ_[53],
               _bkJ_[23],
               _bkJ_[55],
               _bkJ_[56],
               _bkJ_[57],
               _bkJ_[59],
               _bkJ_[60],
               _bkJ_[61],
               _bkJ_[62],
               _bkJ_[64],
               _bkJ_[67],
               _bkJ_[68],
               _bkJ_[2],
               _bkJ_[3],
               _bkJ_[51],
               _bkJ_[44],
               _bkJ_[47],
               _bkJ_[50],
               _bkJ_[48],
               _bkJ_[49],
               _bkJ_[52],
               _bkJ_[29],
               _bkJ_[31],
               _bkJ_[58],
               _bkJ_[45],
               _bkJ_[46],
               _bkJ_[63],
               _bkJ_[66],
               _bkJ_[71],
               _bkJ_[72],
               _bkJ_[70]],
              _bkI_[69],
              _bkI_[18],
              _bkI_[19],
              _bkI_[20],
              _bkI_[21],
              _bkI_[22],
              _bkI_[23],
              _bkI_[24],
              _bkI_[25],
              _bkI_[26],
              _bkI_[27],
              _bkI_[28],
              _bkI_[29],
              _bkI_[30],
              _bkI_[31],
              _bkI_[32],
              _bkI_[33],
              _bkI_[34],
              _bkI_[35],
              _bkI_[36],
              _bkI_[37],
              _bkI_[38],
              _bkI_[39],
              _bkI_[40],
              _bkI_[41],
              _bkI_[42],
              _bkI_[43],
              _bkI_[44],
              _bkI_[45],
              _bkI_[46],
              _bkI_[47],
              _bkI_[48],
              _bkI_[49],
              _bkI_[50],
              _bkI_[51],
              _bkI_[52],
              _bkI_[53],
              _bkI_[54],
              _bkI_[55],
              _bkI_[56],
              _bkI_[57],
              _bkI_[58],
              _bkI_[59],
              _bkI_[60],
              _bkI_[61],
              _bkI_[62],
              _bkI_[63],
              _bkI_[64],
              _bkI_[65],
              _bkI_[66],
              _bkI_[67],
              _bkI_[68],
              _bkI_[2],
              _bkI_[3],
              _bkI_[4],
              _bkI_[5],
              _bkI_[6],
              _bkI_[7],
              _bkI_[8],
              _bkI_[9],
              _bkI_[10],
              _bkI_[11],
              _bkI_[12],
              _bkI_[13],
              _bkI_[14],
              _bkI_[15],
              _bkI_[16],
              _bkI_[17],
              _bkI_[71],
              _bkI_[73],
              _bkI_[72],
              _bkI_[75],
              _bkI_[70]]}
    function _w7_(_bkE_)
     {var _bkF_=Make_plain_using_comparator$0(_bkE_),_bkG_=_bkF_[76];
      return [0,
              _bkF_[1],
              [0,
               _bkG_[69],
               _bkG_[70],
               _bkG_[5],
               _bkG_[6],
               _bkG_[16],
               _bkG_[25],
               _bkG_[28],
               _bkG_[18],
               _bkG_[19],
               _bkG_[20],
               _bkG_[21],
               _bkG_[22],
               _bkG_[24],
               _bkG_[14],
               _bkG_[15],
               _bkG_[4],
               _bkG_[33],
               _bkG_[34],
               _bkG_[35],
               _bkG_[36],
               _bkG_[37],
               _bkG_[38],
               _bkG_[39],
               _bkG_[40],
               _bkG_[41],
               _bkG_[42],
               _bkG_[43],
               _bkG_[65],
               _bkG_[26],
               _bkG_[27],
               _bkG_[17],
               _bkG_[30],
               _bkG_[32],
               _bkG_[7],
               _bkG_[8],
               _bkG_[9],
               _bkG_[10],
               _bkG_[11],
               _bkG_[12],
               _bkG_[13],
               _bkG_[54],
               _bkG_[53],
               _bkG_[23],
               _bkG_[55],
               _bkG_[56],
               _bkG_[57],
               _bkG_[59],
               _bkG_[60],
               _bkG_[61],
               _bkG_[62],
               _bkG_[64],
               _bkG_[67],
               _bkG_[68],
               _bkG_[2],
               _bkG_[3],
               _bkG_[51],
               _bkG_[44],
               _bkG_[47],
               _bkG_[50],
               _bkG_[48],
               _bkG_[49],
               _bkG_[52],
               _bkG_[29],
               _bkG_[31],
               _bkG_[58],
               _bkG_[45],
               _bkG_[46],
               _bkG_[63],
               _bkG_[66],
               _bkG_[71]],
              _bkF_[71],
              _bkF_[72],
              _bkF_[20],
              _bkF_[21],
              _bkF_[22],
              _bkF_[23],
              _bkF_[24],
              _bkF_[25],
              _bkF_[26],
              _bkF_[27],
              _bkF_[28],
              _bkF_[29],
              _bkF_[30],
              _bkF_[31],
              _bkF_[32],
              _bkF_[33],
              _bkF_[34],
              _bkF_[35],
              _bkF_[36],
              _bkF_[37],
              _bkF_[38],
              _bkF_[39],
              _bkF_[40],
              _bkF_[41],
              _bkF_[42],
              _bkF_[43],
              _bkF_[44],
              _bkF_[45],
              _bkF_[46],
              _bkF_[47],
              _bkF_[48],
              _bkF_[49],
              _bkF_[50],
              _bkF_[51],
              _bkF_[52],
              _bkF_[53],
              _bkF_[54],
              _bkF_[55],
              _bkF_[56],
              _bkF_[57],
              _bkF_[58],
              _bkF_[59],
              _bkF_[60],
              _bkF_[61],
              _bkF_[62],
              _bkF_[63],
              _bkF_[64],
              _bkF_[65],
              _bkF_[66],
              _bkF_[67],
              _bkF_[68],
              _bkF_[69],
              _bkF_[70],
              _bkF_[4],
              _bkF_[5],
              _bkF_[6],
              _bkF_[7],
              _bkF_[8],
              _bkF_[9],
              _bkF_[10],
              _bkF_[11],
              _bkF_[12],
              _bkF_[13],
              _bkF_[14],
              _bkF_[15],
              _bkF_[16],
              _bkF_[17],
              _bkF_[18],
              _bkF_[19],
              _bkF_[73],
              _bkF_[75],
              _bkF_[74]]}
    function _w8_(Elt)
     {var
       bin_size_t=Elt[1],
       bin_write_t=Elt[2],
       bin_read_t=Elt[3],
       bin_read_t$0=Elt[4],
       bin_shape_t=Elt[5],
       bin_writer_t=Elt[6],
       bin_reader_t=Elt[7],
       bin_t=Elt[8],
       t_of_sexp=Elt[10],
       sexp_of_t=Elt[11],
       include=caml_call1(Make,[0,Elt[9],Elt[11]]),
       comparator=include[1],
       _bkB_=
        Make_binable_using_comparator$0
         ([0,
           bin_size_t,
           bin_write_t,
           bin_read_t,
           bin_read_t$0,
           bin_shape_t,
           bin_writer_t,
           bin_reader_t,
           bin_t,
           t_of_sexp,
           sexp_of_t,
           comparator]),
       _bkC_=_bkB_[75],
       _bkD_=_bkB_[76];
      return [0,
              [0,
               _bkD_[9],
               _bkD_[10],
               _bkD_[1],
               _bkD_[2],
               _bkD_[3],
               _bkD_[4],
               _bkD_[5],
               _bkD_[6],
               _bkD_[7],
               _bkD_[8],
               _bkD_[11]],
              [0,
               _bkC_[69],
               _bkC_[5],
               _bkC_[6],
               _bkC_[16],
               _bkC_[25],
               _bkC_[28],
               _bkC_[18],
               _bkC_[19],
               _bkC_[20],
               _bkC_[21],
               _bkC_[22],
               _bkC_[24],
               _bkC_[14],
               _bkC_[15],
               _bkC_[4],
               _bkC_[33],
               _bkC_[34],
               _bkC_[35],
               _bkC_[36],
               _bkC_[37],
               _bkC_[38],
               _bkC_[39],
               _bkC_[40],
               _bkC_[41],
               _bkC_[42],
               _bkC_[43],
               _bkC_[65],
               _bkC_[26],
               _bkC_[27],
               _bkC_[17],
               _bkC_[30],
               _bkC_[32],
               _bkC_[7],
               _bkC_[8],
               _bkC_[9],
               _bkC_[10],
               _bkC_[11],
               _bkC_[12],
               _bkC_[13],
               _bkC_[54],
               _bkC_[53],
               _bkC_[23],
               _bkC_[55],
               _bkC_[56],
               _bkC_[57],
               _bkC_[59],
               _bkC_[60],
               _bkC_[61],
               _bkC_[62],
               _bkC_[64],
               _bkC_[67],
               _bkC_[68],
               _bkC_[2],
               _bkC_[3],
               _bkC_[51],
               _bkC_[44],
               _bkC_[47],
               _bkC_[50],
               _bkC_[48],
               _bkC_[49],
               _bkC_[52],
               _bkC_[29],
               _bkC_[31],
               _bkC_[58],
               _bkC_[45],
               _bkC_[46],
               _bkC_[63],
               _bkC_[66],
               _bkC_[71],
               _bkC_[72],
               _bkC_[70]],
              _bkB_[69],
              _bkB_[18],
              _bkB_[19],
              _bkB_[20],
              _bkB_[21],
              _bkB_[22],
              _bkB_[23],
              _bkB_[24],
              _bkB_[25],
              _bkB_[26],
              _bkB_[27],
              _bkB_[28],
              _bkB_[29],
              _bkB_[30],
              _bkB_[31],
              _bkB_[32],
              _bkB_[33],
              _bkB_[34],
              _bkB_[35],
              _bkB_[36],
              _bkB_[37],
              _bkB_[38],
              _bkB_[39],
              _bkB_[40],
              _bkB_[41],
              _bkB_[42],
              _bkB_[43],
              _bkB_[44],
              _bkB_[45],
              _bkB_[46],
              _bkB_[47],
              _bkB_[48],
              _bkB_[49],
              _bkB_[50],
              _bkB_[51],
              _bkB_[52],
              _bkB_[53],
              _bkB_[54],
              _bkB_[55],
              _bkB_[56],
              _bkB_[57],
              _bkB_[58],
              _bkB_[59],
              _bkB_[60],
              _bkB_[61],
              _bkB_[62],
              _bkB_[63],
              _bkB_[64],
              _bkB_[65],
              _bkB_[66],
              _bkB_[67],
              _bkB_[68],
              _bkB_[2],
              _bkB_[3],
              _bkB_[4],
              _bkB_[5],
              _bkB_[6],
              _bkB_[7],
              _bkB_[8],
              _bkB_[9],
              _bkB_[10],
              _bkB_[11],
              _bkB_[12],
              _bkB_[13],
              _bkB_[14],
              _bkB_[15],
              _bkB_[16],
              _bkB_[17],
              _bkB_[71],
              _bkB_[73],
              _bkB_[72],
              _bkB_[74],
              _bkB_[70],
              _bkB_[77],
              _bkB_[78],
              _bkB_[79],
              _bkB_[80],
              _bkB_[81],
              _bkB_[82],
              _bkB_[83],
              _bkB_[84]]}
    function _w9_(Elt)
     {var
       t_of_sexp=Elt[2],
       sexp_of_t=Elt[3],
       include=caml_call1(Make,[0,Elt[1],Elt[3]]),
       comparator=include[1],
       _bkz_=Make_using_comparator$0([0,t_of_sexp,sexp_of_t,comparator]),
       _bkA_=_bkz_[76];
      return [0,
              _bkz_[74],
              [0,
               _bkA_[69],
               _bkA_[5],
               _bkA_[6],
               _bkA_[16],
               _bkA_[25],
               _bkA_[28],
               _bkA_[18],
               _bkA_[19],
               _bkA_[20],
               _bkA_[21],
               _bkA_[22],
               _bkA_[24],
               _bkA_[14],
               _bkA_[15],
               _bkA_[4],
               _bkA_[33],
               _bkA_[34],
               _bkA_[35],
               _bkA_[36],
               _bkA_[37],
               _bkA_[38],
               _bkA_[39],
               _bkA_[40],
               _bkA_[41],
               _bkA_[42],
               _bkA_[43],
               _bkA_[65],
               _bkA_[26],
               _bkA_[27],
               _bkA_[17],
               _bkA_[30],
               _bkA_[32],
               _bkA_[7],
               _bkA_[8],
               _bkA_[9],
               _bkA_[10],
               _bkA_[11],
               _bkA_[12],
               _bkA_[13],
               _bkA_[54],
               _bkA_[53],
               _bkA_[23],
               _bkA_[55],
               _bkA_[56],
               _bkA_[57],
               _bkA_[59],
               _bkA_[60],
               _bkA_[61],
               _bkA_[62],
               _bkA_[64],
               _bkA_[67],
               _bkA_[68],
               _bkA_[2],
               _bkA_[3],
               _bkA_[51],
               _bkA_[44],
               _bkA_[47],
               _bkA_[50],
               _bkA_[48],
               _bkA_[49],
               _bkA_[52],
               _bkA_[29],
               _bkA_[31],
               _bkA_[58],
               _bkA_[45],
               _bkA_[46],
               _bkA_[63],
               _bkA_[66],
               _bkA_[71],
               _bkA_[72],
               _bkA_[70]],
              _bkz_[69],
              _bkz_[18],
              _bkz_[19],
              _bkz_[20],
              _bkz_[21],
              _bkz_[22],
              _bkz_[23],
              _bkz_[24],
              _bkz_[25],
              _bkz_[26],
              _bkz_[27],
              _bkz_[28],
              _bkz_[29],
              _bkz_[30],
              _bkz_[31],
              _bkz_[32],
              _bkz_[33],
              _bkz_[34],
              _bkz_[35],
              _bkz_[36],
              _bkz_[37],
              _bkz_[38],
              _bkz_[39],
              _bkz_[40],
              _bkz_[41],
              _bkz_[42],
              _bkz_[43],
              _bkz_[44],
              _bkz_[45],
              _bkz_[46],
              _bkz_[47],
              _bkz_[48],
              _bkz_[49],
              _bkz_[50],
              _bkz_[51],
              _bkz_[52],
              _bkz_[53],
              _bkz_[54],
              _bkz_[55],
              _bkz_[56],
              _bkz_[57],
              _bkz_[58],
              _bkz_[59],
              _bkz_[60],
              _bkz_[61],
              _bkz_[62],
              _bkz_[63],
              _bkz_[64],
              _bkz_[65],
              _bkz_[66],
              _bkz_[67],
              _bkz_[68],
              _bkz_[2],
              _bkz_[3],
              _bkz_[4],
              _bkz_[5],
              _bkz_[6],
              _bkz_[7],
              _bkz_[8],
              _bkz_[9],
              _bkz_[10],
              _bkz_[11],
              _bkz_[12],
              _bkz_[13],
              _bkz_[14],
              _bkz_[15],
              _bkz_[16],
              _bkz_[17],
              _bkz_[71],
              _bkz_[73],
              _bkz_[72],
              _bkz_[75],
              _bkz_[70]]}
    var
     _w$_=
      [0,
       [0,
        t_of_sexp$25,
        sexp_of_t$32,
        length$11,
        is_empty$10,
        iter$13,
        fold$9,
        fold_result$4,
        exists$9,
        for_all$9,
        count$9,
        sum$4,
        find$9,
        find_map$4,
        to_list$4,
        to_array$4,
        invariants$6,
        mem$9,
        add$8,
        remove$8,
        union$4,
        inter$3,
        diff$3,
        symmetric_diff$6,
        compare_direct$6,
        equal$12,
        is_subset$2,
        are_disjoint$2,
        Named$1,
        fold_until$4,
        fold_right$7,
        iter2$6,
        filter$11,
        partition_tf$8,
        elements$2,
        min_elt$8,
        min_elt_exn$6,
        max_elt$8,
        max_elt_exn$6,
        choose$3,
        choose_exn$3,
        split$6,
        group_by$2,
        find_exn$8,
        nth$6,
        remove_index$2,
        to_tree$7,
        to_sequence$7,
        binary_search$7,
        binary_search_segmented$7,
        merge_to_sequence$2,
        to_map$1,
        quickcheck_observer$4,
        quickcheck_shrinker$4,
        empty$8,
        singleton$8,
        union_list$2,
        of_list$6,
        of_array$2,
        of_sorted_array$6,
        of_sorted_array_unchecked$6,
        of_increasing_iterator_uncheck$6,
        stable_dedup_list$2,
        map$18,
        filter_map$10,
        of_tree$6,
        of_hash_set$2,
        of_hashtbl_keys$3,
        of_map_keys$1,
        quickcheck_generator$5],
       bin_shape_t$33,
       bin_size_t$40,
       bin_write_t$40,
       bin_read_t$82,
       bin_read_t$83,
       bin_writer_t$27,
       bin_reader_t$27,
       bin_t$27,
       compare$26,
       _wD_,
       sexp_of_t$31,
       length$9,
       is_empty$8,
       iter$10,
       fold$7,
       fold_result$2,
       exists$7,
       for_all$7,
       count$7,
       sum$2,
       find$7,
       find_map$2,
       to_list$2,
       to_array$2,
       invariants$4,
       mem$7,
       add$6,
       remove$6,
       union$2,
       inter$1,
       diff$1,
       symmetric_diff$4,
       compare_direct$4,
       equal$10,
       is_subset$0,
       are_disjoint$0,
       Named$0,
       fold_until$2,
       fold_right$5,
       iter2$4,
       filter$9,
       partition_tf$6,
       elements$0,
       min_elt$6,
       min_elt_exn$4,
       max_elt$6,
       max_elt_exn$4,
       choose$1,
       choose_exn$1,
       split$4,
       group_by$0,
       find_exn$6,
       nth$4,
       remove_index$0,
       to_tree$5,
       to_sequence$5,
       binary_search$5,
       binary_search_segmented$5,
       merge_to_sequence$0,
       to_map,
       quickcheck_observer$3,
       quickcheck_shrinker$3,
       _wE_,
       _wF_,
       _wG_,
       _wH_,
       _wI_,
       _wJ_,
       _wK_,
       _wL_,
       _wM_,
       _wN_,
       _wO_,
       _wP_,
       _wQ_,
       _wR_,
       _wS_,
       _wT_];
    function _w__(Elt)
     {var
       sexp_of_t=Elt[2],
       include=caml_call1(Make,Elt),
       comparator=include[1],
       _bkx_=Make_plain_using_comparator$0([0,sexp_of_t,comparator]),
       _bky_=_bkx_[76];
      return [0,
              _bkx_[1],
              [0,
               _bky_[69],
               _bky_[70],
               _bky_[5],
               _bky_[6],
               _bky_[16],
               _bky_[25],
               _bky_[28],
               _bky_[18],
               _bky_[19],
               _bky_[20],
               _bky_[21],
               _bky_[22],
               _bky_[24],
               _bky_[14],
               _bky_[15],
               _bky_[4],
               _bky_[33],
               _bky_[34],
               _bky_[35],
               _bky_[36],
               _bky_[37],
               _bky_[38],
               _bky_[39],
               _bky_[40],
               _bky_[41],
               _bky_[42],
               _bky_[43],
               _bky_[65],
               _bky_[26],
               _bky_[27],
               _bky_[17],
               _bky_[30],
               _bky_[32],
               _bky_[7],
               _bky_[8],
               _bky_[9],
               _bky_[10],
               _bky_[11],
               _bky_[12],
               _bky_[13],
               _bky_[54],
               _bky_[53],
               _bky_[23],
               _bky_[55],
               _bky_[56],
               _bky_[57],
               _bky_[59],
               _bky_[60],
               _bky_[61],
               _bky_[62],
               _bky_[64],
               _bky_[67],
               _bky_[68],
               _bky_[2],
               _bky_[3],
               _bky_[51],
               _bky_[44],
               _bky_[47],
               _bky_[50],
               _bky_[48],
               _bky_[49],
               _bky_[52],
               _bky_[29],
               _bky_[31],
               _bky_[58],
               _bky_[45],
               _bky_[46],
               _bky_[63],
               _bky_[66],
               _bky_[71]],
              _bkx_[71],
              _bkx_[72],
              _bkx_[20],
              _bkx_[21],
              _bkx_[22],
              _bkx_[23],
              _bkx_[24],
              _bkx_[25],
              _bkx_[26],
              _bkx_[27],
              _bkx_[28],
              _bkx_[29],
              _bkx_[30],
              _bkx_[31],
              _bkx_[32],
              _bkx_[33],
              _bkx_[34],
              _bkx_[35],
              _bkx_[36],
              _bkx_[37],
              _bkx_[38],
              _bkx_[39],
              _bkx_[40],
              _bkx_[41],
              _bkx_[42],
              _bkx_[43],
              _bkx_[44],
              _bkx_[45],
              _bkx_[46],
              _bkx_[47],
              _bkx_[48],
              _bkx_[49],
              _bkx_[50],
              _bkx_[51],
              _bkx_[52],
              _bkx_[53],
              _bkx_[54],
              _bkx_[55],
              _bkx_[56],
              _bkx_[57],
              _bkx_[58],
              _bkx_[59],
              _bkx_[60],
              _bkx_[61],
              _bkx_[62],
              _bkx_[63],
              _bkx_[64],
              _bkx_[65],
              _bkx_[66],
              _bkx_[67],
              _bkx_[68],
              _bkx_[69],
              _bkx_[70],
              _bkx_[4],
              _bkx_[5],
              _bkx_[6],
              _bkx_[7],
              _bkx_[8],
              _bkx_[9],
              _bkx_[10],
              _bkx_[11],
              _bkx_[12],
              _bkx_[13],
              _bkx_[14],
              _bkx_[15],
              _bkx_[16],
              _bkx_[17],
              _bkx_[18],
              _bkx_[19],
              _bkx_[73],
              _bkx_[75],
              _bkx_[74]]}
    var
     _xa_=
      [0,
       empty$7,
       singleton$7,
       union_list$1,
       of_list$5,
       of_array$1,
       of_sorted_array$5,
       of_sorted_array_unchecked$5,
       of_increasing_iterator_uncheck$5,
       stable_dedup_list$1,
       map$17,
       filter_map$9,
       of_tree$5,
       of_hash_set$0,
       of_hashtbl_keys$1,
       of_map_keys,
       quickcheck_generator$3],
     Core_kernel_Set=
      [0,
       compare$25,
       [0,
        sexp_of_t$29,
        length$8,
        is_empty$7,
        iter$9,
        fold$6,
        fold_result$1,
        exists$6,
        for_all$6,
        count$6,
        sum$1,
        find$6,
        find_map$1,
        to_list$1,
        to_array$1,
        invariants$3,
        mem$6,
        add$5,
        remove$5,
        union$1,
        inter$0,
        diff$0,
        symmetric_diff$3,
        compare_direct$3,
        equal$9,
        is_subset,
        are_disjoint,
        fold_until$1,
        fold_right$4,
        iter2$3,
        filter$8,
        partition_tf$5,
        elements,
        min_elt$5,
        min_elt_exn$3,
        max_elt$5,
        max_elt_exn$3,
        choose$0,
        choose_exn$0,
        split$3,
        group_by,
        find_exn$5,
        nth$3,
        remove_index,
        to_tree$4,
        to_sequence$4,
        binary_search$4,
        binary_search_segmented$4,
        merge_to_sequence,
        to_map$0,
        obs_tree$0,
        shr_tree$0,
        empty$4,
        singleton$5,
        union_list,
        of_list$3,
        of_array,
        of_sorted_array$3,
        of_sorted_array_unchecked$3,
        of_increasing_iterator_uncheck$3,
        stable_dedup_list,
        map$15,
        filter_map$7,
        of_tree$3,
        of_hash_set,
        of_hashtbl_keys$0,
        of_map_keys$0,
        gen_tree$0],
       _xa_,
       invariants$5,
       comparator$0,
       empty$6,
       singleton$6,
       length$10,
       is_empty$9,
       mem$8,
       add$7,
       remove$7,
       union$3,
       union_list$0,
       inter$2,
       diff$2,
       symmetric_diff$5,
       compare_direct$5,
       hash_fold_direct$0,
       equal$11,
       exists$8,
       for_all$8,
       count$8,
       sum$3,
       find$8,
       find_map$3,
       find_exn$7,
       nth$5,
       remove_index$1,
       is_subset$1,
       are_disjoint$1,
       Base_Set[31],
       of_list$4,
       of_array$0,
       of_hash_set$1,
       of_hashtbl_keys$2,
       to_list$3,
       to_array$3,
       to_tree$6,
       of_tree$4,
       of_sorted_array$4,
       of_sorted_array_unchecked$4,
       of_increasing_iterator_uncheck$4,
       stable_dedup_list$0,
       map$16,
       filter_map$8,
       filter$10,
       fold$8,
       fold_result$3,
       fold_until$3,
       fold_right$6,
       iter$11,
       iter2$5,
       partition_tf$7,
       elements$1,
       min_elt$7,
       min_elt_exn$5,
       max_elt$7,
       max_elt_exn$5,
       choose$2,
       choose_exn$2,
       split$5,
       group_by$1,
       to_sequence$6,
       binary_search$6,
       binary_search_segmented$6,
       [0,
        _k1_[1],
        _k1_[2],
        _k1_[3],
        _k1_[4],
        _k1_[5],
        _k1_[6],
        _k1_[7],
        _k1_[8],
        _k1_[9],
        _k1_[11],
        _k1_[12]],
       merge_to_sequence$1,
       to_map,
       of_map_keys,
       quickcheck_generator$4,
       quickcheck_observer$3,
       quickcheck_shrinker$3,
       _w$_,
       _w__,
       _w9_,
       _w8_,
       _w7_,
       _w6_,
       _w5_,
       sexp_of_m_t$1,
       m_t_of_sexp$1,
       compare_m_t$0,
       equal_m_t$0,
       hash_fold_m_t$0,
       hash_m_t,
       bin_shape_m_t$0,
       bin_size_m_t$0,
       bin_write_m_t$0,
       bin_read_m_t$1,
       bin_read_m_t$2,
       quickcheck_generator_m_t$0,
       quickcheck_observer_m_t$0,
       quickcheck_shrinker_m_t$0,
       _w4_];
    caml_register_global(5002,Core_kernel_Set,"Core_kernel__Set");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Comparable_int);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$125);
    caml_call1(Expect_test_collector[4][1],cst_src_comparable_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$126,cst$41);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$127);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Comparable_int$0);
    var Core_kernel_Comparable_intf=[0];
    caml_register_global
     (5003,Core_kernel_Comparable_intf,"Core_kernel__Comparable_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Comparable);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$128);
    caml_call1(Expect_test_collector[4][1],cst_src_comparable_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$129,cst$42);
    function With_zero(_bkw_)
     {return caml_call1
              (Base_Comparable[14],
               [0,_bkw_[1],_bkw_[3],_bkw_[4],_bkw_[5],_bkw_[6],_bkw_[7]])}
    function Validate_with_zero(_bkv_)
     {return caml_call1(Base_Comparable[15],[0,_bkv_[1],_bkv_[3],_bkv_[4]])}
    function Map_and_set_binable_using_comp(T)
     {var
       bin_size_t=T[1],
       bin_write_t=T[2],
       bin_read_t=T[3],
       bin_read_t$0=T[4],
       bin_shape_t=T[5],
       bin_writer_t=T[6],
       bin_reader_t=T[7],
       bin_t=T[8],
       compare=T[9],
       t_of_sexp=T[10],
       sexp_of_t=T[11],
       comparator=T[12],
       Map=_we_([0,T[1],T[2],T[3],T[4],T[5],T[6],T[7],T[8],T[10],T[11],T[12]]),
       Set=_w5_([0,T[1],T[2],T[3],T[4],T[5],T[6],T[7],T[8],T[10],T[11],T[12]]);
      return [0,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t,
              compare,
              t_of_sexp,
              sexp_of_t,
              comparator,
              Map,
              Set]}
    function Make_plain_using_comparator$1(T)
     {var
       M=caml_call1(Base_Comparable[11],T),
       symbol=M[1],
       symbol$0=M[2],
       symbol$1=M[3],
       symbol$2=M[4],
       symbol$3=M[5],
       symbol$4=M[6],
       equal=M[7],
       compare=M[8],
       min=M[9],
       max=M[10],
       ascending=M[11],
       descending=M[12],
       between=M[13],
       clamp_exn=M[14],
       clamp=M[15],
       comparator=M[16],
       validate_lbound=M[17],
       validate_ubound=M[18],
       validate_bound=M[19],
       Replace_polymorphic_compare=
        [0,M[1],M[2],M[3],M[4],M[5],M[6],M[7],M[8],M[9],M[10]],
       Map=_wi_(T),
       Set=_w7_(T);
      return [0,
              symbol,
              symbol$0,
              symbol$1,
              symbol$2,
              symbol$3,
              symbol$4,
              equal,
              compare,
              min,
              max,
              ascending,
              descending,
              between,
              clamp_exn,
              clamp,
              comparator,
              validate_lbound,
              validate_ubound,
              validate_bound,
              Replace_polymorphic_compare,
              Map,
              Set]}
    function Make_plain$1(T)
     {var sexp_of_t=T[2],include=caml_call1(Make,T),comparator=include[1];
      return Make_plain_using_comparator$1([0,sexp_of_t,comparator])}
    function Make_using_comparator$1(T)
     {var
       M=caml_call1(Base_Comparable[11],[0,T[2],T[3]]),
       symbol=M[1],
       symbol$0=M[2],
       symbol$1=M[3],
       symbol$2=M[4],
       symbol$3=M[5],
       symbol$4=M[6],
       equal=M[7],
       compare=M[8],
       min=M[9],
       max=M[10],
       ascending=M[11],
       descending=M[12],
       between=M[13],
       clamp_exn=M[14],
       clamp=M[15],
       comparator=M[16],
       validate_lbound=M[17],
       validate_ubound=M[18],
       validate_bound=M[19],
       Replace_polymorphic_compare=
        [0,M[1],M[2],M[3],M[4],M[5],M[6],M[7],M[8],M[9],M[10]],
       Map=_wg_(T),
       Set=_w6_(T);
      return [0,
              symbol,
              symbol$0,
              symbol$1,
              symbol$2,
              symbol$3,
              symbol$4,
              equal,
              compare,
              min,
              max,
              ascending,
              descending,
              between,
              clamp_exn,
              clamp,
              comparator,
              validate_lbound,
              validate_ubound,
              validate_bound,
              Replace_polymorphic_compare,
              Map,
              Set]}
    function Make$2(T)
     {var
       t_of_sexp=T[2],
       sexp_of_t=T[3],
       include=caml_call1(Make,[0,T[1],T[3]]),
       comparator=include[1];
      return Make_using_comparator$1([0,t_of_sexp,sexp_of_t,comparator])}
    function Make_binable_using_comparator$1(T)
     {var
       bin_size_t=T[1],
       bin_write_t=T[2],
       bin_read_t=T[3],
       bin_read_t$0=T[4],
       bin_shape_t=T[5],
       bin_writer_t=T[6],
       bin_reader_t=T[7],
       bin_t=T[8],
       t_of_sexp=T[9],
       sexp_of_t=T[10],
       M=caml_call1(Base_Comparable[11],[0,T[10],T[11]]),
       symbol=M[1],
       symbol$0=M[2],
       symbol$1=M[3],
       symbol$2=M[4],
       symbol$3=M[5],
       symbol$4=M[6],
       equal=M[7],
       compare=M[8],
       min=M[9],
       max=M[10],
       ascending=M[11],
       descending=M[12],
       between=M[13],
       clamp_exn=M[14],
       clamp=M[15],
       comparator=M[16],
       validate_lbound=M[17],
       validate_ubound=M[18],
       validate_bound=M[19],
       Replace_polymorphic_compare=
        [0,M[1],M[2],M[3],M[4],M[5],M[6],M[7],M[8],M[9],M[10]],
       Map=_we_(T),
       Set=_w5_(T);
      return [0,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t,
              t_of_sexp,
              sexp_of_t,
              M,
              symbol,
              symbol$0,
              symbol$1,
              symbol$2,
              symbol$3,
              symbol$4,
              equal,
              compare,
              min,
              max,
              ascending,
              descending,
              between,
              clamp_exn,
              clamp,
              comparator,
              validate_lbound,
              validate_ubound,
              validate_bound,
              Replace_polymorphic_compare,
              Map,
              Set]}
    function Inherit(C,T)
     {var t_of_sexp=T[1],sexp_of_t=T[2];
      function compare(t$0,t)
       {var _bkt_=caml_call1(T[3],t),_bku_=caml_call1(T[3],t$0);
        return caml_call2(C[1],_bku_,_bkt_)}
      return Make$2([0,compare,t_of_sexp,sexp_of_t])}
    var
     lexicographic=Base_Comparable[1],
     lift=Base_Comparable[2],
     reverse=Base_Comparable[3];
    function Make$3(X)
     {var Map=caml_call1(_wd_[1][1],X),Set=caml_call1(_w4_[1][15],X);
      return [0,Map,Set]}
    var V1$12=[0,Make$3],Stable$2=[0,V1$12];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$130);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Comparable$0);
    var _xb_=Base_Comparable[13];
    function _xc_(_bks_){return caml_call1(_xb_,[0,_bks_[1],_bks_[3]])}
    function _xd_(T)
     {var
       t_of_sexp=T[1],
       sexp_of_t=T[2],
       include=caml_call1(Base_Comparable[12],[0,T[2]]),
       symbol=include[1],
       symbol$0=include[2],
       symbol$1=include[3],
       symbol$2=include[4],
       symbol$3=include[5],
       symbol$4=include[6],
       equal=include[7],
       compare=include[8],
       min=include[9],
       max=include[10],
       ascending=include[11],
       descending=include[12],
       between=include[13],
       clamp_exn=include[14],
       clamp=include[15],
       comparator=include[16],
       validate_lbound=include[17],
       validate_ubound=include[18],
       validate_bound=include[19],
       Replace_polymorphic_compare=
        [0,
         symbol,
         symbol$0,
         symbol$1,
         symbol$2,
         symbol$3,
         symbol$4,
         equal,
         compare,
         min,
         max],
       Map=_wg_([0,t_of_sexp,sexp_of_t,comparator]),
       Set=_w6_([0,t_of_sexp,sexp_of_t,comparator]);
      return [0,
              symbol,
              symbol$0,
              symbol$1,
              symbol$2,
              symbol$3,
              symbol$4,
              equal,
              compare,
              min,
              max,
              ascending,
              descending,
              between,
              clamp_exn,
              clamp,
              comparator,
              validate_lbound,
              validate_ubound,
              validate_bound,
              Replace_polymorphic_compare,
              Map,
              Set]}
    function _xe_(_bkq_)
     {var _bkr_=Map_and_set_binable_using_comp(_bkq_);
      return [0,_bkr_[12],_bkr_[13],_bkr_[14]]}
    function _xf_(T)
     {var
       bin_size_t=T[1],
       bin_write_t=T[2],
       bin_read_t=T[3],
       bin_read_t$0=T[4],
       bin_shape_t=T[5],
       bin_writer_t=T[6],
       bin_reader_t=T[7],
       bin_t=T[8],
       compare=T[9],
       t_of_sexp=T[10],
       sexp_of_t=T[11],
       include=caml_call1(Make,[0,T[9],T[11]]),
       comparator=include[1],
       _bkp_=
        Map_and_set_binable_using_comp
         ([0,
           bin_size_t,
           bin_write_t,
           bin_read_t,
           bin_read_t$0,
           bin_shape_t,
           bin_writer_t,
           bin_reader_t,
           bin_t,
           compare,
           t_of_sexp,
           sexp_of_t,
           comparator]);
      return [0,_bkp_[12],_bkp_[13],_bkp_[14]]}
    function _xg_(M,X)
     {var
       symbol=M[1],
       symbol$0=M[2],
       symbol$1=M[3],
       symbol$2=M[4],
       symbol$3=M[5],
       symbol$4=M[6],
       equal=M[7],
       compare=M[8],
       min=M[9],
       max=M[10],
       ascending=M[11],
       descending=M[12],
       between=M[13],
       clamp_exn=M[14],
       clamp=M[15],
       comparator=M[16],
       validate_lbound=M[17],
       validate_ubound=M[18],
       validate_bound=M[19],
       bin_size_t=X[1],
       bin_write_t=X[2],
       bin_read_t=X[3],
       bin_read_t$0=X[4],
       bin_shape_t=X[5],
       bin_writer_t=X[6],
       bin_reader_t=X[7],
       bin_t=X[8],
       t_of_sexp=X[9],
       sexp_of_t=X[10],
       Replace_polymorphic_compare=
        [0,M[1],M[2],M[3],M[4],M[5],M[6],M[7],M[8],M[9],M[10]],
       Map=
        _we_
         ([0,
           bin_size_t,
           bin_write_t,
           bin_read_t,
           bin_read_t$0,
           bin_shape_t,
           bin_writer_t,
           bin_reader_t,
           bin_t,
           t_of_sexp,
           sexp_of_t,
           comparator]),
       Set=
        _w5_
         ([0,
           bin_size_t,
           bin_write_t,
           bin_read_t,
           bin_read_t$0,
           bin_shape_t,
           bin_writer_t,
           bin_reader_t,
           bin_t,
           t_of_sexp,
           sexp_of_t,
           comparator]);
      return [0,
              symbol,
              symbol$0,
              symbol$1,
              symbol$2,
              symbol$3,
              symbol$4,
              equal,
              compare,
              min,
              max,
              ascending,
              descending,
              between,
              clamp_exn,
              clamp,
              validate_lbound,
              validate_ubound,
              validate_bound,
              Replace_polymorphic_compare,
              comparator,
              Map,
              Set]}
    function _xh_(M,X)
     {var
       symbol=M[1],
       symbol$0=M[2],
       symbol$1=M[3],
       symbol$2=M[4],
       symbol$3=M[5],
       symbol$4=M[6],
       equal=M[7],
       compare=M[8],
       min=M[9],
       max=M[10],
       ascending=M[11],
       descending=M[12],
       between=M[13],
       clamp_exn=M[14],
       clamp=M[15],
       comparator=M[16],
       validate_lbound=M[17],
       validate_ubound=M[18],
       validate_bound=M[19],
       t_of_sexp=X[1],
       sexp_of_t=X[2],
       Replace_polymorphic_compare=
        [0,M[1],M[2],M[3],M[4],M[5],M[6],M[7],M[8],M[9],M[10]],
       Map=_wg_([0,t_of_sexp,sexp_of_t,comparator]),
       Set=_w6_([0,t_of_sexp,sexp_of_t,comparator]);
      return [0,
              symbol,
              symbol$0,
              symbol$1,
              symbol$2,
              symbol$3,
              symbol$4,
              equal,
              compare,
              min,
              max,
              ascending,
              descending,
              between,
              clamp_exn,
              clamp,
              comparator,
              validate_lbound,
              validate_ubound,
              validate_bound,
              Replace_polymorphic_compare,
              Map,
              Set]}
    function _xi_(_bkn_)
     {var _bko_=Make_binable_using_comparator$1(_bkn_);
      return [0,
              _bko_[12],
              _bko_[13],
              _bko_[14],
              _bko_[15],
              _bko_[16],
              _bko_[17],
              _bko_[18],
              _bko_[19],
              _bko_[20],
              _bko_[21],
              _bko_[22],
              _bko_[23],
              _bko_[24],
              _bko_[25],
              _bko_[26],
              _bko_[28],
              _bko_[29],
              _bko_[30],
              _bko_[31],
              _bko_[27],
              _bko_[32],
              _bko_[33]]}
    function _xj_(T)
     {var
       bin_size_t=T[1],
       bin_write_t=T[2],
       bin_read_t=T[3],
       bin_read_t$0=T[4],
       bin_shape_t=T[5],
       bin_writer_t=T[6],
       bin_reader_t=T[7],
       bin_t=T[8],
       t_of_sexp=T[10],
       sexp_of_t=T[11],
       include=caml_call1(Make,[0,T[9],T[11]]),
       comparator=include[1],
       _bkm_=
        Make_binable_using_comparator$1
         ([0,
           bin_size_t,
           bin_write_t,
           bin_read_t,
           bin_read_t$0,
           bin_shape_t,
           bin_writer_t,
           bin_reader_t,
           bin_t,
           t_of_sexp,
           sexp_of_t,
           comparator]);
      return [0,
              _bkm_[12],
              _bkm_[13],
              _bkm_[14],
              _bkm_[15],
              _bkm_[16],
              _bkm_[17],
              _bkm_[18],
              _bkm_[19],
              _bkm_[20],
              _bkm_[21],
              _bkm_[22],
              _bkm_[23],
              _bkm_[24],
              _bkm_[25],
              _bkm_[26],
              _bkm_[28],
              _bkm_[29],
              _bkm_[30],
              _bkm_[31],
              _bkm_[27],
              _bkm_[32],
              _bkm_[33]]}
    var
     Core_kernel_Comparable=
      [0,
       lexicographic,
       lift,
       reverse,
       Inherit,
       Base_Comparable[7],
       Base_Comparable[8],
       Make_plain$1,
       Make$2,
       Make_plain_using_comparator$1,
       Make_using_comparator$1,
       _xj_,
       _xi_,
       _xh_,
       _xg_,
       _xf_,
       _xe_,
       _xd_,
       _xc_,
       With_zero,
       Validate_with_zero,
       Stable$2];
    caml_register_global
     (5004,Core_kernel_Comparable,"Core_kernel__Comparable");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Doubly_linked_);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$131);
    caml_call1(Expect_test_collector[4][1],cst_src_doubly_linked_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$132,cst$43);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$133);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Doubly_linked_$0);
    var Core_kernel_Doubly_linked_intf=[0];
    caml_register_global
     (5005,Core_kernel_Doubly_linked_intf,"Core_kernel__Doubly_linked_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_List);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$134);
    caml_call1(Expect_test_collector[4][1],cst_src_list_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$135,cst$44);
    var stable_dedup=_w$_[72];
    function stable_dedup_staged(compare)
     {function t_of_sexp(param){throw [0,Assert_failure,_xk_]}
      function sexp_of_t(param){throw [0,Assert_failure,_xl_]}
      var _bkl_=_w9_([0,compare,t_of_sexp,sexp_of_t])[63];
      return caml_call1(Base_Staged[1],_bkl_)}
    function zip_with_remainder(xs$1,ys$1)
     {var acc=0,xs=xs$1,ys=ys$1;
      for(;;)
       {if(xs)
         {if(ys)
           {var
             ys$0=ys[2],
             y=ys[1],
             xs$0=xs[2],
             x=xs[1],
             acc$0=[0,[0,x,y],acc],
             acc=acc$0,
             xs=xs$0,
             ys=ys$0;
            continue}
          return [0,caml_call1(parts,acc),[0,[0,xs]]]}
        return ys
                ?[0,caml_call1(parts,acc),[0,[1,ys]]]
                :[0,caml_call1(parts,acc),0]}}
    var
     Duplicate_found=
      [248,cst_Core_kernel_List_Duplicate,caml_fresh_oo_id(0)];
    function _xm_(param)
     {if(param[1] === Duplicate_found)
       {var
         v1=param[3],
         v0$0=param[2],
         v0=caml_call1(v0$0,0),
         v1$0=caml_call1(include$39[22],v1);
        return [1,[0,_xn_,[0,v0,[0,v1$0,0]]]]}
      throw [0,Assert_failure,_xo_]}
    caml_call3(Sexplib0_Sexp_conv[51][2],0,Duplicate_found,_xm_);
    function exn_if_dup(compare,opt,t,to_sexp)
     {if(opt)var sth=opt[1],context=sth;else var context=cst_exn_if_dup;
      var match=caml_call2(_qJ_,compare,t);
      if(match)
       {var dup=match[1];
        throw [0,
               Duplicate_found,
               function(param){return caml_call1(to_sexp,dup)},
               context]}
      return 0}
    function slice$1(a,start,stop){return slice(length$1,_qX_,a,start,stop)}
    var
     _xp_=caml_call1(Bin_prot_Shape[3][1],cst_a$43),
     _xq_=caml_call1(Bin_prot_Shape[4][1],cst_src_list_ml_56_23),
     _xr_=bin_shape_t$24(caml_call2(Bin_prot_Shape[15],_xq_,_xp_)),
     _xs_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$44),0],
     _xt_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$90),_xs_,_xr_],0],
     _xu_=caml_call1(Bin_prot_Shape[4][1],cst_src_list_ml_56_4),
     group$42=caml_call2(Bin_prot_Shape[6],_xu_,_xt_);
    function bin_shape_t$34(a)
     {var _bkk_=caml_call1(Bin_prot_Shape[2][1],cst_t$91);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$42,_bkk_),[0,a,0])}
    function bin_size_t$41(size_of_a,v){return bin_size_t$31(size_of_a,v)}
    function bin_write_t$41(write_a,buf,pos,v)
     {return bin_write_t$31(write_a,buf,pos,v)}
    function bin_writer_t$28(bin_writer_a)
     {function _bkg_(v)
       {var _bkh_=bin_writer_a[2];
        return function(_bki_,_bkj_)
         {return bin_write_t$41(_bkh_,v,_bki_,_bkj_)}}
      return [0,function(v){return bin_size_t$41(bin_writer_a[1],v)},_bkg_]}
    function bin_read_t$84(of_a,buf,pos_ref,vint)
     {return bin_read_t$64(of_a,buf,pos_ref,vint)}
    function bin_read_t$85(of_a,buf,pos_ref)
     {return bin_read_t$65(of_a,buf,pos_ref)}
    function bin_reader_t$28(bin_reader_a)
     {function _bkf_(buf,pos_ref,vtag)
       {return bin_read_t$84(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$85(bin_reader_a[1],buf,pos_ref)},
              _bkf_]}
    function bin_t$28(bin_a)
     {var _bkd_=bin_reader_t$28(bin_a[3]),_bke_=bin_writer_t$28(bin_a[2]);
      return [0,bin_shape_t$34(bin_a[1]),_bke_,_bkd_]}
    function compare$27(cmp_a,a_001,b_002)
     {return caml_call3
              (_o6_,
               function(a_003,b_004){return caml_call2(cmp_a,a_003,b_004)},
               a_001,
               b_002)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$136);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_List$0);
    var
     _xv_=
      [0,
       [0,
        t_of_sexp$18,
        sexp_of_t$17,
        bin_shape_t$34,
        bin_size_t$41,
        bin_write_t$41,
        bin_read_t$85,
        bin_read_t$84,
        bin_writer_t$28,
        bin_reader_t$28,
        bin_t$28,
        compare$27]],
     _xw_=
      [0,
       Assoc[10],
       Assoc[11],
       Assoc[12],
       Assoc[15],
       Assoc[14],
       Assoc[13],
       Assoc[16],
       Assoc[17],
       Assoc[18],
       Assoc[1],
       Assoc[2],
       Assoc[3],
       Assoc[4],
       Assoc[5],
       Assoc[6],
       Assoc[7],
       Assoc[8],
       Assoc[9]],
     Core_kernel_List=
      [0,
       _o6_,
       hash_fold_sexp_list,
       t_of_sexp$18,
       sexp_of_t$17,
       _o7_,
       _o8_,
       length$1,
       is_empty$0,
       _o9_,
       _o__,
       _o$_,
       _pa_,
       _pb_,
       _pc_,
       _pd_,
       _pe_,
       _pf_,
       _pg_,
       _ph_,
       _pi_,
       _pj_,
       _pk_,
       _pl_,
       _pm_,
       _po_,
       _pp_,
       _pq_,
       _pr_,
       _ps_,
       _pt_,
       _pw_,
       _px_,
       _py_,
       parts,
       _pz_,
       _pA_,
       _pB_,
       _pC_,
       _pD_,
       _pE_,
       _pF_,
       _pG_,
       _pH_,
       _pI_,
       _pJ_,
       _pK_,
       _pL_,
       _pM_,
       _pN_,
       _pO_,
       _pP_,
       _pQ_,
       _pR_,
       _pS_,
       _pT_,
       _pU_,
       _pV_,
       _pW_,
       _pX_,
       _pY_,
       _pZ_,
       _p0_,
       _p1_,
       _p2_,
       _p3_,
       _p4_,
       _p5_,
       _p6_,
       _p7_,
       _p8_,
       _p9_,
       _p__,
       _p$_,
       _qa_,
       _qb_,
       _qc_,
       _qd_,
       _qe_,
       _qf_,
       _qg_,
       _qh_,
       _qi_,
       _qj_,
       _qk_,
       _ql_,
       _qm_,
       _qn_,
       _qo_,
       _qp_,
       _qq_,
       _qr_,
       _qs_,
       _qt_,
       _qu_,
       _qv_,
       _qw_,
       _qx_,
       _qy_,
       _qz_,
       _qA_,
       _qB_,
       _qC_,
       _qD_,
       _qE_,
       _qF_,
       _qG_,
       _qH_,
       _qI_,
       _qJ_,
       _qK_,
       _qL_,
       _qM_,
       _qN_,
       _qO_,
       _qP_,
       _qQ_,
       _qR_,
       _qS_,
       _qT_,
       _qU_,
       _qV_,
       _qX_,
       _qY_,
       _qZ_,
       _q0_,
       _q1_,
       _q2_,
       _q3_,
       _q4_,
       _q5_,
       _q6_,
       _q7_,
       _q8_,
       _q9_,
       _q__,
       _q$_,
       _ra_,
       _rb_,
       _rc_,
       _re_,
       _rf_,
       _rg_,
       bin_shape_t$24,
       bin_size_t$31,
       bin_write_t$31,
       bin_read_t$65,
       bin_read_t$64,
       bin_writer_t$18,
       bin_reader_t$18,
       bin_t$18,
       typerep_of_t$1,
       typename_of_t$1,
       _xw_,
       stable_dedup,
       stable_dedup_staged,
       Duplicate_found,
       exn_if_dup,
       slice$1,
       _rH_,
       _rI_,
       _rM_,
       _rN_,
       to_string,
       _rJ_,
       gen_with_length,
       _rK_,
       _rL_,
       zip_with_remainder,
       _xv_];
    caml_register_global(5008,Core_kernel_List,"Core_kernel__List");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Option);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$137);
    caml_call1(Expect_test_collector[4][1],cst_src_option_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$138,cst$45);
    var
     _xx_=include$30[1],
     hash_fold_sexp_option=include$30[2],
     t_of_sexp$26=include$30[3],
     sexp_of_t$33=include$30[4],
     _xy_=include$30[5],
     _xC_=include$30[9],
     _xD_=include$30[10],
     _xQ_=include$30[23],
     _xU_=include$30[28],
     _xW_=include$30[30],
     _x1_=include$30[36],
     _x2_=include$30[37],
     _x3_=include$30[38],
     _x6_=include$30[41],
     _x7_=include$30[42],
     _yc_=include$30[49],
     _xz_=include$30[6],
     _xA_=include$30[7],
     _xB_=include$30[8],
     _xE_=include$30[11],
     _xF_=include$30[12],
     _xG_=include$30[13],
     _xH_=include$30[14],
     _xI_=include$30[15],
     _xJ_=include$30[16],
     _xK_=include$30[17],
     _xL_=include$30[18],
     _xM_=include$30[19],
     _xN_=include$30[20],
     _xO_=include$30[21],
     _xP_=include$30[22],
     _xR_=include$30[24],
     _xS_=include$30[25],
     _xT_=include$30[26],
     _xV_=include$30[29],
     _xX_=include$30[31],
     _xY_=include$30[32],
     _xZ_=include$30[33],
     _x0_=include$30[34],
     _x4_=include$30[39],
     _x5_=include$30[40],
     _x8_=include$30[43],
     _x9_=include$30[44],
     _x__=include$30[45],
     _x$_=include$30[46],
     _ya_=include$30[47],
     _yb_=include$30[48],
     _yd_=include$30[50],
     _ye_=include$30[51],
     _yf_=caml_call1(Bin_prot_Shape[3][1],cst_a$45),
     _yg_=caml_call1(Bin_prot_Shape[4][1],cst_src_option_ml_4_12),
     _yh_=caml_call1(_c__,caml_call2(Bin_prot_Shape[15],_yg_,_yf_)),
     _yi_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$46),0],
     _yj_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$92),_yi_,_yh_],0],
     _yk_=caml_call1(Bin_prot_Shape[4][1],cst_src_option_ml_4_0),
     group$43=caml_call2(Bin_prot_Shape[6],_yk_,_yj_);
    function bin_shape_t$35(a)
     {var _bkc_=caml_call1(Bin_prot_Shape[2][1],cst_t$93);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$43,_bkc_),[0,a,0])}
    function bin_size_t$42(size_of_a,v){return caml_call2(_bD_,size_of_a,v)}
    function bin_write_t$42(write_a,buf,pos,v)
     {return caml_call3(caml_call1(_da_,write_a),buf,pos,v)}
    function bin_writer_t$29(bin_writer_a)
     {function _bj__(v)
       {var _bj$_=bin_writer_a[2];
        return function(_bka_,_bkb_)
         {return bin_write_t$42(_bj$_,v,_bka_,_bkb_)}}
      return [0,function(v){return bin_size_t$42(bin_writer_a[1],v)},_bj__]}
    function bin_read_t$86(of_a,buf,pos_ref,vint)
     {return caml_call3(caml_call1(_dd_,of_a),buf,pos_ref,vint)}
    function bin_read_t$87(of_a,buf,pos_ref)
     {return caml_call2(caml_call1(_dc_,of_a),buf,pos_ref)}
    function bin_reader_t$29(bin_reader_a)
     {function _bj9_(buf,pos_ref,vtag)
       {return bin_read_t$86(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$87(bin_reader_a[1],buf,pos_ref)},
              _bj9_]}
    function bin_t$29(bin_a)
     {var _bj7_=bin_reader_t$29(bin_a[3]),_bj8_=bin_writer_t$29(bin_a[2]);
      return [0,bin_shape_t$35(bin_a[1]),_bj8_,_bj7_]}
    var
     Typename_of_t$2=caml_call1(Typerep_lib_Make_typename[2],[0,name$11]),
     typename_of_t$2=Typename_of_t$2[2];
    function typerep_of_t$2(of_a)
     {var name_of_t=caml_call1(Typename_of_t$2[1],of_a);
      return [9,
              [0,
               name_of_t,
               [0,[246,function(_bj6_){return caml_call1(_e7_,of_a)}]]]]}
    function compare$28(cmp_a,a_001,b_002)
     {return caml_call3
              (_xx_,
               function(a_003,b_004){return caml_call2(cmp_a,a_003,b_004)},
               a_001,
               b_002)}
    var
     include$40=caml_call1(Derived,[0,compare$28,sexp_of_t$33]),
     _ym_=Base_quickcheck_Generator[12],
     _yo_=Base_quickcheck_Shrinker[13],
     _yl_=include$40[1],
     _yn_=Base_quickcheck_Observer[13],
     _yp_=caml_call1(Bin_prot_Shape[3][1],cst_a$47),
     _yq_=caml_call1(Bin_prot_Shape[4][1],cst_src_option_ml_16_23),
     _yr_=bin_shape_t$35(caml_call2(Bin_prot_Shape[15],_yq_,_yp_)),
     _ys_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$48),0],
     _yt_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$94),_ys_,_yr_],0],
     _yu_=caml_call1(Bin_prot_Shape[4][1],cst_src_option_ml_16_4),
     group$44=caml_call2(Bin_prot_Shape[6],_yu_,_yt_);
    function bin_shape_t$36(a)
     {var _bj5_=caml_call1(Bin_prot_Shape[2][1],cst_t$95);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$44,_bj5_),[0,a,0])}
    function bin_size_t$43(size_of_a,v){return bin_size_t$42(size_of_a,v)}
    function bin_write_t$43(write_a,buf,pos,v)
     {return bin_write_t$42(write_a,buf,pos,v)}
    function bin_writer_t$30(bin_writer_a)
     {function _bj1_(v)
       {var _bj2_=bin_writer_a[2];
        return function(_bj3_,_bj4_)
         {return bin_write_t$43(_bj2_,v,_bj3_,_bj4_)}}
      return [0,function(v){return bin_size_t$43(bin_writer_a[1],v)},_bj1_]}
    function bin_read_t$88(of_a,buf,pos_ref,vint)
     {return bin_read_t$86(of_a,buf,pos_ref,vint)}
    function bin_read_t$89(of_a,buf,pos_ref)
     {return bin_read_t$87(of_a,buf,pos_ref)}
    function bin_reader_t$30(bin_reader_a)
     {function _bj0_(buf,pos_ref,vtag)
       {return bin_read_t$88(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$89(bin_reader_a[1],buf,pos_ref)},
              _bj0_]}
    function bin_t$30(bin_a)
     {var _bjY_=bin_reader_t$30(bin_a[3]),_bjZ_=bin_writer_t$30(bin_a[2]);
      return [0,bin_shape_t$36(bin_a[1]),_bjZ_,_bjY_]}
    function compare$29(cmp_a,a_005,b_006)
     {return caml_call3
              (_xx_,
               function(a_007,b_008){return caml_call2(cmp_a,a_007,b_008)},
               a_005,
               b_006)}
    function equal$13(cmp_a,a_009,b_010)
     {return caml_call3
              (_xQ_,
               function(a_011,b_012){return caml_call2(cmp_a,a_011,b_012)},
               a_009,
               b_010)}
    function unsafe_value(t){var value=t[1];return value}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$139);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Option$0);
    var
     Core_kernel_Option=
      [0,
       bin_shape_t$35,
       bin_size_t$42,
       bin_write_t$42,
       bin_read_t$87,
       bin_read_t$86,
       bin_writer_t$29,
       bin_reader_t$29,
       bin_t$29,
       typerep_of_t$2,
       typename_of_t$2,
       _xx_,
       hash_fold_sexp_option,
       t_of_sexp$26,
       sexp_of_t$33,
       _xy_,
       _xz_,
       _xA_,
       _xB_,
       _xC_,
       _xD_,
       _xE_,
       _xF_,
       _xG_,
       _xH_,
       _xI_,
       _xJ_,
       _xK_,
       _xL_,
       _xM_,
       _xN_,
       _xO_,
       _xP_,
       _xQ_,
       _xR_,
       _xS_,
       _xT_,
       _xU_,
       _xV_,
       _xW_,
       _xX_,
       _xY_,
       _xZ_,
       _x0_,
       _x1_,
       _x2_,
       _x3_,
       _x4_,
       _x5_,
       _x6_,
       _x7_,
       _x8_,
       _x9_,
       _x__,
       _x$_,
       _ya_,
       _yb_,
       _yc_,
       _yd_,
       _ye_,
       _yl_,
       _ym_,
       _yn_,
       _yo_,
       [0,
        [0,
         bin_shape_t$36,
         bin_size_t$43,
         bin_write_t$43,
         bin_read_t$89,
         bin_read_t$88,
         bin_writer_t$30,
         bin_reader_t$30,
         bin_t$30,
         compare$29,
         equal$13,
         t_of_sexp$26,
         sexp_of_t$33]],
       [0,[0,_x1_,unsafe_value]]];
    caml_register_global(5009,Core_kernel_Option,"Core_kernel__Option");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Optional_synta);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$140);
    caml_call1(Expect_test_collector[4][1],cst_src_optional_syntax_intf_m);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$141,cst$46);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$142);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Optional_synta$0);
    var Core_kernel_Optional_syntax_in=[0];
    caml_register_global
     (5010,Core_kernel_Optional_syntax_in,"Core_kernel__Optional_syntax_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Optional_synta$1);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$143);
    caml_call1(Expect_test_collector[4][1],cst_src_optional_syntax_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$144,cst$47);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$145);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Optional_synta$2);
    var Core_kernel_Optional_syntax=[0];
    caml_register_global
     (5011,Core_kernel_Optional_syntax,"Core_kernel__Optional_syntax");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Union_find);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$146);
    caml_call1(Expect_test_collector[4][1],cst_src_union_find_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$147,cst$48);
    function invariant$2(param,t)
     {var t$0=t,depth=0;
      for(;;)
       {var _bjX_=t$0[1];
        if(0 === _bjX_[0])
         {var
           t$1=_bjX_[1],
           depth$0=caml_call2(_aJ_,depth,1),
           t$0=t$1,
           depth=depth$0;
          continue}
        var r=_bjX_[1];
        if(caml_call2(_a3_,depth,r[2]))return 0;
        throw [0,Assert_failure,_yv_]}}
    function create$9(v){return [0,[1,[0,v,0]]]}
    function representative(t$1)
     {var _bjW_=t$1[1];
      if(0 === _bjW_[0])
       {var t$2=_bjW_[1],t=t$2,inner_node=_bjW_,inner=t$1,descendants=0;
        for(;;)
         {var _bjV_=t[1];
          if(0 === _bjV_[0])
           {var
             t$0=_bjV_[1],
             descendants$0=[0,inner,descendants],
             inner_node=_bjV_,
             inner=t,
             t=t$0,
             descendants=descendants$0;
            continue}
          var r=_bjV_[1];
          caml_call2(_o9_,descendants,function(t){t[1] = inner_node;return 0});
          return [0,t,r]}}
      var r$0=_bjW_[1];
      return [0,t$1,r$0]}
    function root(t)
     {var _bjU_=t[1];
      if(0 === _bjU_[0])return caml_call1(_bk_,representative(t));
      var r=_bjU_[1];
      return r}
    function rank$3(t){return root(t)[2]}
    function get$0(t){return root(t)[1]}
    function set$5(t,v){root(t)[1] = v;return 0}
    function same_class(t1,t2)
     {var _bjT_=root(t2);return caml_call2(_bo_,root(t1),_bjT_)}
    function union$5(t1,t2)
     {var
       match=representative(t1),
       r1=match[2],
       t1$0=match[1],
       match$0=representative(t2),
       r2=match$0[2],
       t2$0=match$0[1];
      if(caml_call2(_bo_,r1,r2))return 0;
      var n1=r1[2],n2=r2[2];
      if(caml_call2(_a2_,n1,n2)){t1$0[1] = [0,t2$0];return 0}
      t2$0[1] = [0,t1$0];
      var
       _bjR_=caml_call2(_a5_,n1,n2),
       _bjS_=_bjR_?(r1[2] = caml_call2(_aJ_,r1[2],1),0):_bjR_;
      return _bjS_}
    function is_compressed(t)
     {invariant$2(function(_bjQ_){return 0},t);
      var _bjP_=t[1];
      if(0 === _bjP_[0]){var t$0=_bjP_[1];return 0 === t$0[1][0]?0:1}
      return 1}
    var Private$0=[0,is_compressed,rank$3];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$148);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Union_find$0);
    var
     Core_kernel_Union_find=
      [0,invariant$2,create$9,get$0,set$5,same_class,union$5,Private$0];
    caml_register_global
     (5012,Core_kernel_Union_find,"Core_kernel__Union_find");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Doubly_linked);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$149);
    caml_call1(Expect_test_collector[4][1],cst_src_doubly_linked_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$150,cst$49);
    var
     Attempt_to_mutate_list_during_=
      [248,cst_Core_kernel_Doubly_linked_$1,caml_fresh_oo_id(0)];
    function phys_equal(_bjO_,_bjN_){return _bjO_ === _bjN_?1:0}
    function create$10(param){return create$9([0,1,0])}
    function equal$14(t1,t2){return same_class(t1,t2)}
    function length$12(t){return get$0(t)[1]}
    function union_find_get_check_no_pendin(t)
     {var s=get$0(t);
      if(caml_call2(_a6_,s[2],0))throw Attempt_to_mutate_list_during_;
      return s}
    function check_no_pending_iterations(t)
     {union_find_get_check_no_pendin(t);return 0}
    function incr_length(n,t)
     {var s=union_find_get_check_no_pendin(t);
      s[1] = caml_call2(_aJ_,s[1],n);
      return 0}
    function incr_pending_iters(s){s[2] = caml_call2(_aJ_,s[2],1);return 0}
    function decr_pending_iters(s){s[2] = caml_call2(_aK_,s[2],1);return 0}
    function with_iteration_2(t,a,b,f)
     {var s=get$0(t);
      incr_pending_iters(s);
      try
       {var r=caml_call2(f,a,b)}
      catch(exn)
       {exn = caml_wrap_exception(exn);decr_pending_iters(s);throw exn}
      decr_pending_iters(s);
      return r}
    function with_iteration_3(t,a,b,c,f)
     {var s=get$0(t);
      incr_pending_iters(s);
      try
       {var r=caml_call3(f,a,b,c)}
      catch(exn)
       {exn = caml_wrap_exception(exn);decr_pending_iters(s);throw exn}
      decr_pending_iters(s);
      return r}
    function with_iteration_4(t,a,b,c,d,f)
     {var s=get$0(t);
      incr_pending_iters(s);
      try
       {var r=caml_call4(f,a,b,c,d)}
      catch(exn)
       {exn = caml_wrap_exception(exn);decr_pending_iters(s);throw exn}
      decr_pending_iters(s);
      return r}
    function prev(t){return t[2]}
    function create_aux(v,header)
     {var t=[];caml_update_dummy(t,[0,v,t,t,header]);return t}
    function is_singleton(t){return t === t[2]?1:0}
    function sexp_of_t$34(sexp_of_a,t){return caml_call1(sexp_of_a,t[1])}
    function create$11(v){return create_aux(v,create$10(0))}
    function value$0(t){return t[1]}
    function set$6(t,v){t[1] = v;return 0}
    function unsafe_split_or_splice(a,b,c,d)
     {a[3] = d;d[2] = a;c[3] = b;b[2] = c;return 0}
    function unsafe_split_or_splice_after(t1,t2)
     {return unsafe_split_or_splice(t1[3][2],t1[3],t2[3][2],t2[3])}
    function unsafe_split_or_splice_before(t1,t2)
     {return unsafe_split_or_splice(t1[2],t1[2][3],t2[2],t2[2][3])}
    function check_two_nodes_no_pending_ite(t1,t2)
     {check_no_pending_iterations(t1[4]);
      var _bjM_=1 - equal$14(t1[4],t2[4]);
      return _bjM_?check_no_pending_iterations(t2[4]):_bjM_}
    function split_or_splice_before(t1,t2)
     {check_two_nodes_no_pending_ite(t1,t2);
      return unsafe_split_or_splice_before(t1,t2)}
    function insert_before(t,v)
     {incr_length(1,t[4]);
      var node=create_aux(v,t[4]);
      unsafe_split_or_splice_before(t,node);
      return node}
    function insert_after(t,v)
     {incr_length(1,t[4]);
      var node=create_aux(v,t[4]);
      unsafe_split_or_splice_after(t,node);
      return node}
    var dummy_header=create$10(0);
    function unlink(t)
     {var _bjL_=t[2],node=_bjL_[3];
      if(! is_singleton(node))
       {incr_length(-1,_bjL_[4]);
        unsafe_split_or_splice_after(_bjL_,node);
        node[4] = dummy_header}
      return 0}
    function invariant$3(invariant_a,t)
     {var _bjK_=t[1];
      if(_bjK_)
       {var head=_bjK_[1],header=head[4],n=1,elt=head;
        for(;;)
         {var next_elt=elt[3],prev_elt=elt[2];
          if(elt === next_elt[2])
           {if(elt === prev_elt[3])
             {if(equal$14(elt[4],header))
               {caml_call1(invariant_a,elt[1]);
                if(next_elt === head)
                 {if(caml_call2(_a5_,n,length$12(header)))return 0;
                  throw [0,Assert_failure,_yz_]}
                var n$0=caml_call2(_aJ_,n,1),n=n$0,elt=next_elt;
                continue}
              throw [0,Assert_failure,_yw_]}
            throw [0,Assert_failure,_yx_]}
          throw [0,Assert_failure,_yy_]}}
      return 0}
    function create$12(param){return [0,0]}
    function equal$15(t$0,t){return t$0 === t?1:0}
    function of_list$7(param)
     {if(param)
       {var xs=param[2],x=param[1],first=create$11(x);
        caml_call3(_o__,xs,first,insert_after);
        return [0,[0,first]]}
      return create$12(0)}
    function of_array$3(arr)
     {var len=arr.length - 1;
      if(len)
       {var elt=create$11(caml_check_bound(arr,0)[1]),elt$0=elt,i=1;
        for(;;)
         {if(caml_call2(_a2_,i,caml_call1(length,arr)))
           {var
             i$0=caml_call2(_aJ_,i,1),
             elt$1=insert_after(elt$0,caml_check_bound(arr,i)[1 + i]),
             elt$0=elt$1,
             i=i$0;
            continue}
          return [0,[0,elt]]}}
      return create$12(0)}
    function map$19(t,f)
     {var _bjG_=t[1];
      if(_bjG_)
       {var
         first=_bjG_[1],
         new_first=create$11(caml_call1(f,first[1])),
         _bjH_=
          function(f,new_first,first)
           {var next$0=first[3],_bjJ_=1 - (next$0 === first?1:0);
            if(_bjJ_)
             {var acc=new_first,elt=next$0;
              for(;;)
               {var
                 acc$0=insert_after(acc,caml_call1(f,elt[1])),
                 next=elt[3],
                 _bjI_=1 - (next === first?1:0);
                if(_bjI_){var acc=acc$0,elt=next;continue}
                return _bjI_}}
            return _bjJ_};
        with_iteration_3(first[4],f,new_first,first,_bjH_);
        return [0,[0,new_first]]}
      return create$12(0)}
    function mapi$5(t,f)
     {var _bjC_=t[1];
      if(_bjC_)
       {var
         first=_bjC_[1],
         new_first=create$11(caml_call2(f,0,first[1])),
         _bjD_=
          function(f,new_first,first)
           {var next$0=first[3],_bjF_=1 - (next$0 === first?1:0);
            if(_bjF_)
             {var i=1,acc=new_first,elt=next$0;
              for(;;)
               {var
                 acc$0=insert_after(acc,caml_call2(f,i,elt[1])),
                 next=elt[3],
                 _bjE_=1 - (next === first?1:0);
                if(_bjE_)
                 {var i$0=caml_call2(_aJ_,i,1),i=i$0,acc=acc$0,elt=next;
                  continue}
                return _bjE_}}
            return _bjF_};
        with_iteration_3(first[4],f,new_first,first,_bjD_);
        return [0,[0,new_first]]}
      return create$12(0)}
    function fold_elt(t,init,f)
     {var _bjA_=t[1];
      if(_bjA_)
       {var
         first=_bjA_[1],
         _bjB_=
          function(f,acc,first)
           {var acc$0=acc,elt=first;
            for(;;)
             {var acc$1=caml_call2(f,acc$0,elt),elt$0=elt[3];
              if(elt$0 === first)return acc$1;
              var acc$0=acc$1,elt=elt$0;
              continue}};
        return with_iteration_3(first[4],f,init,first,_bjB_)}
      return init}
    function foldi_elt(t,init,f)
     {var _bjy_=t[1];
      if(_bjy_)
       {var
         first=_bjy_[1],
         _bjz_=
          function(f,acc,first)
           {var i=0,acc$0=acc,elt=first;
            for(;;)
             {var acc$1=caml_call3(f,i,acc$0,elt),elt$0=elt[3];
              if(elt$0 === first)return acc$1;
              var i$0=caml_call2(_aJ_,i,1),i=i$0,acc$0=acc$1,elt=elt$0;
              continue}};
        return with_iteration_3(first[4],f,init,first,_bjz_)}
      return init}
    function fold_elt_1(t,init,f,a)
     {var _bjw_=t[1];
      if(_bjw_)
       {var
         first=_bjw_[1],
         _bjx_=
          function(f,a,acc,first)
           {var acc$0=acc,elt=first;
            for(;;)
             {var acc$1=caml_call3(f,a,acc$0,elt),elt$0=elt[3];
              if(elt$0 === first)return acc$1;
              var acc$0=acc$1,elt=elt$0;
              continue}};
        return with_iteration_4(first[4],f,a,init,first,_bjx_)}
      return init}
    function foldi_elt_1(t,init,f,a)
     {var _bju_=t[1];
      if(_bju_)
       {var
         first=_bju_[1],
         _bjv_=
          function(f,a,acc,first)
           {var i=0,acc$0=acc,elt=first;
            for(;;)
             {var acc$1=caml_call4(f,i,a,acc$0,elt),elt$0=elt[3];
              if(elt$0 === first)return acc$1;
              var i$0=caml_call2(_aJ_,i,1),i=i$0,acc$0=acc$1,elt=elt$0;
              continue}};
        return with_iteration_4(first[4],f,a,init,first,_bjv_)}
      return init}
    function iter_elt(t,f)
     {return fold_elt_1(t,0,function(f,param,elt){return caml_call1(f,elt)},f)}
    function iteri_elt(t,f)
     {return foldi_elt(t,0,function(i,param,elt){return caml_call2(f,i,elt)})}
    function find_elt(t,f)
     {function _bjs_(r)
       {fold_elt_1
         (t,
          0,
          function(f,param,elt)
           {var _bjt_=caml_call1(f,elt[1]);
            return _bjt_?caml_call1(r,[0,elt]):_bjt_},
          f);
        return 0}
      return caml_call1(Base_With_return[1],_bjs_)}
    function findi_elt(t,f)
     {function _bjq_(r)
       {foldi_elt_1
         (t,
          0,
          function(i,f,param,elt)
           {var _bjr_=caml_call2(f,i,elt[1]);
            return _bjr_?caml_call1(r,[0,[0,i,elt]]):_bjr_},
          f);
        return 0}
      return caml_call1(Base_With_return[1],_bjq_)}
    function iter$14(t,f)
     {var _bjn_=t[1];
      if(_bjn_)
       {var
         first=_bjn_[1],
         _bjo_=
          function(first,f)
           {var elt=first;
            for(;;)
             {caml_call1(f,elt[1]);
              var next=elt[3],_bjp_=1 - (next === first?1:0);
              if(_bjp_){var elt=next;continue}
              return _bjp_}};
        return with_iteration_2(first[4],first,f,_bjo_)}
      return 0}
    function length$13(t)
     {var _bjm_=t[1];
      if(_bjm_){var first=_bjm_[1];return length$12(first[4])}
      return 0}
    function iteri$5(t,f)
     {var _bjj_=t[1];
      if(_bjj_)
       {var
         first=_bjj_[1],
         _bjk_=
          function(first,f)
           {var i=0,elt=first;
            for(;;)
             {caml_call2(f,i,elt[1]);
              var next=elt[3],_bjl_=1 - (next === first?1:0);
              if(_bjl_){var i$0=caml_call2(_aJ_,i,1),i=i$0,elt=next;continue}
              return _bjl_}};
        return with_iteration_2(first[4],first,f,_bjk_)}
      return 0}
    function foldi$0(t,init,f)
     {return foldi_elt_1
              (t,
               init,
               function(i,f,acc,elt){return caml_call3(f,i,acc,elt[1])},
               f)}
    function fold$10(t,init,f)
     {return fold_elt_1
              (t,init,function(f,acc,elt){return caml_call2(f,acc,elt[1])},f)}
    var
     iter$15=[0,-198771759,iter$14],
     length$14=[0,-198771759,length$13],
     C=caml_call1(include$7[16],[0,fold$10,iter$15,length$14]),
     _yA_=C[10],
     _yB_=C[11],
     _yC_=C[8],
     _yD_=C[12],
     _yE_=C[13],
     _yF_=C[5],
     _yG_=C[9],
     _yH_=C[1],
     _yI_=C[15],
     _yJ_=C[16],
     _yK_=C[17],
     _yL_=C[6],
     _yM_=C[7];
    function unchecked_iter(t,f)
     {var _bjg_=t[1];
      if(_bjg_)
       {var first=_bjg_[1],elt=first;
        for(;;)
         {caml_call1(f,elt[1]);
          var next=elt[3],_bjh_=t[1];
          if(_bjh_)
           {var first$0=_bjh_[1],_bji_=1 - (first$0 === next?1:0);
            if(_bji_){var elt=next;continue}
            return _bji_}
          return 0}}
      return 0}
    function is_empty$11(t){return caml_call1(_x1_,t[1])}
    function fold_right$8(t,init,f)
     {var _bje_=t[1];
      if(_bje_)
       {var
         first=_bje_[1],
         _bjf_=
          function(f,acc,first)
           {var acc$0=acc,elt=first;
            for(;;)
             {var elt$0=elt[2],acc$1=caml_call2(f,elt$0[1],acc$0);
              if(elt$0 === first)return acc$1;
              var acc$0=acc$1,elt=elt$0;
              continue}};
        return with_iteration_3(first[4],f,init,first,_bjf_)}
      return init}
    function fold_right_elt(t,init,f)
     {var _bjc_=t[1];
      if(_bjc_)
       {var
         first=_bjc_[1],
         _bjd_=
          function(f,acc,first)
           {var acc$0=acc,elt=first;
            for(;;)
             {var elt$0=elt[2],acc$1=caml_call2(f,elt$0,acc$0);
              if(elt$0 === first)return acc$1;
              var acc$0=acc$1,elt=elt$0;
              continue}};
        return with_iteration_3(first[4],f,init,first,_bjd_)}
      return init}
    function to_list$5(t)
     {return fold_right$8(t,0,function(x,tl){return [0,x,tl]})}
    function sexp_of_t$35(sexp_of_a,t)
     {return caml_call2(sexp_of_t$17,sexp_of_a,to_list$5(t))}
    function t_of_sexp$27(a_of_sexp,s)
     {return of_list$7(caml_call2(t_of_sexp$18,a_of_sexp,s))}
    function copy$2(t){return of_list$7(to_list$5(t))}
    function clear$1(t){t[1] = 0;return 0}
    function compare$30(compare_elt,t1,t2)
     {var _bi__=t1[1],_bi$_=t2[1];
      if(_bi__)
       {if(_bi$_)
         {var
           f2=_bi$_[1],
           f1=_bi__[1],
           _bja_=
            function(compare_elt,f1,f2)
             {function _bjb_(compare_elt,f1,f2)
               {var elt1=f1,elt2=f2;
                for(;;)
                 {var compare_result=caml_call2(compare_elt,elt1[1],elt2[1]);
                  if(caml_call2(_a4_,compare_result,0))return compare_result;
                  var
                   elt1$0=elt1[3],
                   elt2$0=elt2[3],
                   match=elt1$0 === f1?1:0,
                   match$0=elt2$0 === f2?1:0;
                  if(match)return match$0?0:-1;
                  if(match$0)return 1;
                  var elt1=elt1$0,elt2=elt2$0;
                  continue}}
              return with_iteration_3(f2[4],compare_elt,f1,f2,_bjb_)};
          return with_iteration_3(f1[4],compare_elt,f1,f2,_bja_)}
        return 1}
      return _bi$_?-1:0}
    var
     Transfer_src_and_dst_are_same_=
      [248,cst_Core_kernel_Doubly_linked_$2,caml_fresh_oo_id(0)];
    function transfer(src,dst)
     {if(src === dst)throw Transfer_src_and_dst_are_same_;
      var _bi6_=src[1];
      if(_bi6_)
       {var src_head=_bi6_[1],_bi7_=dst[1];
        if(_bi7_)
         {var dst_head=_bi7_[1],_bi8_=dst_head[4],_bi9_=src_head[4];
          if(same_class(_bi9_,_bi8_))
           var match=-823486817;
          else
           {var
             n1=union_find_get_check_no_pendin(_bi9_)[1],
             n2=union_find_get_check_no_pendin(_bi8_)[1];
            with_iteration_4
             (_bi9_,
              _bi9_,
              _bi8_,
              n1,
              n2,
              function(t1,t2,n1,n2)
               {return with_iteration_4
                        (t2,
                         t1,
                         t2,
                         n1,
                         n2,
                         function(t1,t2,n1,n2)
                          {union$5(t1,t2);
                           return set$5(t1,[0,caml_call2(_aJ_,n1,n2),0])})});
            var match=1016869580}
          if(1016869580 <= match)
           {split_or_splice_before(dst_head,src_head);return clear$1(src)}
          throw Transfer_src_and_dst_are_same_}
        dst[1] = [0,src_head];
        return clear$1(src)}
      return 0}
    function map_inplace$1(t,f)
     {return iter_elt(t,function(elt){return set$6(elt,caml_call1(f,elt[1]))})}
    function mapi_inplace$0(t,f)
     {return iteri_elt
              (t,function(i,elt){return set$6(elt,caml_call2(f,i,elt[1]))})}
    function remove_list(t,to_remove)
     {return caml_call2
              (_o9_,
               to_remove,
               function(elt)
                {var _bi4_=t[1];
                 if(_bi4_)
                  {var head=_bi4_[1];
                   if(head === elt)
                    {var next_elt=elt[3],_bi5_=head === next_elt?0:[0,next_elt];
                     t[1] = _bi5_}}
                 return unlink(elt)})}
    function filter_inplace$1(t,f)
     {var
       to_remove=
        caml_call1
         (parts,
          fold_elt
           (t,
            0,
            function(elts,elt){return caml_call1(f,elt[1])?elts:[0,elt,elts]}));
      return remove_list(t,to_remove)}
    function filteri_inplace$0(t,f)
     {var
       to_remove=
        caml_call1
         (parts,
          foldi_elt
           (t,
            0,
            function(i,elts,elt)
             {return caml_call2(f,i,elt[1])?elts:[0,elt,elts]}));
      return remove_list(t,to_remove)}
    function filter_map_inplace$0(t,f)
     {var
       to_remove=
        caml_call1
         (parts,
          fold_elt
           (t,
            0,
            function(elts,elt)
             {var match=caml_call1(f,elt[1]);
              if(match){var value=match[1];set$6(elt,value);return elts}
              return [0,elt,elts]}));
      return remove_list(t,to_remove)}
    function filter_mapi_inplace$0(t,f)
     {var
       to_remove=
        caml_call1
         (parts,
          foldi_elt
           (t,
            0,
            function(i,elts,elt)
             {var match=caml_call2(f,i,elt[1]);
              if(match){var value=match[1];set$6(elt,value);return elts}
              return [0,elt,elts]}));
      return remove_list(t,to_remove)}
    var
     Elt_does_not_belong_to_list=
      [248,cst_Core_kernel_Doubly_linked_$3,caml_fresh_oo_id(0)];
    function choose$4(t){return t[1]}
    function last_elt(t){return caml_call2(_xW_,t[1],prev)}
    function first$0(t){return caml_call2(_xW_,t[1],value$0)}
    function last$0(t){return caml_call2(_xW_,last_elt(t),value$0)}
    function is_first$0(t,elt)
     {var _bi3_=t[1];
      if(_bi3_)
       {var first=_bi3_[1];
        if(equal$14(first[4],elt[4]))return elt === first?1:0;
        throw Elt_does_not_belong_to_list}
      throw Elt_does_not_belong_to_list}
    function is_last(t,elt)
     {var _bi2_=t[1];
      if(_bi2_)
       {var first=_bi2_[1];
        if(equal$14(first[4],elt[4]))
         {var last=first[2];return elt === last?1:0}
        throw Elt_does_not_belong_to_list}
      throw Elt_does_not_belong_to_list}
    function mem_elt(t,elt)
     {var _bi1_=t[1];
      if(_bi1_){var first=_bi1_[1];return equal$14(first[4],elt[4])}
      return 0}
    function prev$0(t,elt)
     {var _bi0_=t[1];
      if(_bi0_)
       {var first=_bi0_[1];
        if(elt === first)return 0;
        if(equal$14(first[4],elt[4]))return [0,elt[2]];
        throw Elt_does_not_belong_to_list}
      throw Elt_does_not_belong_to_list}
    function next(t,elt)
     {var _biZ_=t[1];
      if(_biZ_)
       {var first=_biZ_[1],last=first[2];
        if(elt === last)return 0;
        if(equal$14(first[4],elt[4]))return [0,elt[3]];
        throw Elt_does_not_belong_to_list}
      throw Elt_does_not_belong_to_list}
    function insert_after$0(t,elt,v)
     {var _biY_=t[1];
      if(_biY_)
       {var first=_biY_[1];
        if(equal$14(first[4],elt[4]))return insert_after(elt,v);
        throw Elt_does_not_belong_to_list}
      throw Elt_does_not_belong_to_list}
    function insert_before$0(t,elt,v)
     {var _biX_=t[1];
      if(_biX_)
       {var first=_biX_[1];
        if(elt === first)
         {var new_elt=insert_before(first,v);
          t[1] = [0,new_elt];
          return new_elt}
        if(equal$14(first[4],elt[4]))return insert_before(elt,v);
        throw Elt_does_not_belong_to_list}
      throw Elt_does_not_belong_to_list}
    function insert_empty(t,v)
     {var new_elt=create$11(v);t[1] = [0,new_elt];return new_elt}
    function insert_last(t,v)
     {var _biW_=t[1];
      if(_biW_){var first=_biW_[1];return insert_before(first,v)}
      return insert_empty(t,v)}
    function add$9(t,v)
     {var _biV_=t[1];
      if(_biV_)
       {var first=_biV_[1],new_elt=insert_before(first,v);
        t[1] = [0,new_elt];
        return new_elt}
      return insert_empty(t,v)}
    function remove_last(t)
     {var _biU_=t[1];
      if(_biU_)
       {var first=_biU_[1],node=first[2];
        if(! is_singleton(node))
         {incr_length(-1,first[4]);
          unsafe_split_or_splice_before(first,node);
          node[4] = dummy_header}
        if(first === node)t[1] = 0;
        return [0,node[1]]}
      return 0}
    function remove_one(t)
     {var _biS_=t[1];
      if(_biS_)
       {var first=_biS_[1],second=first[3];
        unlink(first);
        var _biT_=first === second?0:[0,second];
        t[1] = _biT_;
        return [0,first[1]]}
      return 0}
    function remove$9(t,elt)
     {var _biR_=t[1];
      if(_biR_)
       {var first=_biR_[1];
        if(elt === first){remove_one(t);return 0}
        if(equal$14(first[4],elt[4]))return unlink(elt);
        throw Elt_does_not_belong_to_list}
      throw Elt_does_not_belong_to_list}
    function filter$12(t,f)
     {var new_t=create$12(0),_biO_=t[1];
      if(_biO_)
       {var
         first=_biO_[1],
         _biP_=
          function(f,new_t,first)
           {var elt=first;
            for(;;)
             {if(caml_call1(f,elt[1]))insert_last(new_t,elt[1]);
              var next=elt[3],_biQ_=1 - (next === first?1:0);
              if(_biQ_){var elt=next;continue}
              return _biQ_}};
        with_iteration_3(first[4],f,new_t,first,_biP_)}
      return new_t}
    function filteri$5(t,f)
     {var new_t=create$12(0),_biL_=t[1];
      if(_biL_)
       {var
         first=_biL_[1],
         _biM_=
          function(f,new_t,first)
           {var i=0,elt=first;
            for(;;)
             {if(caml_call2(f,i,elt[1]))insert_last(new_t,elt[1]);
              var next=elt[3],_biN_=1 - (next === first?1:0);
              if(_biN_){var i$0=caml_call2(_aJ_,i,1),i=i$0,elt=next;continue}
              return _biN_}};
        with_iteration_3(first[4],f,new_t,first,_biM_)}
      return new_t}
    function filter_map$11(t,f)
     {var new_t=create$12(0),_biI_=t[1];
      if(_biI_)
       {var
         first=_biI_[1],
         _biJ_=
          function(f,new_t,first)
           {var elt=first;
            for(;;)
             {var match=caml_call1(f,elt[1]);
              if(match){var value=match[1];insert_last(new_t,value)}
              var next=elt[3],_biK_=1 - (next === first?1:0);
              if(_biK_){var elt=next;continue}
              return _biK_}};
        with_iteration_3(first[4],f,new_t,first,_biJ_)}
      return new_t}
    function filter_mapi$5(t,f)
     {var new_t=create$12(0),_biF_=t[1];
      if(_biF_)
       {var
         first=_biF_[1],
         _biG_=
          function(f,new_t,first)
           {var i=0,elt=first;
            for(;;)
             {var match=caml_call2(f,i,elt[1]);
              if(match){var value=match[1];insert_last(new_t,value)}
              var next=elt[3],_biH_=1 - (next === first?1:0);
              if(_biH_){var i$0=caml_call2(_aJ_,i,1),i=i$0,elt=next;continue}
              return _biH_}};
        with_iteration_3(first[4],f,new_t,first,_biG_)}
      return new_t}
    function partition_tf$9(t,f)
     {var t1=create$12(0),t2=create$12(0),_biB_=t[1];
      if(_biB_)
       {var
         first=_biB_[1],
         _biC_=
          function(f,t1,t2,first)
           {var elt=first;
            for(;;)
             {var _biD_=elt[1],t1$0=caml_call1(f,elt[1])?t1:t2;
              insert_last(t1$0,_biD_);
              var next=elt[3],_biE_=1 - (next === first?1:0);
              if(_biE_){var elt=next;continue}
              return _biE_}};
        with_iteration_4(first[4],f,t1,t2,first,_biC_)}
      return [0,t1,t2]}
    function partitioni_tf$5(t,f)
     {var t1=create$12(0),t2=create$12(0),_bix_=t[1];
      if(_bix_)
       {var
         first=_bix_[1],
         _biy_=
          function(f,t1,t2,first)
           {var i=0,elt=first;
            for(;;)
             {var _biz_=elt[1],t1$0=caml_call2(f,i,elt[1])?t1:t2;
              insert_last(t1$0,_biz_);
              var next=elt[3],_biA_=1 - (next === first?1:0);
              if(_biA_){var i$0=caml_call2(_aJ_,i,1),i=i$0,elt=next;continue}
              return _biA_}};
        with_iteration_4(first[4],f,t1,t2,first,_biy_)}
      return [0,t1,t2]}
    function partition_map$4(t,f)
     {var t1=create$12(0),t2=create$12(0),_biu_=t[1];
      if(_biu_)
       {var
         first=_biu_[1],
         _biv_=
          function(f,t1,t2,first)
           {var elt=first;
            for(;;)
             {var match=caml_call1(f,elt[1]);
              if(0 === match[0])
               {var value=match[1];insert_last(t1,value)}
              else
               {var value$0=match[1];insert_last(t2,value$0)}
              var next=elt[3],_biw_=1 - (next === first?1:0);
              if(_biw_){var elt=next;continue}
              return _biw_}};
        with_iteration_4(first[4],f,t1,t2,first,_biv_)}
      return [0,t1,t2]}
    function partition_mapi$4(t,f)
     {var t1=create$12(0),t2=create$12(0),_bir_=t[1];
      if(_bir_)
       {var
         first=_bir_[1],
         _bis_=
          function(f,t1,t2,first)
           {var i=0,elt=first;
            for(;;)
             {var match=caml_call2(f,i,elt[1]);
              if(0 === match[0])
               {var value=match[1];insert_last(t1,value)}
              else
               {var value$0=match[1];insert_last(t2,value$0)}
              var next=elt[3],_bit_=1 - (next === first?1:0);
              if(_bit_){var i$0=caml_call2(_aJ_,i,1),i=i$0,elt=next;continue}
              return _bit_}};
        with_iteration_4(first[4],f,t1,t2,first,_bis_)}
      return [0,t1,t2]}
    var
     Invalid_move_elt_equals_anchor=
      [248,cst_Core_kernel_Doubly_linked_$4,caml_fresh_oo_id(0)];
    function move_before(t,elt,anchor)
     {if(anchor === elt)throw Invalid_move_elt_equals_anchor;
      if(equal$14(anchor[4],elt[4]))
       {var _bio_=t[1];
        if(_bio_)
         {var first=_bio_[1];
          if(equal$14(first[4],elt[4]))
           {var after_elt=elt[3];
            split_or_splice_before(elt,after_elt);
            var first$0=first === elt?(t[1] = [0,after_elt],after_elt):first;
            split_or_splice_before(anchor,elt);
            var
             _bip_=first$0 === anchor?1:0,
             _biq_=_bip_?(t[1] = [0,elt],0):_bip_;
            return _biq_}
          throw Elt_does_not_belong_to_list}
        throw Elt_does_not_belong_to_list}
      throw Elt_does_not_belong_to_list}
    function move_to_front(t,elt)
     {var _bim_=t[1];
      if(_bim_)
       {var first=_bim_[1],_bin_=1 - (elt === first?1:0);
        return _bin_?move_before(t,elt,first):_bin_}
      throw Elt_does_not_belong_to_list}
    function move_after(t,elt,anchor)
     {if(anchor === elt)throw Invalid_move_elt_equals_anchor;
      if(equal$14(anchor[4],elt[4]))
       {var _bil_=t[1];
        if(_bil_)
         {var first=_bil_[1];
          if(equal$14(first[4],elt[4]))
           {var after_elt=elt[3];
            split_or_splice_before(elt,after_elt);
            if(first === elt)t[1] = [0,after_elt];
            check_two_nodes_no_pending_ite(anchor,elt);
            return unsafe_split_or_splice_after(anchor,elt)}
          throw Elt_does_not_belong_to_list}
        throw Elt_does_not_belong_to_list}
      throw Elt_does_not_belong_to_list}
    function move_to_back(t,elt)
     {var _bij_=t[1];
      if(_bij_)
       {var first=_bij_[1],last=first[2],_bik_=1 - (elt === last?1:0);
        return _bik_?move_after(t,elt,last):_bik_}
      throw Elt_does_not_belong_to_list}
    function to_sequence$8(t){return caml_call1(_j3_,to_list$5(t))}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$151);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Doubly_linked$0);
    var
     Elt=[0,value$0,phys_equal,set$6,sexp_of_t$34],
     include$41=
      [0,
       Elt,
       compare$30,
       t_of_sexp$27,
       sexp_of_t$35,
       _yH_,
       length$13,
       is_empty$11,
       iter$14,
       _yF_,
       _yL_,
       _yM_,
       _yC_,
       _yG_,
       _yA_,
       _yB_,
       _yD_,
       _yE_,
       to_list$5,
       _yI_,
       _yJ_,
       _yK_,
       invariant$3,
       create$12,
       of_list$7,
       of_array$3,
       equal$15,
       is_first$0,
       is_last,
       mem_elt,
       choose$4,
       last_elt,
       first$0,
       last$0,
       next,
       prev$0,
       insert_before$0,
       insert_after$0,
       add$9,
       insert_last,
       move_to_front,
       move_to_back,
       move_after,
       move_before,
       remove$9,
       remove_one,
       remove_last,
       iteri$5,
       foldi$0,
       fold_elt,
       foldi_elt,
       iter_elt,
       iteri_elt,
       fold_right$8,
       fold_right_elt,
       find_elt,
       findi_elt,
       clear$1,
       copy$2,
       transfer,
       map$19,
       mapi$5,
       filter$12,
       filteri$5,
       filter_map$11,
       filter_mapi$5,
       partition_tf$9,
       partitioni_tf$5,
       partition_map$4,
       partition_mapi$4,
       map_inplace$1,
       mapi_inplace$0,
       filter_inplace$1,
       filteri_inplace$0,
       filter_map_inplace$0,
       filter_mapi_inplace$0,
       unchecked_iter,
       to_sequence$8];
    caml_register_global(5013,include$41,"Core_kernel__Doubly_linked");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Hash_queue_int);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$152);
    caml_call1(Expect_test_collector[4][1],cst_src_hash_queue_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$153,cst$50);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$154);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Hash_queue_int$0);
    var Core_kernel_Hash_queue_intf=[0];
    caml_register_global
     (5014,Core_kernel_Hash_queue_intf,"Core_kernel__Hash_queue_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Sexp);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$155);
    caml_call1(Expect_test_collector[4][1],cst_src_sexp_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$156,cst$51);
    var
     _yN_=caml_call1(Bin_prot_Shape[2][1],cst_t$96),
     _yO_=
      [0,
       [0,cst_Atom$2,[0,_cc_,0]],
       [0,
        [0,
         cst_List$2,
         [0,
          caml_call1(_df_,caml_call1(caml_call1(Bin_prot_Shape[13],_yN_),0)),
          0]],
        0]],
     _yP_=caml_call1(Bin_prot_Shape[9],_yO_),
     _yQ_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$97),0,_yP_],0],
     _yR_=caml_call1(Bin_prot_Shape[4][1],cst_src_sexp_ml_5_4),
     group$45=caml_call2(Bin_prot_Shape[6],_yR_,_yQ_),
     _yS_=caml_call1(Bin_prot_Shape[2][1],cst_t$98),
     bin_shape_t$37=caml_call1(caml_call2(Bin_prot_Shape[14],group$45,_yS_),0);
    function bin_size_t$44(param)
     {if(0 === param[0])
       {var v1=param[1],_bih_=caml_call1(bin_size_t$1,v1);
        return caml_call2(Bin_prot_Common[23],1,_bih_)}
      var v1$0=param[1],_bii_=caml_call2(_bG_,bin_size_t$44,v1$0);
      return caml_call2(Bin_prot_Common[23],1,_bii_)}
    function bin_write_t$44(buf,pos,param)
     {if(0 === param[0])
       {var v1=param[1],pos$0=caml_call3(Bin_prot_Write[30],buf,pos,0);
        return caml_call3(bin_write_t$1,buf,pos$0,v1)}
      var v1$0=param[1],pos$1=caml_call3(Bin_prot_Write[30],buf,pos,1);
      return caml_call3(caml_call1(_dh_,bin_write_t$44),buf,pos$1,v1$0)}
    var bin_writer_t$31=[0,bin_size_t$44,bin_write_t$44];
    function bin_read_t$90(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_src_sexp_ml_Stable_V1_t,pos_ref[1])}
    function bin_read_t$91(buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[29],buf,pos_ref);
      if(0 === match)
       {var arg_1=caml_call2(bin_read_t$3,buf,pos_ref);return [0,arg_1]}
      if(1 === match)
       {var arg_1$0=caml_call2(caml_call1(_dj_,bin_read_t$91),buf,pos_ref);
        return [1,arg_1$0]}
      return caml_call2(Bin_prot_Common[18],_yT_,pos_ref[1])}
    var
     bin_reader_t$31=[0,bin_read_t$91,bin_read_t$90],
     bin_t$31=[0,bin_shape_t$37,bin_writer_t$31,bin_reader_t$31];
    function compare$31(a_001,match)
     {if(caml_call2(Ppx_compare_lib[1],a_001,match))return 0;
      if(0 === a_001[0])
       {var _bif_=a_001[1];
        if(0 === match[0])
         {var b_004=match[1];return caml_call2(_ap_,_bif_,b_004)}
        return -1}
      var _big_=a_001[1];
      if(0 === match[0])return 1;
      var b_006=match[1];
      return caml_call3
              (_T_,
               function(a_007,b_008){return compare$31(a_007,b_008)},
               _big_,
               b_006)}
    var
     hash_fold_t$9=function _bie_(_bic_,_bid_){return _bie_.fun(_bic_,_bid_)},
     hash$8=function _bib_(_bia_){return _bib_.fun(_bia_)};
    caml_update_dummy
     (hash_fold_t$9,
      function(hsv,arg)
       {if(0 === arg[0])
         {var a0=arg[1],hsv$0=caml_call2(Base_Hash[3],hsv,0);
          return caml_call2(_ar_,hsv$0,a0)}
        var a0$0=arg[1],hsv$1=caml_call2(Base_Hash[3],hsv,1);
        return caml_call3(_V_,hash_fold_t$9,hsv$1,a0$0)});
    caml_update_dummy
     (hash$8,
      function(x)
       {var
         hsv=caml_call2(Base_Hash[11],0,0),
         _bh$_=caml_call2(hash_fold_t$9,hsv,x);
        return caml_call1(Base_Hash[9],_bh$_)});
    var
     t_of_sexp$28=include$18[59],
     sexp_of_t$36=include$18[58],
     _yU_=Base[84],
     hash_fold_t$10=_yU_[1],
     hash$9=_yU_[2],
     Of_sexp_error=_yU_[7],
     of_float_style=_yU_[17],
     of_int_style=_yU_[18],
     subst_found=include$18[62],
     search_physical=include$18[61],
     t_sexp_grammar=include$18[60],
     t_of_sexp$29=include$18[59],
     sexp_of_t$37=include$18[58],
     is_unit=include$18[57],
     unit=include$18[56],
     to_buffer_gen=include$18[55],
     to_buffer=include$18[54],
     to_buffer_mach=include$18[53],
     to_buffer_hum=include$18[52],
     to_string$0=include$18[51],
     to_string_mach=include$18[50],
     to_string_hum=include$18[49],
     of_bigstring_conv_exn=include$18[48],
     of_bigstring_conv=include$18[47],
     of_bigstring$0=include$18[46],
     of_string_conv_exn=include$18[45],
     of_string_conv=include$18[44],
     of_string=include$18[43],
     pp=include$18[41],
     pp_mach=include$18[40],
     pp_hum_indent=include$18[39],
     pp_hum=include$18[38],
     save_sexps=include$18[37],
     save_sexps_mach=include$18[36],
     save_sexps_hum=include$18[35],
     save=include$18[34],
     save_mach=include$18[33],
     save_hum=include$18[32],
     output=include$18[31],
     output_mach=include$18[30],
     output_hum_indent=include$18[29],
     output_hum=include$18[28],
     load_sexps_conv_exn=include$18[27],
     load_sexps_conv=include$18[26],
     load_sexp_conv_exn=include$18[25],
     load_sexp_conv=include$18[24],
     load_rev_sexps=include$18[23],
     load_sexps=include$18[22],
     load_sexp=include$18[21],
     input_rev_sexps=include$18[20],
     input_sexps=include$18[19],
     input_sexp=include$18[18],
     parse_bigstring=include$18[17],
     parse=include$18[16],
     Parse_error=include$18[15],
     scan_sexps_conv=include$18[11],
     scan_fold_sexps=include$18[10],
     scan_iter_sexps=include$18[9],
     scan_sexp_opt=include$18[8],
     scan_rev_sexps=include$18[7],
     scan_sexps=include$18[6],
     scan_sexp=include$18[5],
     size$0=include$18[4],
     default_indent=include$18[3],
     compare$32=include$18[1],
     O=[0],
     _yW_=caml_call1(Bin_prot_Shape[7],[0,bin_shape_t$37,[0,_ok_,0]]),
     _yX_=caml_call1(Bin_prot_Shape[3][1],cst_a$49),
     _yY_=caml_call1(Bin_prot_Shape[4][1],cst_src_sexp_ml_38_22),
     _yV_=0,
     _yZ_=caml_call2(Bin_prot_Shape[15],_yY_,_yX_),
     _y0_=function(_bh__){return bin_shape_t$7(_yZ_,_bh__)}(_yW_),
     _y1_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$50),0],
     _y2_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$99),_y1_,_y0_],_yV_],
     _y3_=caml_call1(Bin_prot_Shape[4][1],cst_src_sexp_ml_38_2),
     group$46=caml_call2(Bin_prot_Shape[6],_y3_,_y2_);
    function bin_shape_t$38(a)
     {var _bh9_=caml_call1(Bin_prot_Shape[2][1],cst_t$100);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$46,_bh9_),[0,a,0])}
    function bin_size_t$45(size_of_a,v)
     {return bin_size_t$16
              (size_of_a,
               function(param)
                {var
                  v2=param[2],
                  v1=param[1],
                  _bh7_=bin_size_t$44(v1),
                  size=caml_call2(Bin_prot_Common[23],0,_bh7_),
                  _bh8_=caml_call1(_og_,v2);
                 return caml_call2(Bin_prot_Common[23],size,_bh8_)},
               v)}
    function bin_write_t$45(write_a,buf,pos,v)
     {return bin_write_t$16
              (write_a,
               function(buf,pos,param)
                {var v2=param[2],v1=param[1],pos$0=bin_write_t$44(buf,pos,v1);
                 return caml_call3(_oh_,buf,pos$0,v2)},
               buf,
               pos,
               v)}
    function bin_writer_t$32(bin_writer_a)
     {function _bh3_(v)
       {var _bh4_=bin_writer_a[2];
        return function(_bh5_,_bh6_)
         {return bin_write_t$45(_bh4_,v,_bh5_,_bh6_)}}
      return [0,function(v){return bin_size_t$45(bin_writer_a[1],v)},_bh3_]}
    function bin_read_t$92(of_a,buf,pos_ref,vint)
     {return bin_read_t$35
              (of_a,
               function(buf,pos_ref)
                {var
                  v1=bin_read_t$91(buf,pos_ref),
                  v2=caml_call2(_oi_,buf,pos_ref);
                 return [0,v1,v2]},
               buf,
               pos_ref,
               vint)}
    function bin_read_t$93(of_a,buf,pos_ref)
     {return bin_read_t$36
              (of_a,
               function(buf,pos_ref)
                {var
                  v1=bin_read_t$91(buf,pos_ref),
                  v2=caml_call2(_oi_,buf,pos_ref);
                 return [0,v1,v2]},
               buf,
               pos_ref)}
    function bin_reader_t$32(bin_reader_a)
     {function _bh2_(buf,pos_ref,vtag)
       {return bin_read_t$92(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$93(bin_reader_a[1],buf,pos_ref)},
              _bh2_]}
    function bin_t$32(bin_a)
     {var _bh0_=bin_reader_t$32(bin_a[3]),_bh1_=bin_writer_t$32(bin_a[2]);
      return [0,bin_shape_t$38(bin_a[1]),_bh1_,_bh0_]}
    function compare$33(cmp_a,a_009,b_010)
     {function _bhZ_(a_013,b_014)
       {var
         t_016=a_013[2],
         t_015=a_013[1],
         t_018=b_014[2],
         t_017=b_014[1],
         n=caml_call2(compare$32,t_015,t_017);
        return 0 === n?caml_call2(_nQ_,t_016,t_018):n}
      return caml_call4
              (_hy_,
               function(a_011,b_012){return caml_call2(cmp_a,a_011,b_012)},
               _bhZ_,
               a_009,
               b_010)}
    function hash_fold_t$11(hash_fold_a,hsv,arg)
     {return caml_call4
              (_hA_,
               hash_fold_a,
               function(hsv,arg)
                {var
                  e1=arg[2],
                  e0=arg[1],
                  hsv$0=caml_call2(hash_fold_t$10,hsv,e0),
                  hsv$1=caml_call2(_nS_,hsv$0,e1);
                 return hsv$1},
               hsv,
               arg)}
    function sexp_of_t$38(sexp_of_a,t)
     {if(0 === t[0]){var a=t[1];return caml_call1(sexp_of_a,a)}
      var match=t[1],err=match[2],sexp=match[1];
      return [1,[0,_y4_,[0,sexp,[0,caml_call1(_nV_,err),0]]]]}
    function t_of_sexp$30(a_of_sexp,sexp)
     {var switch$0=0;
      if(1 === sexp[0])
       {var _bhV_=sexp[1];
        if(_bhV_)
         {var _bhW_=_bhV_[1];
          if
           (0
            ===
            _bhW_[0]
            &&
            !
            caml_string_notequal(_bhW_[1],cst_sexp_parse_error))
           {var _bhX_=_bhV_[2];
            if(_bhX_)
             {var _bhY_=_bhX_[2];
              if(_bhY_ && ! _bhY_[2]){var sexp$0=_bhX_[1];switch$0 = 1}}}}}
      if(! switch$0)var sexp$0=sexp;
      try
       {var _bhU_=[0,caml_call1(a_of_sexp,sexp$0)];return _bhU_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        return [1,[0,sexp$0,caml_call2(_n$_,0,exn)]]}}
    var
     _y5_=caml_call1(Bin_prot_Shape[3][1],cst_a$51),
     _y6_=caml_call1(Bin_prot_Shape[4][1],cst_src_sexp_ml_59_14),
     _y7_=
      [0,
       [0,cst_value,caml_call2(Bin_prot_Shape[15],_y6_,_y5_)],
       [0,[0,cst_text,_cc_],0]],
     _y8_=caml_call1(Bin_prot_Shape[8],_y7_),
     _y9_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$52),0],
     _y__=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$101),_y9_,_y8_],0],
     _y$_=caml_call1(Bin_prot_Shape[4][1],cst_src_sexp_ml_58_2),
     group$47=caml_call2(Bin_prot_Shape[6],_y$_,_y__);
    function bin_shape_t$39(a)
     {var _bhT_=caml_call1(Bin_prot_Shape[2][1],cst_t$102);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$47,_bhT_),[0,a,0])}
    function bin_size_t$46(size_of_a,param)
     {var
       v2=param[2],
       v1=param[1],
       _bhR_=caml_call1(size_of_a,v1),
       size=caml_call2(Bin_prot_Common[23],0,_bhR_),
       _bhS_=caml_call1(bin_size_t$1,v2);
      return caml_call2(Bin_prot_Common[23],size,_bhS_)}
    function bin_write_t$46(write_a,buf,pos,param)
     {var v2=param[2],v1=param[1],pos$0=caml_call3(write_a,buf,pos,v1);
      return caml_call3(bin_write_t$1,buf,pos$0,v2)}
    function bin_writer_t$33(bin_writer_a)
     {function _bhN_(v)
       {var _bhO_=bin_writer_a[2];
        return function(_bhP_,_bhQ_)
         {return bin_write_t$46(_bhO_,v,_bhP_,_bhQ_)}}
      return [0,function(v){return bin_size_t$46(bin_writer_a[1],v)},_bhN_]}
    function bin_read_t$94(of_a,buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_src_sexp_ml_With_text_t,pos_ref[1])}
    function bin_read_t$95(of_a,buf,pos_ref)
     {var
       v_value=caml_call2(of_a,buf,pos_ref),
       v_text=caml_call2(bin_read_t$3,buf,pos_ref);
      return [0,v_value,v_text]}
    function bin_reader_t$33(bin_reader_a)
     {function _bhM_(buf,pos_ref,vtag)
       {return bin_read_t$94(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$95(bin_reader_a[1],buf,pos_ref)},
              _bhM_]}
    function bin_t$33(bin_a)
     {var _bhK_=bin_reader_t$33(bin_a[3]),_bhL_=bin_writer_t$33(bin_a[2]);
      return [0,bin_shape_t$39(bin_a[1]),_bhL_,_bhK_]}
    function sexp_of_t$39(param,t){return [0,t[2]]}
    function of_text(value_of_sexp,opt,text)
     {if(opt)var sth=opt[1],filename=sth;else var filename=cst$52;
      var
       err=
        caml_call2
         (_tP_,
          0,
          function(param)
           {return caml_call2(of_string_conv,text,value_of_sexp)});
      if(0 === err[0])
       {var _bhJ_=err[1];
        if(1025039613 <= _bhJ_[1])
         {var value=_bhJ_[2];return [0,[0,value,text]]}
        var match=_bhJ_[2],annotated=match[2],exn=match[1];
        return [1,
                caml_call2
                 (_n$_,
                  0,
                  caml_call3(include$18[14][17],filename,exn,annotated))]}
      return err}
    function t_of_sexp$31(a_of_sexp,sexp)
     {if(0 === sexp[0])
       {var text=sexp[1];return caml_call1(_tS_,of_text(a_of_sexp,0,text))}
      return caml_call2(_es_,cst_With_text_t_should_be_stor,sexp)}
    function text(t){return t[2]}
    function value$1(t){return t[1]}
    function of_value(sexp_of_value,value)
     {var text=caml_call2(to_string_hum,0,caml_call1(sexp_of_value,value));
      return [0,value,text]}
    var
     _za_=caml_call1(Bin_prot_Shape[3][1],cst_a$53),
     _zb_=caml_call1(Bin_prot_Shape[4][1],cst_src_sexp_ml_92_19),
     _zc_=caml_call2(Bin_prot_Shape[15],_zb_,_za_),
     _zd_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$54),0],
     _ze_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_no_raise),_zd_,_zc_],0],
     _zf_=caml_call1(Bin_prot_Shape[4][1],cst_src_sexp_ml_92_0),
     group$48=caml_call2(Bin_prot_Shape[6],_zf_,_ze_);
    function bin_shape_no_raise(a)
     {var _bhI_=caml_call1(Bin_prot_Shape[2][1],cst_no_raise$0);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$48,_bhI_),[0,a,0])}
    function bin_size_no_raise(size_of_a){return size_of_a}
    function bin_write_no_raise(write_a){return write_a}
    function bin_writer_no_raise(bin_writer_a)
     {function _bhH_(v){return caml_call1(bin_writer_a[2],v)}
      return [0,function(v){return caml_call1(bin_writer_a[1],v)},_bhH_]}
    function bin_read_no_raise(of_a,buf,pos_ref,vint)
     {return caml_call2(Bin_prot_Common[18],_zg_,pos_ref[1])}
    function bin_read_no_raise$0(of_a){return of_a}
    function bin_reader_no_raise(bin_reader_a)
     {function _bhG_(buf,pos_ref,vtag)
       {return bin_read_no_raise(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return caml_call2(bin_reader_a[1],buf,pos_ref)},
              _bhG_]}
    function bin_no_raise(bin_a)
     {var
       _bhE_=bin_reader_no_raise(bin_a[3]),
       _bhF_=bin_writer_no_raise(bin_a[2]);
      return [0,bin_shape_no_raise(bin_a[1]),_bhF_,_bhE_]}
    function no_raise_of_sexp(of_a,t){return caml_call1(of_a,t)}
    function sexp_of_no_raise(sexp_of_a,a)
     {try
       {var _bhC_=caml_call1(sexp_of_a,a);return _bhC_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        try
         {var _bhB_=[1,[0,_zi_,[0,caml_call1(sexp_of_t,exn),0]]];return _bhB_}
        catch(_bhD_){return _zh_}}}
    var
     _zj_=Base[84],
     _zl_=Base[84],
     _zk_=[0,_zj_[3],_zj_[4]],
     _zm_=
      [0,
       _zl_[21],
       _zl_[22],
       _zl_[23],
       _zl_[24],
       _zl_[25],
       _zl_[26],
       _zl_[27],
       _zl_[28],
       _zl_[29],
       _zl_[30],
       _zl_[31],
       _zl_[32],
       _zl_[33],
       _zl_[34],
       _zl_[35],
       _zl_[36],
       _zl_[37],
       _zl_[38],
       _zl_[39]],
     include$42=function(_bhA_){return _xh_(_zm_,_bhA_)}(_zk_),
     _zp_=include$42[3],
     _zs_=include$42[6],
     _zu_=include$42[8],
     _zn_=include$42[1],
     _zo_=include$42[2],
     _zq_=include$42[4],
     _zr_=include$42[5],
     _zt_=include$42[7],
     _zv_=include$42[9],
     _zw_=include$42[10],
     _zx_=include$42[11],
     _zy_=include$42[12],
     _zz_=include$42[13],
     _zA_=include$42[14],
     _zB_=include$42[15],
     _zC_=include$42[16],
     _zD_=include$42[17],
     _zE_=include$42[18],
     _zF_=include$42[19],
     _zG_=include$42[20],
     _zH_=include$42[21],
     _zI_=include$42[22];
    function of_sexp_allow_extra_fields_rec(of_sexp,sexp)
     {var r=Sexplib_Conv[26],prev=r[1];
      function _bhy_(param){r[1] = prev;return 0}
      function _bhz_(param){r[1] = 0;return caml_call1(of_sexp,sexp)}
      return caml_call2(Base_Exn[12],_bhz_,_bhy_)}
    var
     _zJ_=Base_quickcheck_Generator[11],
     _zK_=Base_quickcheck_Observer[12],
     _zL_=Base_quickcheck_Shrinker[12];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$157);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Sexp$0);
    var
     Core_kernel_Sexp=
      [0,
       bin_size_t$44,
       bin_write_t$44,
       bin_read_t$91,
       bin_read_t$90,
       bin_shape_t$37,
       bin_writer_t$31,
       bin_reader_t$31,
       bin_t$31,
       hash_fold_t$10,
       hash$9,
       O,
       _zn_,
       _zo_,
       _zp_,
       _zq_,
       _zr_,
       _zs_,
       _zv_,
       _zw_,
       _zx_,
       _zy_,
       _zz_,
       _zA_,
       _zB_,
       _zC_,
       _zD_,
       _zE_,
       _zF_,
       _zG_,
       _zH_,
       _zI_,
       _zJ_,
       _zK_,
       _zL_,
       _zu_,
       _zt_,
       default_indent,
       size$0,
       scan_sexp,
       scan_sexps,
       scan_rev_sexps,
       scan_sexp_opt,
       scan_iter_sexps,
       scan_fold_sexps,
       scan_sexps_conv,
       Parse_error,
       parse,
       parse_bigstring,
       input_sexp,
       input_sexps,
       input_rev_sexps,
       load_sexp,
       load_sexps,
       load_rev_sexps,
       load_sexp_conv,
       load_sexp_conv_exn,
       load_sexps_conv,
       load_sexps_conv_exn,
       output_hum,
       output_hum_indent,
       output_mach,
       output,
       save_hum,
       save_mach,
       save,
       save_sexps_hum,
       save_sexps_mach,
       save_sexps,
       pp_hum,
       pp_hum_indent,
       pp_mach,
       pp,
       of_string,
       of_string_conv,
       of_string_conv_exn,
       of_bigstring$0,
       of_bigstring_conv,
       of_bigstring_conv_exn,
       to_string_hum,
       to_string_mach,
       to_string$0,
       to_buffer_hum,
       to_buffer_mach,
       to_buffer,
       to_buffer_gen,
       unit,
       is_unit,
       sexp_of_t$37,
       t_of_sexp$29,
       t_sexp_grammar,
       search_physical,
       subst_found,
       Of_sexp_error,
       of_float_style,
       of_int_style,
       bin_shape_no_raise,
       bin_size_no_raise,
       bin_write_no_raise,
       bin_writer_no_raise,
       bin_read_no_raise$0,
       bin_read_no_raise,
       bin_reader_no_raise,
       bin_no_raise,
       sexp_of_no_raise,
       no_raise_of_sexp,
       [0,
        bin_shape_t$38,
        bin_size_t$45,
        bin_write_t$45,
        bin_read_t$93,
        bin_read_t$92,
        bin_writer_t$32,
        bin_reader_t$32,
        bin_t$32,
        compare$33,
        hash_fold_t$11,
        t_of_sexp$30,
        sexp_of_t$38],
       [0,
        t_of_sexp$31,
        sexp_of_t$39,
        bin_shape_t$39,
        bin_size_t$46,
        bin_write_t$46,
        bin_read_t$95,
        bin_read_t$94,
        bin_writer_t$33,
        bin_reader_t$33,
        bin_t$33,
        of_value,
        of_text,
        value$1,
        text],
       of_sexp_allow_extra_fields_rec,
       [0,
        [0,
         t_of_sexp$28,
         sexp_of_t$36,
         bin_size_t$44,
         bin_write_t$44,
         bin_read_t$91,
         bin_read_t$90,
         bin_shape_t$37,
         bin_writer_t$31,
         bin_reader_t$31,
         bin_t$31,
         hash_fold_t$9,
         hash$8,
         compare$31]]];
    caml_register_global(5015,Core_kernel_Sexp,"Core_kernel__Sexp");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Hash_queue);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$158);
    caml_call1(Expect_test_collector[4][1],cst_src_hash_queue_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$159,cst$53);
    function Make_backend(Table)
     {function key(t){return t[1]}
      function value(t){return t[2]}
      function sexp_of_t(sexp_of_key,sexp_of_data,t)
       {var _bhx_=t[2];
        return sexp_of_t$35
                (function(param)
                  {var
                    v0=param[1],
                    v1=param[2],
                    v0$0=caml_call1(sexp_of_key,v0),
                    v1$0=caml_call1(sexp_of_data,v1);
                   return [1,[0,v0$0,[0,v1$0,0]]]},
                 _bhx_)}
      function invariant(t)
       {var _bht_=caml_call1(Table[28],t[3]);
        if(caml_call2(_a5_,length$13(t[2]),_bht_))
         {var
           _bhu_=caml_call1(Table[81],t[3]),
           _bhv_=[0,caml_call1(Table[28],t[3])],
           keys=caml_call3(Table[4],0,_bhv_,_bhu_),
           _bhw_=
            function(kv)
             {var key=kv[1],match=caml_call2(Table[52],t[3],key);
              if(match)
               {if(caml_call2(Table[30],keys,key))
                 throw [0,Assert_failure,_zM_];
                return caml_call3(Table[34],keys,key,0)}
              throw [0,Assert_failure,_zN_]};
          return iter$14(t[2],_bhw_)}
        throw [0,Assert_failure,_zO_]}
      function create(opt,_bhq_,hashable)
       {if(opt)var sth=opt[1],growth_allowed=sth;else var growth_allowed=1;
        if(_bhq_)var sth$0=_bhq_[1],size=sth$0;else var size=16;
        var
         _bhr_=caml_call1(Base_Hashable[4],hashable),
         _bhs_=caml_call3(Table[4],[0,growth_allowed],[0,size],_bhr_);
        return [0,0,create$12(0),_bhs_]}
      function read(t,f)
       {t[1] = caml_call2(_aJ_,t[1],1);
        function _bhp_(param){t[1] = caml_call2(_aK_,t[1],1);return 0}
        return caml_call2(Base_Exn[12],f,_bhp_)}
      function ensure_can_modify(t)
       {var _bho_=caml_call2(_a6_,t[1],0);
        return _bho_?caml_call1(_bl_,cst_It_is_an_error_to_modify_a):_bho_}
      function clear(t)
       {ensure_can_modify(t);clear$1(t[2]);return caml_call1(Table[16],t[3])}
      function length(t){return caml_call1(Table[28],t[3])}
      function is_empty(t){return caml_call2(_a5_,length(t),0)}
      function lookup(t,k)
       {var match=caml_call2(Table[52],t[3],k);
        if(match){var elt=match[1];return [0,caml_call1(Elt[1],elt)[2]]}
        return 0}
      function lookup_exn(t,k)
       {var _bhn_=caml_call2(Table[53],t[3],k);
        return caml_call1(Elt[1],_bhn_)[2]}
      function mem(t,k){return caml_call2(Table[30],t[3],k)}
      function to_list(t){return caml_call2(_p9_,to_list$5(t[2]),value)}
      function to_array(t)
       {return caml_call2(map$0,caml_call1(_yI_,t[2]),value)}
      function for_all(t,f)
       {return read
                (t,
                 function(param)
                  {function _bhm_(kv){return caml_call1(f,kv[2])}
                   return caml_call2(_yG_,t[2],_bhm_)})}
      function exists(t,f)
       {return read
                (t,
                 function(param)
                  {function _bhl_(kv){return caml_call1(f,kv[2])}
                   return caml_call2(_yC_,t[2],_bhl_)})}
      function find_map(t,f)
       {return read
                (t,
                 function(param)
                  {function _bhk_(kv){return caml_call1(f,kv[2])}
                   return caml_call2(_yE_,t[2],_bhk_)})}
      function find(t,f)
       {return read
                (t,
                 function(param)
                  {function _bhj_(kv){return caml_call1(f,kv[2])}
                   return caml_call2(_xW_,caml_call2(_yD_,t[2],_bhj_),value)})}
      function enqueue(t,back_or_front,key,value)
       {ensure_can_modify(t);
        if(caml_call2(Table[30],t[3],key))return 975255060;
        var
         contents=[0,key,value],
         elt=
          109975721 <= back_or_front
           ?add$9(t[2],contents)
           :insert_last(t[2],contents);
        caml_call3(Table[34],t[3],key,elt);
        return 17724}
      function enqueue_back(t)
       {var _bhg_=-1055860185;
        return function(_bhh_,_bhi_){return enqueue(t,_bhg_,_bhh_,_bhi_)}}
      function enqueue_front(t)
       {var _bhd_=109975721;
        return function(_bhe_,_bhf_){return enqueue(t,_bhd_,_bhe_,_bhf_)}}
      function enqueue_exn(t,back_or_front,key,value)
       {var match=enqueue(t,back_or_front,key,value);
        if(975255060 <= match)
         {var
           _bhc_=
            [0,caml_call1(sexp_of_t$37,caml_call2(Table[15],t[3],key)),0];
          return caml_call1
                  (_bn_,
                   [1,
                    [0,
                     caml_call1
                      (Sexplib0_Sexp_conv[7],cst_Hash_queue_enqueue_exn_dup),
                     _bhc_]])}
        return 0}
      function enqueue_back_exn(t)
       {var _bg$_=-1055860185;
        return function(_bha_,_bhb_){return enqueue_exn(t,_bg$_,_bha_,_bhb_)}}
      function enqueue_front_exn(t)
       {var _bg8_=109975721;
        return function(_bg9_,_bg__){return enqueue_exn(t,_bg8_,_bg9_,_bg__)}}
      function lookup_and_move_to_back_exn(t,key)
       {ensure_can_modify(t);
        var elt=caml_call2(Table[53],t[3],key);
        move_to_back(t[2],elt);
        return caml_call1(Elt[1],elt)[2]}
      function lookup_and_move_to_back(t,key)
       {ensure_can_modify(t);
        function _bg6_(elt)
         {move_to_back(t[2],elt);return caml_call1(Elt[1],elt)[2]}
        var _bg7_=caml_call2(Table[52],t[3],key);
        return caml_call2(include$30[35][4][3],_bg7_,_bg6_)}
      function lookup_and_move_to_front_exn(t,key)
       {ensure_can_modify(t);
        var elt=caml_call2(Table[53],t[3],key);
        move_to_front(t[2],elt);
        return caml_call1(Elt[1],elt)[2]}
      function lookup_and_move_to_front(t,key)
       {ensure_can_modify(t);
        function _bg4_(elt)
         {move_to_front(t[2],elt);return caml_call1(Elt[1],elt)[2]}
        var _bg5_=caml_call2(Table[52],t[3],key);
        return caml_call2(include$30[35][4][3],_bg5_,_bg4_)}
      function dequeue_with_key(t,back_or_front)
       {ensure_can_modify(t);
        var
         maybe_kv=
          109975721 <= back_or_front?remove_one(t[2]):remove_last(t[2]);
        if(maybe_kv)
         {var kv=maybe_kv[1];
          caml_call2(Table[31],t[3],kv[1]);
          return [0,[0,kv[1],kv[2]]]}
        return 0}
      function dequeue_with_key_exn(t,back_or_front)
       {var match=dequeue_with_key(t,back_or_front);
        if(match)
         {var match$0=match[1],v=match$0[2],k=match$0[1];return [0,k,v]}
        return caml_call1
                (_bn_,
                 caml_call1
                  (Sexplib0_Sexp_conv[7],cst_Hash_queue_dequeue_with_ke))}
      function dequeue_back_with_key(t)
       {return dequeue_with_key(t,-1055860185)}
      function dequeue_back_with_key_exn(t)
       {return dequeue_with_key_exn(t,-1055860185)}
      function dequeue_front_with_key(t){return dequeue_with_key(t,109975721)}
      function dequeue_front_with_key_exn(t)
       {return dequeue_with_key_exn(t,109975721)}
      function dequeue(t,back_or_front)
       {var match=dequeue_with_key(t,back_or_front);
        if(match){var match$0=match[1],v=match$0[2];return [0,v]}
        return 0}
      function dequeue_back(t){return dequeue(t,-1055860185)}
      function dequeue_front(t){return dequeue(t,109975721)}
      function first_with_key(t)
       {var match=first$0(t[2]);
        if(match)
         {var match$0=match[1],key=match$0[1],value=match$0[2];
          return [0,[0,key,value]]}
        return 0}
      function first(t)
       {var match=first$0(t[2]);
        if(match){var kv=match[1];return [0,kv[2]]}
        return 0}
      function dequeue_exn(t,back_or_front)
       {var match=dequeue(t,back_or_front);
        if(match){var v=match[1];return v}
        return caml_call1
                (_bn_,
                 caml_call1
                  (Sexplib0_Sexp_conv[7],cst_Hash_queue_dequeue_exn_emp))}
      function dequeue_back_exn(t){return dequeue_exn(t,-1055860185)}
      function dequeue_front_exn(t){return dequeue_exn(t,109975721)}
      function keys(t){return caml_call2(_p9_,to_list$5(t[2]),key)}
      function iteri(t,f)
       {return read
                (t,
                 function(param)
                  {function _bg3_(kv){return caml_call2(f,kv[1],kv[2])}
                   return iter$14(t[2],_bg3_)})}
      function iter(t,f)
       {return iteri(t,function(param,data){return caml_call1(f,data)})}
      function foldi(t,init,f)
       {return read
                (t,
                 function(param)
                  {function _bg2_(ac,kv){return caml_call3(f,ac,kv[1],kv[2])}
                   return caml_call3(_yF_,t[2],init,_bg2_)})}
      function fold(t,init,f)
       {return foldi
                (t,init,function(ac,param,data){return caml_call2(f,ac,data)})}
      function count(t,f){return caml_call3(_h__,fold,t,f)}
      function sum(m,t,f){return caml_call4(_id_,fold,m,t,f)}
      function min_elt(t,compare){return caml_call3(_h$_,fold,t,compare)}
      function max_elt(t,compare){return caml_call3(_ia_,fold,t,compare)}
      function fold_result(t,init,f){return caml_call4(_ie_,fold,init,f,t)}
      function fold_until(t,init,f)
       {var _bg0_=caml_call3(_if_,fold,init,f);
        return function(_bg1_){return caml_call2(_bg0_,_bg1_,t)}}
      function dequeue_all(t,f)
       {for(;;)
         {var match=dequeue_front(t);
          if(match){var v=match[1];caml_call1(f,v);continue}
          return 0}}
      function remove(t,k)
       {ensure_can_modify(t);
        var match=caml_call2(Table[60],t[3],k);
        if(match){var elt=match[1];remove$9(t[2],elt);return 17724}
        return -725941051}
      function remove_exn(t,k)
       {ensure_can_modify(t);
        var match=remove(t,k);
        if(17724 <= match)return 0;
        var _bgZ_=[0,caml_call1(sexp_of_t$37,caml_call2(Table[15],t[3],k)),0];
        return caml_call1
                (_bn_,
                 [1,
                  [0,
                   caml_call1
                    (Sexplib0_Sexp_conv[7],cst_Hash_queue_remove_exn_unkn),
                   _bgZ_]])}
      function lookup_and_remove(t,k)
       {ensure_can_modify(t);
        var match=caml_call2(Table[60],t[3],k);
        if(match)
         {var elt=match[1];
          remove$9(t[2],elt);
          return [0,caml_call1(Elt[1],elt)[2]]}
        return 0}
      function replace(t,k,v)
       {ensure_can_modify(t);
        var match=caml_call2(Table[52],t[3],k);
        if(match){var elt=match[1];caml_call1(Elt[1],elt)[2] = v;return 17724}
        return -725941051}
      function replace_exn(t,k,v)
       {ensure_can_modify(t);
        var match=replace(t,k,v);
        if(17724 <= match)return 0;
        var _bgY_=[0,caml_call1(sexp_of_t$37,caml_call2(Table[15],t[3],k)),0];
        return caml_call1
                (_bn_,
                 [1,
                  [0,
                   caml_call1
                    (Sexplib0_Sexp_conv[7],cst_Hash_queue_replace_exn_unk),
                   _bgY_]])}
      function drop(opt,t,back_or_front)
       {if(opt)var sth=opt[1],n=sth;else var n=1;
        if(caml_call2(_a7_,n,length(t)))return clear(t);
        var _bgW_=1;
        if(! (n < 1))
         {var for$0=_bgW_;
          for(;;)
           {dequeue_with_key(t,back_or_front);
            var _bgX_=for$0 + 1 | 0;
            if(n !== for$0){var for$0=_bgX_;continue}
            break}}
        return 0}
      function drop_back(n,t){return drop(n,t,-1055860185)}
      function drop_front(n,t){return drop(n,t,109975721)}
      function Make(Key)
       {function sexp_of_t$0(of_data,v){return sexp_of_t(Key[2],of_data,v)}
        var hashable=caml_call1(Base_Hashable[3],Key);
        function create$0(growth_allowed,size,param)
         {return create(growth_allowed,size,hashable)}
        return [0,
                length,
                is_empty,
                iter,
                fold,
                fold_result,
                fold_until,
                exists,
                for_all,
                count,
                sum,
                find,
                find_map,
                to_list,
                to_array,
                min_elt,
                max_elt,
                invariant,
                create$0,
                clear,
                mem,
                lookup,
                lookup_exn,
                enqueue,
                enqueue_exn,
                enqueue_back,
                enqueue_back_exn,
                enqueue_front,
                enqueue_front_exn,
                lookup_and_move_to_back,
                lookup_and_move_to_back_exn,
                lookup_and_move_to_front,
                lookup_and_move_to_front_exn,
                first,
                first_with_key,
                keys,
                dequeue,
                dequeue_exn,
                dequeue_back,
                dequeue_back_exn,
                dequeue_front,
                dequeue_front_exn,
                dequeue_with_key,
                dequeue_with_key_exn,
                dequeue_back_with_key,
                dequeue_back_with_key_exn,
                dequeue_front_with_key,
                dequeue_front_with_key_exn,
                dequeue_all,
                remove,
                remove_exn,
                lookup_and_remove,
                replace,
                replace_exn,
                drop,
                drop_front,
                drop_back,
                iteri,
                foldi,
                sexp_of_t$0]}
      return [0,
              sexp_of_t,
              length,
              is_empty,
              iter,
              fold,
              fold_result,
              fold_until,
              exists,
              for_all,
              count,
              sum,
              find,
              find_map,
              to_list,
              to_array,
              min_elt,
              max_elt,
              invariant,
              create,
              clear,
              mem,
              lookup,
              lookup_exn,
              enqueue,
              enqueue_exn,
              enqueue_back,
              enqueue_back_exn,
              enqueue_front,
              enqueue_front_exn,
              lookup_and_move_to_back,
              lookup_and_move_to_back_exn,
              lookup_and_move_to_front,
              lookup_and_move_to_front_exn,
              first,
              first_with_key,
              keys,
              dequeue,
              dequeue_exn,
              dequeue_back,
              dequeue_back_exn,
              dequeue_front,
              dequeue_front_exn,
              dequeue_with_key,
              dequeue_with_key_exn,
              dequeue_back_with_key,
              dequeue_back_with_key_exn,
              dequeue_front_with_key,
              dequeue_front_with_key_exn,
              dequeue_all,
              remove,
              remove_exn,
              lookup_and_remove,
              replace,
              replace_exn,
              drop,
              drop_front,
              drop_back,
              iteri,
              foldi,
              Make]}
    var
     include$43=Make_backend(Core_kernel_Hashtbl),
     _AK_=include$43[60],
     _zP_=include$43[1],
     _zQ_=include$43[2],
     _zR_=include$43[3],
     _zS_=include$43[4],
     _zT_=include$43[5],
     _zU_=include$43[6],
     _zV_=include$43[7],
     _zW_=include$43[8],
     _zX_=include$43[9],
     _zY_=include$43[10],
     _zZ_=include$43[11],
     _z0_=include$43[12],
     _z1_=include$43[13],
     _z2_=include$43[14],
     _z3_=include$43[15],
     _z4_=include$43[16],
     _z5_=include$43[17],
     _z6_=include$43[18],
     _z7_=include$43[19],
     _z8_=include$43[20],
     _z9_=include$43[21],
     _z__=include$43[22],
     _z$_=include$43[23],
     _Aa_=include$43[24],
     _Ab_=include$43[25],
     _Ac_=include$43[26],
     _Ad_=include$43[27],
     _Ae_=include$43[28],
     _Af_=include$43[29],
     _Ag_=include$43[30],
     _Ah_=include$43[31],
     _Ai_=include$43[32],
     _Aj_=include$43[33],
     _Ak_=include$43[34],
     _Al_=include$43[35],
     _Am_=include$43[36],
     _An_=include$43[37],
     _Ao_=include$43[38],
     _Ap_=include$43[39],
     _Aq_=include$43[40],
     _Ar_=include$43[41],
     _As_=include$43[42],
     _At_=include$43[43],
     _Au_=include$43[44],
     _Av_=include$43[45],
     _Aw_=include$43[46],
     _Ax_=include$43[47],
     _Ay_=include$43[48],
     _Az_=include$43[49],
     _AA_=include$43[50],
     _AB_=include$43[51],
     _AC_=include$43[52],
     _AD_=include$43[53],
     _AE_=include$43[54],
     _AF_=include$43[55],
     _AG_=include$43[56],
     _AH_=include$43[57],
     _AI_=include$43[58],
     _AJ_=include$43[59];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$160);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Hash_queue$0);
    var
     Core_kernel_Hash_queue=
      [0,
       Make_backend,
       _zP_,
       _zQ_,
       _zR_,
       _zS_,
       _zT_,
       _zU_,
       _zV_,
       _zW_,
       _zX_,
       _zY_,
       _zZ_,
       _z0_,
       _z1_,
       _z2_,
       _z3_,
       _z4_,
       _z5_,
       _z6_,
       _z7_,
       _z8_,
       _z9_,
       _z__,
       _z$_,
       _Aa_,
       _Ab_,
       _Ac_,
       _Ad_,
       _Ae_,
       _Af_,
       _Ag_,
       _Ah_,
       _Ai_,
       _Aj_,
       _Ak_,
       _Al_,
       _Am_,
       _An_,
       _Ao_,
       _Ap_,
       _Aq_,
       _Ar_,
       _As_,
       _At_,
       _Au_,
       _Av_,
       _Aw_,
       _Ax_,
       _Ay_,
       _Az_,
       _AA_,
       _AB_,
       _AC_,
       _AD_,
       _AE_,
       _AF_,
       _AG_,
       _AH_,
       _AI_,
       _AJ_,
       _AK_];
    caml_register_global
     (5016,Core_kernel_Hash_queue,"Core_kernel__Hash_queue");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Hashable);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$161);
    caml_call1(Expect_test_collector[4][1],cst_src_hashable_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$162,cst$54);
    function Make_plain$2(T)
     {var
       hash_fold_t=T[1],
       compare=T[2],
       hash=T[4],
       Table=caml_call1(Core_kernel_Hashtbl[85],[0,T[2],T[3],T[4]]),
       Hash_set=_tr_([0,T[2],T[3],T[4]]),
       Hash_queue=caml_call1(_AK_,[0,T[2],T[3],T[4]]),
       hashable=Table[2];
      return [0,compare,hash_fold_t,hash,hashable,Table,Hash_set,Hash_queue]}
    function Make_plain_and_derive_hash_fol(T)
     {var compare=T[1],sexp_of_t=T[2],hash=T[3];
      function hash_fold_t$0(state,t)
       {return caml_call2(hash_fold_t,state,caml_call1(hash,t))}
      return Make_plain$2([0,hash_fold_t$0,compare,sexp_of_t,hash])}
    function Make$4(T)
     {var
       hash_fold_t=T[1],
       compare=T[3],
       hash=T[5],
       Table=caml_call1(Core_kernel_Hashtbl[86],[0,T[2],T[3],T[4],T[5]]),
       Hash_set=_tq_([0,T[2],T[3],T[4],T[5]]),
       Hash_queue=caml_call1(_AK_,[0,T[3],T[4],T[5]]),
       hashable=Table[2];
      return [0,compare,hash_fold_t,hash,hashable,Table,Hash_set,Hash_queue]}
    function Make_and_derive_hash_fold_t(T)
     {var t_of_sexp=T[1],compare=T[2],sexp_of_t=T[3],hash=T[4];
      function hash_fold_t$0(state,t)
       {return caml_call2(hash_fold_t,state,caml_call1(hash,t))}
      return Make$4([0,hash_fold_t$0,t_of_sexp,compare,sexp_of_t,hash])}
    function Make_binable(T)
     {var
       Table=
        caml_call1
         (Core_kernel_Hashtbl[87],
          [0,T[2],T[3],T[4],T[5],T[6],T[7],T[8],T[9],T[10],T[11],T[12],T[13]]),
       Hash_set=
        _tp_
         ([0,T[2],T[3],T[4],T[5],T[6],T[7],T[8],T[9],T[10],T[11],T[12],T[13]]),
       Hash_queue=caml_call1(_AK_,[0,T[11],T[12],T[13]]),
       hash_fold_t=T[1],
       hash=T[13],
       hashable=Table[2];
      return [0,hash_fold_t,hash,hashable,Table,Hash_set,Hash_queue]}
    function Make_binable_and_derive_hash_f(T)
     {var
       bin_size_t=T[1],
       bin_write_t=T[2],
       bin_read_t=T[3],
       bin_read_t$0=T[4],
       bin_shape_t=T[5],
       bin_writer_t=T[6],
       bin_reader_t=T[7],
       bin_t=T[8],
       t_of_sexp=T[9],
       compare=T[10],
       sexp_of_t=T[11],
       hash=T[12];
      function hash_fold_t$0(state,t)
       {return caml_call2(hash_fold_t,state,caml_call1(hash,t))}
      return Make_binable
              ([0,
                hash_fold_t$0,
                bin_size_t,
                bin_write_t,
                bin_read_t,
                bin_read_t$0,
                bin_shape_t,
                bin_writer_t,
                bin_reader_t,
                bin_t,
                t_of_sexp,
                compare,
                sexp_of_t,
                hash])}
    function Make$5(Key)
     {var Table=caml_call1(Core_kernel_Hashtbl[87],Key),Hash_set=_tp_(Key);
      return [0,
              [0,
               Table[83],
               Table[1],
               Table[84],
               Table[85],
               Table[86],
               Table[87],
               Table[88],
               Table[89],
               Table[90],
               Table[91]],
              [0,
               Hash_set[6],
               Hash_set[1],
               Hash_set[7],
               Hash_set[8],
               Hash_set[9],
               Hash_set[10],
               Hash_set[11],
               Hash_set[12],
               Hash_set[13],
               Hash_set[14]]]}
    var V1$13=[0,Make$5],Stable$3=[0,V1$13];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$163);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Hashable$0);
    var
     Core_kernel_Hashable=
      [0,
       Make_plain$2,
       Make_plain_and_derive_hash_fol,
       Make$4,
       Make_and_derive_hash_fold_t,
       Make_binable,
       Make_binable_and_derive_hash_f,
       Stable$3];
    caml_register_global(5017,Core_kernel_Hashable,"Core_kernel__Hashable");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Identifiable);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$164);
    caml_call1(Expect_test_collector[4][1],cst_src_identifiable_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$165,cst$55);
    function Make$6(T)
     {var
       bin_size_t=T[1],
       bin_write_t=T[2],
       bin_read_t=T[3],
       bin_read_t$0=T[4],
       bin_shape_t=T[5],
       bin_writer_t=T[6],
       bin_reader_t=T[7],
       bin_t=T[8],
       t_of_sexp=T[12],
       sexp_of_t=T[13],
       of_string=T[14],
       to_string=T[15],
       module_name=T[16],
       _bgU_=
        _xj_([0,T[1],T[2],T[3],T[4],T[5],T[6],T[7],T[8],T[9],T[12],T[13]]),
       symbol=_bgU_[1],
       symbol$0=_bgU_[2],
       symbol$1=_bgU_[3],
       symbol$2=_bgU_[4],
       symbol$3=_bgU_[5],
       symbol$4=_bgU_[6],
       equal=_bgU_[7],
       compare=_bgU_[8],
       min=_bgU_[9],
       max=_bgU_[10],
       ascending=_bgU_[11],
       descending=_bgU_[12],
       between=_bgU_[13],
       clamp_exn=_bgU_[14],
       clamp=_bgU_[15],
       validate_lbound=_bgU_[16],
       validate_ubound=_bgU_[17],
       validate_bound=_bgU_[18],
       Replace_polymorphic_compare=_bgU_[19],
       comparator=_bgU_[20],
       Map=_bgU_[21],
       Set=_bgU_[22],
       _bgV_=
        Make_binable
         ([0,
           T[10],
           T[1],
           T[2],
           T[3],
           T[4],
           T[5],
           T[6],
           T[7],
           T[8],
           T[12],
           T[9],
           T[13],
           T[11]]),
       hash_fold_t=_bgV_[1],
       hash=_bgV_[2],
       hashable=_bgV_[3],
       Table=_bgV_[4],
       Hash_set=_bgV_[5],
       Hash_queue=_bgV_[6],
       include=caml_call1(Base_Pretty_printer[2],[0,T[16],T[15]]),
       pp=include[1];
      return [0,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t,
              t_of_sexp,
              sexp_of_t,
              of_string,
              to_string,
              module_name,
              symbol,
              symbol$0,
              symbol$1,
              symbol$2,
              symbol$3,
              symbol$4,
              equal,
              compare,
              min,
              max,
              ascending,
              descending,
              between,
              clamp_exn,
              clamp,
              validate_lbound,
              validate_ubound,
              validate_bound,
              Replace_polymorphic_compare,
              comparator,
              Map,
              Set,
              hash_fold_t,
              hash,
              hashable,
              Table,
              Hash_set,
              Hash_queue,
              pp]}
    function Make_using_comparator$2(T)
     {var
       bin_size_t=T[1],
       bin_write_t=T[2],
       bin_read_t=T[3],
       bin_read_t$0=T[4],
       bin_shape_t=T[5],
       bin_writer_t=T[6],
       bin_reader_t=T[7],
       bin_t=T[8],
       t_of_sexp=T[12],
       sexp_of_t=T[13],
       of_string=T[15],
       to_string=T[16],
       module_name=T[17],
       _bgS_=
        _xi_([0,T[1],T[2],T[3],T[4],T[5],T[6],T[7],T[8],T[12],T[13],T[14]]),
       symbol=_bgS_[1],
       symbol$0=_bgS_[2],
       symbol$1=_bgS_[3],
       symbol$2=_bgS_[4],
       symbol$3=_bgS_[5],
       symbol$4=_bgS_[6],
       equal=_bgS_[7],
       compare=_bgS_[8],
       min=_bgS_[9],
       max=_bgS_[10],
       ascending=_bgS_[11],
       descending=_bgS_[12],
       between=_bgS_[13],
       clamp_exn=_bgS_[14],
       clamp=_bgS_[15],
       validate_lbound=_bgS_[16],
       validate_ubound=_bgS_[17],
       validate_bound=_bgS_[18],
       Replace_polymorphic_compare=_bgS_[19],
       comparator=_bgS_[20],
       Map=_bgS_[21],
       Set=_bgS_[22],
       _bgT_=
        Make_binable
         ([0,
           T[10],
           T[1],
           T[2],
           T[3],
           T[4],
           T[5],
           T[6],
           T[7],
           T[8],
           T[12],
           T[9],
           T[13],
           T[11]]),
       hash_fold_t=_bgT_[1],
       hash=_bgT_[2],
       hashable=_bgT_[3],
       Table=_bgT_[4],
       Hash_set=_bgT_[5],
       Hash_queue=_bgT_[6],
       include=caml_call1(Base_Pretty_printer[2],[0,T[17],T[16]]),
       pp=include[1];
      return [0,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t,
              t_of_sexp,
              sexp_of_t,
              of_string,
              to_string,
              module_name,
              symbol,
              symbol$0,
              symbol$1,
              symbol$2,
              symbol$3,
              symbol$4,
              equal,
              compare,
              min,
              max,
              ascending,
              descending,
              between,
              clamp_exn,
              clamp,
              validate_lbound,
              validate_ubound,
              validate_bound,
              Replace_polymorphic_compare,
              comparator,
              Map,
              Set,
              hash_fold_t,
              hash,
              hashable,
              Table,
              Hash_set,
              Hash_queue,
              pp]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$166);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Identifiable$0);
    function _AL_(M,B)
     {var
       hash_fold_t=M[1],
       hash=M[2],
       t_of_sexp=M[3],
       sexp_of_t=M[4],
       of_string=M[5],
       to_string=M[6],
       compare=M[14],
       pp=M[26],
       bin_size_t=B[1],
       bin_write_t=B[2],
       bin_read_t=B[3],
       bin_read_t$0=B[4],
       bin_shape_t=B[5],
       bin_writer_t=B[6],
       bin_reader_t=B[7],
       bin_t=B[8],
       _bgR_=
        _xg_
         ([0,
           M[7],
           M[8],
           M[9],
           M[10],
           M[11],
           M[12],
           M[13],
           M[14],
           M[15],
           M[16],
           M[17],
           M[18],
           M[19],
           M[20],
           M[21],
           M[22],
           M[23],
           M[24],
           M[25]],
          [0,
           bin_size_t,
           bin_write_t,
           bin_read_t,
           bin_read_t$0,
           bin_shape_t,
           bin_writer_t,
           bin_reader_t,
           bin_t,
           t_of_sexp,
           sexp_of_t]),
       symbol=_bgR_[1],
       symbol$0=_bgR_[2],
       symbol$1=_bgR_[3],
       symbol$2=_bgR_[4],
       symbol$3=_bgR_[5],
       symbol$4=_bgR_[6],
       equal=_bgR_[7],
       compare$0=_bgR_[8],
       min=_bgR_[9],
       max=_bgR_[10],
       ascending=_bgR_[11],
       descending=_bgR_[12],
       between=_bgR_[13],
       clamp_exn=_bgR_[14],
       clamp=_bgR_[15],
       validate_lbound=_bgR_[16],
       validate_ubound=_bgR_[17],
       validate_bound=_bgR_[18],
       Replace_polymorphic_compare=_bgR_[19],
       comparator=_bgR_[20],
       Map=_bgR_[21],
       Set=_bgR_[22],
       include=
        Make_binable
         ([0,
           hash_fold_t,
           bin_size_t,
           bin_write_t,
           bin_read_t,
           bin_read_t$0,
           bin_shape_t,
           bin_writer_t,
           bin_reader_t,
           bin_t,
           t_of_sexp,
           compare,
           sexp_of_t,
           hash]),
       hash_fold_t$0=include[1],
       hash$0=include[2],
       hashable=include[3],
       Table=include[4],
       Hash_set=include[5],
       Hash_queue=include[6];
      return [0,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t,
              t_of_sexp,
              sexp_of_t,
              of_string,
              to_string,
              pp,
              symbol,
              symbol$0,
              symbol$1,
              symbol$2,
              symbol$3,
              symbol$4,
              equal,
              compare$0,
              min,
              max,
              ascending,
              descending,
              between,
              clamp_exn,
              clamp,
              validate_lbound,
              validate_ubound,
              validate_bound,
              Replace_polymorphic_compare,
              comparator,
              Map,
              Set,
              hash_fold_t$0,
              hash$0,
              hashable,
              Table,
              Hash_set,
              Hash_queue]}
    function _AM_(T)
     {var
       bin_size_t=T[1],
       bin_write_t=T[2],
       bin_read_t=T[3],
       bin_read_t$0=T[4],
       bin_shape_t=T[5],
       bin_writer_t=T[6],
       bin_reader_t=T[7],
       bin_t=T[8],
       compare=T[9],
       t_of_sexp=T[10],
       sexp_of_t=T[11],
       comparator=T[12],
       of_string=T[13],
       to_string=T[14],
       hash=T[15],
       module_name=T[16];
      function hash_fold_t$0(state,t)
       {return caml_call2(hash_fold_t,state,caml_call1(hash,t))}
      var
       _bgQ_=
        Make_using_comparator$2
         ([0,
           bin_size_t,
           bin_write_t,
           bin_read_t,
           bin_read_t$0,
           bin_shape_t,
           bin_writer_t,
           bin_reader_t,
           bin_t,
           compare,
           hash_fold_t$0,
           hash,
           t_of_sexp,
           sexp_of_t,
           comparator,
           of_string,
           to_string,
           module_name]);
      return [0,
              _bgQ_[1],
              _bgQ_[2],
              _bgQ_[3],
              _bgQ_[4],
              _bgQ_[5],
              _bgQ_[6],
              _bgQ_[7],
              _bgQ_[8],
              _bgQ_[9],
              _bgQ_[10],
              _bgQ_[11],
              _bgQ_[12],
              _bgQ_[42],
              _bgQ_[14],
              _bgQ_[15],
              _bgQ_[16],
              _bgQ_[17],
              _bgQ_[18],
              _bgQ_[19],
              _bgQ_[20],
              _bgQ_[21],
              _bgQ_[22],
              _bgQ_[23],
              _bgQ_[24],
              _bgQ_[25],
              _bgQ_[26],
              _bgQ_[27],
              _bgQ_[28],
              _bgQ_[29],
              _bgQ_[30],
              _bgQ_[31],
              _bgQ_[32],
              _bgQ_[33],
              _bgQ_[34],
              _bgQ_[35],
              _bgQ_[36],
              _bgQ_[37],
              _bgQ_[38],
              _bgQ_[39],
              _bgQ_[40],
              _bgQ_[41]]}
    function _AN_(_bgO_)
     {var _bgP_=Make_using_comparator$2(_bgO_);
      return [0,
              _bgP_[1],
              _bgP_[2],
              _bgP_[3],
              _bgP_[4],
              _bgP_[5],
              _bgP_[6],
              _bgP_[7],
              _bgP_[8],
              _bgP_[9],
              _bgP_[10],
              _bgP_[11],
              _bgP_[12],
              _bgP_[42],
              _bgP_[14],
              _bgP_[15],
              _bgP_[16],
              _bgP_[17],
              _bgP_[18],
              _bgP_[19],
              _bgP_[20],
              _bgP_[21],
              _bgP_[22],
              _bgP_[23],
              _bgP_[24],
              _bgP_[25],
              _bgP_[26],
              _bgP_[27],
              _bgP_[28],
              _bgP_[29],
              _bgP_[30],
              _bgP_[31],
              _bgP_[32],
              _bgP_[33],
              _bgP_[34],
              _bgP_[35],
              _bgP_[36],
              _bgP_[37],
              _bgP_[38],
              _bgP_[39],
              _bgP_[40],
              _bgP_[41]]}
    function _AO_(T)
     {var
       bin_size_t=T[1],
       bin_write_t=T[2],
       bin_read_t=T[3],
       bin_read_t$0=T[4],
       bin_shape_t=T[5],
       bin_writer_t=T[6],
       bin_reader_t=T[7],
       bin_t=T[8],
       compare=T[9],
       t_of_sexp=T[10],
       sexp_of_t=T[11],
       of_string=T[12],
       to_string=T[13],
       hash=T[14],
       module_name=T[15];
      function hash_fold_t$0(state,t)
       {return caml_call2(hash_fold_t,state,caml_call1(hash,t))}
      var
       _bgN_=
        Make$6
         ([0,
           bin_size_t,
           bin_write_t,
           bin_read_t,
           bin_read_t$0,
           bin_shape_t,
           bin_writer_t,
           bin_reader_t,
           bin_t,
           compare,
           hash_fold_t$0,
           hash,
           t_of_sexp,
           sexp_of_t,
           of_string,
           to_string,
           module_name]);
      return [0,
              _bgN_[1],
              _bgN_[2],
              _bgN_[3],
              _bgN_[4],
              _bgN_[5],
              _bgN_[6],
              _bgN_[7],
              _bgN_[8],
              _bgN_[9],
              _bgN_[10],
              _bgN_[11],
              _bgN_[12],
              _bgN_[42],
              _bgN_[14],
              _bgN_[15],
              _bgN_[16],
              _bgN_[17],
              _bgN_[18],
              _bgN_[19],
              _bgN_[20],
              _bgN_[21],
              _bgN_[22],
              _bgN_[23],
              _bgN_[24],
              _bgN_[25],
              _bgN_[26],
              _bgN_[27],
              _bgN_[28],
              _bgN_[29],
              _bgN_[30],
              _bgN_[31],
              _bgN_[32],
              _bgN_[33],
              _bgN_[34],
              _bgN_[35],
              _bgN_[36],
              _bgN_[37],
              _bgN_[38],
              _bgN_[39],
              _bgN_[40],
              _bgN_[41]]}
    function _AP_(_bgL_)
     {var _bgM_=Make$6(_bgL_);
      return [0,
              _bgM_[1],
              _bgM_[2],
              _bgM_[3],
              _bgM_[4],
              _bgM_[5],
              _bgM_[6],
              _bgM_[7],
              _bgM_[8],
              _bgM_[9],
              _bgM_[10],
              _bgM_[11],
              _bgM_[12],
              _bgM_[42],
              _bgM_[14],
              _bgM_[15],
              _bgM_[16],
              _bgM_[17],
              _bgM_[18],
              _bgM_[19],
              _bgM_[20],
              _bgM_[21],
              _bgM_[22],
              _bgM_[23],
              _bgM_[24],
              _bgM_[25],
              _bgM_[26],
              _bgM_[27],
              _bgM_[28],
              _bgM_[29],
              _bgM_[30],
              _bgM_[31],
              _bgM_[32],
              _bgM_[33],
              _bgM_[34],
              _bgM_[35],
              _bgM_[36],
              _bgM_[37],
              _bgM_[38],
              _bgM_[39],
              _bgM_[40],
              _bgM_[41]]}
    var
     Core_kernel_Identifiable=
      [0,
       function(T)
        {var
          sexp_of_t=T[4],
          of_string=T[5],
          to_string=T[6],
          _bgJ_=Make_plain$1([0,T[1],T[4]]),
          symbol=_bgJ_[1],
          symbol$0=_bgJ_[2],
          symbol$1=_bgJ_[3],
          symbol$2=_bgJ_[4],
          symbol$3=_bgJ_[5],
          symbol$4=_bgJ_[6],
          equal=_bgJ_[7],
          min=_bgJ_[9],
          max=_bgJ_[10],
          ascending=_bgJ_[11],
          descending=_bgJ_[12],
          between=_bgJ_[13],
          clamp_exn=_bgJ_[14],
          clamp=_bgJ_[15],
          comparator=_bgJ_[16],
          validate_lbound=_bgJ_[17],
          validate_ubound=_bgJ_[18],
          validate_bound=_bgJ_[19],
          Replace_polymorphic_compare=_bgJ_[20],
          Map=_bgJ_[21],
          Set=_bgJ_[22],
          _bgK_=Make_plain$2([0,T[2],T[1],T[4],T[3]]),
          compare=_bgK_[1],
          hash_fold_t=_bgK_[2],
          hash=_bgK_[3],
          hashable=_bgK_[4],
          Table=_bgK_[5],
          Hash_set=_bgK_[6],
          Hash_queue=_bgK_[7],
          include=caml_call1(Base_Pretty_printer[2],[0,T[7],T[6]]),
          pp=include[1];
         return [0,
                 sexp_of_t,
                 of_string,
                 to_string,
                 pp,
                 symbol,
                 symbol$0,
                 symbol$1,
                 symbol$2,
                 symbol$3,
                 symbol$4,
                 equal,
                 min,
                 max,
                 ascending,
                 descending,
                 between,
                 clamp_exn,
                 clamp,
                 comparator,
                 validate_lbound,
                 validate_ubound,
                 validate_bound,
                 Replace_polymorphic_compare,
                 Map,
                 Set,
                 compare,
                 hash_fold_t,
                 hash,
                 hashable,
                 Table,
                 Hash_set,
                 Hash_queue]},
       _AP_,
       _AO_,
       _AN_,
       _AM_,
       _AL_];
    caml_register_global
     (5019,Core_kernel_Identifiable,"Core_kernel__Identifiable");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Bool);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$167);
    caml_call1(Expect_test_collector[4][1],cst_src_bool_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$168,cst$56);
    var
     _AQ_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$103),0,_b__],0],
     _AR_=caml_call1(Bin_prot_Shape[4][1],cst_src_bool_ml_3_0),
     group$49=caml_call2(Bin_prot_Shape[6],_AR_,_AQ_),
     _AS_=caml_call1(Bin_prot_Shape[2][1],cst_t$104),
     bin_shape_t$40=caml_call1(caml_call2(Bin_prot_Shape[14],group$49,_AS_),0),
     Typename_of_t$3=caml_call1(Typerep_lib_Make_typename[1],[0,name$12]),
     typename_of_t$3=Typename_of_t$3[2],
     name_of_t=Typename_of_t$3[1],
     typerep_of_t$3=[9,[0,name_of_t,[0,_e__]]],
     _AT_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$105),0,bin_shape_t$40],0],
     _AU_=caml_call1(Bin_prot_Shape[4][1],cst_src_bool_ml_8_6),
     group$50=caml_call2(Bin_prot_Shape[6],_AU_,_AT_),
     _AV_=caml_call1(Bin_prot_Shape[2][1],cst_t$106),
     bin_shape_t$41=caml_call1(caml_call2(Bin_prot_Shape[14],group$50,_AV_),0),
     bin_writer_t$34=[0,bin_size_t$0,bin_write_t$0],
     bin_reader_t$34=[0,bin_read_t$1,bin_read_t$2],
     bin_t$34=[0,bin_shape_t$41,bin_writer_t$34,bin_reader_t$34],
     _AW_=
      [0,
       bin_size_t$0,
       bin_write_t$0,
       bin_read_t$1,
       bin_read_t$2,
       bin_shape_t$41,
       bin_writer_t$34,
       bin_reader_t$34,
       bin_t$34],
     _AX_=
      [0,
       Base_Bool[3],
       Base_Bool[4],
       Base_Bool[5],
       Base_Bool[6],
       Base_Bool[7],
       Base_Bool[8],
       Base_Bool[9],
       Base_Bool[10],
       Base_Bool[11],
       Base_Bool[12],
       Base_Bool[13],
       Base_Bool[14],
       Base_Bool[15],
       Base_Bool[16],
       Base_Bool[17],
       Base_Bool[18],
       Base_Bool[19],
       Base_Bool[20],
       Base_Bool[21],
       Base_Bool[22],
       Base_Bool[23],
       Base_Bool[24],
       Base_Bool[25],
       Base_Bool[26],
       Base_Bool[27],
       Base_Bool[28]],
     _AY_=function(_bgI_){return _AL_(_AX_,_bgI_)}(_AW_),
     bin_size_t$47=_AY_[1],
     bin_write_t$47=_AY_[2],
     bin_read_t$96=_AY_[3],
     bin_read_t$97=_AY_[4],
     _AZ_=_AY_[5],
     compare$34=Base_Bool[16],
     _Bl_=Base_Bool[15],
     sexp_of_t$40=Base_Bool[6],
     t_of_sexp$32=Base_Bool[5],
     _Bu_=Base_Bool[4],
     _Bv_=Base_Bool[3],
     _Bw_=Base_Bool[2],
     _A0_=_AY_[6],
     _A1_=_AY_[7],
     _A2_=_AY_[8],
     _A3_=_AY_[34],
     _A4_=_AY_[35],
     _A5_=_AY_[38],
     _A6_=_AY_[39],
     _A7_=_AY_[40],
     _A8_=_AY_[41],
     _A9_=Base_Bool[30],
     _A__=Base_Bool[29],
     _A$_=Base_Bool[28],
     _Ba_=Base_Bool[27],
     _Bb_=Base_Bool[26],
     _Bc_=Base_Bool[25],
     _Bd_=Base_Bool[24],
     _Be_=Base_Bool[23],
     _Bf_=Base_Bool[22],
     _Bg_=Base_Bool[21],
     _Bh_=Base_Bool[20],
     _Bi_=Base_Bool[19],
     _Bj_=Base_Bool[18],
     _Bk_=Base_Bool[17],
     _Bm_=Base_Bool[14],
     _Bn_=Base_Bool[13],
     _Bo_=Base_Bool[12],
     _Bp_=Base_Bool[11],
     _Bq_=Base_Bool[10],
     _Br_=Base_Bool[9],
     _Bs_=Base_Bool[8],
     _Bt_=Base_Bool[7],
     _Bx_=Base_Bool[1],
     _By_=Base_quickcheck_Generator[2],
     _Bz_=Base_quickcheck_Observer[3],
     _BA_=Base_quickcheck_Shrinker[3],
     _BB_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$107),0,_AZ_],0],
     _BC_=caml_call1(Bin_prot_Shape[4][1],cst_src_bool_ml_26_4),
     group$51=caml_call2(Bin_prot_Shape[6],_BC_,_BB_),
     _BD_=caml_call1(Bin_prot_Shape[2][1],cst_t$108),
     bin_shape_t$42=caml_call1(caml_call2(Bin_prot_Shape[14],group$51,_BD_),0),
     bin_writer_t$35=[0,bin_size_t$47,bin_write_t$47],
     bin_reader_t$35=[0,bin_read_t$96,bin_read_t$97],
     bin_t$35=[0,bin_shape_t$42,bin_writer_t$35,bin_reader_t$35];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$169);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Bool$0);
    var
     Core_kernel_Bool=
      [0,
       typerep_of_t$3,
       typename_of_t$3,
       _Bx_,
       _Bw_,
       _A__,
       _A9_,
       Base_Bool[31],
       bin_size_t$47,
       bin_write_t$47,
       bin_read_t$96,
       bin_read_t$97,
       _AZ_,
       _A0_,
       _A1_,
       _A2_,
       t_of_sexp$32,
       sexp_of_t$40,
       _Bt_,
       _Bs_,
       _A$_,
       _Br_,
       _Bq_,
       _Bp_,
       _Bo_,
       _Bn_,
       _Bm_,
       _Bl_,
       compare$34,
       _Bk_,
       _Bj_,
       _Bi_,
       _Bh_,
       _Bg_,
       _Bf_,
       _Be_,
       _Bc_,
       _Bb_,
       _Ba_,
       [0,
        Base_Bool[9],
        Base_Bool[10],
        Base_Bool[11],
        Base_Bool[12],
        Base_Bool[13],
        Base_Bool[14],
        Base_Bool[15],
        Base_Bool[16],
        Base_Bool[17],
        Base_Bool[18]],
       _Bd_,
       _A3_,
       _A4_,
       _Bv_,
       _Bu_,
       _A5_,
       _A6_,
       _A7_,
       _A8_,
       _By_,
       _Bz_,
       _BA_,
       [0,
        [0,
         compare$34,
         t_of_sexp$32,
         sexp_of_t$40,
         bin_size_t$47,
         bin_write_t$47,
         bin_read_t$96,
         bin_read_t$97,
         bin_shape_t$42,
         bin_writer_t$35,
         bin_reader_t$35,
         bin_t$35]]];
    caml_register_global(5021,Core_kernel_Bool,"Core_kernel__Bool");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Hexdump_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$170);
    caml_call1(Expect_test_collector[4][1],cst_src_hexdump_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$171,cst$57);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$172);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Hexdump_intf$0);
    var Core_kernel_Hexdump_intf=[0];
    caml_register_global
     (5022,Core_kernel_Hexdump_intf,"Core_kernel__Hexdump_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Hexdump);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$173);
    caml_call1(Expect_test_collector[4][1],cst_src_hexdump_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$174,cst$58);
    var
     default_max_lines=[0,caml_call2(_aJ_,caml_call2(_aM_,4096,16),1)],
     bytes_per_line=16;
    function Of_indexable2(T)
     {var length=T[1],get=T[2];
      function hex_of_pos(pos){return caml_call2(_fw_,_BE_,pos)}
      function hex_of_char(t,start,until,offset)
       {var pos=caml_call2(_aJ_,start,offset);
        if(caml_call2(_a7_,pos,until))return cst$59;
        var _bgH_=caml_call2(get,t,pos);
        return caml_call2(_fw_,_BF_,caml_call1(Base_Char[31],_bgH_))}
      function hex_of_line(t,start,until)
       {var
         _bgs_=hex_of_char(t,start,until,15),
         _bgt_=hex_of_char(t,start,until,14),
         _bgu_=hex_of_char(t,start,until,13),
         _bgv_=hex_of_char(t,start,until,12),
         _bgw_=hex_of_char(t,start,until,11),
         _bgx_=hex_of_char(t,start,until,10),
         _bgy_=hex_of_char(t,start,until,9),
         _bgz_=hex_of_char(t,start,until,8),
         _bgA_=hex_of_char(t,start,until,7),
         _bgB_=hex_of_char(t,start,until,6),
         _bgC_=hex_of_char(t,start,until,5),
         _bgD_=hex_of_char(t,start,until,4),
         _bgE_=hex_of_char(t,start,until,3),
         _bgF_=hex_of_char(t,start,until,2),
         _bgG_=hex_of_char(t,start,until,1);
        return caml_call17
                (_fw_,
                 _BG_,
                 hex_of_char(t,start,until,0),
                 _bgG_,
                 _bgF_,
                 _bgE_,
                 _bgD_,
                 _bgC_,
                 _bgB_,
                 _bgA_,
                 _bgz_,
                 _bgy_,
                 _bgx_,
                 _bgw_,
                 _bgv_,
                 _bgu_,
                 _bgt_,
                 _bgs_)}
      function printable_string(t,start,until)
       {function _bgq_(i)
         {var char$0=caml_call2(get,t,caml_call2(_aJ_,start,i));
          return caml_call1(Base_Char[43],char$0)?char$0:46}
        var _bgr_=caml_call2(_aK_,until,start);
        return caml_call2(include$39[48],_bgr_,_bgq_)}
      function line(t,pos,len,line_index)
       {var
         start=caml_call2(_aJ_,pos,caml_call2(_aL_,line_index,bytes_per_line)),
         _bgn_=caml_call2(_aJ_,pos,len),
         until=caml_call2(_bb_,caml_call2(_aJ_,start,bytes_per_line),_bgn_),
         _bgo_=printable_string(t,start,until),
         _bgp_=hex_of_line(t,start,until);
        return caml_call4(_fw_,_BH_,hex_of_pos(start),_bgp_,_bgo_)}
      function to_sequence(max_lines,pos,len,t)
       {var
         match=caml_call4(_it_,pos,len,0,caml_call1(length,t)),
         len$0=match[2],
         pos$0=match[1];
        if(max_lines)
         var max_lines$0=max_lines[1],max_lines$1=max_lines$0;
        else
         var max_lines$1=default_max_lines[1];
        var
         max_lines$2=caml_call2(_ba_,max_lines$1,3),
         unabridged_lines=
          caml_call2
           (_aM_,
            caml_call2(include$29[67],len$0,bytes_per_line),
            bytes_per_line),
         skip_from=caml_call2(_aM_,caml_call2(_aK_,max_lines$2,1),2),
         skip_to=
          caml_call2
           (_aJ_,
            caml_call2
             (_aK_,unabridged_lines,caml_call2(_aK_,max_lines$2,skip_from)),
            1);
        return caml_call2
                (_i7_,
                 0,
                 function(line_index)
                  {if(caml_call2(_a7_,line_index,unabridged_lines))return 0;
                   if
                    (caml_call2(_a5_,line_index,skip_from)
                     &&
                     caml_call2(_a2_,max_lines$2,unabridged_lines))
                    return [1,cst$60,skip_to];
                   var _bgm_=caml_call2(_aJ_,line_index,1);
                   return [1,line(t,pos$0,len$0,line_index),_bgm_]})}
      function to_string_hum(max_lines,pos,len,t)
       {var _bgl_=caml_call1(_iL_,to_sequence(max_lines,pos,len,t));
        return caml_call2(include$39[50],_BI_,_bgl_)}
      function sexp_of_t(param,_bgj_,t)
       {var _bgk_=caml_call1(_iL_,to_sequence(0,0,0,t));
        return caml_call1(caml_call1(_X_,_au_),_bgk_)}
      var length$0=T[1],get$0=T[2];
      function printable(t)
       {var length=caml_call1(length$0,t),pos=0;
        for(;;)
         {var _bgf_=caml_call2(_a7_,pos,length);
          if(_bgf_)
           var _bgg_=_bgf_;
          else
           {var
             _bgh_=caml_call2(get$0,t,pos),
             _bgi_=caml_call1(Base_Char[43],_bgh_);
            if(_bgi_){var pos$0=caml_call2(_aJ_,pos,1),pos=pos$0;continue}
            var _bgg_=_bgi_}
          return _bgg_}}
      function to_string(t)
       {function _bgd_(pos){return caml_call2(get$0,t,pos)}
        var _bge_=caml_call1(length$0,t);
        return caml_call2(include$39[48],_bge_,_bgd_)}
      function sexp_of_t$0(sexp_of_a,sexp_of_b,t)
       {return printable(t)
                ?caml_call1(_au_,to_string(t))
                :sexp_of_t(sexp_of_a,sexp_of_b,t)}
      var
       Pretty=[0,length$0,get$0,printable,to_string,sexp_of_t$0],
       Hexdump=
        [0,
         length,
         get,
         hex_of_pos,
         hex_of_char,
         hex_of_line,
         printable_string,
         line,
         to_sequence,
         to_string_hum,
         sexp_of_t,
         Pretty];
      return [0,Hexdump]}
    function Of_indexable1(T)
     {var
       length=T[1],
       get=T[2],
       M=Of_indexable2([0,length,get]),
       length$0=T[1],
       get$0=T[2];
      function sexp_of_t(x,t)
       {function _bgc_(param){return _BJ_}
        return caml_call3(M[1][10],x,_bgc_,t)}
      var to_sequence=M[1][8],to_string_hum=M[1][9],length$1=T[1],get$1=T[2];
      function sexp_of_t$0(sexp_of_a,t)
       {function _bgb_(param){return _BK_}
        return caml_call3(M[1][11][5],sexp_of_a,_bgb_,t)}
      var
       Pretty=[0,length$1,get$1,sexp_of_t$0],
       Hexdump=[0,length$0,get$0,sexp_of_t,to_sequence,to_string_hum,Pretty];
      return [0,M,Hexdump]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$175);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Hexdump$0);
    function _BN_(_bf$_)
     {var _bga_=Of_indexable2(_bf$_)[1];
      return [0,[0,_bga_[10],_bga_[9],_bga_[8],[0,_bga_[11][5]]]]}
    function _BO_(_bf9_)
     {var _bf__=Of_indexable1(_bf9_)[2];
      return [0,[0,_bf__[3],_bf__[5],_bf__[4],[0,_bf__[6][3]]]]}
    function _BP_(T)
     {var length=T[1],get=T[2],M=Of_indexable1([0,length,get]);
      function sexp_of_t(t)
       {function _bf8_(param){return _BL_}return caml_call2(M[2][3],_bf8_,t)}
      var to_sequence=M[2][4],to_string_hum=M[2][5];
      function sexp_of_t$0(t)
       {function _bf7_(param){return _BM_}
        return caml_call2(M[2][6][3],_bf7_,t)}
      return [0,[0,sexp_of_t,to_string_hum,to_sequence,[0,sexp_of_t$0]]]}
    var Core_kernel_Hexdump=[0,default_max_lines,_BP_,_BO_,_BN_];
    caml_register_global(5024,Core_kernel_Hexdump,"Core_kernel__Hexdump");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Stable_compara);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$176);
    caml_call1(Expect_test_collector[4][1],cst_src_stable_comparable_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$177,cst$61);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$178);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Stable_compara$0);
    var Core_kernel_Stable_comparable=[0];
    caml_register_global
     (5025,Core_kernel_Stable_comparable,"Core_kernel__Stable_comparable");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_String);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$179);
    caml_call1(Expect_test_collector[4][1],cst_src_string_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$180,cst$62);
    var
     _BQ_=include$39[1],
     _BR_=include$39[2],
     _BS_=include$39[3],
     _BT_=include$39[4],
     _BU_=include$39[5],
     _BZ_=include$39[10],
     _B0_=include$39[11],
     _B$_=include$39[46],
     _Cd_=include$39[50],
     _Cf_=include$39[52],
     _Cg_=include$39[53],
     _Ch_=include$39[54],
     _Ck_=include$39[57],
     _Cz_=include$39[73],
     _CC_=include$39[76],
     _CD_=include$39[77],
     _CE_=include$39[78],
     _CG_=include$39[80],
     _CH_=include$39[81],
     _CI_=include$39[82],
     _CL_=include$39[85],
     _CM_=include$39[86],
     _CN_=include$39[87],
     _CP_=include$39[89],
     _CV_=include$39[95],
     _CX_=include$39[97],
     _CY_=include$39[98],
     _CZ_=include$39[99],
     _C0_=include$39[100],
     _C5_=include$39[105],
     hash_fold_t$12=include$39[20],
     t_of_sexp$33=include$39[21],
     sexp_of_t$41=include$39[22],
     compare$35=include$39[31],
     comparator$1=include$39[39],
     equal$16=include$39[108],
     _BV_=include$39[6],
     _BW_=include$39[7],
     _BX_=include$39[8],
     _BY_=include$39[9],
     _B1_=include$39[12],
     _B2_=include$39[13],
     _B3_=include$39[14],
     _B4_=include$39[15],
     _B5_=include$39[16],
     _B6_=include$39[17],
     _B7_=include$39[18],
     _B8_=include$39[19],
     _B9_=include$39[44],
     _B__=include$39[45],
     _Ca_=include$39[47],
     _Cb_=include$39[48],
     _Cc_=include$39[49],
     _Ce_=include$39[51],
     _Ci_=include$39[55],
     _Cj_=include$39[56],
     _Cl_=include$39[58],
     _Cm_=include$39[59],
     _Cn_=include$39[60],
     _Co_=include$39[61],
     _Cp_=include$39[62],
     _Cq_=include$39[63],
     _Cr_=include$39[64],
     _Cs_=include$39[65],
     _Ct_=include$39[67],
     _Cu_=include$39[68],
     _Cv_=include$39[69],
     _Cw_=include$39[70],
     _Cx_=include$39[71],
     _Cy_=include$39[72],
     _CA_=include$39[74],
     _CB_=include$39[75],
     _CF_=include$39[79],
     _CJ_=include$39[83],
     _CK_=include$39[84],
     _CO_=include$39[88],
     _CQ_=include$39[90],
     _CR_=include$39[91],
     _CS_=include$39[92],
     _CT_=include$39[93],
     _CU_=include$39[94],
     _CW_=include$39[96],
     _C1_=include$39[101],
     _C2_=include$39[102],
     _C3_=include$39[103],
     _C4_=include$39[104],
     _C6_=include$39[106],
     _C7_=include$39[107],
     _C8_=include$39[109],
     _C9_=include$39[110],
     _C__=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$109),0,_cc_],0],
     _C$_=caml_call1(Bin_prot_Shape[4][1],cst_src_string_ml_14_6),
     group$52=caml_call2(Bin_prot_Shape[6],_C$_,_C__),
     _Da_=caml_call1(Bin_prot_Shape[2][1],cst_t$110),
     bin_shape_t$43=caml_call1(caml_call2(Bin_prot_Shape[14],group$52,_Da_),0),
     bin_writer_t$36=[0,bin_size_t$1,bin_write_t$1],
     bin_reader_t$36=[0,bin_read_t$3,bin_read_t$4],
     bin_t$36=[0,bin_shape_t$43,bin_writer_t$36,bin_reader_t$36];
    function to_string$1(_bf6_){return _bf6_}
    function of_string$0(_bf5_){return _bf5_}
    var
     _Db_=
      caml_call1
       (Stable$2[1][1],
        [0,
         bin_size_t$1,
         bin_write_t$1,
         bin_read_t$3,
         bin_read_t$4,
         bin_shape_t$43,
         bin_writer_t$36,
         bin_reader_t$36,
         bin_t$36,
         compare$35,
         t_of_sexp$33,
         sexp_of_t$41,
         comparator$1]),
     Map=_Db_[1],
     Set=_Db_[2],
     _Dc_=
      [0,
       bin_size_t$1,
       bin_write_t$1,
       bin_read_t$3,
       bin_read_t$4,
       bin_shape_t$43,
       bin_writer_t$36,
       bin_reader_t$36,
       bin_t$36,
       t_of_sexp$33,
       compare$35,
       sexp_of_t$41,
       function(_bf4_){return runtime.Base_hash_string(_bf4_)}],
     include$44=caml_call1(Stable$3[1][1],_Dc_),
     Table=include$44[1],
     Hash_set=include$44[2],
     t_of_sexp$34=_Ck_[3],
     sexp_of_t$42=_Ck_[4],
     is_suffix=_Ck_[24],
     is_prefix=_Ck_[25],
     is_substring=_Ck_[26],
     _Dd_=_Ck_[1],
     _De_=_Ck_[2],
     _Df_=_Ck_[12],
     _Dg_=_Ck_[20],
     _Dh_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$111),0,_cc_],0],
     _Di_=caml_call1(Bin_prot_Shape[4][1],cst_src_string_ml_31_4),
     group$53=caml_call2(Bin_prot_Shape[6],_Di_,_Dh_),
     _Dj_=caml_call1(Bin_prot_Shape[2][1],cst_t$112),
     bin_shape_t$44=caml_call1(caml_call2(Bin_prot_Shape[14],group$53,_Dj_),0),
     bin_writer_t$37=[0,bin_size_t$1,bin_write_t$1],
     bin_reader_t$37=[0,bin_read_t$3,bin_read_t$4],
     bin_t$37=[0,bin_shape_t$44,bin_writer_t$37,bin_reader_t$37],
     _Dk_=
      _xi_
       ([0,
         bin_size_t$1,
         bin_write_t$1,
         bin_read_t$3,
         bin_read_t$4,
         bin_shape_t$44,
         bin_writer_t$37,
         bin_reader_t$37,
         bin_t$37,
         t_of_sexp$34,
         sexp_of_t$42,
         _Dg_]),
     symbol$3=_Dk_[1],
     symbol$4=_Dk_[2],
     symbol$5=_Dk_[3],
     symbol$6=_Dk_[4],
     symbol$7=_Dk_[5],
     symbol$8=_Dk_[6],
     equal$17=_Dk_[7],
     compare$36=_Dk_[8],
     min=_Dk_[9],
     max=_Dk_[10],
     ascending=_Dk_[11],
     descending=_Dk_[12],
     between=_Dk_[13],
     clamp_exn=_Dk_[14],
     clamp=_Dk_[15],
     validate_lbound=_Dk_[16],
     validate_ubound=_Dk_[17],
     validate_bound=_Dk_[18],
     Replace_polymorphic_compare=_Dk_[19],
     comparator$2=_Dk_[20],
     Map$0=_Dk_[21],
     Set$0=_Dk_[22],
     include$45=
      Make_binable
       ([0,
         _Dd_,
         bin_size_t$1,
         bin_write_t$1,
         bin_read_t$3,
         bin_read_t$4,
         bin_shape_t$44,
         bin_writer_t$37,
         bin_reader_t$37,
         bin_t$37,
         t_of_sexp$34,
         _Df_,
         sexp_of_t$42,
         _De_]),
     hash_fold_t$13=include$45[1],
     hash$10=include$45[2],
     hashable=include$45[3],
     Table$0=include$45[4],
     Hash_set$0=include$45[5],
     Hash_queue=include$45[6],
     Typename_of_t$4=caml_call1(Typerep_lib_Make_typename[1],[0,name$13]),
     typename_of_t$4=Typename_of_t$4[2],
     name_of_t$0=Typename_of_t$4[1],
     typerep_of_t$4=[9,[0,name_of_t$0,[0,_fa_]]],
     _Dl_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$113),0,_cc_],0],
     _Dm_=caml_call1(Bin_prot_Shape[4][1],cst_src_string_ml_44_6),
     group$54=caml_call2(Bin_prot_Shape[6],_Dm_,_Dl_),
     _Dn_=caml_call1(Bin_prot_Shape[2][1],cst_t$114),
     bin_shape_t$45=caml_call1(caml_call2(Bin_prot_Shape[14],group$54,_Dn_),0),
     bin_writer_t$38=[0,bin_size_t$1,bin_write_t$1],
     bin_reader_t$38=[0,bin_read_t$3,bin_read_t$4],
     bin_t$38=[0,bin_shape_t$45,bin_writer_t$38,bin_reader_t$38],
     _Do_=
      [0,
       bin_size_t$1,
       bin_write_t$1,
       bin_read_t$3,
       bin_read_t$4,
       bin_shape_t$45,
       bin_writer_t$38,
       bin_reader_t$38,
       bin_t$38],
     _Dp_=include$39[43],
     _Dq_=include$39[42],
     _Dr_=include$39[41],
     _Ds_=include$39[40],
     _Dt_=include$39[39],
     _Du_=include$39[38],
     _Dv_=include$39[37],
     _Dw_=include$39[36],
     _Dx_=include$39[35],
     _Dy_=include$39[34],
     _Dz_=include$39[33],
     _DA_=include$39[32],
     _DB_=include$39[31],
     _DC_=include$39[108],
     _DD_=include$39[30],
     _DE_=include$39[29],
     _DF_=include$39[28],
     _DG_=include$39[27],
     _DH_=include$39[26],
     _DI_=include$39[25],
     _DJ_=include$39[24],
     _DK_=include$39[23],
     _DL_=include$39[22],
     _DM_=include$39[21];
    function _DN_(_bf3_){return runtime.Base_hash_string(_bf3_)}
    var
     _DO_=
      [0,
       include$39[20],
       _DN_,
       _DM_,
       _DL_,
       _DK_,
       _DJ_,
       _DI_,
       _DH_,
       _DG_,
       _DF_,
       _DE_,
       _DD_,
       _DC_,
       _DB_,
       _DA_,
       _Dz_,
       _Dy_,
       _Dx_,
       _Dw_,
       _Dv_,
       _Du_,
       _Dt_,
       _Ds_,
       _Dr_,
       _Dq_,
       _Dp_],
     include$46=function(_bf2_){return _AL_(_DO_,_bf2_)}(_Do_),
     bin_size_t$48=include$46[1],
     bin_write_t$48=include$46[2],
     bin_read_t$98=include$46[3],
     bin_read_t$99=include$46[4],
     bin_shape_t$46=include$46[5],
     bin_writer_t$39=include$46[6],
     bin_reader_t$39=include$46[7],
     bin_t$39=include$46[8],
     t_of_sexp$35=include$46[9],
     sexp_of_t$43=include$46[10],
     of_string$1=include$46[11],
     to_string$2=include$46[12],
     pp$0=include$46[13],
     symbol$9=include$46[14],
     symbol$10=include$46[15],
     symbol$11=include$46[16],
     symbol$12=include$46[17],
     symbol$13=include$46[18],
     symbol$14=include$46[19],
     equal$18=include$46[20],
     compare$37=include$46[21],
     min$0=include$46[22],
     max$0=include$46[23],
     ascending$0=include$46[24],
     descending$0=include$46[25],
     between$0=include$46[26],
     clamp_exn$0=include$46[27],
     clamp$0=include$46[28],
     validate_lbound$0=include$46[29],
     validate_ubound$0=include$46[30],
     validate_bound$0=include$46[31],
     Replace_polymorphic_compare$0=include$46[32],
     comparator$3=include$46[33],
     Map$1=include$46[34],
     Set$1=include$46[35],
     hash_fold_t$14=include$46[36],
     hash$11=include$46[37],
     hashable$0=include$46[38],
     Table$1=include$46[39],
     Hash_set$1=include$46[40],
     Hash_queue$0=include$46[41],
     length$15=caml_ml_string_length,
     get$1=caml_string_get,
     include$47=_BP_([0,length$15,get$1]),
     _DQ_=Base_quickcheck_Generator[4],
     _DR_=Base_quickcheck_Observer[5],
     _DS_=Base_quickcheck_Shrinker[5],
     _DU_=Base_quickcheck_Generator[104],
     _DV_=Base_quickcheck_Generator[105],
     _DP_=include$47[1],
     _DT_=Base_quickcheck_Generator[102];
    function gen_with_length$0(length,chars)
     {return caml_call2(Base_quickcheck_Generator[106],chars,length)}
    function take_while(t,f)
     {var
       match=
        caml_call3(_CL_,0,t,function(param,elt){return 1 - caml_call1(f,elt)});
      if(match){var i=match[1];return caml_call3(_BR_,t,0,i)}
      return t}
    function rtake_while(t,f)
     {var
       match=
        caml_call3(_CM_,0,t,function(param,elt){return 1 - caml_call1(f,elt)});
      if(match)
       {var
         i=match[1],
         _bf1_=caml_call2(_aK_,caml_call2(_aK_,caml_ml_string_length(t),i),1);
        return caml_call3(_BR_,t,caml_call2(_aJ_,i,1),_bf1_)}
      return t}
    function slice$2(t,start,stop)
     {return slice(caml_ml_string_length,_BR_,t,start,stop)}
    function nget$0(x,i)
     {return caml_string_get(x,normalize(caml_ml_string_length,x,i))}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$181);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_String$0);
    var
     _DW_=
      [0,
       [0,
        equal$16,
        hash_fold_t$12,
        function(_bf0_){return runtime.Base_hash_string(_bf0_)},
        of_string$0,
        to_string$1,
        bin_size_t$1,
        bin_write_t$1,
        bin_read_t$3,
        bin_read_t$4,
        bin_shape_t$43,
        bin_writer_t$36,
        bin_reader_t$36,
        bin_t$36,
        compare$35,
        t_of_sexp$33,
        sexp_of_t$41,
        comparator$1,
        Map,
        Set,
        Table,
        Hash_set]],
     Core_kernel_String=
      [0,
       _BQ_,
       _BR_,
       _BS_,
       _BT_,
       _BU_,
       _BV_,
       _BW_,
       _BX_,
       _BY_,
       _BZ_,
       _B0_,
       _B1_,
       _B2_,
       _B3_,
       _B4_,
       _B5_,
       _B6_,
       _B7_,
       _B8_,
       _B9_,
       _B__,
       _B$_,
       _Ca_,
       _Cb_,
       _Cc_,
       _Cd_,
       _Ce_,
       _Cf_,
       _Cg_,
       _Ch_,
       _Ci_,
       _Cj_,
       _Cl_,
       _Cm_,
       _Cn_,
       _Co_,
       _Cp_,
       _Cq_,
       _Cr_,
       _Cs_,
       _Ct_,
       _Cu_,
       _Cv_,
       _Cw_,
       _Cx_,
       _Cy_,
       _Cz_,
       _CA_,
       _CB_,
       _CC_,
       _CD_,
       _CE_,
       _CF_,
       _CG_,
       _CH_,
       _CI_,
       _CJ_,
       _CK_,
       _CL_,
       _CM_,
       _CN_,
       _CO_,
       _CP_,
       _CQ_,
       _CR_,
       _CS_,
       _CT_,
       _CU_,
       _CV_,
       _CW_,
       _CX_,
       _CY_,
       _CZ_,
       _C0_,
       _C1_,
       _C2_,
       _C3_,
       _C4_,
       _C5_,
       _C6_,
       _C7_,
       _C8_,
       _C9_,
       typerep_of_t$4,
       typename_of_t$4,
       [0,
        bin_size_t$1,
        bin_write_t$1,
        bin_read_t$3,
        bin_read_t$4,
        bin_shape_t$44,
        bin_writer_t$37,
        bin_reader_t$37,
        bin_t$37,
        t_of_sexp$34,
        sexp_of_t$42,
        symbol$3,
        symbol$4,
        symbol$5,
        symbol$6,
        symbol$7,
        symbol$8,
        equal$17,
        compare$36,
        min,
        max,
        ascending,
        descending,
        between,
        clamp_exn,
        clamp,
        validate_lbound,
        validate_ubound,
        validate_bound,
        Replace_polymorphic_compare,
        comparator$2,
        Map$0,
        Set$0,
        hash_fold_t$13,
        hash$10,
        hashable,
        Table$0,
        Hash_set$0,
        Hash_queue,
        is_suffix,
        is_prefix,
        is_substring],
       slice$2,
       nget$0,
       take_while,
       rtake_while,
       _DP_,
       bin_size_t$48,
       bin_write_t$48,
       bin_read_t$98,
       bin_read_t$99,
       bin_shape_t$46,
       bin_writer_t$39,
       bin_reader_t$39,
       bin_t$39,
       t_of_sexp$35,
       sexp_of_t$43,
       of_string$1,
       to_string$2,
       pp$0,
       symbol$9,
       symbol$10,
       symbol$11,
       symbol$12,
       symbol$13,
       symbol$14,
       equal$18,
       compare$37,
       min$0,
       max$0,
       ascending$0,
       descending$0,
       between$0,
       clamp_exn$0,
       clamp$0,
       validate_lbound$0,
       validate_ubound$0,
       validate_bound$0,
       Replace_polymorphic_compare$0,
       comparator$3,
       Map$1,
       Set$1,
       hash_fold_t$14,
       hash$11,
       hashable$0,
       Table$1,
       Hash_set$1,
       Hash_queue$0,
       _DQ_,
       _DR_,
       _DS_,
       _DT_,
       _DU_,
       _DV_,
       gen_with_length$0,
       _DW_];
    caml_register_global(5026,Core_kernel_String,"Core_kernel__String");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Bytes);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$182);
    caml_call1(Expect_test_collector[4][1],cst_src_bytes_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$183,cst$63);
    var
     _DX_=include$48[1],
     _DY_=include$48[2],
     _DZ_=include$48[3],
     _D1_=include$48[5],
     _D$_=include$48[15],
     _Ea_=include$48[16],
     _Ei_=include$48[24],
     _Em_=include$48[28],
     _En_=include$48[29],
     _Eq_=include$48[34],
     _Ex_=include$48[41],
     _Ey_=include$48[42],
     _Ez_=include$48[43],
     _EJ_=include$48[53],
     _D0_=include$48[4],
     _D2_=include$48[6],
     _D3_=include$48[7],
     _D4_=include$48[8],
     _D5_=include$48[9],
     _D6_=include$48[10],
     _D7_=include$48[11],
     _D8_=include$48[12],
     _D9_=include$48[13],
     _D__=include$48[14],
     _Eb_=include$48[17],
     _Ec_=include$48[18],
     _Ed_=include$48[19],
     _Ee_=include$48[20],
     _Ef_=include$48[21],
     _Eg_=include$48[22],
     _Eh_=include$48[23],
     _Ej_=include$48[25],
     _Ek_=include$48[26],
     _El_=include$48[27],
     _Eo_=include$48[30],
     _Ep_=include$48[31],
     _Er_=include$48[35],
     _Es_=include$48[36],
     _Et_=include$48[37],
     _Eu_=include$48[38],
     _Ev_=include$48[39],
     _Ew_=include$48[40],
     _EA_=include$48[44],
     _EB_=include$48[45],
     _EC_=include$48[46],
     _ED_=include$48[47],
     _EE_=include$48[48],
     _EF_=include$48[49],
     _EG_=include$48[50],
     _EH_=include$48[51],
     _EI_=include$48[52],
     _EK_=include$48[54],
     _EL_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$115),0,_cg_],0],
     _EM_=caml_call1(Bin_prot_Shape[4][1],cst_src_bytes_ml_7_4),
     group$55=caml_call2(Bin_prot_Shape[6],_EM_,_EL_),
     _EN_=caml_call1(Bin_prot_Shape[2][1],cst_t$116),
     bin_shape_t$47=caml_call1(caml_call2(Bin_prot_Shape[14],group$55,_EN_),0),
     bin_writer_t$40=[0,bin_size_t$2,bin_write_t$2],
     bin_reader_t$40=[0,bin_read_t$5,bin_read_t$6],
     bin_t$40=[0,bin_shape_t$47,bin_writer_t$40,bin_reader_t$40],
     Typename_of_t$5=caml_call1(Typerep_lib_Make_typename[1],[0,name$14]),
     typename_of_t$5=Typename_of_t$5[2],
     name_of_t$1=Typename_of_t$5[1],
     typerep_of_t$5=[9,[0,name_of_t$1,[0,_e$_]]],
     include$49=_BP_([0,_Ex_,_Ey_]),
     _EO_=include$49[1],
     quickcheck_generator$6=caml_call2(_uW_[10],_DQ_,_Em_),
     quickcheck_observer$5=caml_call2(_uV_[18],_DR_,_En_),
     quickcheck_shrinker$5=caml_call3(_uU_[6],_DS_,_Em_,_En_);
    function gen(char_gen)
     {var _bfZ_=caml_call1(_DU_,char_gen);
      return caml_call2(_uW_[10],_bfZ_,_Em_)}
    function gen_with_length$1(len,char_gen)
     {var _bfY_=gen_with_length$0(len,char_gen);
      return caml_call2(_uW_[10],_bfY_,_Em_)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$184);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Bytes$0);
    var
     include$50=
      [0,
       bin_size_t$2,
       bin_write_t$2,
       bin_read_t$5,
       bin_read_t$6,
       bin_shape_t$47,
       bin_writer_t$40,
       bin_reader_t$40,
       bin_t$40,
       typerep_of_t$5,
       typename_of_t$5,
       _DX_,
       _DY_,
       _DZ_,
       _D0_,
       _D1_,
       _D2_,
       _D3_,
       _D4_,
       _D5_,
       _D6_,
       _D7_,
       _D8_,
       _D9_,
       _D__,
       _D$_,
       _Ea_,
       _Eb_,
       _Ec_,
       _Ed_,
       _Ee_,
       _Ef_,
       _Eg_,
       _Eh_,
       _Ei_,
       _Ej_,
       _Ek_,
       _El_,
       _Em_,
       _En_,
       _Eo_,
       _Ep_,
       _Eq_,
       _Er_,
       _Es_,
       _Et_,
       _Eu_,
       _Ev_,
       _Ew_,
       _Ex_,
       _Ey_,
       _Ez_,
       _EA_,
       _EB_,
       _EC_,
       _ED_,
       _EE_,
       _EF_,
       _EG_,
       _EH_,
       _EI_,
       _EJ_,
       _EK_,
       _EO_,
       quickcheck_generator$6,
       quickcheck_observer$5,
       quickcheck_shrinker$5,
       gen,
       gen_with_length$1,
       [0,
        [0,
         bin_size_t$2,
         bin_write_t$2,
         bin_read_t$5,
         bin_read_t$6,
         bin_shape_t$47,
         bin_writer_t$40,
         bin_reader_t$40,
         bin_t$40,
         _Ea_,
         _DX_,
         _DY_,
         _Ei_]]];
    caml_register_global(5028,include$50,"Core_kernel__Bytes");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Char);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$185);
    caml_call1(Expect_test_collector[4][1],cst_src_char_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$186,cst$64);
    var
     Typename_of_t$6=caml_call1(Typerep_lib_Make_typename[1],[0,name$15]),
     typename_of_t$6=Typename_of_t$6[2],
     name_of_t$2=Typename_of_t$6[1],
     typerep_of_t$6=[9,[0,name_of_t$2,[0,_fc_]]],
     _EP_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$117),0,_ck_],0],
     _EQ_=caml_call1(Bin_prot_Shape[4][1],cst_src_char_ml_8_6),
     group$56=caml_call2(Bin_prot_Shape[6],_EQ_,_EP_),
     _ER_=caml_call1(Bin_prot_Shape[2][1],cst_t$118),
     bin_shape_t$48=caml_call1(caml_call2(Bin_prot_Shape[14],group$56,_ER_),0),
     bin_writer_t$41=[0,bin_size_t$3,bin_write_t$3],
     bin_reader_t$41=[0,bin_read_t$7,bin_read_t$8],
     bin_t$41=[0,bin_shape_t$48,bin_writer_t$41,bin_reader_t$41],
     _ES_=
      [0,
       bin_size_t$3,
       bin_write_t$3,
       bin_read_t$7,
       bin_read_t$8,
       bin_shape_t$48,
       bin_writer_t$41,
       bin_reader_t$41,
       bin_t$41],
     _ET_=
      [0,
       Base_Char[3],
       Base_Char[4],
       Base_Char[5],
       Base_Char[6],
       Base_Char[7],
       Base_Char[8],
       Base_Char[9],
       Base_Char[10],
       Base_Char[11],
       Base_Char[12],
       Base_Char[13],
       Base_Char[14],
       Base_Char[15],
       Base_Char[16],
       Base_Char[17],
       Base_Char[18],
       Base_Char[19],
       Base_Char[20],
       Base_Char[21],
       Base_Char[22],
       Base_Char[23],
       Base_Char[24],
       Base_Char[25],
       Base_Char[26],
       Base_Char[27],
       Base_Char[28]],
     _EU_=function(_bfX_){return _AL_(_ET_,_bfX_)}(_ES_),
     _EV_=_EU_[1],
     _EW_=_EU_[2],
     _EX_=_EU_[3],
     _EY_=_EU_[4],
     _EZ_=_EU_[5],
     _E4_=_EU_[35],
     _E$_=Base_Char[46],
     _Fb_=Base_Char[44],
     _Fh_=Base_Char[38],
     _Fj_=Base_Char[36],
     _Fl_=Base_Char[34],
     _Fo_=Base_Char[31],
     _FC_=Base_Char[16],
     _FD_=Base_Char[15],
     _FH_=Base_Char[11],
     _FL_=Base_Char[7],
     _FM_=Base_Char[6],
     _FN_=Base_Char[5],
     _FO_=Base_Char[4],
     _FP_=Base_Char[3],
     _FQ_=Base_Char[2],
     _FS_=Base_Char[49],
     t_of_sexp$36=_FS_[3],
     sexp_of_t$44=_FS_[4],
     _E0_=_EU_[6],
     _E1_=_EU_[7],
     _E2_=_EU_[8],
     _E3_=_EU_[34],
     _E5_=_EU_[38],
     _E6_=_EU_[39],
     _E7_=_EU_[40],
     _E8_=_EU_[41],
     _E9_=Base_Char[48],
     _E__=Base_Char[47],
     _Fa_=Base_Char[45],
     _Fc_=Base_Char[43],
     _Fd_=Base_Char[42],
     _Fe_=Base_Char[41],
     _Ff_=Base_Char[40],
     _Fg_=Base_Char[39],
     _Fi_=Base_Char[37],
     _Fk_=Base_Char[35],
     _Fm_=Base_Char[33],
     _Fn_=Base_Char[32],
     _Fp_=Base_Char[29],
     _Fq_=Base_Char[28],
     _Fr_=Base_Char[27],
     _Fs_=Base_Char[26],
     _Ft_=Base_Char[25],
     _Fu_=Base_Char[24],
     _Fv_=Base_Char[23],
     _Fw_=Base_Char[22],
     _Fx_=Base_Char[21],
     _Fy_=Base_Char[20],
     _Fz_=Base_Char[19],
     _FA_=Base_Char[18],
     _FB_=Base_Char[17],
     _FE_=Base_Char[14],
     _FF_=Base_Char[13],
     _FG_=Base_Char[12],
     _FI_=Base_Char[10],
     _FJ_=Base_Char[9],
     _FK_=Base_Char[8],
     _FR_=Base_Char[1],
     _FT_=_FS_[1],
     _FU_=_FS_[2],
     _FV_=_FS_[12],
     _FW_=_FS_[20],
     _FX_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$119),0,_ck_],0],
     _FY_=caml_call1(Bin_prot_Shape[4][1],cst_src_char_ml_24_4),
     group$57=caml_call2(Bin_prot_Shape[6],_FY_,_FX_),
     _FZ_=caml_call1(Bin_prot_Shape[2][1],cst_t$120),
     bin_shape_t$49=caml_call1(caml_call2(Bin_prot_Shape[14],group$57,_FZ_),0),
     bin_writer_t$42=[0,bin_size_t$3,bin_write_t$3],
     bin_reader_t$42=[0,bin_read_t$7,bin_read_t$8],
     bin_t$42=[0,bin_shape_t$49,bin_writer_t$42,bin_reader_t$42],
     _F0_=
      _xi_
       ([0,
         bin_size_t$3,
         bin_write_t$3,
         bin_read_t$7,
         bin_read_t$8,
         bin_shape_t$49,
         bin_writer_t$42,
         bin_reader_t$42,
         bin_t$42,
         t_of_sexp$36,
         sexp_of_t$44,
         _FW_]),
     symbol$15=_F0_[1],
     symbol$16=_F0_[2],
     symbol$17=_F0_[3],
     symbol$18=_F0_[4],
     symbol$19=_F0_[5],
     symbol$20=_F0_[6],
     equal$19=_F0_[7],
     compare$38=_F0_[8],
     min$1=_F0_[9],
     max$1=_F0_[10],
     ascending$1=_F0_[11],
     descending$1=_F0_[12],
     between$1=_F0_[13],
     clamp_exn$1=_F0_[14],
     clamp$1=_F0_[15],
     validate_lbound$1=_F0_[16],
     validate_ubound$1=_F0_[17],
     validate_bound$1=_F0_[18],
     Replace_polymorphic_compare$1=_F0_[19],
     comparator$4=_F0_[20],
     Map$2=_F0_[21],
     Set$2=_F0_[22],
     include$51=
      Make_binable
       ([0,
         _FT_,
         bin_size_t$3,
         bin_write_t$3,
         bin_read_t$7,
         bin_read_t$8,
         bin_shape_t$49,
         bin_writer_t$42,
         bin_reader_t$42,
         bin_t$42,
         t_of_sexp$36,
         _FV_,
         sexp_of_t$44,
         _FU_]),
     hash_fold_t$15=include$51[1],
     hash$12=include$51[2],
     hashable$1=include$51[3],
     Table$2=include$51[4],
     Hash_set$2=include$51[5],
     Hash_queue$1=include$51[6],
     _F9_=Base_quickcheck_Generator[100],
     _F1_=Base_quickcheck_Generator[3],
     _F2_=Base_quickcheck_Observer[4],
     _F3_=Base_quickcheck_Shrinker[4],
     _F4_=Base_quickcheck_Generator[96],
     _F5_=Base_quickcheck_Generator[94],
     _F6_=Base_quickcheck_Generator[95],
     _F7_=Base_quickcheck_Generator[97],
     _F8_=Base_quickcheck_Generator[98],
     _F__=Base_quickcheck_Generator[99],
     _F$_=Base_quickcheck_Generator[101];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$187);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Char$0);
    var
     Core_kernel_Char=
      [0,
       typerep_of_t$6,
       typename_of_t$6,
       _FR_,
       _FQ_,
       _Fp_,
       _Fo_,
       _Fn_,
       _Fm_,
       _Fl_,
       _Fk_,
       _Fj_,
       _Fi_,
       _Fh_,
       _Fg_,
       _Ff_,
       _Fe_,
       _Fd_,
       _Fc_,
       _Fb_,
       _Fa_,
       _E$_,
       _E__,
       _E9_,
       [0,
        bin_size_t$3,
        bin_write_t$3,
        bin_read_t$7,
        bin_read_t$8,
        bin_shape_t$49,
        bin_writer_t$42,
        bin_reader_t$42,
        bin_t$42,
        t_of_sexp$36,
        sexp_of_t$44,
        symbol$15,
        symbol$16,
        symbol$17,
        symbol$18,
        symbol$19,
        symbol$20,
        equal$19,
        compare$38,
        min$1,
        max$1,
        ascending$1,
        descending$1,
        between$1,
        clamp_exn$1,
        clamp$1,
        validate_lbound$1,
        validate_ubound$1,
        validate_bound$1,
        Replace_polymorphic_compare$1,
        comparator$4,
        Map$2,
        Set$2,
        hash_fold_t$15,
        hash$12,
        hashable$1,
        Table$2,
        Hash_set$2,
        Hash_queue$1],
       _EV_,
       _EW_,
       _EX_,
       _EY_,
       _EZ_,
       _E0_,
       _E1_,
       _E2_,
       _FN_,
       _FM_,
       _FL_,
       _FK_,
       _Fq_,
       _FJ_,
       _FI_,
       _FH_,
       _FG_,
       _FF_,
       _FE_,
       _FD_,
       _FC_,
       _FB_,
       _FA_,
       _Fz_,
       _Fy_,
       _Fx_,
       _Fw_,
       _Fv_,
       _Ft_,
       _Fs_,
       _Fr_,
       [0,
        Base_Char[9],
        Base_Char[10],
        Base_Char[11],
        Base_Char[12],
        Base_Char[13],
        Base_Char[14],
        Base_Char[15],
        Base_Char[16],
        Base_Char[17],
        Base_Char[18]],
       _Fu_,
       _E3_,
       _E4_,
       _FP_,
       _FO_,
       _E5_,
       _E6_,
       _E7_,
       _E8_,
       _F1_,
       _F2_,
       _F3_,
       _F4_,
       _F5_,
       _F6_,
       _F7_,
       _F8_,
       _F9_,
       _F__,
       _F$_];
    caml_register_global(5029,Core_kernel_Char,"Core_kernel__Char");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Core_pervasive);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$188);
    caml_call1(Expect_test_collector[4][1],cst_src_core_pervasives_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$189,cst$65);
    var
     _Ga_=include$0[1],
     _Gb_=include$0[2],
     _Gc_=include$0[3],
     _Gf_=include$0[17],
     _Gg_=include$0[18],
     _Gh_=include$0[19],
     _Gi_=include$0[20],
     _Gj_=include$0[21],
     _Gk_=include$0[22],
     _Gl_=include$0[23],
     _Gm_=include$0[24],
     _Gn_=include$0[25],
     _Go_=include$0[26],
     _Gp_=include$0[27],
     _Gq_=include$0[28],
     _Gr_=include$0[29],
     _Gs_=include$0[31],
     _Gt_=include$0[32],
     _Gu_=include$0[34],
     _Gw_=include$0[37],
     _Gx_=include$0[38],
     _Gy_=include$0[39],
     _Gz_=include$0[40],
     _GA_=include$0[41],
     _GB_=include$0[42],
     _GC_=include$0[43],
     _GD_=include$0[44],
     _GE_=include$0[45],
     _GF_=include$0[46],
     _GG_=include$0[47],
     _GH_=include$0[48],
     _GI_=include$0[49],
     _GJ_=include$0[50],
     _GK_=include$0[51],
     _GL_=include$0[52],
     _GM_=include$0[53],
     _GN_=include$0[54],
     _GO_=include$0[56],
     _GP_=include$0[58],
     _GQ_=include$0[59],
     _GR_=include$0[60],
     _GS_=include$0[61],
     _GT_=include$0[62],
     _GU_=include$0[63],
     _GV_=include$0[64],
     _GW_=include$0[65],
     _GX_=include$0[66],
     _GY_=include$0[67],
     _GZ_=include$0[68],
     _G0_=include$0[69],
     _G1_=include$0[70],
     _G2_=include$0[71],
     _G3_=include$0[72],
     _G4_=include$0[73],
     _G5_=include$0[74],
     _G6_=include$0[75],
     _G7_=include$0[76],
     _G8_=include$0[77],
     _G9_=include$0[78],
     _G__=include$0[79],
     _G$_=include$0[80],
     _Ha_=include$0[81],
     _Hb_=include$0[82],
     _Hc_=include$0[83],
     _Hd_=include$0[84],
     _He_=include$0[85],
     _Hf_=include$0[86],
     _Hg_=include$0[87],
     _Hh_=include$0[88],
     _Hi_=include$0[89],
     _Hj_=include$0[90],
     _Hk_=include$0[91],
     _Hl_=include$0[92],
     _Hm_=include$0[93],
     _Hn_=include$0[94],
     _Ho_=include$0[95],
     _Hp_=include$0[96],
     _Hq_=include$0[97],
     _Hr_=include$0[98],
     _Hs_=include$0[99],
     _Ht_=include$0[100],
     _Hu_=include$0[101],
     _Hv_=include$0[102],
     _Gd_=include$0[15],
     _Ge_=include$0[16],
     _Gv_=include$0[36];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$190);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Core_pervasive$0);
    var
     Core_kernel_Core_pervasives=
      [0,
       _Ga_,
       _Gb_,
       _Gc_,
       _Gd_,
       _Ge_,
       _Gf_,
       _Gg_,
       _Gh_,
       _Gi_,
       _Gj_,
       _Gk_,
       _Gl_,
       _Gm_,
       _Gn_,
       _Go_,
       _Gp_,
       _Gq_,
       _Gr_,
       _Gs_,
       _Gt_,
       _Gu_,
       _Gv_,
       _Gw_,
       _Gx_,
       _Gy_,
       _Gz_,
       _GA_,
       _GB_,
       _GC_,
       _GD_,
       _GE_,
       _GF_,
       _GG_,
       _GH_,
       _GI_,
       _GJ_,
       _GK_,
       _GL_,
       _GM_,
       _GN_,
       _GO_,
       _GP_,
       _GQ_,
       _GR_,
       _GS_,
       _GT_,
       _GU_,
       _GV_,
       _GW_,
       _GX_,
       _GY_,
       _GZ_,
       _G0_,
       _G1_,
       _G2_,
       _G3_,
       _G4_,
       _G5_,
       _G6_,
       _G7_,
       _G8_,
       _G9_,
       _G__,
       _G$_,
       _Ha_,
       _Hb_,
       _Hc_,
       _Hd_,
       _He_,
       _Hf_,
       _Hg_,
       _Hh_,
       _Hi_,
       _Hj_,
       _Hk_,
       _Hl_,
       _Hm_,
       _Hn_,
       _Ho_,
       _Hp_,
       _Hq_,
       _Hr_,
       _Hs_,
       _Ht_,
       _Hu_,
       _Hv_];
    caml_register_global
     (5030,Core_kernel_Core_pervasives,"Core_kernel__Core_pervasives");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Robustly_compa);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$191);
    caml_call1(Expect_test_collector[4][1],cst_src_robustly_comparable_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$192,cst$66);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$193);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Robustly_compa$0);
    var Core_kernel_Robustly_comparabl=[0];
    caml_register_global
     (5031,Core_kernel_Robustly_comparabl,"Core_kernel__Robustly_comparable");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Sign);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$194);
    caml_call1(Expect_test_collector[4][1],cst_src_sign_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$195,cst$67);
    function t_of_sexp$37(sexp)
     {if(0 === sexp[0])
       {var _bfT_=sexp[1],switch$0=0;
        if(caml_string_notequal(_bfT_,cst_Neg))
         {var switch$1=0;
          if(caml_string_notequal(_bfT_,cst_Pos))
           {var switch$2=0;
            if(caml_string_notequal(_bfT_,cst_Zero))
             if(caml_string_notequal(_bfT_,cst_neg))
              if(caml_string_notequal(_bfT_,cst_pos))
               {if(caml_string_notequal(_bfT_,cst_zero))
                 {switch$0 = 1;switch$1 = 1;switch$2 = 1}}
              else
               switch$2 = 1;
             else
              {switch$1 = 1;switch$2 = 1}
            if(! switch$2)return 1}
          if(! switch$1)return 2}
        if(! switch$0)return 0}
      else
       {var _bfU_=sexp[1];
        if(! _bfU_)
         return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$15,sexp);
        var _bfV_=_bfU_[1];
        if(0 !== _bfV_[0])
         return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$15,sexp);
        var _bfW_=_bfV_[1],switch$3=0;
        if(caml_string_notequal(_bfW_,cst_Neg$0))
         {var switch$4=0;
          if(caml_string_notequal(_bfW_,cst_Pos$0))
           {var switch$5=0;
            if(caml_string_notequal(_bfW_,cst_Zero$0))
             if(caml_string_notequal(_bfW_,cst_neg$0))
              if(caml_string_notequal(_bfW_,cst_pos$0))
               {if(caml_string_notequal(_bfW_,cst_zero$0))
                 {switch$3 = 1;switch$4 = 1;switch$5 = 1}}
              else
               switch$5 = 1;
             else
              {switch$4 = 1;switch$5 = 1}
            if(! switch$5)
             return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$15,sexp)}
          if(! switch$4)
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$15,sexp)}
        if(! switch$3)
         return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$15,sexp)}
      return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$15,sexp)}
    function sexp_of_t$45(param)
     {switch(param){case 0:return _Hw_;case 1:return _Hx_;default:return _Hy_}}
    var
     _HA_=caml_call1(Bin_prot_Shape[9],_Hz_),
     _HB_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$121),0,_HA_],0],
     _HC_=caml_call1(Bin_prot_Shape[4][1],cst_src_sign_ml_6_4),
     group$58=caml_call2(Bin_prot_Shape[6],_HC_,_HB_),
     _HD_=caml_call1(Bin_prot_Shape[2][1],cst_t$122),
     bin_shape_t$50=caml_call1(caml_call2(Bin_prot_Shape[14],group$58,_HD_),0);
    function bin_size_t$49(param){return 1}
    function bin_write_t$49(buf,pos,param)
     {switch(param)
       {case 0:return caml_call3(Bin_prot_Write[30],buf,pos,0);
        case 1:return caml_call3(Bin_prot_Write[30],buf,pos,1);
        default:return caml_call3(Bin_prot_Write[30],buf,pos,2)}}
    var bin_writer_t$43=[0,bin_size_t$49,bin_write_t$49];
    function bin_read_t$100(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_src_sign_ml_Stable_V1_t,pos_ref[1])}
    function bin_read_t$101(buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[29],buf,pos_ref);
      if(2 < match >>> 0)
       return caml_call2(Bin_prot_Common[18],_HE_,pos_ref[1]);
      switch(match){case 0:return 0;case 1:return 1;default:return 2}}
    var
     bin_reader_t$43=[0,bin_read_t$101,bin_read_t$100],
     bin_t$43=[0,bin_shape_t$50,bin_writer_t$43,bin_reader_t$43],
     compare$39=caml_int_compare;
    function hash_fold_t$16(hsv,arg)
     {switch(arg)
       {case 0:return caml_call2(Base_Hash[3],hsv,0);
        case 1:return caml_call2(Base_Hash[3],hsv,1);
        default:return caml_call2(Base_Hash[3],hsv,2)}}
    function hash$13(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_bfS_=hash_fold_t$16(hsv,x);
      return caml_call1(Base_Hash[9],_bfS_)}
    var
     Typename_of_t$7=caml_call1(Typerep_lib_Make_typename[1],[0,name$16]),
     typename_of_t$7=Typename_of_t$7[2],
     name_of_t$3=Typename_of_t$7[1],
     typerep_of_t$7=
      [9,
       [0,
        name_of_t$3,
        [0,
         [246,
          function(_bfR_)
           {var
             tag0=
              caml_call1
               (Typerep_lib_Std[1][4][9],[0,cst_Neg$1,_e1_,0,0,0,0,_eF_,_HF_]),
             tag1=
              caml_call1
               (Typerep_lib_Std[1][4][9],
                [0,cst_Zero$1,_e1_,0,0,1,1,_eF_,_HG_]),
             tag2=
              caml_call1
               (Typerep_lib_Std[1][4][9],[0,cst_Pos$1,_e1_,0,0,2,2,_eF_,_HH_]),
             typename=caml_call1(Typerep_lib_Std[1][1][2],name_of_t$3),
             tags=[0,[0,tag0],[0,tag1],[0,tag2]],
             polymorphic=0;
            function value(param)
             {switch(param)
               {case 0:return [0,tag0,_e8_];
                case 1:return [0,tag1,_e8_];
                default:return [0,tag2,_e8_]}}
            return [8,
                    caml_call1
                     (Typerep_lib_Std[1][6][7],
                      [0,typename,tags,polymorphic,value])]}]]]],
     _HI_=Base_Sign[1],
     _HJ_=Base_Sign[28],
     _HK_=Base_Sign[29],
     _HL_=Base_Sign[30],
     _HM_=Base_Sign[31],
     _HN_=Base_Sign[32],
     _HO_=
      [0,
       bin_size_t$49,
       bin_write_t$49,
       bin_read_t$101,
       bin_read_t$100,
       bin_shape_t$50,
       bin_writer_t$43,
       bin_reader_t$43,
       bin_t$43],
     _HP_=
      [0,
       Base_Sign[2],
       Base_Sign[3],
       Base_Sign[4],
       Base_Sign[5],
       Base_Sign[6],
       Base_Sign[7],
       Base_Sign[8],
       Base_Sign[9],
       Base_Sign[10],
       Base_Sign[11],
       Base_Sign[12],
       Base_Sign[13],
       Base_Sign[14],
       Base_Sign[15],
       Base_Sign[16],
       Base_Sign[17],
       Base_Sign[18],
       Base_Sign[19],
       Base_Sign[20],
       Base_Sign[21],
       Base_Sign[22],
       Base_Sign[23],
       Base_Sign[24],
       Base_Sign[25],
       Base_Sign[26],
       Base_Sign[27]],
     include$52=function(_bfQ_){return _AL_(_HP_,_bfQ_)}(_HO_),
     _HY_=include$52[9],
     _HZ_=include$52[10],
     _H__=include$52[21],
     _HQ_=include$52[1],
     _HR_=include$52[2],
     _HS_=include$52[3],
     _HT_=include$52[4],
     _HU_=include$52[5],
     _HV_=include$52[6],
     _HW_=include$52[7],
     _HX_=include$52[8],
     _H0_=include$52[11],
     _H1_=include$52[12],
     _H2_=include$52[13],
     _H3_=include$52[14],
     _H4_=include$52[15],
     _H5_=include$52[16],
     _H6_=include$52[17],
     _H7_=include$52[18],
     _H8_=include$52[19],
     _H9_=include$52[20],
     _H$_=include$52[22],
     _Ia_=include$52[23],
     _Ib_=include$52[24],
     _Ic_=include$52[25],
     _Id_=include$52[26],
     _Ie_=include$52[27],
     _If_=include$52[28],
     _Ig_=include$52[29],
     _Ih_=include$52[30],
     _Ii_=include$52[31],
     _Ij_=include$52[32],
     _Ik_=include$52[33],
     _Il_=include$52[34],
     _Im_=include$52[35],
     _In_=include$52[36],
     _Io_=include$52[37],
     _Ip_=include$52[38],
     _Iq_=include$52[39],
     _Ir_=include$52[40],
     _Is_=include$52[41];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$196);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Sign$0);
    var
     Core_kernel_Sign=
      [0,
       typerep_of_t$7,
       typename_of_t$7,
       _HI_,
       _HJ_,
       _HK_,
       _HL_,
       _HM_,
       _HN_,
       _HQ_,
       _HR_,
       _HS_,
       _HT_,
       _HU_,
       _HV_,
       _HW_,
       _HX_,
       _HY_,
       _HZ_,
       _H0_,
       _H1_,
       _H2_,
       _H3_,
       _H4_,
       _H5_,
       _H6_,
       _H7_,
       _H8_,
       _H9_,
       _H__,
       _H$_,
       _Ia_,
       _Ib_,
       _Ic_,
       _Id_,
       _Ie_,
       _If_,
       _Ig_,
       _Ih_,
       _Ii_,
       _Ij_,
       _Ik_,
       _Il_,
       _Im_,
       _In_,
       _Io_,
       _Ip_,
       _Iq_,
       _Ir_,
       _Is_,
       [0,
        [0,
         bin_size_t$49,
         bin_write_t$49,
         bin_read_t$101,
         bin_read_t$100,
         bin_shape_t$50,
         bin_writer_t$43,
         bin_reader_t$43,
         bin_t$43,
         compare$39,
         hash_fold_t$16,
         hash$13,
         t_of_sexp$37,
         sexp_of_t$45]]];
    caml_register_global(5033,Core_kernel_Sign,"Core_kernel__Sign");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Float);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$197);
    caml_call1(Expect_test_collector[4][1],cst_src_float_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$198,cst$68);
    var
     _It_=include$13[1],
     of_float=include$13[2],
     to_float=include$13[3],
     _Iw_=include$13[6],
     sexp_of_t$46=include$13[7],
     _Ix_=include$13[8],
     symbol$21=include$13[9],
     symbol$22=include$13[10],
     symbol$23=include$13[11],
     symbol$24=include$13[12],
     symbol$25=include$13[13],
     symbol$26=include$13[14],
     equal$20=include$13[15],
     compare$40=include$13[16],
     min$2=include$13[17],
     max$2=include$13[18],
     ascending$2=include$13[19],
     descending$2=include$13[20],
     between$2=include$13[21],
     clamp_exn$2=include$13[22],
     clamp$2=include$13[23],
     validate_lbound$2=include$13[25],
     validate_ubound$2=include$13[26],
     validate_bound$2=include$13[27],
     validate_positive=include$13[29],
     validate_non_negative=include$13[30],
     validate_negative=include$13[31],
     validate_non_positive=include$13[32],
     is_positive=include$13[33],
     is_non_negative=include$13[34],
     is_negative=include$13[35],
     is_non_positive=include$13[36],
     _IB_=include$13[38],
     none=include$13[39],
     _IC_=include$13[40],
     _ID_=include$13[41],
     zero=include$13[44],
     _IT_=include$13[58],
     _IU_=include$13[59],
     _IV_=include$13[60],
     _IZ_=include$13[64],
     _I3_=include$13[68],
     _Ja_=include$13[77],
     _Jb_=include$13[78],
     _Jc_=include$13[79],
     _Jd_=include$13[80],
     _Jf_=include$13[82],
     _Ji_=include$13[85],
     _Jj_=include$13[86],
     is_nan=include$13[87],
     is_inf=include$13[88],
     symbol$27=include$13[91],
     symbol$28=include$13[92],
     symbol$29=include$13[94],
     _Jq_=include$13[99],
     neg=include$13[102],
     scale=include$13[103],
     abs=include$13[104],
     _Jt_=include$13[107],
     _Ju_=include$13[108],
     _JB_=include$13[116],
     _JC_=include$13[117],
     sign=include$13[119],
     _Iu_=include$13[4],
     _Iv_=include$13[5],
     _Iy_=include$13[24],
     _Iz_=include$13[28],
     _IA_=include$13[37],
     _IE_=include$13[42],
     _IF_=include$13[43],
     _IG_=include$13[45],
     _IH_=include$13[46],
     _II_=include$13[47],
     _IJ_=include$13[48],
     _IK_=include$13[49],
     _IL_=include$13[50],
     _IM_=include$13[51],
     _IN_=include$13[52],
     _IO_=include$13[53],
     _IP_=include$13[54],
     _IQ_=include$13[55],
     _IR_=include$13[56],
     _IS_=include$13[57],
     _IW_=include$13[61],
     _IX_=include$13[62],
     _IY_=include$13[63],
     _I0_=include$13[65],
     _I1_=include$13[66],
     _I2_=include$13[67],
     _I4_=include$13[69],
     _I5_=include$13[70],
     _I6_=include$13[71],
     _I7_=include$13[72],
     _I8_=include$13[73],
     _I9_=include$13[74],
     _I__=include$13[75],
     _I$_=include$13[76],
     _Je_=include$13[81],
     _Jg_=include$13[83],
     _Jh_=include$13[84],
     _Jk_=include$13[89],
     _Jl_=include$13[90],
     _Jm_=include$13[93],
     _Jn_=include$13[95],
     _Jo_=include$13[96],
     _Jp_=include$13[98],
     _Jr_=include$13[100],
     _Js_=include$13[101],
     _Jv_=include$13[109],
     _Jw_=include$13[110],
     _Jx_=include$13[111],
     _Jy_=include$13[112],
     _Jz_=include$13[113],
     _JA_=include$13[114],
     _JD_=include$13[120],
     _JE_=include$13[121],
     _JF_=include$13[122],
     _JG_=include$13[123],
     _JH_=include$13[124],
     _JI_=include$13[125],
     _JJ_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$123),0,_cs_],0],
     _JK_=caml_call1(Bin_prot_Shape[4][1],cst_src_float_ml_26_2),
     group$59=caml_call2(Bin_prot_Shape[6],_JK_,_JJ_),
     _JL_=caml_call1(Bin_prot_Shape[2][1],cst_t$124),
     bin_shape_t$51=caml_call1(caml_call2(Bin_prot_Shape[14],group$59,_JL_),0),
     bin_writer_t$44=[0,bin_size_t$5,bin_write_t$5],
     bin_reader_t$44=[0,bin_read_t$11,bin_read_t$12],
     bin_t$44=[0,bin_shape_t$51,bin_writer_t$44,bin_reader_t$44],
     Typename_of_t$8=caml_call1(Typerep_lib_Make_typename[1],[0,name$17]),
     typename_of_t$8=Typename_of_t$8[2],
     name_of_t$4=Typename_of_t$8[1],
     typerep_of_t$8=[9,[0,name_of_t$4,[0,_fb_]]],
     _JM_=
      Make_binable
       ([0,
         _Iu_,
         bin_size_t$5,
         bin_write_t$5,
         bin_read_t$11,
         bin_read_t$12,
         bin_shape_t$51,
         bin_writer_t$44,
         bin_reader_t$44,
         bin_t$44,
         _Iw_,
         compare$40,
         sexp_of_t$46,
         _Iv_]),
     hash_fold_t$17=_JM_[1],
     hash$14=_JM_[2],
     hashable$2=_JM_[3],
     Table$3=_JM_[4],
     Hash_set$3=_JM_[5],
     Hash_queue$2=_JM_[6],
     include$53=
      _xe_
       ([0,
         bin_size_t$5,
         bin_write_t$5,
         bin_read_t$11,
         bin_read_t$12,
         bin_shape_t$51,
         bin_writer_t$44,
         bin_reader_t$44,
         bin_t$44,
         compare$40,
         _Iw_,
         sexp_of_t$46,
         _Iy_]),
     comparator$5=include$53[1],
     Map$3=include$53[2],
     Set$3=include$53[3],
     Replace_polymorphic_compare$2=
      [0,
       symbol$21,
       symbol$22,
       symbol$23,
       symbol$24,
       symbol$25,
       symbol$26,
       equal$20,
       compare$40,
       min$2,
       max$2];
    function Make$7(T)
     {var robust_comparison_tolerance=T[1];
      function symbol(x,y){return y - robust_comparison_tolerance <= x?1:0}
      function symbol$0(x,y){return symbol(y,x)}
      function symbol$1(x,y)
       {var _bfP_=symbol(x,y);return _bfP_?symbol(y,x):_bfP_}
      function symbol$2(x,y){return y + robust_comparison_tolerance < x?1:0}
      function symbol$3(x,y){return symbol$2(y,x)}
      function symbol$4(x,y){return 1 - symbol$1(x,y)}
      function robustly_compare(x,y)
       {var d=x - y;
        return d < - robust_comparison_tolerance
                ?-1
                :robust_comparison_tolerance < d?1:0}
      return [0,
              robust_comparison_tolerance,
              symbol,
              symbol$0,
              symbol$1,
              symbol$2,
              symbol$3,
              symbol$4,
              robustly_compare]}
    var
     Robust_compare=[0,Make$7],
     include$54=caml_call1(Robust_compare[1],[0,1e-07]),
     symbol$30=include$54[2],
     symbol$31=include$54[3],
     symbol$32=include$54[4],
     symbol$33=include$54[5],
     symbol$34=include$54[6],
     symbol$35=include$54[7],
     robustly_compare=include$54[8],
     _JO_=include$13[105],
     symbol$36=_JO_[1],
     symbol$37=_JO_[2],
     symbol$38=_JO_[3],
     symbol$39=_JO_[4],
     symbol$40=_JO_[5],
     symbol$41=_JO_[6],
     symbol$42=_JO_[7],
     symbol$43=_JO_[8],
     symbol$44=_JO_[9],
     symbol$45=_JO_[10],
     symbol$46=_JO_[11],
     symbol$47=_JO_[12],
     abs$0=_JO_[13],
     neg$0=_JO_[14],
     zero$0=_JO_[15],
     of_int=_JO_[16],
     of_float$0=_JO_[17],
     symbol$48=include$54[2],
     symbol$49=include$54[3],
     symbol$50=include$54[4],
     symbol$51=include$54[5],
     symbol$52=include$54[6],
     symbol$53=include$54[7],
     robustly_compare$0=include$54[8],
     _JN_=include$54[1],
     _JP_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$125),0,bin_shape_t$51],0],
     _JQ_=caml_call1(Bin_prot_Shape[4][1],cst_src_float_ml_84_2),
     group$60=caml_call2(Bin_prot_Shape[6],_JQ_,_JP_),
     _JR_=caml_call1(Bin_prot_Shape[2][1],cst_t$126),
     bin_shape_t$52=caml_call1(caml_call2(Bin_prot_Shape[14],group$60,_JR_),0),
     bin_writer_t$45=[0,bin_size_t$5,bin_write_t$5],
     bin_reader_t$45=[0,bin_read_t$11,bin_read_t$12],
     bin_t$45=[0,bin_shape_t$52,bin_writer_t$45,bin_reader_t$45],
     include$55=include$13[126],
     t_of_sexp$38=include$55[1],
     sexp_of_t$47=include$55[2],
     of_string$2=include$55[3],
     to_string$3=include$55[4];
    function sign$0(t)
     {return caml_call2(symbol$33,t,0.)?2:caml_call2(symbol$34,t,0.)?0:1}
    function to_string_12(x)
     {var
       s=runtime.caml_format_float(cst_12g,x),
       l=caml_ml_string_length(s),
       i=0;
      for(;;)
       {if(l <= i)return caml_call2(Stdlib[28],s,cst$69);
        var match=caml_string_get(s,i),switch$0=0;
        if(48 <= match)
         {if(! (58 <= match))switch$0 = 1}
        else
         if(45 === match)switch$0 = 1;
        if(switch$0){var i$0=i + 1 | 0,i=i$0;continue}
        return s}}
    var
     quickcheck_generator$7=Base_quickcheck_Generator[10],
     quickcheck_observer$6=Base_quickcheck_Observer[11],
     quickcheck_shrinker$6=Base_quickcheck_Shrinker[11],
     _JS_=Base_quickcheck_Generator[86],
     _JT_=Base_quickcheck_Generator[85],
     quickcheck_generator$8=Base_quickcheck_Generator[88],
     _JU_=Base_quickcheck_Generator[87],
     _JV_=Base_quickcheck_Generator[89],
     _JW_=Base_quickcheck_Generator[90],
     gen_zero=caml_call1(Base_quickcheck_Generator[93],4),
     gen_nan=caml_call1(Base_quickcheck_Generator[93],1),
     gen_subnormal=caml_call1(Base_quickcheck_Generator[93],3),
     gen_normal=caml_call1(Base_quickcheck_Generator[93],2),
     gen_infinite=caml_call1(Base_quickcheck_Generator[93],0);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$199);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Float$0);
    var
     include$56=
      [0,
       _It_,
       of_float,
       to_float,
       validate_positive,
       validate_non_negative,
       validate_negative,
       validate_non_positive,
       is_positive,
       is_non_negative,
       is_negative,
       is_non_positive,
       _IA_,
       _IB_,
       none,
       _IC_,
       _ID_,
       _IE_,
       _IF_,
       zero,
       _IG_,
       _IH_,
       _II_,
       _IJ_,
       _IK_,
       _IL_,
       _IM_,
       _IN_,
       _IO_,
       _IP_,
       _IQ_,
       _IR_,
       _IS_,
       _IT_,
       _IU_,
       _IV_,
       _IW_,
       _IX_,
       _IY_,
       _IZ_,
       _I0_,
       _I1_,
       _I2_,
       _I3_,
       _I4_,
       _I5_,
       _I6_,
       _I7_,
       _I8_,
       _I9_,
       _I__,
       _I$_,
       _Ja_,
       _Jb_,
       _Jc_,
       _Jd_,
       _Je_,
       _Jf_,
       _Jg_,
       _Jh_,
       _Ji_,
       _Jj_,
       is_nan,
       is_inf,
       _Jk_,
       _Jl_,
       symbol$27,
       symbol$28,
       _Jm_,
       symbol$29,
       _Jn_,
       _Jo_,
       _Jp_,
       _Jq_,
       _Jr_,
       _Js_,
       neg,
       scale,
       abs,
       _Ju_,
       _Jv_,
       _Jw_,
       _Jx_,
       _Jy_,
       _Jz_,
       _JA_,
       _JB_,
       _JC_,
       sign,
       _JD_,
       _JE_,
       _JF_,
       _JG_,
       _JH_,
       _JI_,
       typerep_of_t$8,
       typename_of_t$8,
       Robust_compare,
       _JN_,
       symbol$30,
       symbol$31,
       symbol$32,
       symbol$33,
       symbol$34,
       symbol$35,
       robustly_compare,
       [0,
        symbol$36,
        symbol$37,
        symbol$38,
        symbol$39,
        symbol$40,
        symbol$41,
        symbol$42,
        symbol$43,
        symbol$44,
        symbol$45,
        symbol$46,
        symbol$47,
        abs$0,
        neg$0,
        zero$0,
        of_int,
        of_float$0,
        symbol$48,
        symbol$49,
        symbol$50,
        symbol$51,
        symbol$52,
        symbol$53,
        robustly_compare$0],
       include$54,
       [0,
        bin_size_t$5,
        bin_write_t$5,
        bin_read_t$11,
        bin_read_t$12,
        bin_shape_t$52,
        bin_writer_t$45,
        bin_reader_t$45,
        bin_t$45,
        t_of_sexp$38,
        sexp_of_t$47,
        of_string$2,
        to_string$3],
       bin_size_t$5,
       bin_write_t$5,
       bin_read_t$11,
       bin_read_t$12,
       bin_shape_t$51,
       bin_writer_t$44,
       bin_reader_t$44,
       bin_t$44,
       _Iw_,
       sexp_of_t$46,
       _Ix_,
       _Iz_,
       symbol$21,
       symbol$22,
       symbol$23,
       symbol$24,
       symbol$25,
       symbol$26,
       equal$20,
       compare$40,
       min$2,
       max$2,
       ascending$2,
       descending$2,
       between$2,
       clamp_exn$2,
       clamp$2,
       validate_lbound$2,
       validate_ubound$2,
       validate_bound$2,
       Replace_polymorphic_compare$2,
       comparator$5,
       Map$3,
       Set$3,
       hash_fold_t$17,
       hash$14,
       hashable$2,
       Table$3,
       Hash_set$3,
       Hash_queue$2,
       to_string_12,
       _Jt_,
       quickcheck_generator$7,
       quickcheck_observer$6,
       quickcheck_shrinker$6,
       sign$0,
       sign$0,
       _JS_,
       _JT_,
       quickcheck_generator$8,
       _JV_,
       _JW_,
       _JU_,
       gen_infinite,
       gen_nan,
       gen_normal,
       gen_subnormal,
       gen_zero];
    caml_register_global(5034,include$56,"Core_kernel__Float");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Int);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$200);
    caml_call1(Expect_test_collector[4][1],cst_src_int_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$201,cst$70);
    var
     compare$41=include$29[19],
     comparator$6=include$29[27],
     _JX_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$127),0,_co_],0],
     _JY_=caml_call1(Bin_prot_Shape[4][1],cst_src_int_ml_8_6),
     group$61=caml_call2(Bin_prot_Shape[6],_JY_,_JX_),
     _JZ_=caml_call1(Bin_prot_Shape[2][1],cst_t$128),
     bin_shape_t$53=caml_call1(caml_call2(Bin_prot_Shape[14],group$61,_JZ_),0),
     bin_writer_t$46=[0,bin_size_t$4,bin_write_t$4],
     bin_reader_t$46=[0,bin_read_t$9,bin_read_t$10],
     bin_t$46=[0,bin_shape_t$53,bin_writer_t$46,bin_reader_t$46],
     include$57=
      caml_call1
       (Stable$2[1][1],
        [0,
         bin_size_t$4,
         bin_write_t$4,
         bin_read_t$9,
         bin_read_t$10,
         bin_shape_t$53,
         bin_writer_t$46,
         bin_reader_t$46,
         bin_t$46,
         compare$41,
         t_of_sexp,
         sexp_of_t$0,
         comparator$6]),
     Map$4=include$57[1],
     Set$4=include$57[2],
     _J0_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$129),0,_co_],0],
     _J1_=caml_call1(Bin_prot_Shape[4][1],cst_src_int_ml_19_6),
     group$62=caml_call2(Bin_prot_Shape[6],_J1_,_J0_),
     _J2_=caml_call1(Bin_prot_Shape[2][1],cst_t$130),
     bin_shape_t$54=caml_call1(caml_call2(Bin_prot_Shape[14],group$62,_J2_),0),
     bin_writer_t$47=[0,bin_size_t$4,bin_write_t$4],
     bin_reader_t$47=[0,bin_read_t$9,bin_read_t$10],
     bin_t$47=[0,bin_shape_t$54,bin_writer_t$47,bin_reader_t$47],
     _J3_=
      [0,
       bin_size_t$4,
       bin_write_t$4,
       bin_read_t$9,
       bin_read_t$10,
       bin_shape_t$54,
       bin_writer_t$47,
       bin_reader_t$47,
       bin_t$47],
     _J4_=
      [0,
       include$29[6],
       include$29[7],
       include$29[8],
       include$29[9],
       include$29[10],
       include$29[11],
       include$29[12],
       include$29[13],
       include$29[14],
       include$29[15],
       include$29[16],
       include$29[17],
       include$29[18],
       include$29[19],
       include$29[20],
       include$29[21],
       include$29[22],
       include$29[23],
       include$29[24],
       include$29[25],
       include$29[26],
       include$29[27],
       include$29[28],
       include$29[29],
       include$29[30],
       include$29[31]],
     _J5_=function(_bfO_){return _AL_(_J4_,_bfO_)}(_J3_),
     bin_size_t$50=_J5_[1],
     bin_write_t$50=_J5_[2],
     bin_read_t$102=_J5_[3],
     bin_read_t$103=_J5_[4],
     bin_shape_t$55=_J5_[5],
     bin_writer_t$48=_J5_[6],
     bin_reader_t$48=_J5_[7],
     bin_t$48=_J5_[8],
     Map$5=_J5_[34],
     Set$5=_J5_[35],
     hashable$3=_J5_[38],
     Table$4=_J5_[39],
     Hash_set$4=_J5_[40],
     Hash_queue$3=_J5_[41],
     t_sexp_grammar$0=include$29[1],
     of_float$1=include$29[2],
     to_float$0=include$29[3],
     of_int_exn=include$29[4],
     to_int_exn=include$29[5],
     hash_fold_t$18=include$29[6],
     hash$15=include$29[7],
     t_of_sexp$39=include$29[8],
     sexp_of_t$48=include$29[9],
     of_string$3=include$29[10],
     to_string$4=include$29[11],
     symbol$54=include$29[12],
     symbol$55=include$29[13],
     symbol$56=include$29[14],
     symbol$57=include$29[15],
     symbol$58=include$29[16],
     symbol$59=include$29[17],
     equal$21=include$29[18],
     compare$42=include$29[19],
     min$3=include$29[20],
     max$3=include$29[21],
     ascending$3=include$29[22],
     descending$3=include$29[23],
     between$3=include$29[24],
     clamp_exn$3=include$29[25],
     clamp$3=include$29[26],
     comparator$7=include$29[27],
     validate_lbound$3=include$29[28],
     validate_ubound$3=include$29[29],
     validate_bound$3=include$29[30],
     pp$1=include$29[31],
     validate_positive$0=include$29[32],
     validate_non_negative$0=include$29[33],
     validate_negative$0=include$29[34],
     validate_non_positive$0=include$29[35],
     is_positive$0=include$29[36],
     is_non_negative$0=include$29[37],
     is_negative$0=include$29[38],
     is_non_positive$0=include$29[39],
     sign$1=include$29[40],
     invariant$4=include$29[41],
     Hex=include$29[42],
     to_string_hum$0=include$29[43],
     zero$1=include$29[44],
     one=include$29[45],
     minus_one=include$29[46],
     symbol$60=include$29[47],
     symbol$61=include$29[48],
     symbol$62=include$29[49],
     symbol$63=include$29[50],
     neg$1=include$29[51],
     symbol$64=include$29[52],
     symbol$65=include$29[53],
     symbol$66=include$29[54],
     symbol$67=include$29[55],
     rem=include$29[56],
     symbol$68=include$29[57],
     land=include$29[58],
     lor=include$29[59],
     lxor=include$29[60],
     lnot=include$29[61],
     lsl=include$29[62],
     asr=include$29[63],
     round=include$29[64],
     round_towards_zero=include$29[65],
     round_down=include$29[66],
     round_up=include$29[67],
     round_nearest=include$29[68],
     abs$1=include$29[69],
     next$0=include$29[70],
     prev$1=include$29[71],
     pow=include$29[72],
     bit_and=include$29[73],
     bit_or=include$29[74],
     bit_xor=include$29[75],
     bit_not=include$29[76],
     popcount=include$29[77],
     shift_left=include$29[78],
     shift_right=include$29[79],
     decr$0=include$29[80],
     incr$0=include$29[81],
     of_int32_exn=include$29[82],
     to_int32_exn=include$29[83],
     of_int64_exn=include$29[84],
     to_int64=include$29[85],
     of_nativeint_exn=include$29[86],
     to_nativeint_exn=include$29[87],
     of_float_unchecked=include$29[88],
     num_bits=include$29[89],
     max_value=include$29[90],
     min_value=include$29[91],
     lsr=include$29[92],
     shift_right_logical=include$29[93],
     ceil_pow2=include$29[94],
     floor_pow2=include$29[95],
     ceil_log2=include$29[96],
     floor_log2=include$29[97],
     is_pow2=include$29[98],
     clz=include$29[99],
     ctz=include$29[100],
     O$0=include$29[101],
     max_value_30_bits=include$29[102],
     of_int$0=include$29[103],
     to_int=include$29[104],
     of_int32=include$29[105],
     to_int32=include$29[106],
     of_int64=include$29[107],
     of_nativeint=include$29[108],
     to_nativeint=include$29[109],
     of_int32_trunc=include$29[110],
     to_int32_trunc=include$29[111],
     of_int64_trunc=include$29[112],
     of_nativeint_trunc=include$29[113],
     bswap16=include$29[114],
     Private$1=include$29[115],
     Typename_of_t$9=caml_call1(Typerep_lib_Make_typename[1],[0,name$18]),
     typename_of_t$9=Typename_of_t$9[2],
     name_of_t$5=Typename_of_t$9[1],
     typerep_of_t$9=[9,[0,name_of_t$5,[0,_fh_]]],
     t_of_sexp$40=Hex[1],
     sexp_of_t$49=Hex[2],
     compare$43=Hex[3],
     hash_fold_t$19=Hex[4],
     hash$16=Hex[5],
     of_string$4=Hex[6],
     to_string$5=Hex[7],
     to_string_hum$1=Hex[8],
     Typename_of_t$10=caml_call1(Typerep_lib_Make_typename[1],[0,name$19]),
     typename_of_t$10=Typename_of_t$10[2],
     name_of_t$6=Typename_of_t$10[1],
     typerep_of_t$10=[9,[0,name_of_t$6,[0,typerep_of_t$9]]],
     _J6_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$131),0,bin_shape_t$55],0],
     _J7_=caml_call1(Bin_prot_Shape[4][1],cst_src_int_ml_30_2),
     group$63=caml_call2(Bin_prot_Shape[6],_J7_,_J6_),
     _J8_=caml_call1(Bin_prot_Shape[2][1],cst_t$132),
     bin_shape_t$56=caml_call1(caml_call2(Bin_prot_Shape[14],group$63,_J8_),0),
     bin_writer_t$49=[0,bin_size_t$50,bin_write_t$50],
     bin_reader_t$49=[0,bin_read_t$102,bin_read_t$103],
     bin_t$49=[0,bin_shape_t$56,bin_writer_t$49,bin_reader_t$49],
     _J9_=Base_quickcheck_Generator[5],
     _Kb_=Base_quickcheck_Generator[70],
     _J__=Base_quickcheck_Observer[6],
     _J$_=Base_quickcheck_Shrinker[6],
     _Ka_=Base_quickcheck_Generator[65],
     _Kc_=Base_quickcheck_Generator[80],
     _Kd_=Base_quickcheck_Generator[75];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$202);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Int$0);
    var
     Stable$4=
      [0,
       [0,
        bin_size_t$4,
        bin_write_t$4,
        bin_read_t$9,
        bin_read_t$10,
        bin_shape_t$53,
        bin_writer_t$46,
        bin_reader_t$46,
        bin_t$46,
        compare$41,
        t_of_sexp,
        sexp_of_t$0,
        comparator$6,
        Map$4,
        Set$4]],
     Replace_polymorphic_compare$3=
      [0,
       include$29[12],
       include$29[13],
       include$29[14],
       include$29[15],
       include$29[16],
       include$29[17],
       include$29[18],
       include$29[19],
       include$29[20],
       include$29[21]],
     Hex$0=
      [0,
       bin_size_t$50,
       bin_write_t$50,
       bin_read_t$102,
       bin_read_t$103,
       bin_shape_t$56,
       bin_writer_t$49,
       bin_reader_t$49,
       bin_t$49,
       t_of_sexp$40,
       sexp_of_t$49,
       compare$43,
       hash_fold_t$19,
       hash$16,
       typerep_of_t$10,
       typename_of_t$10,
       of_string$4,
       to_string$5,
       to_string_hum$1],
     include$58=
      [0,
       t_sexp_grammar$0,
       of_float$1,
       to_float$0,
       of_int_exn,
       to_int_exn,
       validate_positive$0,
       validate_non_negative$0,
       validate_negative$0,
       validate_non_positive$0,
       is_positive$0,
       is_non_negative$0,
       is_negative$0,
       is_non_positive$0,
       sign$1,
       invariant$4,
       to_string_hum$0,
       zero$1,
       one,
       minus_one,
       symbol$60,
       symbol$61,
       symbol$62,
       symbol$63,
       neg$1,
       symbol$64,
       symbol$65,
       symbol$66,
       symbol$67,
       rem,
       symbol$68,
       land,
       lor,
       lxor,
       lnot,
       lsl,
       asr,
       round,
       round_towards_zero,
       round_down,
       round_up,
       round_nearest,
       abs$1,
       next$0,
       prev$1,
       pow,
       bit_and,
       bit_or,
       bit_xor,
       bit_not,
       popcount,
       shift_left,
       shift_right,
       decr$0,
       incr$0,
       of_int32_exn,
       to_int32_exn,
       of_int64_exn,
       to_int64,
       of_nativeint_exn,
       to_nativeint_exn,
       of_float_unchecked,
       num_bits,
       max_value,
       min_value,
       lsr,
       shift_right_logical,
       ceil_pow2,
       floor_pow2,
       ceil_log2,
       floor_log2,
       is_pow2,
       clz,
       ctz,
       O$0,
       max_value_30_bits,
       of_int$0,
       to_int,
       of_int32,
       to_int32,
       of_int64,
       of_nativeint,
       to_nativeint,
       of_int32_trunc,
       to_int32_trunc,
       of_int64_trunc,
       of_nativeint_trunc,
       bswap16,
       Private$1,
       typerep_of_t$9,
       typename_of_t$9,
       Hex$0,
       bin_size_t$50,
       bin_write_t$50,
       bin_read_t$102,
       bin_read_t$103,
       bin_shape_t$55,
       bin_writer_t$48,
       bin_reader_t$48,
       bin_t$48,
       t_of_sexp$39,
       sexp_of_t$48,
       of_string$3,
       to_string$4,
       pp$1,
       symbol$54,
       symbol$55,
       symbol$56,
       symbol$57,
       symbol$58,
       symbol$59,
       equal$21,
       compare$42,
       min$3,
       max$3,
       ascending$3,
       descending$3,
       between$3,
       clamp_exn$3,
       clamp$3,
       validate_lbound$3,
       validate_ubound$3,
       validate_bound$3,
       Replace_polymorphic_compare$3,
       comparator$7,
       Map$5,
       Set$5,
       hash_fold_t$18,
       hash$15,
       hashable$3,
       Table$4,
       Hash_set$4,
       Hash_queue$3,
       _J9_,
       _J__,
       _J$_,
       _Ka_,
       _Kb_,
       _Kd_,
       _Kc_,
       Stable$4];
    caml_register_global(5035,include$58,"Core_kernel__Int");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Int32);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$203);
    caml_call1(Expect_test_collector[4][1],cst_src_int32_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$204,cst$71);
    var
     _Ke_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$133),0,_cD_],0],
     _Kf_=caml_call1(Bin_prot_Shape[4][1],cst_src_int32_ml_6_6),
     group$64=caml_call2(Bin_prot_Shape[6],_Kf_,_Ke_),
     _Kg_=caml_call1(Bin_prot_Shape[2][1],cst_t$134),
     bin_shape_t$57=caml_call1(caml_call2(Bin_prot_Shape[14],group$64,_Kg_),0),
     bin_writer_t$50=[0,bin_size_t$6,bin_write_t$6],
     bin_reader_t$50=[0,bin_read_t$13,bin_read_t$14],
     bin_t$50=[0,bin_shape_t$57,bin_writer_t$50,bin_reader_t$50],
     _Kh_=
      [0,
       bin_size_t$6,
       bin_write_t$6,
       bin_read_t$13,
       bin_read_t$14,
       bin_shape_t$57,
       bin_writer_t$50,
       bin_reader_t$50,
       bin_t$50],
     _Ki_=
      [0,
       include$59[6],
       include$59[7],
       include$59[8],
       include$59[9],
       include$59[10],
       include$59[11],
       include$59[12],
       include$59[13],
       include$59[14],
       include$59[15],
       include$59[16],
       include$59[17],
       include$59[18],
       include$59[19],
       include$59[20],
       include$59[21],
       include$59[22],
       include$59[23],
       include$59[24],
       include$59[25],
       include$59[26],
       include$59[27],
       include$59[28],
       include$59[29],
       include$59[30],
       include$59[31]],
     _Kj_=function(_bfN_){return _AL_(_Ki_,_bfN_)}(_Kh_),
     bin_size_t$51=_Kj_[1],
     bin_write_t$51=_Kj_[2],
     bin_read_t$104=_Kj_[3],
     bin_read_t$105=_Kj_[4],
     bin_shape_t$58=_Kj_[5],
     bin_writer_t$51=_Kj_[6],
     bin_reader_t$51=_Kj_[7],
     bin_t$51=_Kj_[8],
     Replace_polymorphic_compare$4=_Kj_[32],
     Map$6=_Kj_[34],
     Set$6=_Kj_[35],
     hashable$4=_Kj_[38],
     Table$5=_Kj_[39],
     Hash_set$5=_Kj_[40],
     Hash_queue$4=_Kj_[41],
     t_sexp_grammar$1=include$59[1],
     of_float$2=include$59[2],
     to_float$1=include$59[3],
     of_int_exn$0=include$59[4],
     to_int_exn$0=include$59[5],
     hash_fold_t$20=include$59[6],
     hash$17=include$59[7],
     t_of_sexp$41=include$59[8],
     sexp_of_t$50=include$59[9],
     of_string$5=include$59[10],
     to_string$6=include$59[11],
     symbol$69=include$59[12],
     symbol$70=include$59[13],
     symbol$71=include$59[14],
     symbol$72=include$59[15],
     symbol$73=include$59[16],
     symbol$74=include$59[17],
     equal$22=include$59[18],
     compare$44=include$59[19],
     min$4=include$59[20],
     max$4=include$59[21],
     ascending$4=include$59[22],
     descending$4=include$59[23],
     between$4=include$59[24],
     clamp_exn$4=include$59[25],
     clamp$4=include$59[26],
     comparator$8=include$59[27],
     validate_lbound$4=include$59[28],
     validate_ubound$4=include$59[29],
     validate_bound$4=include$59[30],
     pp$2=include$59[31],
     validate_positive$1=include$59[32],
     validate_non_negative$1=include$59[33],
     validate_negative$1=include$59[34],
     validate_non_positive$1=include$59[35],
     is_positive$1=include$59[36],
     is_non_negative$1=include$59[37],
     is_negative$1=include$59[38],
     is_non_positive$1=include$59[39],
     sign$2=include$59[40],
     invariant$5=include$59[41],
     Hex$1=include$59[42],
     to_string_hum$2=include$59[43],
     zero$2=include$59[44],
     one$0=include$59[45],
     minus_one$0=include$59[46],
     symbol$75=include$59[47],
     symbol$76=include$59[48],
     symbol$77=include$59[49],
     symbol$78=include$59[50],
     neg$2=include$59[51],
     symbol$79=include$59[52],
     symbol$80=include$59[53],
     symbol$81=include$59[54],
     symbol$82=include$59[55],
     rem$0=include$59[56],
     symbol$83=include$59[57],
     land$0=include$59[58],
     lor$0=include$59[59],
     lxor$0=include$59[60],
     lnot$0=include$59[61],
     lsl$0=include$59[62],
     asr$0=include$59[63],
     round$0=include$59[64],
     round_towards_zero$0=include$59[65],
     round_down$0=include$59[66],
     round_up$0=include$59[67],
     round_nearest$0=include$59[68],
     abs$2=include$59[69],
     succ=include$59[70],
     pred=include$59[71],
     pow$0=include$59[72],
     bit_and$0=include$59[73],
     bit_or$0=include$59[74],
     bit_xor$0=include$59[75],
     bit_not$0=include$59[76],
     popcount$0=include$59[77],
     shift_left$0=include$59[78],
     shift_right$0=include$59[79],
     decr$1=include$59[80],
     incr$1=include$59[81],
     of_int32_exn$0=include$59[82],
     to_int32_exn$0=include$59[83],
     of_int64_exn$0=include$59[84],
     to_int64$0=include$59[85],
     of_nativeint_exn$0=include$59[86],
     to_nativeint_exn$0=include$59[87],
     of_float_unchecked$0=include$59[88],
     num_bits$0=include$59[89],
     max_value$0=include$59[90],
     min_value$0=include$59[91],
     lsr$0=include$59[92],
     shift_right_logical$0=include$59[93],
     ceil_pow2$0=include$59[94],
     floor_pow2$0=include$59[95],
     ceil_log2$0=include$59[96],
     floor_log2$0=include$59[97],
     is_pow2$0=include$59[98],
     clz$0=include$59[99],
     ctz$0=include$59[100],
     of_int$1=include$59[102],
     to_int$0=include$59[103],
     of_int32$0=include$59[104],
     to_int32$0=include$59[105],
     of_nativeint$0=include$59[106],
     to_nativeint$0=include$59[107],
     of_int64$0=include$59[108],
     of_int_trunc=include$59[109],
     to_int_trunc=include$59[110],
     of_nativeint_trunc$0=include$59[111],
     of_int64_trunc$0=include$59[112],
     bits_of_float=include$59[113],
     float_of_bits=include$59[114],
     bswap16$0=include$59[115],
     bswap32=include$59[116],
     Typename_of_t$11=caml_call1(Typerep_lib_Make_typename[1],[0,name$20]),
     typename_of_t$11=Typename_of_t$11[2],
     name_of_t$7=Typename_of_t$11[1],
     typerep_of_t$11=[9,[0,name_of_t$7,[0,_fg_]]],
     t_of_sexp$42=Hex$1[1],
     sexp_of_t$51=Hex$1[2],
     compare$45=Hex$1[3],
     hash_fold_t$21=Hex$1[4],
     hash$18=Hex$1[5],
     of_string$6=Hex$1[6],
     to_string$7=Hex$1[7],
     to_string_hum$3=Hex$1[8],
     Typename_of_t$12=caml_call1(Typerep_lib_Make_typename[1],[0,name$21]),
     typename_of_t$12=Typename_of_t$12[2],
     name_of_t$8=Typename_of_t$12[1],
     typerep_of_t$12=[9,[0,name_of_t$8,[0,typerep_of_t$11]]],
     _Kk_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$135),0,bin_shape_t$58],0],
     _Kl_=caml_call1(Bin_prot_Shape[4][1],cst_src_int32_ml_16_2),
     group$65=caml_call2(Bin_prot_Shape[6],_Kl_,_Kk_),
     _Km_=caml_call1(Bin_prot_Shape[2][1],cst_t$136),
     bin_shape_t$59=caml_call1(caml_call2(Bin_prot_Shape[14],group$65,_Km_),0),
     bin_writer_t$52=[0,bin_size_t$51,bin_write_t$51],
     bin_reader_t$52=[0,bin_read_t$104,bin_read_t$105],
     bin_t$52=[0,bin_shape_t$59,bin_writer_t$52,bin_reader_t$52],
     _Kn_=Base_quickcheck_Generator[6],
     _Ko_=Base_quickcheck_Observer[7],
     _Kp_=Base_quickcheck_Shrinker[7],
     _Kq_=Base_quickcheck_Generator[66],
     _Kr_=Base_quickcheck_Generator[71],
     _Ks_=Base_quickcheck_Generator[81],
     _Kt_=Base_quickcheck_Generator[76];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$205);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Int32$0);
    var
     Core_kernel_Int32=
      [0,
       t_sexp_grammar$1,
       of_float$2,
       to_float$1,
       of_int_exn$0,
       to_int_exn$0,
       validate_positive$1,
       validate_non_negative$1,
       validate_negative$1,
       validate_non_positive$1,
       is_positive$1,
       is_non_negative$1,
       is_negative$1,
       is_non_positive$1,
       sign$2,
       invariant$5,
       to_string_hum$2,
       zero$2,
       one$0,
       minus_one$0,
       symbol$75,
       symbol$76,
       symbol$77,
       symbol$78,
       neg$2,
       symbol$79,
       symbol$80,
       symbol$81,
       symbol$82,
       rem$0,
       symbol$83,
       land$0,
       lor$0,
       lxor$0,
       lnot$0,
       lsl$0,
       asr$0,
       round$0,
       round_towards_zero$0,
       round_down$0,
       round_up$0,
       round_nearest$0,
       abs$2,
       succ,
       pred,
       pow$0,
       bit_and$0,
       bit_or$0,
       bit_xor$0,
       bit_not$0,
       popcount$0,
       shift_left$0,
       shift_right$0,
       decr$1,
       incr$1,
       of_int32_exn$0,
       to_int32_exn$0,
       of_int64_exn$0,
       to_int64$0,
       of_nativeint_exn$0,
       to_nativeint_exn$0,
       of_float_unchecked$0,
       num_bits$0,
       max_value$0,
       min_value$0,
       lsr$0,
       shift_right_logical$0,
       ceil_pow2$0,
       floor_pow2$0,
       ceil_log2$0,
       floor_log2$0,
       is_pow2$0,
       clz$0,
       ctz$0,
       of_int$1,
       to_int$0,
       of_int32$0,
       to_int32$0,
       of_nativeint$0,
       to_nativeint$0,
       of_int64$0,
       of_int_trunc,
       to_int_trunc,
       of_nativeint_trunc$0,
       of_int64_trunc$0,
       bits_of_float,
       float_of_bits,
       bswap16$0,
       bswap32,
       typerep_of_t$11,
       typename_of_t$11,
       [0,
        bin_size_t$51,
        bin_write_t$51,
        bin_read_t$104,
        bin_read_t$105,
        bin_shape_t$59,
        bin_writer_t$52,
        bin_reader_t$52,
        bin_t$52,
        t_of_sexp$42,
        sexp_of_t$51,
        compare$45,
        hash_fold_t$21,
        hash$18,
        typerep_of_t$12,
        typename_of_t$12,
        of_string$6,
        to_string$7,
        to_string_hum$3],
       bin_size_t$51,
       bin_write_t$51,
       bin_read_t$104,
       bin_read_t$105,
       bin_shape_t$58,
       bin_writer_t$51,
       bin_reader_t$51,
       bin_t$51,
       t_of_sexp$41,
       sexp_of_t$50,
       of_string$5,
       to_string$6,
       pp$2,
       symbol$69,
       symbol$70,
       symbol$71,
       symbol$72,
       symbol$73,
       symbol$74,
       equal$22,
       compare$44,
       min$4,
       max$4,
       ascending$4,
       descending$4,
       between$4,
       clamp_exn$4,
       clamp$4,
       validate_lbound$4,
       validate_ubound$4,
       validate_bound$4,
       Replace_polymorphic_compare$4,
       comparator$8,
       Map$6,
       Set$6,
       hash_fold_t$20,
       hash$17,
       hashable$4,
       Table$5,
       Hash_set$5,
       Hash_queue$4,
       _Kn_,
       _Ko_,
       _Kp_,
       _Kq_,
       _Kr_,
       _Kt_,
       _Ks_];
    caml_register_global(5037,Core_kernel_Int32,"Core_kernel__Int32");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Int64);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$206);
    caml_call1(Expect_test_collector[4][1],cst_src_int64_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$207,cst$72);
    var
     _Ku_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$137),0,_cH_],0],
     _Kv_=caml_call1(Bin_prot_Shape[4][1],cst_src_int64_ml_6_6),
     group$66=caml_call2(Bin_prot_Shape[6],_Kv_,_Ku_),
     _Kw_=caml_call1(Bin_prot_Shape[2][1],cst_t$138),
     bin_shape_t$60=caml_call1(caml_call2(Bin_prot_Shape[14],group$66,_Kw_),0),
     bin_writer_t$53=[0,bin_size_t$7,bin_write_t$7],
     bin_reader_t$53=[0,bin_read_t$15,bin_read_t$16],
     bin_t$53=[0,bin_shape_t$60,bin_writer_t$53,bin_reader_t$53],
     _Kx_=
      [0,
       bin_size_t$7,
       bin_write_t$7,
       bin_read_t$15,
       bin_read_t$16,
       bin_shape_t$60,
       bin_writer_t$53,
       bin_reader_t$53,
       bin_t$53],
     _Ky_=
      [0,
       include$60[6],
       include$60[7],
       include$60[8],
       include$60[9],
       include$60[10],
       include$60[11],
       include$60[12],
       include$60[13],
       include$60[14],
       include$60[15],
       include$60[16],
       include$60[17],
       include$60[18],
       include$60[19],
       include$60[20],
       include$60[21],
       include$60[22],
       include$60[23],
       include$60[24],
       include$60[25],
       include$60[26],
       include$60[27],
       include$60[28],
       include$60[29],
       include$60[30],
       include$60[31]],
     _Kz_=function(_bfM_){return _AL_(_Ky_,_bfM_)}(_Kx_),
     bin_size_t$52=_Kz_[1],
     bin_write_t$52=_Kz_[2],
     bin_read_t$106=_Kz_[3],
     bin_read_t$107=_Kz_[4],
     bin_shape_t$61=_Kz_[5],
     bin_writer_t$54=_Kz_[6],
     bin_reader_t$54=_Kz_[7],
     bin_t$54=_Kz_[8],
     Replace_polymorphic_compare$5=_Kz_[32],
     Map$7=_Kz_[34],
     Set$7=_Kz_[35],
     hashable$5=_Kz_[38],
     Table$6=_Kz_[39],
     Hash_set$6=_Kz_[40],
     Hash_queue$5=_Kz_[41],
     t_sexp_grammar$2=include$60[1],
     of_float$3=include$60[2],
     to_float$2=include$60[3],
     of_int_exn$1=include$60[4],
     to_int_exn$1=include$60[5],
     hash_fold_t$22=include$60[6],
     hash$19=include$60[7],
     t_of_sexp$43=include$60[8],
     sexp_of_t$52=include$60[9],
     of_string$7=include$60[10],
     to_string$8=include$60[11],
     symbol$84=include$60[12],
     symbol$85=include$60[13],
     symbol$86=include$60[14],
     symbol$87=include$60[15],
     symbol$88=include$60[16],
     symbol$89=include$60[17],
     equal$23=include$60[18],
     compare$46=include$60[19],
     min$5=include$60[20],
     max$5=include$60[21],
     ascending$5=include$60[22],
     descending$5=include$60[23],
     between$5=include$60[24],
     clamp_exn$5=include$60[25],
     clamp$5=include$60[26],
     comparator$9=include$60[27],
     validate_lbound$5=include$60[28],
     validate_ubound$5=include$60[29],
     validate_bound$5=include$60[30],
     pp$3=include$60[31],
     validate_positive$2=include$60[32],
     validate_non_negative$2=include$60[33],
     validate_negative$2=include$60[34],
     validate_non_positive$2=include$60[35],
     is_positive$2=include$60[36],
     is_non_negative$2=include$60[37],
     is_negative$2=include$60[38],
     is_non_positive$2=include$60[39],
     sign$3=include$60[40],
     invariant$6=include$60[41],
     Hex$2=include$60[42],
     to_string_hum$4=include$60[43],
     zero$3=include$60[44],
     one$1=include$60[45],
     minus_one$1=include$60[46],
     symbol$90=include$60[47],
     symbol$91=include$60[48],
     symbol$92=include$60[49],
     symbol$93=include$60[50],
     neg$3=include$60[51],
     symbol$94=include$60[52],
     symbol$95=include$60[53],
     symbol$96=include$60[54],
     symbol$97=include$60[55],
     rem$1=include$60[56],
     symbol$98=include$60[57],
     land$1=include$60[58],
     lor$1=include$60[59],
     lxor$1=include$60[60],
     lnot$1=include$60[61],
     lsl$1=include$60[62],
     asr$1=include$60[63],
     round$1=include$60[64],
     round_towards_zero$1=include$60[65],
     round_down$1=include$60[66],
     round_up$1=include$60[67],
     round_nearest$1=include$60[68],
     abs$3=include$60[69],
     succ$0=include$60[70],
     pred$0=include$60[71],
     pow$1=include$60[72],
     bit_and$1=include$60[73],
     bit_or$1=include$60[74],
     bit_xor$1=include$60[75],
     bit_not$1=include$60[76],
     popcount$1=include$60[77],
     shift_left$1=include$60[78],
     shift_right$1=include$60[79],
     decr$2=include$60[80],
     incr$2=include$60[81],
     of_int32_exn$1=include$60[82],
     to_int32_exn$1=include$60[83],
     of_int64_exn$1=include$60[84],
     to_int64$1=include$60[85],
     of_nativeint_exn$1=include$60[86],
     to_nativeint_exn$1=include$60[87],
     of_float_unchecked$1=include$60[88],
     num_bits$1=include$60[89],
     max_value$1=include$60[90],
     min_value$1=include$60[91],
     lsr$1=include$60[92],
     shift_right_logical$1=include$60[93],
     ceil_pow2$1=include$60[94],
     floor_pow2$1=include$60[95],
     ceil_log2$1=include$60[96],
     floor_log2$1=include$60[97],
     is_pow2$1=include$60[98],
     clz$1=include$60[99],
     ctz$1=include$60[100],
     of_int$2=include$60[102],
     to_int$1=include$60[103],
     of_int32$1=include$60[104],
     to_int32$1=include$60[105],
     of_nativeint$1=include$60[106],
     to_nativeint$1=include$60[107],
     of_int64$1=include$60[108],
     to_int_trunc$0=include$60[109],
     to_int32_trunc$0=include$60[110],
     to_nativeint_trunc=include$60[111],
     bits_of_float$0=include$60[112],
     float_of_bits$0=include$60[113],
     bswap16$1=include$60[114],
     bswap32$0=include$60[115],
     bswap48=include$60[116],
     bswap64=include$60[117],
     Typename_of_t$13=caml_call1(Typerep_lib_Make_typename[1],[0,name$22]),
     typename_of_t$13=Typename_of_t$13[2],
     name_of_t$9=Typename_of_t$13[1],
     typerep_of_t$13=[9,[0,name_of_t$9,[0,_ff_]]],
     t_of_sexp$44=Hex$2[1],
     sexp_of_t$53=Hex$2[2],
     compare$47=Hex$2[3],
     hash_fold_t$23=Hex$2[4],
     hash$20=Hex$2[5],
     of_string$8=Hex$2[6],
     to_string$9=Hex$2[7],
     to_string_hum$5=Hex$2[8],
     Typename_of_t$14=caml_call1(Typerep_lib_Make_typename[1],[0,name$23]),
     typename_of_t$14=Typename_of_t$14[2],
     name_of_t$10=Typename_of_t$14[1],
     typerep_of_t$14=[9,[0,name_of_t$10,[0,typerep_of_t$13]]],
     _KA_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$139),0,bin_shape_t$61],0],
     _KB_=caml_call1(Bin_prot_Shape[4][1],cst_src_int64_ml_16_2),
     group$67=caml_call2(Bin_prot_Shape[6],_KB_,_KA_),
     _KC_=caml_call1(Bin_prot_Shape[2][1],cst_t$140),
     bin_shape_t$62=caml_call1(caml_call2(Bin_prot_Shape[14],group$67,_KC_),0),
     bin_writer_t$55=[0,bin_size_t$52,bin_write_t$52],
     bin_reader_t$55=[0,bin_read_t$106,bin_read_t$107],
     bin_t$55=[0,bin_shape_t$62,bin_writer_t$55,bin_reader_t$55],
     _KD_=Base_quickcheck_Generator[8],
     _KE_=Base_quickcheck_Observer[9],
     _KF_=Base_quickcheck_Shrinker[9],
     _KG_=Base_quickcheck_Generator[68],
     _KH_=Base_quickcheck_Generator[73],
     _KI_=Base_quickcheck_Generator[83],
     _KJ_=Base_quickcheck_Generator[78];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$208);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Int64$0);
    var
     Core_kernel_Int64=
      [0,
       t_sexp_grammar$2,
       of_float$3,
       to_float$2,
       of_int_exn$1,
       to_int_exn$1,
       validate_positive$2,
       validate_non_negative$2,
       validate_negative$2,
       validate_non_positive$2,
       is_positive$2,
       is_non_negative$2,
       is_negative$2,
       is_non_positive$2,
       sign$3,
       invariant$6,
       to_string_hum$4,
       zero$3,
       one$1,
       minus_one$1,
       symbol$90,
       symbol$91,
       symbol$92,
       symbol$93,
       neg$3,
       symbol$94,
       symbol$95,
       symbol$96,
       symbol$97,
       rem$1,
       symbol$98,
       land$1,
       lor$1,
       lxor$1,
       lnot$1,
       lsl$1,
       asr$1,
       round$1,
       round_towards_zero$1,
       round_down$1,
       round_up$1,
       round_nearest$1,
       abs$3,
       succ$0,
       pred$0,
       pow$1,
       bit_and$1,
       bit_or$1,
       bit_xor$1,
       bit_not$1,
       popcount$1,
       shift_left$1,
       shift_right$1,
       decr$2,
       incr$2,
       of_int32_exn$1,
       to_int32_exn$1,
       of_int64_exn$1,
       to_int64$1,
       of_nativeint_exn$1,
       to_nativeint_exn$1,
       of_float_unchecked$1,
       num_bits$1,
       max_value$1,
       min_value$1,
       lsr$1,
       shift_right_logical$1,
       ceil_pow2$1,
       floor_pow2$1,
       ceil_log2$1,
       floor_log2$1,
       is_pow2$1,
       clz$1,
       ctz$1,
       of_int$2,
       to_int$1,
       of_int32$1,
       to_int32$1,
       of_nativeint$1,
       to_nativeint$1,
       of_int64$1,
       to_int_trunc$0,
       to_int32_trunc$0,
       to_nativeint_trunc,
       bits_of_float$0,
       float_of_bits$0,
       bswap16$1,
       bswap32$0,
       bswap48,
       bswap64,
       typerep_of_t$13,
       typename_of_t$13,
       [0,
        bin_size_t$52,
        bin_write_t$52,
        bin_read_t$106,
        bin_read_t$107,
        bin_shape_t$62,
        bin_writer_t$55,
        bin_reader_t$55,
        bin_t$55,
        t_of_sexp$44,
        sexp_of_t$53,
        compare$47,
        hash_fold_t$23,
        hash$20,
        typerep_of_t$14,
        typename_of_t$14,
        of_string$8,
        to_string$9,
        to_string_hum$5],
       bin_size_t$52,
       bin_write_t$52,
       bin_read_t$106,
       bin_read_t$107,
       bin_shape_t$61,
       bin_writer_t$54,
       bin_reader_t$54,
       bin_t$54,
       t_of_sexp$43,
       sexp_of_t$52,
       of_string$7,
       to_string$8,
       pp$3,
       symbol$84,
       symbol$85,
       symbol$86,
       symbol$87,
       symbol$88,
       symbol$89,
       equal$23,
       compare$46,
       min$5,
       max$5,
       ascending$5,
       descending$5,
       between$5,
       clamp_exn$5,
       clamp$5,
       validate_lbound$5,
       validate_ubound$5,
       validate_bound$5,
       Replace_polymorphic_compare$5,
       comparator$9,
       Map$7,
       Set$7,
       hash_fold_t$22,
       hash$19,
       hashable$5,
       Table$6,
       Hash_set$6,
       Hash_queue$5,
       _KD_,
       _KE_,
       _KF_,
       _KG_,
       _KH_,
       _KJ_,
       _KI_];
    caml_register_global(5039,Core_kernel_Int64,"Core_kernel__Int64");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Int_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$209);
    caml_call1(Expect_test_collector[4][1],cst_src_int_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$210,cst$73);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$211);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Int_intf$0);
    var Core_kernel_Int_intf=[0];
    caml_register_global(5040,Core_kernel_Int_intf,"Core_kernel__Int_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Int63);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$212);
    caml_call1(Expect_test_collector[4][1],cst_src_int63_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$213,cst$74);
    var
     of_binable$1=Base_Int63_emul[117][1],
     to_binable$1=Base_Int63_emul[117][2],
     include$61=
      caml_call1
       (caml_call1
         (Stable$0[1][1],
          [0,
           bin_shape_t$61,
           bin_size_t$52,
           bin_write_t$52,
           bin_read_t$106,
           bin_read_t$107]),
        [0,to_binable$1,of_binable$1]),
     bin_size_t$53=include$61[1],
     bin_write_t$53=include$61[2],
     bin_read_t$108=include$61[3],
     bin_read_t$109=include$61[4],
     bin_shape_t$63=include$61[5],
     bin_writer_t$56=include$61[6],
     bin_reader_t$56=include$61[7],
     bin_t$56=include$61[8],
     Bin_emulated=
      [0,
       bin_size_t$53,
       bin_write_t$53,
       bin_read_t$108,
       bin_read_t$109,
       bin_shape_t$63,
       bin_writer_t$56,
       bin_reader_t$56,
       bin_t$56];
    function binable_of_repr(param)
     {return param
              ?Bin_emulated
              :[0,
                bin_size_t$50,
                bin_write_t$50,
                bin_read_t$102,
                bin_read_t$103,
                bin_shape_t$55,
                bin_writer_t$48,
                bin_reader_t$48,
                bin_t$48]}
    var
     binable=binable_of_repr(include$62[120][2]),
     bin_size_t$54=binable[1],
     bin_write_t$54=binable[2],
     bin_read_t$110=binable[3],
     bin_read_t$111=binable[4],
     bin_writer_t$57=binable[6],
     bin_reader_t$57=binable[7],
     bin_t$57=binable[8],
     bin_shape_t$64=Bin_prot_Shape[32],
     t_of_sexp$45=include$62[8],
     sexp_of_t$54=include$62[9],
     comparator$10=include$62[27],
     compare$48=include$62[19],
     include$63=
      caml_call1
       (Stable$2[1][1],
        [0,
         bin_size_t$54,
         bin_write_t$54,
         bin_read_t$110,
         bin_read_t$111,
         bin_shape_t$64,
         bin_writer_t$57,
         bin_reader_t$57,
         bin_t$57,
         compare$48,
         t_of_sexp$45,
         sexp_of_t$54,
         comparator$10]),
     Map$8=include$63[1],
     Set$8=include$63[2],
     _KK_=
      [0,
       bin_size_t$54,
       bin_write_t$54,
       bin_read_t$110,
       bin_read_t$111,
       bin_shape_t$64,
       bin_writer_t$57,
       bin_reader_t$57,
       bin_t$57],
     _KL_=
      [0,
       include$62[6],
       include$62[7],
       include$62[8],
       include$62[9],
       include$62[10],
       include$62[11],
       include$62[12],
       include$62[13],
       include$62[14],
       include$62[15],
       include$62[16],
       include$62[17],
       include$62[18],
       include$62[19],
       include$62[20],
       include$62[21],
       include$62[22],
       include$62[23],
       include$62[24],
       include$62[25],
       include$62[26],
       include$62[27],
       include$62[28],
       include$62[29],
       include$62[30],
       include$62[31]],
     _KM_=function(_bfL_){return _AL_(_KL_,_bfL_)}(_KK_),
     bin_size_t$55=_KM_[1],
     bin_write_t$55=_KM_[2],
     bin_read_t$112=_KM_[3],
     bin_read_t$113=_KM_[4],
     bin_shape_t$65=_KM_[5],
     bin_writer_t$58=_KM_[6],
     bin_reader_t$58=_KM_[7],
     bin_t$58=_KM_[8],
     Map$9=_KM_[34],
     Set$9=_KM_[35],
     hashable$6=_KM_[38],
     Table$7=_KM_[39],
     Hash_set$7=_KM_[40],
     Hash_queue$6=_KM_[41],
     include$64=
      [0,
       include$62[12],
       include$62[13],
       include$62[14],
       include$62[15],
       include$62[16],
       include$62[17],
       include$62[18],
       include$62[19],
       include$62[20],
       include$62[21]],
     t_sexp_grammar$3=include$62[1],
     of_float$4=include$62[2],
     to_float$3=include$62[3],
     of_int_exn$2=include$62[4],
     to_int_exn$2=include$62[5],
     hash_fold_t$24=include$62[6],
     _KN_=include$62[7],
     _KO_=include$62[8],
     _KP_=include$62[9],
     _KQ_=include$62[10],
     _KR_=include$62[11],
     symbol$99=include$62[12],
     symbol$100=include$62[13],
     symbol$101=include$62[14],
     symbol$102=include$62[15],
     symbol$103=include$62[16],
     symbol$104=include$62[17],
     equal$24=include$62[18],
     compare$49=include$62[19],
     min$6=include$62[20],
     max$6=include$62[21],
     ascending$6=include$62[22],
     descending$6=include$62[23],
     between$6=include$62[24],
     clamp_exn$6=include$62[25],
     clamp$6=include$62[26],
     comparator$11=include$62[27],
     validate_lbound$6=include$62[28],
     validate_ubound$6=include$62[29],
     validate_bound$6=include$62[30],
     pp$4=include$62[31],
     validate_positive$3=include$62[32],
     validate_non_negative$3=include$62[33],
     validate_negative$3=include$62[34],
     validate_non_positive$3=include$62[35],
     is_positive$3=include$62[36],
     is_non_negative$3=include$62[37],
     is_negative$3=include$62[38],
     is_non_positive$3=include$62[39],
     sign$4=include$62[40],
     invariant$7=include$62[41],
     Hex$3=include$62[42],
     zero$4=include$62[44],
     one$2=include$62[45],
     minus_one$2=include$62[46],
     symbol$105=include$62[47],
     symbol$106=include$62[48],
     symbol$107=include$62[49],
     symbol$108=include$62[50],
     neg$4=include$62[51],
     symbol$109=include$62[52],
     symbol$110=include$62[53],
     symbol$111=include$62[54],
     symbol$112=include$62[55],
     rem$2=include$62[56],
     symbol$113=include$62[57],
     land$2=include$62[58],
     lor$2=include$62[59],
     lxor$2=include$62[60],
     lnot$2=include$62[61],
     lsl$2=include$62[62],
     asr$2=include$62[63],
     round$2=include$62[64],
     round_towards_zero$2=include$62[65],
     round_down$2=include$62[66],
     round_up$2=include$62[67],
     round_nearest$2=include$62[68],
     abs$4=include$62[69],
     succ$1=include$62[70],
     pred$1=include$62[71],
     pow$2=include$62[72],
     bit_and$2=include$62[73],
     bit_or$2=include$62[74],
     bit_xor$2=include$62[75],
     bit_not$2=include$62[76],
     popcount$2=include$62[77],
     shift_left$2=include$62[78],
     shift_right$2=include$62[79],
     decr$3=include$62[80],
     incr$3=include$62[81],
     of_int32_exn$2=include$62[82],
     to_int32_exn$2=include$62[83],
     of_int64_exn$2=include$62[84],
     to_int64$2=include$62[85],
     of_nativeint_exn$2=include$62[86],
     to_nativeint_exn$2=include$62[87],
     of_float_unchecked$2=include$62[88],
     num_bits$2=include$62[89],
     max_value$2=include$62[90],
     min_value$2=include$62[91],
     lsr$2=include$62[92],
     shift_right_logical$2=include$62[93],
     ceil_pow2$2=include$62[94],
     floor_pow2$2=include$62[95],
     ceil_log2$2=include$62[96],
     is_pow2$2=include$62[97],
     clz$2=include$62[98],
     ctz$2=include$62[99],
     of_int$3=include$62[102],
     to_int$2=include$62[103],
     of_int32$2=include$62[104],
     to_int32$2=include$62[105],
     of_int64$2=include$62[106],
     of_nativeint$2=include$62[107],
     to_nativeint$2=include$62[108],
     to_int_trunc$1=include$62[109],
     to_int32_trunc$1=include$62[110],
     of_int64_trunc$1=include$62[111],
     of_nativeint_trunc$1=include$62[112],
     to_nativeint_trunc$0=include$62[113],
     bswap16$2=include$62[114],
     bswap32$1=include$62[115],
     bswap48$0=include$62[116],
     random=include$62[117],
     random_incl=include$62[118],
     floor_log2$2=include$62[119],
     t_of_sexp$46=Hex$3[1],
     sexp_of_t$55=Hex$3[2],
     compare$50=Hex$3[3],
     hash_fold_t$25=Hex$3[4],
     hash$21=Hex$3[5],
     of_string$9=Hex$3[6],
     to_string$10=Hex$3[7],
     to_string_hum$6=Hex$3[8],
     _KS_=include$62[43],
     Typename_of_t$15=caml_call1(Typerep_lib_Make_typename[1],[0,name$24]),
     typename_of_t$15=Typename_of_t$15[2],
     name_of_t$11=Typename_of_t$15[1],
     typerep_of_t$15=[9,[0,name_of_t$11,[0,_fd_]]],
     _KT_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$141),0,bin_shape_t$65],0],
     _KU_=caml_call1(Bin_prot_Shape[4][1],cst_src_int63_ml_76_2),
     group$68=caml_call2(Bin_prot_Shape[6],_KU_,_KT_),
     _KV_=caml_call1(Bin_prot_Shape[2][1],cst_t$142),
     bin_shape_t$66=caml_call1(caml_call2(Bin_prot_Shape[14],group$68,_KV_),0),
     bin_writer_t$59=[0,bin_size_t$55,bin_write_t$55],
     bin_reader_t$59=[0,bin_read_t$112,bin_read_t$113],
     bin_t$59=[0,bin_shape_t$66,bin_writer_t$59,bin_reader_t$59],
     quickcheck_generator$9=Base_quickcheck_Generator[7],
     quickcheck_observer$7=Base_quickcheck_Observer[8],
     quickcheck_shrinker$7=Base_quickcheck_Shrinker[8],
     _KW_=Base_quickcheck_Generator[67],
     _KX_=Base_quickcheck_Generator[72],
     _KY_=Base_quickcheck_Generator[82],
     _KZ_=Base_quickcheck_Generator[77];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$214);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Int63$0);
    var
     Stable$5=
      [0,
       [0,
        bin_size_t$54,
        bin_write_t$54,
        bin_read_t$110,
        bin_read_t$111,
        bin_shape_t$64,
        bin_writer_t$57,
        bin_reader_t$57,
        bin_t$57,
        compare$48,
        t_of_sexp$45,
        sexp_of_t$54,
        comparator$10,
        Map$8,
        Set$8]],
     Hex$4=
      [0,
       bin_size_t$55,
       bin_write_t$55,
       bin_read_t$112,
       bin_read_t$113,
       bin_shape_t$66,
       bin_writer_t$59,
       bin_reader_t$59,
       bin_t$59,
       t_of_sexp$46,
       sexp_of_t$55,
       compare$50,
       hash_fold_t$25,
       hash$21,
       typerep_of_t$15,
       typename_of_t$15,
       of_string$9,
       to_string$10,
       to_string_hum$6],
     include$65=
      [0,
       t_sexp_grammar$3,
       of_float$4,
       to_float$3,
       of_int_exn$2,
       to_int_exn$2,
       validate_positive$3,
       validate_non_negative$3,
       validate_negative$3,
       validate_non_positive$3,
       is_positive$3,
       is_non_negative$3,
       is_negative$3,
       is_non_positive$3,
       sign$4,
       invariant$7,
       _KS_,
       zero$4,
       one$2,
       minus_one$2,
       symbol$105,
       symbol$106,
       symbol$107,
       symbol$108,
       neg$4,
       symbol$109,
       symbol$110,
       symbol$111,
       symbol$112,
       rem$2,
       symbol$113,
       land$2,
       lor$2,
       lxor$2,
       lnot$2,
       lsl$2,
       asr$2,
       round$2,
       round_towards_zero$2,
       round_down$2,
       round_up$2,
       round_nearest$2,
       abs$4,
       succ$1,
       pred$1,
       pow$2,
       bit_and$2,
       bit_or$2,
       bit_xor$2,
       bit_not$2,
       popcount$2,
       shift_left$2,
       shift_right$2,
       decr$3,
       incr$3,
       of_int32_exn$2,
       to_int32_exn$2,
       of_int64_exn$2,
       to_int64$2,
       of_nativeint_exn$2,
       to_nativeint_exn$2,
       of_float_unchecked$2,
       num_bits$2,
       max_value$2,
       min_value$2,
       lsr$2,
       shift_right_logical$2,
       ceil_pow2$2,
       floor_pow2$2,
       ceil_log2$2,
       is_pow2$2,
       clz$2,
       ctz$2,
       of_int$3,
       to_int$2,
       of_int32$2,
       to_int32$2,
       of_int64$2,
       of_nativeint$2,
       to_nativeint$2,
       to_int_trunc$1,
       to_int32_trunc$1,
       of_int64_trunc$1,
       of_nativeint_trunc$1,
       to_nativeint_trunc$0,
       bswap16$2,
       bswap32$1,
       bswap48$0,
       random,
       random_incl,
       floor_log2$2,
       _fd_,
       _eS_,
       Hex$4,
       bin_size_t$55,
       bin_write_t$55,
       bin_read_t$112,
       bin_read_t$113,
       bin_shape_t$65,
       bin_writer_t$58,
       bin_reader_t$58,
       bin_t$58,
       _KO_,
       _KP_,
       _KQ_,
       _KR_,
       pp$4,
       symbol$99,
       symbol$100,
       symbol$101,
       symbol$102,
       symbol$103,
       symbol$104,
       equal$24,
       compare$49,
       min$6,
       max$6,
       ascending$6,
       descending$6,
       between$6,
       clamp_exn$6,
       clamp$6,
       validate_lbound$6,
       validate_ubound$6,
       validate_bound$6,
       include$64,
       comparator$11,
       Map$9,
       Set$9,
       hash_fold_t$24,
       _KN_,
       hashable$6,
       Table$7,
       Hash_set$7,
       Hash_queue$6,
       quickcheck_generator$9,
       quickcheck_observer$7,
       quickcheck_shrinker$7,
       _KW_,
       _KX_,
       _KZ_,
       _KY_,
       Stable$5];
    caml_register_global(5043,include$65,"Core_kernel__Int63");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Stable_int63ab);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$215);
    caml_call1(Expect_test_collector[4][1],cst_src_stable_int63able_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$216,cst$75);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$217);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Stable_int63ab$0);
    var Core_kernel_Stable_int63able=[0];
    caml_register_global
     (5044,Core_kernel_Stable_int63able,"Core_kernel__Stable_int63able");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Unit);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$218);
    caml_call1(Expect_test_collector[4][1],cst_src_unit_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$219,cst$76);
    var
     _K0_=Bin_prot_Std[45],
     _K1_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$143),0,_K0_],0],
     _K2_=caml_call1(Bin_prot_Shape[4][1],cst_src_unit_ml_7_6),
     group$69=caml_call2(Bin_prot_Shape[6],_K2_,_K1_),
     _K3_=caml_call1(Bin_prot_Shape[2][1],cst_t$144),
     bin_shape_t$67=caml_call1(caml_call2(Bin_prot_Shape[14],group$69,_K3_),0),
     bin_size_t$56=Bin_prot_Std[1],
     bin_write_t$56=Bin_prot_Std[47],
     bin_writer_t$60=[0,bin_size_t$56,bin_write_t$56],
     bin_read_t$114=Bin_prot_Std[50],
     bin_read_t$115=Bin_prot_Std[49],
     bin_reader_t$60=[0,bin_read_t$115,bin_read_t$114],
     bin_t$60=[0,bin_shape_t$67,bin_writer_t$60,bin_reader_t$60],
     compare$51=Base[86][86],
     t_of_sexp$47=Base[86][90],
     sexp_of_t$56=Base[86][91],
     include$66=caml_call1(_hc_[1][2],[0,compare$51,sexp_of_t$56]),
     _K4_=include$66[1],
     Expect_test_collector$1=
      caml_call1(Expect_test_collector[2],Expect_test_config);
    function _K5_(param)
     {var
       _bfI_=caml_call1(Bin_prot_Shape[21],bin_shape_t$67),
       _bfJ_=caml_call1(Bin_prot_Shape[18][4],_bfI_);
      caml_call1(Stdlib[46],_bfJ_);
      var
       _bfK_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_unit_ml$0),
         15,
         289,
         297,
         303];
      return caml_call1(Expect_test_collector$1[1],_bfK_)}
    var
     _K6_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_unit_ml$1),
       15,
       289,
       304,
       342],
     _K9_=
      [0,
       [0,
        _K8_,
        _K7_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_unit_ml$2),
         15,
         289,
         297,
         303],
        _K6_],
       0],
     _K__=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_unit_ml$4),
       13,
       227,
       231,
       343],
     _K$_=
      caml_call1(Expect_test_common_File[4][3],cst_a7cce5982e04b068cd882d40ef);
    caml_call9
     (Expect_test_collector$1[3],
      _K$_,
      _K__,
      cst_src_unit_ml$3,
      0,
      0,
      _K9_,
      0,
      Inline_test_config,
      _K5_);
    var
     _La_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$145),0,_b6_],0],
     _Lb_=caml_call1(Bin_prot_Shape[4][1],cst_src_unit_ml_25_6),
     group$70=caml_call2(Bin_prot_Shape[6],_Lb_,_La_),
     _Lc_=caml_call1(Bin_prot_Shape[2][1],cst_t$146),
     bin_shape_t$68=caml_call1(caml_call2(Bin_prot_Shape[14],group$70,_Lc_),0),
     bin_writer_t$61=[0,bin_size_t,bin_write_t],
     bin_reader_t$61=[0,bin_read_t,bin_read_t$0],
     bin_t$61=[0,bin_shape_t$68,bin_writer_t$61,bin_reader_t$61],
     _Ld_=
      [0,
       bin_size_t,
       bin_write_t,
       bin_read_t,
       bin_read_t$0,
       bin_shape_t$68,
       bin_writer_t$61,
       bin_reader_t$61,
       bin_t$61],
     _Le_=
      [0,
       include$67[3],
       include$67[4],
       include$67[5],
       include$67[6],
       include$67[7],
       include$67[8],
       include$67[9],
       include$67[10],
       include$67[11],
       include$67[12],
       include$67[13],
       include$67[14],
       include$67[15],
       include$67[16],
       include$67[17],
       include$67[18],
       include$67[19],
       include$67[20],
       include$67[21],
       include$67[22],
       include$67[23],
       include$67[24],
       include$67[25],
       include$67[26],
       include$67[27],
       include$67[28]],
     _Lf_=function(_bfH_){return _AL_(_Le_,_bfH_)}(_Ld_),
     bin_size_t$57=_Lf_[1],
     bin_write_t$57=_Lf_[2],
     bin_read_t$116=_Lf_[3],
     bin_read_t$117=_Lf_[4],
     bin_shape_t$69=_Lf_[5],
     bin_writer_t$62=_Lf_[6],
     bin_reader_t$62=_Lf_[7],
     bin_t$62=_Lf_[8],
     Replace_polymorphic_compare$6=_Lf_[32],
     Map$10=_Lf_[34],
     Set$10=_Lf_[35],
     hashable$7=_Lf_[38],
     Table$8=_Lf_[39],
     Hash_set$8=_Lf_[40],
     Hash_queue$7=_Lf_[41],
     all$1=include$67[1],
     t_sexp_grammar$4=include$67[2],
     hash_fold_t$26=include$67[3],
     hash$22=include$67[4],
     t_of_sexp$48=include$67[5],
     sexp_of_t$57=include$67[6],
     of_string$10=include$67[7],
     to_string$11=include$67[8],
     symbol$114=include$67[9],
     symbol$115=include$67[10],
     symbol$116=include$67[11],
     symbol$117=include$67[12],
     symbol$118=include$67[13],
     symbol$119=include$67[14],
     equal$25=include$67[15],
     compare$52=include$67[16],
     min$7=include$67[17],
     max$7=include$67[18],
     ascending$7=include$67[19],
     descending$7=include$67[20],
     between$7=include$67[21],
     clamp_exn$7=include$67[22],
     clamp$7=include$67[23],
     comparator$12=include$67[24],
     validate_lbound$7=include$67[25],
     validate_ubound$7=include$67[26],
     validate_bound$7=include$67[27],
     pp$5=include$67[28],
     invariant$8=include$67[29],
     Typename_of_t$16=caml_call1(Typerep_lib_Make_typename[1],[0,name$25]),
     typename_of_t$16=Typename_of_t$16[2],
     name_of_t$12=Typename_of_t$16[1],
     typerep_of_t$16=[9,[0,name_of_t$12,[0,_e9_]]],
     _Lg_=Base_quickcheck_Generator[1],
     _Lh_=Base_quickcheck_Observer[2],
     _Li_=Base_quickcheck_Shrinker[2];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$220);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Unit$0);
    var
     Core_kernel_Unit=
      [0,
       typerep_of_t$16,
       typename_of_t$16,
       all$1,
       t_sexp_grammar$4,
       invariant$8,
       bin_size_t$57,
       bin_write_t$57,
       bin_read_t$116,
       bin_read_t$117,
       bin_shape_t$69,
       bin_writer_t$62,
       bin_reader_t$62,
       bin_t$62,
       t_of_sexp$48,
       sexp_of_t$57,
       of_string$10,
       to_string$11,
       pp$5,
       symbol$114,
       symbol$115,
       symbol$116,
       symbol$117,
       symbol$118,
       symbol$119,
       equal$25,
       compare$52,
       min$7,
       max$7,
       ascending$7,
       descending$7,
       between$7,
       clamp_exn$7,
       clamp$7,
       validate_lbound$7,
       validate_ubound$7,
       validate_bound$7,
       Replace_polymorphic_compare$6,
       comparator$12,
       Map$10,
       Set$10,
       hash_fold_t$26,
       hash$22,
       hashable$7,
       Table$8,
       Hash_set$8,
       Hash_queue$7,
       _Lg_,
       _Lh_,
       _Li_,
       [0,
        [0,
         bin_size_t$56,
         bin_write_t$56,
         bin_read_t$115,
         bin_read_t$114,
         bin_shape_t$67,
         bin_writer_t$60,
         bin_reader_t$60,
         bin_t$60,
         compare$51,
         t_of_sexp$47,
         sexp_of_t$56,
         _K4_]]];
    caml_register_global(5046,Core_kernel_Unit,"Core_kernel__Unit");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Interfaces);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$221);
    caml_call1(Expect_test_collector[4][1],cst_src_interfaces_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$222,cst$77);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$223);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Interfaces$0);
    var Core_kernel_Interfaces=[0];
    caml_register_global
     (5047,Core_kernel_Interfaces,"Core_kernel__Interfaces");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Lazy);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$224);
    caml_call1(Expect_test_collector[4][1],cst_src_lazy_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$225,cst$78);
    var
     _Lj_=caml_call1(Bin_prot_Shape[3][1],cst_a$55),
     _Lk_=caml_call1(Bin_prot_Shape[4][1],cst_src_lazy_ml_7_16),
     _Ll_=caml_call1(_cW_,caml_call2(Bin_prot_Shape[15],_Lk_,_Lj_)),
     _Lm_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$56),0],
     _Ln_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$147),_Lm_,_Ll_],0],
     _Lo_=caml_call1(Bin_prot_Shape[4][1],cst_src_lazy_ml_7_4),
     group$71=caml_call2(Bin_prot_Shape[6],_Lo_,_Ln_);
    function bin_shape_t$70(a)
     {var _bfG_=caml_call1(Bin_prot_Shape[2][1],cst_t$148);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$71,_bfG_),[0,a,0])}
    function bin_size_t$58(size_of_a,v){return caml_call2(_bB_,size_of_a,v)}
    function bin_write_t$58(write_a,buf,pos,v)
     {return caml_call3(caml_call1(_cY_,write_a),buf,pos,v)}
    function bin_writer_t$63(bin_writer_a)
     {function _bfC_(v)
       {var _bfD_=bin_writer_a[2];
        return function(_bfE_,_bfF_)
         {return bin_write_t$58(_bfD_,v,_bfE_,_bfF_)}}
      return [0,function(v){return bin_size_t$58(bin_writer_a[1],v)},_bfC_]}
    function bin_read_t$118(of_a,buf,pos_ref,vint)
     {return caml_call3(caml_call1(_c1_,of_a),buf,pos_ref,vint)}
    function bin_read_t$119(of_a,buf,pos_ref)
     {return caml_call2(caml_call1(_c0_,of_a),buf,pos_ref)}
    function bin_reader_t$63(bin_reader_a)
     {function _bfB_(buf,pos_ref,vtag)
       {return bin_read_t$118(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$119(bin_reader_a[1],buf,pos_ref)},
              _bfB_]}
    function bin_t$63(bin_a)
     {var _bfz_=bin_reader_t$63(bin_a[3]),_bfA_=bin_writer_t$63(bin_a[2]);
      return [0,bin_shape_t$70(bin_a[1]),_bfA_,_bfz_]}
    var
     t_of_sexp$49=Sexplib_Std[34],
     sexp_of_t$58=Sexplib_Std[33],
     Typename_of_t$17=caml_call1(Typerep_lib_Make_typename[2],[0,name$26]),
     typename_of_t$17=Typename_of_t$17[2];
    function typerep_of_t$17(of_a)
     {var name_of_t=caml_call1(Typename_of_t$17[1],of_a);
      return [9,
              [0,
               name_of_t,
               [0,[246,function(_bfy_){return caml_call1(_e4_,of_a)}]]]]}
    var
     map$20=include$68[10],
     compare$53=include$68[1],
     t_sexp_grammar$5=Sexplib_Std[35],
     _Lp_=include$68[1],
     _Lq_=include$68[2],
     _Lr_=include$68[3],
     _Ls_=include$68[4],
     _Lt_=include$68[5],
     _Lu_=include$68[6],
     _Lv_=include$68[7],
     _Lw_=include$68[8],
     _Lx_=include$68[9],
     _Ly_=include$68[10],
     _Lz_=include$68[11],
     _LA_=include$68[12],
     _LB_=include$68[13],
     _LC_=include$68[14],
     _LD_=include$68[15],
     _LG_=include$68[18],
     _LH_=include$68[19],
     _LE_=include$68[16],
     _LF_=include$68[17],
     _LI_=include$68[20],
     _LJ_=include$68[21];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$226);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Lazy$0);
    var
     _LK_=
      [0,
       [0,
        bin_shape_t$70,
        bin_size_t$58,
        bin_write_t$58,
        bin_read_t$119,
        bin_read_t$118,
        bin_writer_t$63,
        bin_reader_t$63,
        bin_t$63,
        compare$53,
        t_of_sexp$49,
        sexp_of_t$58,
        map$20]],
     include$69=
      [0,
       bin_shape_t$70,
       bin_size_t$58,
       bin_write_t$58,
       bin_read_t$119,
       bin_read_t$118,
       bin_writer_t$63,
       bin_reader_t$63,
       bin_t$63,
       t_sexp_grammar$5,
       typerep_of_t$17,
       typename_of_t$17,
       _Lp_,
       _Lq_,
       _Lr_,
       _Ls_,
       _Lt_,
       _Lu_,
       _Lv_,
       _Lw_,
       _Lx_,
       _Ly_,
       _Lz_,
       _LA_,
       _LB_,
       _LC_,
       _LD_,
       _LE_,
       _LF_,
       _LG_,
       _LH_,
       _LI_,
       _LJ_,
       _LK_];
    caml_register_global(5050,include$69,"Core_kernel__Lazy");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Nativeint);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$227);
    caml_call1(Expect_test_collector[4][1],cst_src_nativeint_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$228,cst$79);
    var
     _LL_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$149),0,_cL_],0],
     _LM_=caml_call1(Bin_prot_Shape[4][1],cst_src_nativeint_ml_6_6),
     group$72=caml_call2(Bin_prot_Shape[6],_LM_,_LL_),
     _LN_=caml_call1(Bin_prot_Shape[2][1],cst_t$150),
     bin_shape_t$71=caml_call1(caml_call2(Bin_prot_Shape[14],group$72,_LN_),0),
     bin_writer_t$64=[0,bin_size_t$8,bin_write_t$8],
     bin_reader_t$64=[0,bin_read_t$17,bin_read_t$18],
     bin_t$64=[0,bin_shape_t$71,bin_writer_t$64,bin_reader_t$64],
     _LO_=
      [0,
       bin_size_t$8,
       bin_write_t$8,
       bin_read_t$17,
       bin_read_t$18,
       bin_shape_t$71,
       bin_writer_t$64,
       bin_reader_t$64,
       bin_t$64],
     _LP_=
      [0,
       include$70[6],
       include$70[7],
       include$70[8],
       include$70[9],
       include$70[10],
       include$70[11],
       include$70[12],
       include$70[13],
       include$70[14],
       include$70[15],
       include$70[16],
       include$70[17],
       include$70[18],
       include$70[19],
       include$70[20],
       include$70[21],
       include$70[22],
       include$70[23],
       include$70[24],
       include$70[25],
       include$70[26],
       include$70[27],
       include$70[28],
       include$70[29],
       include$70[30],
       include$70[31]],
     _LQ_=function(_bfx_){return _AL_(_LP_,_bfx_)}(_LO_),
     bin_size_t$59=_LQ_[1],
     bin_write_t$59=_LQ_[2],
     bin_read_t$120=_LQ_[3],
     bin_read_t$121=_LQ_[4],
     bin_shape_t$72=_LQ_[5],
     bin_writer_t$65=_LQ_[6],
     bin_reader_t$65=_LQ_[7],
     bin_t$65=_LQ_[8],
     Replace_polymorphic_compare$7=_LQ_[32],
     Map$11=_LQ_[34],
     Set$11=_LQ_[35],
     hashable$8=_LQ_[38],
     Table$9=_LQ_[39],
     Hash_set$9=_LQ_[40],
     Hash_queue$8=_LQ_[41],
     t_sexp_grammar$6=include$70[1],
     of_float$5=include$70[2],
     to_float$4=include$70[3],
     of_int_exn$3=include$70[4],
     to_int_exn$3=include$70[5],
     hash_fold_t$27=include$70[6],
     hash$23=include$70[7],
     t_of_sexp$50=include$70[8],
     sexp_of_t$59=include$70[9],
     of_string$11=include$70[10],
     to_string$12=include$70[11],
     symbol$120=include$70[12],
     symbol$121=include$70[13],
     symbol$122=include$70[14],
     symbol$123=include$70[15],
     symbol$124=include$70[16],
     symbol$125=include$70[17],
     equal$26=include$70[18],
     compare$54=include$70[19],
     min$8=include$70[20],
     max$8=include$70[21],
     ascending$8=include$70[22],
     descending$8=include$70[23],
     between$8=include$70[24],
     clamp_exn$8=include$70[25],
     clamp$8=include$70[26],
     comparator$13=include$70[27],
     validate_lbound$8=include$70[28],
     validate_ubound$8=include$70[29],
     validate_bound$8=include$70[30],
     pp$6=include$70[31],
     validate_positive$4=include$70[32],
     validate_non_negative$4=include$70[33],
     validate_negative$4=include$70[34],
     validate_non_positive$4=include$70[35],
     is_positive$4=include$70[36],
     is_non_negative$4=include$70[37],
     is_negative$4=include$70[38],
     is_non_positive$4=include$70[39],
     sign$5=include$70[40],
     invariant$9=include$70[41],
     Hex$5=include$70[42],
     to_string_hum$7=include$70[43],
     zero$5=include$70[44],
     one$3=include$70[45],
     minus_one$3=include$70[46],
     symbol$126=include$70[47],
     symbol$127=include$70[48],
     symbol$128=include$70[49],
     symbol$129=include$70[50],
     neg$5=include$70[51],
     symbol$130=include$70[52],
     symbol$131=include$70[53],
     symbol$132=include$70[54],
     symbol$133=include$70[55],
     rem$3=include$70[56],
     symbol$134=include$70[57],
     land$3=include$70[58],
     lor$3=include$70[59],
     lxor$3=include$70[60],
     lnot$3=include$70[61],
     lsl$3=include$70[62],
     asr$3=include$70[63],
     round$3=include$70[64],
     round_towards_zero$3=include$70[65],
     round_down$3=include$70[66],
     round_up$3=include$70[67],
     round_nearest$3=include$70[68],
     abs$5=include$70[69],
     succ$2=include$70[70],
     pred$2=include$70[71],
     pow$3=include$70[72],
     bit_and$3=include$70[73],
     bit_or$3=include$70[74],
     bit_xor$3=include$70[75],
     bit_not$3=include$70[76],
     popcount$3=include$70[77],
     shift_left$3=include$70[78],
     shift_right$3=include$70[79],
     decr$4=include$70[80],
     incr$4=include$70[81],
     of_int32_exn$3=include$70[82],
     to_int32_exn$3=include$70[83],
     of_int64_exn$3=include$70[84],
     to_int64$3=include$70[85],
     of_nativeint_exn$3=include$70[86],
     to_nativeint_exn$3=include$70[87],
     of_float_unchecked$3=include$70[88],
     num_bits$3=include$70[89],
     max_value$3=include$70[90],
     min_value$3=include$70[91],
     lsr$3=include$70[92],
     shift_right_logical$3=include$70[93],
     ceil_pow2$3=include$70[94],
     floor_pow2$3=include$70[95],
     ceil_log2$3=include$70[96],
     floor_log2$3=include$70[97],
     is_pow2$3=include$70[98],
     clz$3=include$70[99],
     ctz$3=include$70[100],
     of_int$4=include$70[102],
     to_int$3=include$70[103],
     of_int32$3=include$70[104],
     to_int32$3=include$70[105],
     of_nativeint$3=include$70[106],
     to_nativeint$3=include$70[107],
     of_int64$3=include$70[108],
     to_int_trunc$2=include$70[109],
     to_int32_trunc$2=include$70[110],
     of_int64_trunc$2=include$70[111],
     bswap=include$70[112],
     Typename_of_t$18=caml_call1(Typerep_lib_Make_typename[1],[0,name$27]),
     typename_of_t$18=Typename_of_t$18[2],
     name_of_t$13=Typename_of_t$18[1],
     typerep_of_t$18=[9,[0,name_of_t$13,[0,_fe_]]],
     t_of_sexp$51=Hex$5[1],
     sexp_of_t$60=Hex$5[2],
     compare$55=Hex$5[3],
     hash_fold_t$28=Hex$5[4],
     hash$24=Hex$5[5],
     of_string$12=Hex$5[6],
     to_string$13=Hex$5[7],
     to_string_hum$8=Hex$5[8],
     Typename_of_t$19=caml_call1(Typerep_lib_Make_typename[1],[0,name$28]),
     typename_of_t$19=Typename_of_t$19[2],
     name_of_t$14=Typename_of_t$19[1],
     typerep_of_t$19=[9,[0,name_of_t$14,[0,typerep_of_t$18]]],
     _LR_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$151),0,bin_shape_t$72],0],
     _LS_=caml_call1(Bin_prot_Shape[4][1],cst_src_nativeint_ml_16_2),
     group$73=caml_call2(Bin_prot_Shape[6],_LS_,_LR_),
     _LT_=caml_call1(Bin_prot_Shape[2][1],cst_t$152),
     bin_shape_t$73=caml_call1(caml_call2(Bin_prot_Shape[14],group$73,_LT_),0),
     bin_writer_t$66=[0,bin_size_t$59,bin_write_t$59],
     bin_reader_t$66=[0,bin_read_t$120,bin_read_t$121],
     bin_t$66=[0,bin_shape_t$73,bin_writer_t$66,bin_reader_t$66],
     _LU_=Base_quickcheck_Generator[9],
     _LV_=Base_quickcheck_Observer[10],
     _LW_=Base_quickcheck_Shrinker[10],
     _LX_=Base_quickcheck_Generator[69],
     _LY_=Base_quickcheck_Generator[74],
     _LZ_=Base_quickcheck_Generator[84],
     _L0_=Base_quickcheck_Generator[79];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$229);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Nativeint$0);
    var
     Core_kernel_Nativeint=
      [0,
       t_sexp_grammar$6,
       of_float$5,
       to_float$4,
       of_int_exn$3,
       to_int_exn$3,
       validate_positive$4,
       validate_non_negative$4,
       validate_negative$4,
       validate_non_positive$4,
       is_positive$4,
       is_non_negative$4,
       is_negative$4,
       is_non_positive$4,
       sign$5,
       invariant$9,
       to_string_hum$7,
       zero$5,
       one$3,
       minus_one$3,
       symbol$126,
       symbol$127,
       symbol$128,
       symbol$129,
       neg$5,
       symbol$130,
       symbol$131,
       symbol$132,
       symbol$133,
       rem$3,
       symbol$134,
       land$3,
       lor$3,
       lxor$3,
       lnot$3,
       lsl$3,
       asr$3,
       round$3,
       round_towards_zero$3,
       round_down$3,
       round_up$3,
       round_nearest$3,
       abs$5,
       succ$2,
       pred$2,
       pow$3,
       bit_and$3,
       bit_or$3,
       bit_xor$3,
       bit_not$3,
       popcount$3,
       shift_left$3,
       shift_right$3,
       decr$4,
       incr$4,
       of_int32_exn$3,
       to_int32_exn$3,
       of_int64_exn$3,
       to_int64$3,
       of_nativeint_exn$3,
       to_nativeint_exn$3,
       of_float_unchecked$3,
       num_bits$3,
       max_value$3,
       min_value$3,
       lsr$3,
       shift_right_logical$3,
       ceil_pow2$3,
       floor_pow2$3,
       ceil_log2$3,
       floor_log2$3,
       is_pow2$3,
       clz$3,
       ctz$3,
       of_int$4,
       to_int$3,
       of_int32$3,
       to_int32$3,
       of_nativeint$3,
       to_nativeint$3,
       of_int64$3,
       to_int_trunc$2,
       to_int32_trunc$2,
       of_int64_trunc$2,
       bswap,
       typerep_of_t$18,
       typename_of_t$18,
       [0,
        bin_size_t$59,
        bin_write_t$59,
        bin_read_t$120,
        bin_read_t$121,
        bin_shape_t$73,
        bin_writer_t$66,
        bin_reader_t$66,
        bin_t$66,
        t_of_sexp$51,
        sexp_of_t$60,
        compare$55,
        hash_fold_t$28,
        hash$24,
        typerep_of_t$19,
        typename_of_t$19,
        of_string$12,
        to_string$13,
        to_string_hum$8],
       bin_size_t$59,
       bin_write_t$59,
       bin_read_t$120,
       bin_read_t$121,
       bin_shape_t$72,
       bin_writer_t$65,
       bin_reader_t$65,
       bin_t$65,
       t_of_sexp$50,
       sexp_of_t$59,
       of_string$11,
       to_string$12,
       pp$6,
       symbol$120,
       symbol$121,
       symbol$122,
       symbol$123,
       symbol$124,
       symbol$125,
       equal$26,
       compare$54,
       min$8,
       max$8,
       ascending$8,
       descending$8,
       between$8,
       clamp_exn$8,
       clamp$8,
       validate_lbound$8,
       validate_ubound$8,
       validate_bound$8,
       Replace_polymorphic_compare$7,
       comparator$13,
       Map$11,
       Set$11,
       hash_fold_t$27,
       hash$23,
       hashable$8,
       Table$9,
       Hash_set$9,
       Hash_queue$8,
       _LU_,
       _LV_,
       _LW_,
       _LX_,
       _LY_,
       _L0_,
       _LZ_];
    caml_register_global(5052,Core_kernel_Nativeint,"Core_kernel__Nativeint");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Nothing);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$230);
    caml_call1(Expect_test_collector[4][1],cst_src_nothing_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$231,cst$80);
    var
     _L1_=caml_call1(Bin_prot_Shape[9],0),
     _L2_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$153),0,_L1_],0],
     _L3_=caml_call1(Bin_prot_Shape[4][1],cst_src_nothing_ml_8_6),
     group$74=caml_call2(Bin_prot_Shape[6],_L3_,_L2_),
     _L4_=caml_call1(Bin_prot_Shape[2][1],cst_t$154),
     bin_shape_t$74=caml_call1(caml_call2(Bin_prot_Shape[14],group$74,_L4_),0),
     _L5_=Base_Nothing[2],
     tp_loc$16=caml_call2(_bi_,_L6_[1],cst_Stable_V1_t),
     all$2=0;
    function hash_fold_t$29(param,t){return caml_call1(_L5_,t)}
    function compare$56(a,param){return caml_call1(_L5_,a)}
    function bin_write_t$60(buf,param,t){return caml_call1(_L5_,t)}
    var bin_writer_t$67=[0,_L5_,bin_write_t$60];
    function bin_read_t$122(buf,pos_ref,param)
     {return caml_call2(Bin_prot_Common[19],tp_loc$16,pos_ref[1])}
    function bin_read_t$123(buf,pos_ref)
     {return caml_call2(Bin_prot_Common[18],[6,tp_loc$16],pos_ref[1])}
    var
     bin_reader_t$67=[0,bin_read_t$123,bin_read_t$122],
     bin_t$67=[0,bin_shape_t$74,bin_writer_t$67,bin_reader_t$67];
    function t_of_sexp$52(sexp)
     {return caml_call2(Sexplib_Conv_error[26],tp_loc$16,sexp)}
    var
     _L8_=Base_Nothing[2],
     _L7_=Base_Nothing[1],
     _L9_=
      [0,
       _L5_,
       bin_write_t$60,
       bin_read_t$123,
       bin_read_t$122,
       bin_shape_t$74,
       bin_writer_t$67,
       bin_reader_t$67,
       bin_t$67],
     _L__=
      [0,
       Base_Nothing[3],
       Base_Nothing[4],
       Base_Nothing[5],
       Base_Nothing[6],
       Base_Nothing[7],
       Base_Nothing[8],
       Base_Nothing[9],
       Base_Nothing[10],
       Base_Nothing[11],
       Base_Nothing[12],
       Base_Nothing[13],
       Base_Nothing[14],
       Base_Nothing[15],
       Base_Nothing[16],
       Base_Nothing[17],
       Base_Nothing[18],
       Base_Nothing[19],
       Base_Nothing[20],
       Base_Nothing[21],
       Base_Nothing[22],
       Base_Nothing[23],
       Base_Nothing[24],
       Base_Nothing[25],
       Base_Nothing[26],
       Base_Nothing[27],
       Base_Nothing[28]],
     include$71=function(_bfw_){return _AL_(_L__,_bfw_)}(_L9_),
     sexp_of_never_returns=include$71[10],
     _L$_=include$71[1],
     _Ma_=include$71[2],
     _Mb_=include$71[3],
     _Mc_=include$71[4],
     _Md_=include$71[5],
     _Me_=include$71[6],
     _Mf_=include$71[7],
     _Mg_=include$71[8],
     _Mh_=include$71[9],
     _Mi_=include$71[11],
     _Mj_=include$71[12],
     _Mk_=include$71[13],
     _Ml_=include$71[14],
     _Mm_=include$71[15],
     _Mn_=include$71[16],
     _Mo_=include$71[17],
     _Mp_=include$71[18],
     _Mq_=include$71[19],
     _Mr_=include$71[20],
     _Ms_=include$71[21],
     _Mt_=include$71[22],
     _Mu_=include$71[23],
     _Mv_=include$71[24],
     _Mw_=include$71[25],
     _Mx_=include$71[26],
     _My_=include$71[27],
     _Mz_=include$71[28],
     _MA_=include$71[29],
     _MB_=include$71[30],
     _MC_=include$71[31],
     _MD_=include$71[32],
     _ME_=include$71[33],
     _MF_=include$71[34],
     _MG_=include$71[35],
     _MH_=include$71[36],
     _MI_=include$71[37],
     _MJ_=include$71[38],
     _MK_=include$71[39],
     _ML_=include$71[40],
     _MM_=include$71[41];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$232);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Nothing$0);
    var
     Core_kernel_Nothing=
      [0,
       _L7_,
       _L8_,
       _L$_,
       _Ma_,
       _Mb_,
       _Mc_,
       _Md_,
       _Me_,
       _Mf_,
       _Mg_,
       _Mh_,
       sexp_of_never_returns,
       _Mi_,
       _Mj_,
       _Mk_,
       _Ml_,
       _Mm_,
       _Mn_,
       _Mo_,
       _Mp_,
       _Mq_,
       _Mr_,
       _Ms_,
       _Mt_,
       _Mu_,
       _Mv_,
       _Mw_,
       _Mx_,
       _My_,
       _Mz_,
       _MA_,
       _MB_,
       _MC_,
       _MD_,
       _ME_,
       _MF_,
       _MG_,
       _MH_,
       _MI_,
       _MJ_,
       _MK_,
       _ML_,
       _MM_,
       [0,
        [0,
         _L5_,
         bin_write_t$60,
         bin_read_t$123,
         bin_read_t$122,
         bin_shape_t$74,
         bin_writer_t$67,
         bin_reader_t$67,
         bin_t$67,
         compare$56,
         all$2,
         hash_fold_t$29,
         _L5_,
         t_of_sexp$52,
         _L5_]]];
    caml_register_global(5055,Core_kernel_Nothing,"Core_kernel__Nothing");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Never_returns);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$233);
    caml_call1(Expect_test_collector[4][1],cst_src_never_returns_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$234,cst$81);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$235);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Never_returns$0);
    var Core_kernel_Never_returns=[0,sexp_of_never_returns,_L8_];
    caml_register_global
     (5056,Core_kernel_Never_returns,"Core_kernel__Never_returns");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Ordering);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$236);
    caml_call1(Expect_test_collector[4][1],cst_src_ordering_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$237,cst$82);
    var
     _MO_=caml_call1(Bin_prot_Shape[9],_MN_),
     _MP_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$155),0,_MO_],0],
     _MQ_=caml_call1(Bin_prot_Shape[4][1],cst_src_ordering_ml_3_0),
     group$75=caml_call2(Bin_prot_Shape[6],_MQ_,_MP_),
     _MR_=caml_call1(Bin_prot_Shape[2][1],cst_t$156),
     bin_shape_t$75=caml_call1(caml_call2(Bin_prot_Shape[14],group$75,_MR_),0);
    function bin_size_t$60(param){return 1}
    function bin_write_t$61(buf,pos,param)
     {switch(param)
       {case 0:return caml_call3(Bin_prot_Write[30],buf,pos,0);
        case 1:return caml_call3(Bin_prot_Write[30],buf,pos,1);
        default:return caml_call3(Bin_prot_Write[30],buf,pos,2)}}
    var bin_writer_t$68=[0,bin_size_t$60,bin_write_t$61];
    function bin_read_t$124(buf,pos_ref,vint)
     {return caml_call2(Bin_prot_Common[19],cst_src_ordering_ml_t,pos_ref[1])}
    function bin_read_t$125(buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[29],buf,pos_ref);
      if(2 < match >>> 0)
       return caml_call2(Bin_prot_Common[18],_MS_,pos_ref[1]);
      switch(match){case 0:return 0;case 1:return 1;default:return 2}}
    var
     bin_reader_t$68=[0,bin_read_t$125,bin_read_t$124],
     bin_t$68=[0,bin_shape_t$75,bin_writer_t$68,bin_reader_t$68],
     _MT_=include$72[1],
     _MU_=include$72[2],
     _MV_=include$72[3],
     _MW_=include$72[4],
     _MX_=include$72[5],
     _MY_=include$72[6],
     _MZ_=include$72[7],
     _M0_=include$72[8],
     _M1_=include$72[9],
     _M2_=include$72[10];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$238);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Ordering$0);
    var
     Core_kernel_Ordering=
      [0,
       bin_size_t$60,
       bin_write_t$61,
       bin_read_t$125,
       bin_read_t$124,
       bin_shape_t$75,
       bin_writer_t$68,
       bin_reader_t$68,
       bin_t$68,
       _MT_,
       _MU_,
       _MV_,
       _MW_,
       _MX_,
       _MY_,
       _MZ_,
       _M0_,
       _M1_,
       _M2_];
    caml_register_global(5058,Core_kernel_Ordering,"Core_kernel__Ordering");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Ref);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$239);
    caml_call1(Expect_test_collector[4][1],cst_src_ref_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$240,cst$83);
    var
     _M3_=include$73[1],
     _M4_=include$73[2],
     _M5_=include$73[3],
     _M6_=include$73[4],
     _M7_=include$73[5],
     _M8_=include$73[6],
     _M9_=include$73[7],
     _M__=include$73[8],
     _M$_=include$73[10],
     _Na_=caml_call1(Bin_prot_Shape[3][1],cst_a$57),
     _Nb_=caml_call1(Bin_prot_Shape[4][1],cst_src_ref_ml_8_16),
     _Nc_=caml_call1(_cP_,caml_call2(Bin_prot_Shape[15],_Nb_,_Na_)),
     _Nd_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$58),0],
     _Ne_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$157),_Nd_,_Nc_],0],
     _Nf_=caml_call1(Bin_prot_Shape[4][1],cst_src_ref_ml_8_4),
     group$76=caml_call2(Bin_prot_Shape[6],_Nf_,_Ne_);
    function bin_shape_t$76(a)
     {var _bfv_=caml_call1(Bin_prot_Shape[2][1],cst_t$158);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$76,_bfv_),[0,a,0])}
    function bin_size_t$61(size_of_a,v){return caml_call2(_bA_,size_of_a,v)}
    function bin_write_t$62(write_a,buf,pos,v)
     {return caml_call3(caml_call1(_cR_,write_a),buf,pos,v)}
    function bin_writer_t$69(bin_writer_a)
     {function _bfr_(v)
       {var _bfs_=bin_writer_a[2];
        return function(_bft_,_bfu_)
         {return bin_write_t$62(_bfs_,v,_bft_,_bfu_)}}
      return [0,function(v){return bin_size_t$61(bin_writer_a[1],v)},_bfr_]}
    function bin_read_t$126(of_a,buf,pos_ref,vint)
     {return caml_call3(caml_call1(_cU_,of_a),buf,pos_ref,vint)}
    function bin_read_t$127(of_a,buf,pos_ref)
     {return caml_call2(caml_call1(_cT_,of_a),buf,pos_ref)}
    function bin_reader_t$69(bin_reader_a)
     {function _bfq_(buf,pos_ref,vtag)
       {return bin_read_t$126(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$127(bin_reader_a[1],buf,pos_ref)},
              _bfq_]}
    function bin_t$69(bin_a)
     {var _bfo_=bin_reader_t$69(bin_a[3]),_bfp_=bin_writer_t$69(bin_a[2]);
      return [0,bin_shape_t$76(bin_a[1]),_bfp_,_bfo_]}
    var
     Typename_of_t$20=caml_call1(Typerep_lib_Make_typename[2],[0,name$29]),
     typename_of_t$20=Typename_of_t$20[2];
    function typerep_of_t$20(of_a)
     {var name_of_t=caml_call1(Typename_of_t$20[1],of_a);
      return [9,
              [0,
               name_of_t,
               [0,[246,function(_bfn_){return caml_call1(_e3_,of_a)}]]]]}
    var
     _Ng_=caml_call1(Bin_prot_Shape[3][1],cst_a$59),
     _Nh_=caml_call1(Bin_prot_Shape[4][1],cst_src_ref_ml_21_25),
     _Ni_=bin_shape_t$76(caml_call2(Bin_prot_Shape[15],_Nh_,_Ng_)),
     _Nj_=[0,caml_call1(Bin_prot_Shape[3][1],cst_perms$4),0],
     _Nk_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$60),_Nj_],
     _Nl_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$159),_Nk_,_Ni_],0],
     _Nm_=caml_call1(Bin_prot_Shape[4][1],cst_src_ref_ml_21_2),
     group$77=caml_call2(Bin_prot_Shape[6],_Nm_,_Nl_);
    function bin_shape_t$77(a,perms)
     {var _bfm_=caml_call1(Bin_prot_Shape[2][1],cst_t$160);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$77,_bfm_),
               [0,a,[0,perms,0]])}
    function bin_size_t$62(size_of_a,size_of_perms,v)
     {return bin_size_t$61(size_of_a,v)}
    function bin_write_t$63(write_a,write_perms,buf,pos,v)
     {return bin_write_t$62(write_a,buf,pos,v)}
    function bin_writer_t$70(bin_writer_a,bin_writer_perms)
     {function _bfh_(v)
       {var _bfi_=bin_writer_perms[2],_bfj_=bin_writer_a[2];
        return function(_bfk_,_bfl_)
         {return bin_write_t$63(_bfj_,_bfi_,v,_bfk_,_bfl_)}}
      return [0,
              function(v)
               {return bin_size_t$62(bin_writer_a[1],bin_writer_perms[1],v)},
              _bfh_]}
    function bin_read_t$128(of_a,of_perms,buf,pos_ref,vint)
     {return bin_read_t$126(of_a,buf,pos_ref,vint)}
    function bin_read_t$129(of_a,of_perms,buf,pos_ref)
     {return bin_read_t$127(of_a,buf,pos_ref)}
    function bin_reader_t$70(bin_reader_a,bin_reader_perms)
     {function _bfg_(buf,pos_ref,vtag)
       {return bin_read_t$128
                (bin_reader_a[1],bin_reader_perms[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$129
                        (bin_reader_a[1],bin_reader_perms[1],buf,pos_ref)},
              _bfg_]}
    function bin_t$70(bin_a,bin_perms)
     {var
       _bfe_=bin_reader_t$70(bin_a[3],bin_perms[3]),
       _bff_=bin_writer_t$70(bin_a[2],bin_perms[2]);
      return [0,bin_shape_t$77(bin_a[1],bin_perms[1]),_bff_,_bfe_]}
    function t_of_sexp$53(of_a,of_perms,t){return caml_call2(_M5_,of_a,t)}
    function sexp_of_t$61(of_a,of_perms,v){return caml_call2(_M6_,of_a,v)}
    function read_only(_bfd_){return _bfd_}
    function of_ref(_bfc_){return _bfc_}
    function to_ref(_bfb_){return _bfb_}
    function set$7(_bfa_,_be$_){_bfa_[1] = _be$_;return 0}
    function get$2(_be__){return _be__[1]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$241);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Ref$0);
    function _Nn_(_be9_,_be8_){_be9_[1] = _be8_;return 0}
    function _No_(_be7_){return _be7_[1]}
    var
     Core_kernel_Ref=
      [0,
       bin_shape_t$76,
       bin_size_t$61,
       bin_write_t$62,
       bin_read_t$127,
       bin_read_t$126,
       bin_writer_t$69,
       bin_reader_t$69,
       bin_t$69,
       typerep_of_t$20,
       typename_of_t$20,
       _M3_,
       _M4_,
       _M5_,
       _M6_,
       _M7_,
       _M8_,
       _M9_,
       _M__,
       _M$_,
       [0,
        t_of_sexp$53,
        sexp_of_t$61,
        bin_shape_t$77,
        bin_size_t$62,
        bin_write_t$63,
        bin_read_t$129,
        bin_read_t$128,
        bin_writer_t$70,
        bin_reader_t$70,
        bin_t$70,
        function(_be6_){return [0,_be6_]},
        read_only,
        _No_,
        get$2,
        set$7,
        _Nn_,
        of_ref,
        to_ref,
        _M8_,
        _M9_,
        _M__]];
    caml_register_global(5060,Core_kernel_Ref,"Core_kernel__Ref");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Std_internal);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$242);
    caml_call1(Expect_test_collector[4][1],cst_src_std_internal_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$243,cst$84);
    var
     _Np_=Replace_polymorphic_compare$3[1],
     _Nq_=Replace_polymorphic_compare$3[2],
     _Nr_=Replace_polymorphic_compare$3[3],
     _Ns_=Replace_polymorphic_compare$3[4],
     _Nt_=Replace_polymorphic_compare$3[5],
     _Nu_=Replace_polymorphic_compare$3[6],
     _Nv_=Replace_polymorphic_compare$3[7],
     _Nw_=Replace_polymorphic_compare$3[8],
     _Nx_=Replace_polymorphic_compare$3[9],
     _Ny_=Replace_polymorphic_compare$3[10],
     _Nz_=Base_quickcheck_Export[1],
     _NA_=Base_quickcheck_Export[2],
     _NB_=Base_quickcheck_Export[3],
     _NC_=Base_quickcheck_Export[4],
     _ND_=Base_quickcheck_Export[5],
     _NE_=Base_quickcheck_Export[6],
     _NF_=Base_quickcheck_Export[7],
     _NG_=Base_quickcheck_Export[8],
     _NH_=Base_quickcheck_Export[9],
     _NI_=Base_quickcheck_Export[10],
     _NJ_=Base_quickcheck_Export[11],
     _NK_=Base_quickcheck_Export[12],
     _NL_=Base_quickcheck_Export[13],
     _NM_=Base_quickcheck_Export[14],
     _NN_=Base_quickcheck_Export[15],
     _NO_=Base_quickcheck_Export[16],
     _NP_=Base_quickcheck_Export[17],
     quickcheck_observer$8=Base_quickcheck_Export[18],
     _NQ_=Base_quickcheck_Export[19],
     _NR_=Base_quickcheck_Export[20],
     _NS_=Base_quickcheck_Export[21],
     _NT_=Base_quickcheck_Export[22],
     _NU_=Base_quickcheck_Export[23],
     _NV_=Base_quickcheck_Export[24],
     _NW_=Base_quickcheck_Export[25],
     _NX_=Base_quickcheck_Export[26],
     quickcheck_shrinker$8=Base_quickcheck_Export[27],
     _NY_=Base_quickcheck_Export[28],
     _NZ_=Base_quickcheck_Export[29],
     _N0_=Base_quickcheck_Export[30],
     _N1_=Base_quickcheck_Export[31],
     _N2_=Base_quickcheck_Export[32],
     _N3_=Base_quickcheck_Export[33],
     _N4_=include[1],
     _N5_=include[2],
     _N6_=include[3],
     _N7_=include[4],
     _N8_=include[5],
     _N9_=include[6],
     _N__=include[7],
     _N$_=include[8],
     _Oa_=include[9],
     _Ob_=include[10],
     _Oc_=include[11],
     _Od_=include[12],
     _Oe_=include[13],
     _Of_=include$23[144][1],
     _Og_=_hb_[1],
     _Oh_=_hb_[2],
     _Oi_=_hb_[3],
     _Oj_=_hb_[4],
     _Ok_=_hb_[5],
     _Ol_=_hb_[6],
     _Om_=_hb_[7],
     _On_=_hb_[8],
     _Oo_=_hb_[9],
     _Op_=_hb_[10],
     _Oq_=_hb_[11],
     _Or_=_hb_[12],
     _Os_=_hb_[13],
     _Ot_=_hb_[14],
     _Ou_=_hb_[15],
     _Ov_=_hb_[16],
     _Ow_=_hb_[17],
     _Ox_=_hb_[18],
     _Oy_=_hb_[19],
     _Oz_=_hb_[20],
     _OA_=_hb_[21],
     _OB_=_hb_[22],
     _OC_=_hb_[23],
     _OD_=_hb_[24],
     _OE_=_hb_[25],
     _OF_=_hb_[26],
     _OG_=_hb_[27],
     _OH_=_hb_[28],
     _OI_=_hb_[29],
     _OJ_=_hb_[30],
     _OK_=_hb_[31],
     _OL_=_hb_[32],
     _OM_=_hb_[33],
     _ON_=_hb_[34],
     _OO_=_hb_[35],
     _OP_=_hb_[36],
     _OQ_=_hb_[37],
     _OR_=_hb_[38],
     _OS_=_hb_[39],
     _OT_=_hb_[40],
     _OU_=_hb_[41],
     _OV_=_hb_[42],
     _OW_=_hb_[43],
     _OX_=_hb_[44],
     _OY_=_hb_[45],
     _OZ_=_hb_[46],
     _O0_=_hb_[47],
     _O1_=_hb_[48],
     _O2_=_hb_[49],
     _O3_=_hb_[50],
     _O4_=_hb_[51],
     _O5_=_hb_[52],
     _O6_=_hb_[53],
     _O7_=_hb_[54],
     _O8_=_hb_[55],
     _O9_=_hb_[56],
     _O__=_h7_[1],
     _O$_=_h7_[2],
     Bug=[248,cst_Bug,caml_fresh_oo_id(0)];
    function _Pa_(param)
     {if(param[1] === Bug)
       {var v0=param[2],v0$0=caml_call1(_au_,v0);
        return [1,[0,_Pb_,[0,v0$0,0]]]}
      throw [0,Assert_failure,_Pc_]}
    caml_call3(Sexplib0_Sexp_conv[51][2],0,Bug,_Pa_);
    var C_malloc_exn=[248,cst_Core_kernel_Std_internal_C,caml_fresh_oo_id(0)];
    caml_call2(Stdlib_callback[2],cst_C_malloc_exn,[0,C_malloc_exn,0,0]);
    var _Pd_=Base_Exn[3];
    function fst3(param){var x=param[1];return x}
    function snd3(param){var y=param[2];return y}
    function trd3(param){var z=param[3];return z}
    function uw(param){if(param){var x=param[1];return x}throw include$0[103]}
    function phys_same(a,b){return caml_call2(_bo_,a,b)}
    function symbol$135(a,b){var _be4_=1 - a,_be5_=_be4_ || b;return _be5_}
    var _Pe_=include$4[6];
    function force(_be2_)
     {var _be3_=caml_obj_tag(_be2_);
      return 250 === _be3_
              ?_be2_[1]
              :246 === _be3_?caml_call1(CamlinternalLazy[2],_be2_):_be2_}
    function ident(_be1_){return _be1_}
    var
     _Pf_=include$4[7],
     _Pg_=Base[223],
     _Ph_=Stdio[5],
     _Pi_=Stdio[6],
     _Pj_=Base_Exn[12],
     _Pk_=Base_Exn[11],
     _Pl_=Base[215],
     _Pm_=Base_Staged[1],
     _Pn_=Base_Staged[2],
     _Po_=Base_With_return[1],
     _Pp_=Base_With_return[2],
     _Pq_=include$74[1],
     _Pr_=include$74[6],
     _Ps_=include$74[13],
     _Pt_=include$74[19],
     _Pu_=include$74[20],
     _Pv_=include$74[21],
     _Pw_=include$74[22],
     _Px_=include$74[23],
     _Py_=include$74[24],
     _Pz_=include$74[29],
     _PA_=include$74[41],
     _PB_=include$74[42],
     _PC_=include$74[43],
     _PD_=include$74[44],
     _PE_=include$74[45],
     _PF_=include$74[46],
     _PG_=caml_call1(Bin_prot_Shape[3][1],cst_a$61),
     _PH_=caml_call1(Bin_prot_Shape[4][1],cst_src_std_internal_ml_107_18),
     _PI_=bin_shape_t$12(caml_call2(Bin_prot_Shape[15],_PH_,_PG_)),
     _PJ_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$62),0],
     _PK_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_array),_PJ_,_PI_],0],
     _PL_=caml_call1(Bin_prot_Shape[4][1],cst_src_std_internal_ml_107_2),
     group$78=caml_call2(Bin_prot_Shape[6],_PL_,_PK_);
    function bin_shape_array(a)
     {var _be0_=caml_call1(Bin_prot_Shape[2][1],cst_array$0);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$78,_be0_),[0,a,0])}
    function bin_size_array(size_of_a,v){return bin_size_t$21(size_of_a,v)}
    function bin_write_array(write_a,buf,pos,v)
     {return bin_write_t$21(write_a,buf,pos,v)}
    function bin_writer_array(bin_writer_a)
     {function _beW_(v)
       {var _beX_=bin_writer_a[2];
        return function(_beY_,_beZ_)
         {return bin_write_array(_beX_,v,_beY_,_beZ_)}}
      return [0,function(v){return bin_size_array(bin_writer_a[1],v)},_beW_]}
    function bin_read_array(of_a,buf,pos_ref,vint)
     {return bin_read_t$45(of_a,buf,pos_ref,vint)}
    function bin_read_array$0(of_a,buf,pos_ref)
     {return bin_read_t$46(of_a,buf,pos_ref)}
    function bin_reader_array(bin_reader_a)
     {function _beV_(buf,pos_ref,vtag)
       {return bin_read_array(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_array$0(bin_reader_a[1],buf,pos_ref)},
              _beV_]}
    function bin_array(bin_a)
     {var _beT_=bin_reader_array(bin_a[3]),_beU_=bin_writer_array(bin_a[2]);
      return [0,bin_shape_array(bin_a[1]),_beU_,_beT_]}
    function compare_array(cmp_a,a_001,b_002)
     {return caml_call3
              (_k3_,
               function(a_003,b_004){return caml_call2(cmp_a,a_003,b_004)},
               a_001,
               b_002)}
    function equal_array(cmp_a,a_005,b_006)
     {return caml_call3
              (equal$0,
               function(a_007,b_008){return caml_call2(cmp_a,a_007,b_008)},
               a_005,
               b_006)}
    var
     the_group=
      [0,
       caml_call1(Sexplib0_Lazy_group_id[2],0),
       the_generic_group,
       cst_src_std_internal_ml$0,
       [0,_k2_,0]],
     array_sexp_grammar=[0,cst_array$1,the_group],
     Typename_of_array=caml_call1(Typerep_lib_Make_typename[2],[0,name$30]),
     typename_of_array=Typename_of_array[2];
    function typerep_of_array(of_a)
     {var name_of_array=caml_call1(Typename_of_array[1],of_a);
      return [9,
              [0,
               name_of_array,
               [0,[246,function(_beS_){return typerep_of_t(of_a)}]]]]}
    var
     _PM_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_bool),0,_AZ_],0],
     _PN_=caml_call1(Bin_prot_Shape[4][1],cst_src_std_internal_ml_110_2),
     group$79=caml_call2(Bin_prot_Shape[6],_PN_,_PM_),
     _PO_=caml_call1(Bin_prot_Shape[2][1],cst_bool$0),
     bin_shape_bool=caml_call1(caml_call2(Bin_prot_Shape[14],group$79,_PO_),0),
     bin_writer_bool=[0,bin_size_t$47,bin_write_t$47],
     bin_reader_bool=[0,bin_read_t$96,bin_read_t$97],
     bin_bool=[0,bin_shape_bool,bin_writer_bool,bin_reader_bool];
    function hash_bool(x){return caml_call1(_Bu_,x)}
    var
     the_group$0=
      [0,
       caml_call1(Sexplib0_Lazy_group_id[2],0),
       the_generic_group$0,
       cst_src_std_internal_ml$1,
       [0,_Bw_,0]],
     bool_sexp_grammar=[0,cst_bool$1,the_group$0],
     Typename_of_bool=caml_call1(Typerep_lib_Make_typename[1],[0,name$31]),
     typename_of_bool=Typename_of_bool[2],
     name_of_bool=Typename_of_bool[1],
     typerep_of_bool=[9,[0,name_of_bool,[0,typerep_of_t$3]]],
     _PP_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_char),0,_EZ_],0],
     _PQ_=caml_call1(Bin_prot_Shape[4][1],cst_src_std_internal_ml_113_2),
     group$80=caml_call2(Bin_prot_Shape[6],_PQ_,_PP_),
     _PR_=caml_call1(Bin_prot_Shape[2][1],cst_char$0),
     bin_shape_char=caml_call1(caml_call2(Bin_prot_Shape[14],group$80,_PR_),0),
     bin_writer_char=[0,_EV_,_EW_],
     bin_reader_char=[0,_EX_,_EY_],
     bin_char=[0,bin_shape_char,bin_writer_char,bin_reader_char];
    function hash_char(x){return caml_call1(_FO_,x)}
    var
     the_group$1=
      [0,
       caml_call1(Sexplib0_Lazy_group_id[2],0),
       the_generic_group$1,
       cst_src_std_internal_ml$2,
       [0,_FQ_,0]],
     char_sexp_grammar=[0,cst_char$1,the_group$1],
     Typename_of_char=caml_call1(Typerep_lib_Make_typename[1],[0,name$32]),
     typename_of_char=Typename_of_char[2],
     name_of_char=Typename_of_char[1],
     typerep_of_char=[9,[0,name_of_char,[0,typerep_of_t$6]]],
     _PS_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_float),0,bin_shape_t$51],0],
     _PT_=caml_call1(Bin_prot_Shape[4][1],cst_src_std_internal_ml_116_2),
     group$81=caml_call2(Bin_prot_Shape[6],_PT_,_PS_),
     _PU_=caml_call1(Bin_prot_Shape[2][1],cst_float$0),
     bin_shape_float=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$81,_PU_),0),
     bin_writer_float=[0,bin_size_t$5,bin_write_t$5],
     bin_reader_float=[0,bin_read_t$11,bin_read_t$12],
     bin_float=[0,bin_shape_float,bin_writer_float,bin_reader_float];
    function hash_float(x){return caml_call1(hash$14,x)}
    var
     the_group$2=
      [0,
       caml_call1(Sexplib0_Lazy_group_id[2],0),
       the_generic_group$2,
       cst_src_std_internal_ml$3,
       [0,_It_,0]],
     float_sexp_grammar=[0,cst_float$1,the_group$2],
     Typename_of_float=caml_call1(Typerep_lib_Make_typename[1],[0,name$33]),
     typename_of_float=Typename_of_float[2],
     name_of_float=Typename_of_float[1],
     typerep_of_float=[9,[0,name_of_float,[0,typerep_of_t$8]]],
     _PV_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_int),0,bin_shape_t$55],0],
     _PW_=caml_call1(Bin_prot_Shape[4][1],cst_src_std_internal_ml_119_2),
     group$82=caml_call2(Bin_prot_Shape[6],_PW_,_PV_),
     _PX_=caml_call1(Bin_prot_Shape[2][1],cst_int$0),
     bin_shape_int=caml_call1(caml_call2(Bin_prot_Shape[14],group$82,_PX_),0),
     bin_writer_int=[0,bin_size_t$50,bin_write_t$50],
     bin_reader_int=[0,bin_read_t$102,bin_read_t$103],
     bin_int=[0,bin_shape_int,bin_writer_int,bin_reader_int];
    function hash_int(x){return caml_call1(hash$15,x)}
    var
     the_group$3=
      [0,
       caml_call1(Sexplib0_Lazy_group_id[2],0),
       the_generic_group$3,
       cst_src_std_internal_ml$4,
       [0,t_sexp_grammar$0,0]],
     int_sexp_grammar=[0,cst_int$1,the_group$3],
     Typename_of_int=caml_call1(Typerep_lib_Make_typename[1],[0,name$34]),
     typename_of_int=Typename_of_int[2],
     name_of_int=Typename_of_int[1],
     typerep_of_int=[9,[0,name_of_int,[0,typerep_of_t$9]]],
     _PY_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_int32),0,bin_shape_t$58],0],
     _PZ_=caml_call1(Bin_prot_Shape[4][1],cst_src_std_internal_ml_122_2),
     group$83=caml_call2(Bin_prot_Shape[6],_PZ_,_PY_),
     _P0_=caml_call1(Bin_prot_Shape[2][1],cst_int32$0),
     bin_shape_int32=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$83,_P0_),0),
     bin_writer_int32=[0,bin_size_t$51,bin_write_t$51],
     bin_reader_int32=[0,bin_read_t$104,bin_read_t$105],
     bin_int32=[0,bin_shape_int32,bin_writer_int32,bin_reader_int32];
    function hash_int32(x){return caml_call1(hash$17,x)}
    var
     the_group$4=
      [0,
       caml_call1(Sexplib0_Lazy_group_id[2],0),
       the_generic_group$4,
       cst_src_std_internal_ml$5,
       [0,t_sexp_grammar$1,0]],
     int32_sexp_grammar=[0,cst_int32$1,the_group$4],
     Typename_of_int32=caml_call1(Typerep_lib_Make_typename[1],[0,name$35]),
     typename_of_int32=Typename_of_int32[2],
     name_of_int32=Typename_of_int32[1],
     typerep_of_int32=[9,[0,name_of_int32,[0,typerep_of_t$11]]],
     _P1_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_int64),0,bin_shape_t$61],0],
     _P2_=caml_call1(Bin_prot_Shape[4][1],cst_src_std_internal_ml_125_2),
     group$84=caml_call2(Bin_prot_Shape[6],_P2_,_P1_),
     _P3_=caml_call1(Bin_prot_Shape[2][1],cst_int64$0),
     bin_shape_int64=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$84,_P3_),0),
     bin_writer_int64=[0,bin_size_t$52,bin_write_t$52],
     bin_reader_int64=[0,bin_read_t$106,bin_read_t$107],
     bin_int64=[0,bin_shape_int64,bin_writer_int64,bin_reader_int64];
    function hash_int64(x){return caml_call1(hash$19,x)}
    var
     the_group$5=
      [0,
       caml_call1(Sexplib0_Lazy_group_id[2],0),
       the_generic_group$5,
       cst_src_std_internal_ml$6,
       [0,t_sexp_grammar$2,0]],
     int64_sexp_grammar=[0,cst_int64$1,the_group$5],
     Typename_of_int64=caml_call1(Typerep_lib_Make_typename[1],[0,name$36]),
     typename_of_int64=Typename_of_int64[2],
     name_of_int64=Typename_of_int64[1],
     typerep_of_int64=[9,[0,name_of_int64,[0,typerep_of_t$13]]],
     _P4_=caml_call1(Bin_prot_Shape[3][1],cst_a$63),
     _P5_=caml_call1(Bin_prot_Shape[4][1],cst_src_std_internal_ml_128_19),
     _P6_=bin_shape_t$70(caml_call2(Bin_prot_Shape[15],_P5_,_P4_)),
     _P7_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$64),0],
     _P8_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_lazy_t),_P7_,_P6_],0],
     _P9_=caml_call1(Bin_prot_Shape[4][1],cst_src_std_internal_ml_128_2),
     group$85=caml_call2(Bin_prot_Shape[6],_P9_,_P8_);
    function bin_shape_lazy_t(a)
     {var _beR_=caml_call1(Bin_prot_Shape[2][1],cst_lazy_t$0);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$85,_beR_),[0,a,0])}
    function bin_size_lazy_t(size_of_a,v){return bin_size_t$58(size_of_a,v)}
    function bin_write_lazy_t(write_a,buf,pos,v)
     {return bin_write_t$58(write_a,buf,pos,v)}
    function bin_writer_lazy_t(bin_writer_a)
     {function _beN_(v)
       {var _beO_=bin_writer_a[2];
        return function(_beP_,_beQ_)
         {return bin_write_lazy_t(_beO_,v,_beP_,_beQ_)}}
      return [0,function(v){return bin_size_lazy_t(bin_writer_a[1],v)},_beN_]}
    function bin_read_lazy_t(of_a,buf,pos_ref,vint)
     {return bin_read_t$118(of_a,buf,pos_ref,vint)}
    function bin_read_lazy_t$0(of_a,buf,pos_ref)
     {return bin_read_t$119(of_a,buf,pos_ref)}
    function bin_reader_lazy_t(bin_reader_a)
     {function _beM_(buf,pos_ref,vtag)
       {return bin_read_lazy_t(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_lazy_t$0(bin_reader_a[1],buf,pos_ref)},
              _beM_]}
    function bin_lazy_t(bin_a)
     {var _beK_=bin_reader_lazy_t(bin_a[3]),_beL_=bin_writer_lazy_t(bin_a[2]);
      return [0,bin_shape_lazy_t(bin_a[1]),_beL_,_beK_]}
    function compare_lazy_t(cmp_a,a_033,b_034)
     {return caml_call3
              (_Lp_,
               function(a_035,b_036){return caml_call2(cmp_a,a_035,b_036)},
               a_033,
               b_034)}
    var
     the_group$6=
      [0,
       caml_call1(Sexplib0_Lazy_group_id[2],0),
       the_generic_group$6,
       cst_src_std_internal_ml$7,
       [0,t_sexp_grammar$5,0]],
     lazy_t_sexp_grammar=[0,cst_lazy_t$1,the_group$6],
     Typename_of_lazy_t=caml_call1(Typerep_lib_Make_typename[2],[0,name$37]),
     typename_of_lazy_t=Typename_of_lazy_t[2];
    function typerep_of_lazy_t(of_a)
     {var name_of_lazy_t=caml_call1(Typename_of_lazy_t[1],of_a);
      return [9,
              [0,
               name_of_lazy_t,
               [0,[246,function(_beJ_){return typerep_of_t$17(of_a)}]]]]}
    var
     _P__=caml_call1(Bin_prot_Shape[3][1],cst_a$65),
     _P$_=caml_call1(Bin_prot_Shape[4][1],cst_src_std_internal_ml_131_17),
     _Qa_=bin_shape_t$24(caml_call2(Bin_prot_Shape[15],_P$_,_P__)),
     _Qb_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$66),0],
     _Qc_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_list),_Qb_,_Qa_],0],
     _Qd_=caml_call1(Bin_prot_Shape[4][1],cst_src_std_internal_ml_131_2),
     group$86=caml_call2(Bin_prot_Shape[6],_Qd_,_Qc_);
    function bin_shape_list(a)
     {var _beI_=caml_call1(Bin_prot_Shape[2][1],cst_list$0);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$86,_beI_),[0,a,0])}
    function bin_size_list(size_of_a,v){return bin_size_t$31(size_of_a,v)}
    function bin_write_list(write_a,buf,pos,v)
     {return bin_write_t$31(write_a,buf,pos,v)}
    function bin_writer_list(bin_writer_a)
     {function _beE_(v)
       {var _beF_=bin_writer_a[2];
        return function(_beG_,_beH_)
         {return bin_write_list(_beF_,v,_beG_,_beH_)}}
      return [0,function(v){return bin_size_list(bin_writer_a[1],v)},_beE_]}
    function bin_read_list(of_a,buf,pos_ref,vint)
     {return bin_read_t$64(of_a,buf,pos_ref,vint)}
    function bin_read_list$0(of_a,buf,pos_ref)
     {return bin_read_t$65(of_a,buf,pos_ref)}
    function bin_reader_list(bin_reader_a)
     {function _beD_(buf,pos_ref,vtag)
       {return bin_read_list(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_list$0(bin_reader_a[1],buf,pos_ref)},
              _beD_]}
    function bin_list(bin_a)
     {var _beB_=bin_reader_list(bin_a[3]),_beC_=bin_writer_list(bin_a[2]);
      return [0,bin_shape_list(bin_a[1]),_beC_,_beB_]}
    function compare_list(cmp_a,a_037,b_038)
     {return caml_call3
              (_o6_,
               function(a_039,b_040){return caml_call2(cmp_a,a_039,b_040)},
               a_037,
               b_038)}
    function equal_list(cmp_a,a_041,b_042)
     {return caml_call3
              (_rc_,
               function(a_043,b_044){return caml_call2(cmp_a,a_043,b_044)},
               a_041,
               b_042)}
    var
     the_group$7=
      [0,
       caml_call1(Sexplib0_Lazy_group_id[2],0),
       the_generic_group$7,
       cst_src_std_internal_ml$8,
       [0,_o7_,0]],
     list_sexp_grammar=[0,cst_list$1,the_group$7],
     Typename_of_list=caml_call1(Typerep_lib_Make_typename[2],[0,name$38]),
     typename_of_list=Typename_of_list[2];
    function typerep_of_list(of_a)
     {var name_of_list=caml_call1(Typename_of_list[1],of_a);
      return [9,
              [0,
               name_of_list,
               [0,[246,function(_beA_){return typerep_of_t$1(of_a)}]]]]}
    var
     _Qe_=
      [0,
       [0,caml_call1(Bin_prot_Shape[2][1],cst_nativeint),0,bin_shape_t$72],
       0],
     _Qf_=caml_call1(Bin_prot_Shape[4][1],cst_src_std_internal_ml_134_2),
     group$87=caml_call2(Bin_prot_Shape[6],_Qf_,_Qe_),
     _Qg_=caml_call1(Bin_prot_Shape[2][1],cst_nativeint$0),
     bin_shape_nativeint=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$87,_Qg_),0),
     bin_writer_nativeint=[0,bin_size_t$59,bin_write_t$59],
     bin_reader_nativeint=[0,bin_read_t$120,bin_read_t$121],
     bin_nativeint=
      [0,bin_shape_nativeint,bin_writer_nativeint,bin_reader_nativeint];
    function hash_nativeint(x){return caml_call1(hash$23,x)}
    var
     the_group$8=
      [0,
       caml_call1(Sexplib0_Lazy_group_id[2],0),
       the_generic_group$8,
       cst_src_std_internal_ml$9,
       [0,t_sexp_grammar$6,0]],
     nativeint_sexp_grammar=[0,cst_nativeint$1,the_group$8],
     Typename_of_nativeint=
      caml_call1(Typerep_lib_Make_typename[1],[0,name$39]),
     typename_of_nativeint=Typename_of_nativeint[2],
     name_of_nativeint=Typename_of_nativeint[1],
     typerep_of_nativeint=[9,[0,name_of_nativeint,[0,typerep_of_t$18]]],
     _Qh_=caml_call1(Bin_prot_Shape[3][1],cst_a$67),
     _Qi_=caml_call1(Bin_prot_Shape[4][1],cst_src_std_internal_ml_137_19),
     _Qj_=bin_shape_t$35(caml_call2(Bin_prot_Shape[15],_Qi_,_Qh_)),
     _Qk_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$68),0],
     _Ql_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_option),_Qk_,_Qj_],0],
     _Qm_=caml_call1(Bin_prot_Shape[4][1],cst_src_std_internal_ml_137_2),
     group$88=caml_call2(Bin_prot_Shape[6],_Qm_,_Ql_);
    function bin_shape_option(a)
     {var _bez_=caml_call1(Bin_prot_Shape[2][1],cst_option$0);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$88,_bez_),[0,a,0])}
    function bin_size_option(size_of_a,v){return bin_size_t$42(size_of_a,v)}
    function bin_write_option(write_a,buf,pos,v)
     {return bin_write_t$42(write_a,buf,pos,v)}
    function bin_writer_option(bin_writer_a)
     {function _bev_(v)
       {var _bew_=bin_writer_a[2];
        return function(_bex_,_bey_)
         {return bin_write_option(_bew_,v,_bex_,_bey_)}}
      return [0,function(v){return bin_size_option(bin_writer_a[1],v)},_bev_]}
    function bin_read_option(of_a,buf,pos_ref,vint)
     {return bin_read_t$86(of_a,buf,pos_ref,vint)}
    function bin_read_option$0(of_a,buf,pos_ref)
     {return bin_read_t$87(of_a,buf,pos_ref)}
    function bin_reader_option(bin_reader_a)
     {function _beu_(buf,pos_ref,vtag)
       {return bin_read_option(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_option$0(bin_reader_a[1],buf,pos_ref)},
              _beu_]}
    function bin_option(bin_a)
     {var _bes_=bin_reader_option(bin_a[3]),_bet_=bin_writer_option(bin_a[2]);
      return [0,bin_shape_option(bin_a[1]),_bet_,_bes_]}
    function compare_option(cmp_a,a_049,b_050)
     {return caml_call3
              (_xx_,
               function(a_051,b_052){return caml_call2(cmp_a,a_051,b_052)},
               a_049,
               b_050)}
    function equal_option(cmp_a,a_053,b_054)
     {return caml_call3
              (_xQ_,
               function(a_055,b_056){return caml_call2(cmp_a,a_055,b_056)},
               a_053,
               b_054)}
    var
     the_group$9=
      [0,
       caml_call1(Sexplib0_Lazy_group_id[2],0),
       the_generic_group$9,
       cst_src_std_internal_ml$10,
       [0,_xy_,0]],
     option_sexp_grammar=[0,cst_option$1,the_group$9],
     Typename_of_option=caml_call1(Typerep_lib_Make_typename[2],[0,name$40]),
     typename_of_option=Typename_of_option[2];
    function typerep_of_option(of_a)
     {var name_of_option=caml_call1(Typename_of_option[1],of_a);
      return [9,
              [0,
               name_of_option,
               [0,[246,function(_ber_){return typerep_of_t$2(of_a)}]]]]}
    var
     _Qn_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_string),0,bin_shape_t$46],0],
     _Qo_=caml_call1(Bin_prot_Shape[4][1],cst_src_std_internal_ml_140_2),
     group$89=caml_call2(Bin_prot_Shape[6],_Qo_,_Qn_),
     _Qp_=caml_call1(Bin_prot_Shape[2][1],cst_string$0),
     bin_shape_string=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$89,_Qp_),0),
     bin_writer_string=[0,bin_size_t$48,bin_write_t$48],
     bin_reader_string=[0,bin_read_t$98,bin_read_t$99],
     bin_string=[0,bin_shape_string,bin_writer_string,bin_reader_string];
    function hash_string(x){return caml_call1(hash$11,x)}
    var
     the_group$10=
      [0,
       caml_call1(Sexplib0_Lazy_group_id[2],0),
       the_generic_group$10,
       cst_src_std_internal_ml$11,
       [0,_BQ_,0]],
     string_sexp_grammar=[0,cst_string$1,the_group$10],
     Typename_of_string=caml_call1(Typerep_lib_Make_typename[1],[0,name$41]),
     typename_of_string=Typename_of_string[2],
     name_of_string=Typename_of_string[1],
     typerep_of_string=[9,[0,name_of_string,[0,typerep_of_t$4]]],
     _Qq_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_bytes),0,bin_shape_t$47],0],
     _Qr_=caml_call1(Bin_prot_Shape[4][1],cst_src_std_internal_ml_143_2),
     group$90=caml_call2(Bin_prot_Shape[6],_Qr_,_Qq_),
     _Qs_=caml_call1(Bin_prot_Shape[2][1],cst_bytes$0),
     bin_shape_bytes=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$90,_Qs_),0),
     bin_writer_bytes=[0,bin_size_t$2,bin_write_t$2],
     bin_reader_bytes=[0,bin_read_t$5,bin_read_t$6],
     bin_bytes=[0,bin_shape_bytes,bin_writer_bytes,bin_reader_bytes],
     the_group$11=
      [0,
       caml_call1(Sexplib0_Lazy_group_id[2],0),
       the_generic_group$11,
       cst_src_std_internal_ml$12,
       [0,_DZ_,0]],
     bytes_sexp_grammar=[0,cst_bytes$1,the_group$11],
     Typename_of_bytes=caml_call1(Typerep_lib_Make_typename[1],[0,name$42]),
     typename_of_bytes=Typename_of_bytes[2],
     name_of_bytes=Typename_of_bytes[1],
     typerep_of_bytes=[9,[0,name_of_bytes,[0,typerep_of_t$5]]],
     _Qt_=caml_call1(Bin_prot_Shape[3][1],cst_a$69),
     _Qu_=caml_call1(Bin_prot_Shape[4][1],cst_src_std_internal_ml_145_16),
     _Qv_=bin_shape_t$76(caml_call2(Bin_prot_Shape[15],_Qu_,_Qt_)),
     _Qw_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$70),0],
     _Qx_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_ref),_Qw_,_Qv_],0],
     _Qy_=caml_call1(Bin_prot_Shape[4][1],cst_src_std_internal_ml_145_2),
     group$91=caml_call2(Bin_prot_Shape[6],_Qy_,_Qx_);
    function bin_shape_ref(a)
     {var _beq_=caml_call1(Bin_prot_Shape[2][1],cst_ref$0);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$91,_beq_),[0,a,0])}
    function bin_size_ref(size_of_a,v){return bin_size_t$61(size_of_a,v)}
    function bin_write_ref(write_a,buf,pos,v)
     {return bin_write_t$62(write_a,buf,pos,v)}
    function bin_writer_ref(bin_writer_a)
     {function _bem_(v)
       {var _ben_=bin_writer_a[2];
        return function(_beo_,_bep_)
         {return bin_write_ref(_ben_,v,_beo_,_bep_)}}
      return [0,function(v){return bin_size_ref(bin_writer_a[1],v)},_bem_]}
    function bin_read_ref(of_a,buf,pos_ref,vint)
     {return bin_read_t$126(of_a,buf,pos_ref,vint)}
    function bin_read_ref$0(of_a,buf,pos_ref)
     {return bin_read_t$127(of_a,buf,pos_ref)}
    function bin_reader_ref(bin_reader_a)
     {function _bel_(buf,pos_ref,vtag)
       {return bin_read_ref(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_ref$0(bin_reader_a[1],buf,pos_ref)},
              _bel_]}
    function bin_ref(bin_a)
     {var _bej_=bin_reader_ref(bin_a[3]),_bek_=bin_writer_ref(bin_a[2]);
      return [0,bin_shape_ref(bin_a[1]),_bek_,_bej_]}
    function compare_ref(cmp_a,a_065,b_066)
     {return caml_call3
              (_M3_,
               function(a_067,b_068){return caml_call2(cmp_a,a_067,b_068)},
               a_065,
               b_066)}
    function equal_ref(cmp_a,a_069,b_070)
     {return caml_call3
              (_M4_,
               function(a_071,b_072){return caml_call2(cmp_a,a_071,b_072)},
               a_069,
               b_070)}
    var
     the_group$12=
      [0,
       caml_call1(Sexplib0_Lazy_group_id[2],0),
       the_generic_group$12,
       cst_src_std_internal_ml$13,
       [0,_M7_,0]],
     ref_sexp_grammar=[0,cst_ref$1,the_group$12],
     Typename_of_ref=caml_call1(Typerep_lib_Make_typename[2],[0,name$43]),
     typename_of_ref=Typename_of_ref[2];
    function typerep_of_ref(of_a)
     {var name_of_ref=caml_call1(Typename_of_ref[1],of_a);
      return [9,
              [0,
               name_of_ref,
               [0,[246,function(_bei_){return typerep_of_t$20(of_a)}]]]]}
    var
     _Qz_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_unit),0,bin_shape_t$69],0],
     _QA_=caml_call1(Bin_prot_Shape[4][1],cst_src_std_internal_ml_148_2),
     group$92=caml_call2(Bin_prot_Shape[6],_QA_,_Qz_),
     _QB_=caml_call1(Bin_prot_Shape[2][1],cst_unit$0),
     bin_shape_unit=caml_call1(caml_call2(Bin_prot_Shape[14],group$92,_QB_),0),
     bin_writer_unit=[0,bin_size_t$57,bin_write_t$57],
     bin_reader_unit=[0,bin_read_t$116,bin_read_t$117],
     bin_unit=[0,bin_shape_unit,bin_writer_unit,bin_reader_unit];
    function hash_unit(x){return caml_call1(hash$22,x)}
    var
     the_group$13=
      [0,
       caml_call1(Sexplib0_Lazy_group_id[2],0),
       the_generic_group$13,
       cst_src_std_internal_ml$14,
       [0,t_sexp_grammar$4,0]],
     unit_sexp_grammar=[0,cst_unit$1,the_group$13],
     Typename_of_unit=caml_call1(Typerep_lib_Make_typename[1],[0,name$44]),
     typename_of_unit=Typename_of_unit[2],
     name_of_unit=Typename_of_unit[1],
     typerep_of_unit=[9,[0,name_of_unit,[0,typerep_of_t$16]]],
     _QC_=Bin_prot_Std[94],
     _QD_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_float_array),0,_QC_],0],
     _QE_=caml_call1(Bin_prot_Shape[4][1],cst_src_std_internal_ml_152_2),
     group$93=caml_call2(Bin_prot_Shape[6],_QE_,_QD_),
     _QF_=caml_call1(Bin_prot_Shape[2][1],cst_float_array$0),
     bin_shape_float_array=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$93,_QF_),0),
     bin_size_float_array=Bin_prot_Std[28],
     bin_write_float_array=Bin_prot_Std[96],
     bin_writer_float_array=[0,bin_size_float_array,bin_write_float_array],
     bin_read_float_array=Bin_prot_Std[99],
     bin_read_float_array$0=Bin_prot_Std[98],
     bin_reader_float_array=[0,bin_read_float_array$0,bin_read_float_array],
     bin_float_array=
      [0,bin_shape_float_array,bin_writer_float_array,bin_reader_float_array];
    function compare_float_array(a_077,b_078)
     {return compare_array
              (function(a_079,b_080)
                {return caml_call2(compare$40,a_079,b_080)},
               a_077,
               b_078)}
    function float_array_of_sexp(t){return caml_call2(_k5_,_Iw_,t)}
    function sexp_of_float_array(v){return caml_call2(_k4_,sexp_of_t$46,v)}
    var
     the_group$14=
      [0,
       caml_call1(Sexplib0_Lazy_group_id[2],0),
       the_generic_group$14,
       cst_src_std_internal_ml$15,
       [0,_It_,[0,array_sexp_grammar,0]]],
     float_array_sexp_grammar=[0,cst_float_array$1,the_group$14],
     Typename_of_float_array=
      caml_call1(Typerep_lib_Make_typename[1],[0,name$45]),
     typename_of_float_array=Typename_of_float_array[2],
     name_of_float_array=Typename_of_float_array[1],
     typerep_of_float_array=
      [9,
       [0,
        name_of_float_array,
        [0,[246,function(_beh_){return typerep_of_array(typerep_of_t$8)}]]]],
     _QG_=Base_Exn[1],
     _QH_=caml_call1(Bin_prot_Shape[3][1],cst_a$71),
     _QI_=caml_call1(Bin_prot_Shape[4][1],cst_src_std_internal_ml_215_23),
     _QJ_=bin_shape_array(caml_call2(Bin_prot_Shape[15],_QI_,_QH_)),
     _QK_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$72),0],
     _QL_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_sexp_array),_QK_,_QJ_],0],
     _QM_=caml_call1(Bin_prot_Shape[4][1],cst_src_std_internal_ml_215_2),
     group$94=caml_call2(Bin_prot_Shape[6],_QM_,_QL_);
    function bin_shape_sexp_array(a)
     {var _beg_=caml_call1(Bin_prot_Shape[2][1],cst_sexp_array$0);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$94,_beg_),[0,a,0])}
    function bin_size_sexp_array(size_of_a,v)
     {return bin_size_array(size_of_a,v)}
    function bin_write_sexp_array(write_a,buf,pos,v)
     {return bin_write_array(write_a,buf,pos,v)}
    function bin_writer_sexp_array(bin_writer_a)
     {function _bec_(v)
       {var _bed_=bin_writer_a[2];
        return function(_bee_,_bef_)
         {return bin_write_sexp_array(_bed_,v,_bee_,_bef_)}}
      return [0,
              function(v){return bin_size_sexp_array(bin_writer_a[1],v)},
              _bec_]}
    function bin_read_sexp_array(of_a,buf,pos_ref,vint)
     {return bin_read_array(of_a,buf,pos_ref,vint)}
    function bin_read_sexp_array$0(of_a,buf,pos_ref)
     {return bin_read_array$0(of_a,buf,pos_ref)}
    function bin_reader_sexp_array(bin_reader_a)
     {function _beb_(buf,pos_ref,vtag)
       {return bin_read_sexp_array(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_sexp_array$0(bin_reader_a[1],buf,pos_ref)},
              _beb_]}
    function bin_sexp_array(bin_a)
     {var
       _bd$_=bin_reader_sexp_array(bin_a[3]),
       _bea_=bin_writer_sexp_array(bin_a[2]);
      return [0,bin_shape_sexp_array(bin_a[1]),_bea_,_bd$_]}
    function compare_sexp_array(cmp_a,a_081,b_082)
     {return compare_array
              (function(a_083,b_084){return caml_call2(cmp_a,a_083,b_084)},
               a_081,
               b_082)}
    var
     Typename_of_sexp_array=
      caml_call1(Typerep_lib_Make_typename[2],[0,name$46]),
     typename_of_sexp_array=Typename_of_sexp_array[2];
    function typerep_of_sexp_array(of_a)
     {var name_of_sexp_array=caml_call1(Typename_of_sexp_array[1],of_a);
      return [9,
              [0,
               name_of_sexp_array,
               [0,[246,function(_bd__){return typerep_of_array(of_a)}]]]]}
    var
     _QN_=
      [0,
       [0,caml_call1(Bin_prot_Shape[2][1],cst_sexp_bool),0,bin_shape_bool],
       0],
     _QO_=caml_call1(Bin_prot_Shape[4][1],cst_src_std_internal_ml_219_2),
     group$95=caml_call2(Bin_prot_Shape[6],_QO_,_QN_),
     _QP_=caml_call1(Bin_prot_Shape[2][1],cst_sexp_bool$0),
     bin_shape_sexp_bool=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$95,_QP_),0),
     bin_writer_sexp_bool=[0,bin_size_t$47,bin_write_t$47],
     bin_reader_sexp_bool=[0,bin_read_t$96,bin_read_t$97],
     bin_sexp_bool=
      [0,bin_shape_sexp_bool,bin_writer_sexp_bool,bin_reader_sexp_bool];
    function hash_sexp_bool(x){return hash_bool(x)}
    var
     Typename_of_sexp_bool=
      caml_call1(Typerep_lib_Make_typename[1],[0,name$47]),
     typename_of_sexp_bool=Typename_of_sexp_bool[2],
     name_of_sexp_bool=Typename_of_sexp_bool[1],
     typerep_of_sexp_bool=[9,[0,name_of_sexp_bool,[0,typerep_of_bool]]],
     _QQ_=caml_call1(Bin_prot_Shape[3][1],cst_a$73),
     _QR_=caml_call1(Bin_prot_Shape[4][1],cst_src_std_internal_ml_223_22),
     _QS_=bin_shape_list(caml_call2(Bin_prot_Shape[15],_QR_,_QQ_)),
     _QT_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$74),0],
     _QU_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_sexp_list),_QT_,_QS_],0],
     _QV_=caml_call1(Bin_prot_Shape[4][1],cst_src_std_internal_ml_223_2),
     group$96=caml_call2(Bin_prot_Shape[6],_QV_,_QU_);
    function bin_shape_sexp_list(a)
     {var _bd9_=caml_call1(Bin_prot_Shape[2][1],cst_sexp_list$0);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$96,_bd9_),[0,a,0])}
    function bin_size_sexp_list(size_of_a,v)
     {return bin_size_list(size_of_a,v)}
    function bin_write_sexp_list(write_a,buf,pos,v)
     {return bin_write_list(write_a,buf,pos,v)}
    function bin_writer_sexp_list(bin_writer_a)
     {function _bd5_(v)
       {var _bd6_=bin_writer_a[2];
        return function(_bd7_,_bd8_)
         {return bin_write_sexp_list(_bd6_,v,_bd7_,_bd8_)}}
      return [0,
              function(v){return bin_size_sexp_list(bin_writer_a[1],v)},
              _bd5_]}
    function bin_read_sexp_list(of_a,buf,pos_ref,vint)
     {return bin_read_list(of_a,buf,pos_ref,vint)}
    function bin_read_sexp_list$0(of_a,buf,pos_ref)
     {return bin_read_list$0(of_a,buf,pos_ref)}
    function bin_reader_sexp_list(bin_reader_a)
     {function _bd4_(buf,pos_ref,vtag)
       {return bin_read_sexp_list(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_sexp_list$0(bin_reader_a[1],buf,pos_ref)},
              _bd4_]}
    function bin_sexp_list(bin_a)
     {var
       _bd2_=bin_reader_sexp_list(bin_a[3]),
       _bd3_=bin_writer_sexp_list(bin_a[2]);
      return [0,bin_shape_sexp_list(bin_a[1]),_bd3_,_bd2_]}
    function compare_sexp_list(cmp_a,a_087,b_088)
     {return compare_list
              (function(a_089,b_090){return caml_call2(cmp_a,a_089,b_090)},
               a_087,
               b_088)}
    var
     Typename_of_sexp_list=
      caml_call1(Typerep_lib_Make_typename[2],[0,name$48]),
     typename_of_sexp_list=Typename_of_sexp_list[2];
    function typerep_of_sexp_list(of_a)
     {var name_of_sexp_list=caml_call1(Typename_of_sexp_list[1],of_a);
      return [9,
              [0,
               name_of_sexp_list,
               [0,[246,function(_bd1_){return typerep_of_list(of_a)}]]]]}
    var
     _QW_=caml_call1(Bin_prot_Shape[3][1],cst_a$75),
     _QX_=caml_call1(Bin_prot_Shape[4][1],cst_src_std_internal_ml_227_24),
     _QY_=bin_shape_option(caml_call2(Bin_prot_Shape[15],_QX_,_QW_)),
     _QZ_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$76),0],
     _Q0_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_sexp_option),_QZ_,_QY_],0],
     _Q1_=caml_call1(Bin_prot_Shape[4][1],cst_src_std_internal_ml_227_2),
     group$97=caml_call2(Bin_prot_Shape[6],_Q1_,_Q0_);
    function bin_shape_sexp_option(a)
     {var _bd0_=caml_call1(Bin_prot_Shape[2][1],cst_sexp_option$0);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$97,_bd0_),[0,a,0])}
    function bin_size_sexp_option(size_of_a,v)
     {return bin_size_option(size_of_a,v)}
    function bin_write_sexp_option(write_a,buf,pos,v)
     {return bin_write_option(write_a,buf,pos,v)}
    function bin_writer_sexp_option(bin_writer_a)
     {function _bdW_(v)
       {var _bdX_=bin_writer_a[2];
        return function(_bdY_,_bdZ_)
         {return bin_write_sexp_option(_bdX_,v,_bdY_,_bdZ_)}}
      return [0,
              function(v){return bin_size_sexp_option(bin_writer_a[1],v)},
              _bdW_]}
    function bin_read_sexp_option(of_a,buf,pos_ref,vint)
     {return bin_read_option(of_a,buf,pos_ref,vint)}
    function bin_read_sexp_option$0(of_a,buf,pos_ref)
     {return bin_read_option$0(of_a,buf,pos_ref)}
    function bin_reader_sexp_option(bin_reader_a)
     {function _bdV_(buf,pos_ref,vtag)
       {return bin_read_sexp_option(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_sexp_option$0(bin_reader_a[1],buf,pos_ref)},
              _bdV_]}
    function bin_sexp_option(bin_a)
     {var
       _bdT_=bin_reader_sexp_option(bin_a[3]),
       _bdU_=bin_writer_sexp_option(bin_a[2]);
      return [0,bin_shape_sexp_option(bin_a[1]),_bdU_,_bdT_]}
    function compare_sexp_option(cmp_a,a_091,b_092)
     {return compare_option
              (function(a_093,b_094){return caml_call2(cmp_a,a_093,b_094)},
               a_091,
               b_092)}
    var
     Typename_of_sexp_option=
      caml_call1(Typerep_lib_Make_typename[2],[0,name$49]),
     typename_of_sexp_option=Typename_of_sexp_option[2];
    function typerep_of_sexp_option(of_a)
     {var name_of_sexp_option=caml_call1(Typename_of_sexp_option[1],of_a);
      return [9,
              [0,
               name_of_sexp_option,
               [0,[246,function(_bdS_){return typerep_of_option(of_a)}]]]]}
    var
     _Q2_=caml_call1(Bin_prot_Shape[3][1],cst_a$77),
     _Q3_=caml_call1(Bin_prot_Shape[4][1],cst_src_std_internal_ml_231_24),
     _Q4_=caml_call2(Bin_prot_Shape[15],_Q3_,_Q2_),
     _Q5_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$78),0],
     _Q6_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_sexp_opaque$1),_Q5_,_Q4_],0],
     _Q7_=caml_call1(Bin_prot_Shape[4][1],cst_src_std_internal_ml_231_2),
     group$98=caml_call2(Bin_prot_Shape[6],_Q7_,_Q6_);
    function bin_shape_sexp_opaque$0(a)
     {var _bdR_=caml_call1(Bin_prot_Shape[2][1],cst_sexp_opaque$2);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$98,_bdR_),[0,a,0])}
    function bin_size_sexp_opaque$0(size_of_a){return size_of_a}
    function bin_write_sexp_opaque$0(write_a){return write_a}
    function bin_writer_sexp_opaque$0(bin_writer_a)
     {function _bdQ_(v){return caml_call1(bin_writer_a[2],v)}
      return [0,function(v){return caml_call1(bin_writer_a[1],v)},_bdQ_]}
    function bin_read_sexp_opaque$1(of_a,buf,pos_ref,vint)
     {return caml_call2(Bin_prot_Common[18],_Q8_,pos_ref[1])}
    function bin_read_sexp_opaque$2(of_a){return of_a}
    function bin_reader_sexp_opaque$0(bin_reader_a)
     {function _bdP_(buf,pos_ref,vtag)
       {return bin_read_sexp_opaque$1(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return caml_call2(bin_reader_a[1],buf,pos_ref)},
              _bdP_]}
    function bin_sexp_opaque$0(bin_a)
     {var
       _bdN_=bin_reader_sexp_opaque$0(bin_a[3]),
       _bdO_=bin_writer_sexp_opaque$0(bin_a[2]);
      return [0,bin_shape_sexp_opaque$0(bin_a[1]),_bdO_,_bdN_]}
    function compare_sexp_opaque$0(cmp_a,a_095,b_096)
     {return caml_call2(cmp_a,a_095,b_096)}
    function hash_fold_sexp_opaque$0(hash_fold_a,hsv,arg)
     {return caml_call2(hash_fold_a,hsv,arg)}
    var
     Typename_of_sexp_opaque$0=
      caml_call1(Typerep_lib_Make_typename[2],[0,name$50]),
     typename_of_sexp_opaque$0=Typename_of_sexp_opaque$0[2];
    function typerep_of_sexp_opaque$0(of_a)
     {var name_of_sexp_opaque=caml_call1(Typename_of_sexp_opaque$0[1],of_a);
      return [9,[0,name_of_sexp_opaque,[0,of_a]]]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$244);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Std_internal$0);
    var
     Core_kernel_Std_internal=
      [0,
       _Ga_,
       _Gb_,
       _Gc_,
       _Gf_,
       _Gg_,
       _Gh_,
       _Gi_,
       _Gj_,
       _Gk_,
       _Gl_,
       _Gm_,
       _Gn_,
       _Go_,
       _Gp_,
       _Gq_,
       _Gr_,
       _Gs_,
       _Gt_,
       _Gu_,
       _Gw_,
       _Gx_,
       _Gy_,
       _Gz_,
       _GA_,
       _GB_,
       _GC_,
       _GD_,
       _GE_,
       _GF_,
       _GG_,
       _GH_,
       _GI_,
       _GJ_,
       _GK_,
       _GL_,
       _GM_,
       _GN_,
       _GO_,
       _GP_,
       _GQ_,
       _GR_,
       _GS_,
       _GT_,
       _GU_,
       _GV_,
       _GW_,
       _GX_,
       _GY_,
       _GZ_,
       _G0_,
       _G1_,
       _G2_,
       _G3_,
       _G4_,
       _G5_,
       _G6_,
       _G7_,
       _G8_,
       _G9_,
       _G__,
       _G$_,
       _Ha_,
       _Hb_,
       _Hc_,
       _Hd_,
       _He_,
       _Hf_,
       _Hg_,
       _Hh_,
       _Hi_,
       _Hj_,
       _Hk_,
       _Hl_,
       _Hm_,
       _Hn_,
       _Ho_,
       _Hp_,
       _Hq_,
       _Hr_,
       _Hs_,
       _Ht_,
       _Hu_,
       _Hv_,
       _Np_,
       _Nq_,
       _Nr_,
       _Ns_,
       _Nt_,
       _Nu_,
       _Nv_,
       _Nw_,
       _Nx_,
       _Ny_,
       _Nz_,
       _NA_,
       _NB_,
       _NC_,
       _ND_,
       _NE_,
       _NF_,
       _NG_,
       _NH_,
       _NI_,
       _NJ_,
       _NK_,
       _NL_,
       _NM_,
       _NN_,
       _NO_,
       _NP_,
       quickcheck_observer$8,
       _NQ_,
       _NR_,
       _NS_,
       _NT_,
       _NU_,
       _NV_,
       _NW_,
       _NX_,
       quickcheck_shrinker$8,
       _NY_,
       _NZ_,
       _N0_,
       _N1_,
       _N2_,
       _N3_,
       symbol,
       _N4_,
       _N5_,
       _N6_,
       _N7_,
       _N8_,
       _N9_,
       _N__,
       _N$_,
       _Oa_,
       _Ob_,
       _Oc_,
       _Od_,
       _Oe_,
       _Of_,
       sexp_of_never_returns,
       _L8_,
       _Og_,
       _Oh_,
       _Oi_,
       _Oj_,
       _Ok_,
       _Ol_,
       _Om_,
       _On_,
       _Oo_,
       _Op_,
       _Oq_,
       _Or_,
       _Os_,
       _Ot_,
       _Ou_,
       _Ov_,
       _Ow_,
       _Ox_,
       _Oy_,
       _Oz_,
       _OA_,
       _OB_,
       _OC_,
       _OD_,
       _OE_,
       _OF_,
       _OG_,
       _OH_,
       _OI_,
       _OJ_,
       _OK_,
       _OL_,
       _OM_,
       _ON_,
       _OO_,
       _OP_,
       _OQ_,
       _OR_,
       _OS_,
       _OT_,
       _OU_,
       _OV_,
       _OW_,
       _OX_,
       _OY_,
       _OZ_,
       _O0_,
       _O1_,
       _O2_,
       _O3_,
       _O4_,
       _O5_,
       _O6_,
       _O7_,
       _O8_,
       _O9_,
       _O__,
       _O$_,
       Bug,
       C_malloc_exn,
       _Pd_,
       fst3,
       snd3,
       trd3,
       uw,
       symbol$66,
       symbol$65,
       symbol$68,
       symbol$135,
       _fx_,
       _im_,
       _fB_,
       _tV_,
       _tW_,
       _Pe_,
       failwithp,
       failwiths,
       force,
       _fC_,
       ident,
       _Pf_,
       _fv_,
       _x1_,
       _x2_,
       _fy_,
       _tS_,
       _Pg_,
       phys_same,
       _Ph_,
       _Pi_,
       _fE_,
       _Pj_,
       _Pk_,
       _od_,
       _IZ_,
       _Pl_,
       _fw_,
       _Pm_,
       _Pn_,
       _Po_,
       _Pp_,
       _Pq_,
       _Pr_,
       _Ps_,
       _Pt_,
       _Pu_,
       _Pv_,
       _Pw_,
       _Px_,
       _Py_,
       _Pz_,
       _PA_,
       _PB_,
       _PC_,
       _PD_,
       _PE_,
       _PF_,
       bin_shape_array,
       bin_size_array,
       bin_write_array,
       bin_writer_array,
       bin_read_array$0,
       bin_read_array,
       bin_reader_array,
       bin_array,
       compare_array,
       equal_array,
       _k4_,
       _k5_,
       array_sexp_grammar,
       typerep_of_array,
       typename_of_array,
       bin_shape_bool,
       bin_size_t$47,
       bin_write_t$47,
       bin_writer_bool,
       bin_read_t$96,
       bin_read_t$97,
       bin_reader_bool,
       bin_bool,
       compare$34,
       _Bl_,
       _Bv_,
       hash_bool,
       sexp_of_t$40,
       t_of_sexp$32,
       bool_sexp_grammar,
       typerep_of_bool,
       typename_of_bool,
       bin_shape_char,
       _EV_,
       _EW_,
       bin_writer_char,
       _EX_,
       _EY_,
       bin_reader_char,
       bin_char,
       _FC_,
       _FD_,
       _FP_,
       hash_char,
       _FM_,
       _FN_,
       char_sexp_grammar,
       typerep_of_char,
       typename_of_char,
       bin_shape_float,
       bin_size_t$5,
       bin_write_t$5,
       bin_writer_float,
       bin_read_t$11,
       bin_read_t$12,
       bin_reader_float,
       bin_float,
       compare$40,
       equal$20,
       hash_fold_t$17,
       hash_float,
       sexp_of_t$46,
       _Iw_,
       float_sexp_grammar,
       typerep_of_float,
       typename_of_float,
       bin_shape_int,
       bin_size_t$50,
       bin_write_t$50,
       bin_writer_int,
       bin_read_t$102,
       bin_read_t$103,
       bin_reader_int,
       bin_int,
       compare$42,
       equal$21,
       hash_fold_t$18,
       hash_int,
       sexp_of_t$48,
       t_of_sexp$39,
       int_sexp_grammar,
       typerep_of_int,
       typename_of_int,
       bin_shape_int32,
       bin_size_t$51,
       bin_write_t$51,
       bin_writer_int32,
       bin_read_t$104,
       bin_read_t$105,
       bin_reader_int32,
       bin_int32,
       compare$44,
       equal$22,
       hash_fold_t$20,
       hash_int32,
       sexp_of_t$50,
       t_of_sexp$41,
       int32_sexp_grammar,
       typerep_of_int32,
       typename_of_int32,
       bin_shape_int64,
       bin_size_t$52,
       bin_write_t$52,
       bin_writer_int64,
       bin_read_t$106,
       bin_read_t$107,
       bin_reader_int64,
       bin_int64,
       compare$46,
       equal$23,
       hash_fold_t$22,
       hash_int64,
       sexp_of_t$52,
       t_of_sexp$43,
       int64_sexp_grammar,
       typerep_of_int64,
       typename_of_int64,
       bin_shape_lazy_t,
       bin_size_lazy_t,
       bin_write_lazy_t,
       bin_writer_lazy_t,
       bin_read_lazy_t$0,
       bin_read_lazy_t,
       bin_reader_lazy_t,
       bin_lazy_t,
       compare_lazy_t,
       _Lq_,
       _Ls_,
       _Lr_,
       lazy_t_sexp_grammar,
       typerep_of_lazy_t,
       typename_of_lazy_t,
       bin_shape_list,
       bin_size_list,
       bin_write_list,
       bin_writer_list,
       bin_read_list$0,
       bin_read_list,
       bin_reader_list,
       bin_list,
       compare_list,
       equal_list,
       hash_fold_sexp_list,
       sexp_of_t$17,
       t_of_sexp$18,
       list_sexp_grammar,
       typerep_of_list,
       typename_of_list,
       bin_shape_nativeint,
       bin_size_t$59,
       bin_write_t$59,
       bin_writer_nativeint,
       bin_read_t$120,
       bin_read_t$121,
       bin_reader_nativeint,
       bin_nativeint,
       compare$54,
       equal$26,
       hash_fold_t$27,
       hash_nativeint,
       sexp_of_t$59,
       t_of_sexp$50,
       nativeint_sexp_grammar,
       typerep_of_nativeint,
       typename_of_nativeint,
       bin_shape_option,
       bin_size_option,
       bin_write_option,
       bin_writer_option,
       bin_read_option$0,
       bin_read_option,
       bin_reader_option,
       bin_option,
       compare_option,
       equal_option,
       hash_fold_sexp_option,
       sexp_of_t$33,
       t_of_sexp$26,
       option_sexp_grammar,
       typerep_of_option,
       typename_of_option,
       bin_shape_string,
       bin_size_t$48,
       bin_write_t$48,
       bin_writer_string,
       bin_read_t$98,
       bin_read_t$99,
       bin_reader_string,
       bin_string,
       compare$37,
       equal$18,
       hash_fold_t$14,
       hash_string,
       sexp_of_t$43,
       t_of_sexp$35,
       string_sexp_grammar,
       typerep_of_string,
       typename_of_string,
       bin_shape_bytes,
       bin_size_t$2,
       bin_write_t$2,
       bin_writer_bytes,
       bin_read_t$5,
       bin_read_t$6,
       bin_reader_bytes,
       bin_bytes,
       _Ea_,
       _D$_,
       _DY_,
       _DX_,
       bytes_sexp_grammar,
       typerep_of_bytes,
       typename_of_bytes,
       bin_shape_ref,
       bin_size_ref,
       bin_write_ref,
       bin_writer_ref,
       bin_read_ref$0,
       bin_read_ref,
       bin_reader_ref,
       bin_ref,
       compare_ref,
       equal_ref,
       _M6_,
       _M5_,
       ref_sexp_grammar,
       typerep_of_ref,
       typename_of_ref,
       bin_shape_unit,
       bin_size_t$57,
       bin_write_t$57,
       bin_writer_unit,
       bin_read_t$116,
       bin_read_t$117,
       bin_reader_unit,
       bin_unit,
       compare$52,
       equal$25,
       hash_fold_t$26,
       hash_unit,
       sexp_of_t$57,
       t_of_sexp$48,
       unit_sexp_grammar,
       typerep_of_unit,
       typename_of_unit,
       bin_shape_float_array,
       bin_size_float_array,
       bin_write_float_array,
       bin_writer_float_array,
       bin_read_float_array$0,
       bin_read_float_array,
       bin_reader_float_array,
       bin_float_array,
       compare_float_array,
       sexp_of_float_array,
       float_array_of_sexp,
       float_array_sexp_grammar,
       typerep_of_float_array,
       typename_of_float_array,
       _QG_,
       bin_shape_sexp_array,
       bin_size_sexp_array,
       bin_write_sexp_array,
       bin_writer_sexp_array,
       bin_read_sexp_array,
       bin_read_sexp_array$0,
       bin_reader_sexp_array,
       bin_sexp_array,
       compare_sexp_array,
       Typename_of_sexp_array,
       typename_of_sexp_array,
       typerep_of_sexp_array,
       bin_shape_sexp_bool,
       bin_size_t$47,
       bin_write_t$47,
       bin_writer_sexp_bool,
       bin_read_t$97,
       bin_read_t$96,
       bin_reader_sexp_bool,
       bin_sexp_bool,
       compare$34,
       _Bv_,
       hash_sexp_bool,
       Typename_of_sexp_bool,
       typename_of_sexp_bool,
       typerep_of_sexp_bool,
       bin_shape_sexp_list,
       bin_size_sexp_list,
       bin_write_sexp_list,
       bin_writer_sexp_list,
       bin_read_sexp_list,
       bin_read_sexp_list$0,
       bin_reader_sexp_list,
       bin_sexp_list,
       compare_sexp_list,
       hash_fold_sexp_list,
       Typename_of_sexp_list,
       typename_of_sexp_list,
       typerep_of_sexp_list,
       bin_shape_sexp_option,
       bin_size_sexp_option,
       bin_write_sexp_option,
       bin_writer_sexp_option,
       bin_read_sexp_option,
       bin_read_sexp_option$0,
       bin_reader_sexp_option,
       bin_sexp_option,
       compare_sexp_option,
       hash_fold_sexp_option,
       Typename_of_sexp_option,
       typename_of_sexp_option,
       typerep_of_sexp_option,
       bin_shape_sexp_opaque$0,
       bin_size_sexp_opaque$0,
       bin_write_sexp_opaque$0,
       bin_writer_sexp_opaque$0,
       bin_read_sexp_opaque$1,
       bin_read_sexp_opaque$2,
       bin_reader_sexp_opaque$0,
       bin_sexp_opaque$0,
       compare_sexp_opaque$0,
       hash_fold_sexp_opaque$0,
       Typename_of_sexp_opaque$0,
       typename_of_sexp_opaque$0,
       typerep_of_sexp_opaque$0];
    caml_register_global
     (5065,Core_kernel_Std_internal,"Core_kernel__Std_internal");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Byte_units0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$245);
    caml_call1(Expect_test_collector[4][1],cst_src_byte_units0_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$246,cst$85);
    function hash$25(x){return caml_call1(_KN_,x)}
    function of_bytes_int63(_bdM_){return _bdM_}
    function bytes_int63(_bdL_){return _bdL_}
    function to_string$14(n)
     {var
       kib=caml_call1(of_int$3,1024),
       mib=caml_call2(symbol$107,kib,kib),
       gib=caml_call2(symbol$107,kib,mib),
       n_abs=caml_call1(abs$4,n);
      if(caml_call2(symbol$103,n_abs,kib))
       return caml_call2(_fw_,_Q9_,caml_call1(to_int_exn$2,n));
      if(caml_call2(symbol$103,n_abs,mib))
       {var _bdI_=caml_call1(to_float$3,kib);
        return caml_call2(_fw_,_Q__,caml_call1(to_float$3,n) / _bdI_)}
      if(caml_call2(symbol$103,n_abs,gib))
       {var _bdJ_=caml_call1(to_float$3,mib);
        return caml_call2(_fw_,_Q$_,caml_call1(to_float$3,n) / _bdJ_)}
      var _bdK_=caml_call1(to_float$3,gib);
      return caml_call2(_fw_,_Ra_,caml_call1(to_float$3,n) / _bdK_)}
    function sexp_of_t$62(n){return [0,to_string$14(n)]}
    function bytes_int_exn(t){return caml_call1(to_int_exn$2,t)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$247);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Byte_units0$0);
    var
     Core_kernel_Byte_units0=
      [0,
       compare$49,
       hash_fold_t$24,
       hash$25,
       sexp_of_t$62,
       to_string$14,
       of_bytes_int63,
       bytes_int63,
       bytes_int_exn];
    caml_register_global
     (5066,Core_kernel_Byte_units0,"Core_kernel__Byte_units0");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Bigstring);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$248);
    caml_call1(Expect_test_collector[4][1],cst_src_bigstring_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$249,cst$86);
    var
     _Rb_=include$75[1],
     _Rc_=include$75[2],
     _Rd_=include$75[3],
     _Re_=include$75[4],
     _Rf_=include$75[5],
     _Rg_=include$75[6],
     _Rh_=include$75[7],
     _Ri_=include$75[8],
     _Rm_=include$75[12],
     _Rn_=include$75[13],
     _Ro_=include$75[14],
     _Rp_=include$75[15],
     _Rr_=include$75[17],
     _Rs_=include$75[18],
     _Rt_=include$75[19],
     _Rv_=include$75[21],
     _Ry_=include$75[24],
     _RB_=include$75[27],
     _RC_=include$75[28],
     _RD_=include$75[29],
     _Rj_=include$75[9],
     _Rk_=include$75[10],
     _Rl_=include$75[11],
     _Rq_=include$75[16],
     _Ru_=include$75[20],
     _Rw_=include$75[22],
     _Rx_=include$75[23],
     _Rz_=include$75[25],
     _RA_=include$75[26],
     _RE_=include$75[30],
     _RF_=include$75[31],
     _RG_=include$75[32],
     _RH_=include$75[33],
     _RI_=include$75[34],
     _RJ_=include$75[35],
     _RK_=include$75[36],
     _RL_=include$75[37],
     _RM_=include$75[38],
     _RN_=include$75[39],
     _RO_=include$75[40],
     _RP_=include$75[41],
     _RQ_=include$75[42],
     _RR_=include$75[43],
     _RS_=include$75[44],
     _RT_=include$75[45],
     _RU_=include$75[46],
     _RV_=include$75[47],
     _RW_=include$75[48],
     _RX_=include$75[49],
     _RY_=include$75[50],
     _RZ_=include$75[51],
     _R0_=include$75[52],
     _R1_=include$75[53],
     _R2_=include$75[54],
     _R3_=include$75[55],
     _R4_=include$75[56],
     _R5_=include$75[57],
     _R6_=include$75[58],
     _R7_=include$75[59],
     _R8_=include$75[60],
     _R9_=include$75[61],
     _R__=include$75[62],
     _R$_=include$75[63],
     _Sa_=include$75[64],
     _Sb_=include$75[65],
     _Sc_=include$75[66],
     _Sd_=include$75[67],
     _Se_=include$75[68],
     _Sf_=include$75[69],
     _Sg_=include$75[70],
     _Sh_=include$75[71],
     _Si_=include$75[72],
     _Sj_=include$75[73],
     _Sk_=include$75[74],
     _Sl_=include$75[75],
     _Sm_=include$75[76],
     _Sn_=include$75[77],
     _So_=include$75[78],
     _Sp_=include$75[79],
     _Sq_=include$75[80],
     _Sr_=include$75[81],
     _Ss_=include$75[82],
     _St_=include$75[83],
     _Su_=include$75[84],
     _Sv_=include$75[85],
     _Sw_=include$75[86],
     _Sx_=include$75[87],
     _Sy_=include$75[88],
     _Sz_=include$75[89],
     _SA_=include$75[90],
     _SB_=include$75[91],
     _SC_=include$75[92],
     _SD_=include$75[93],
     _SE_=include$75[94],
     _SF_=include$75[95],
     _SG_=include$75[96],
     _SH_=include$75[97],
     _SI_=include$75[98],
     _SJ_=include$75[99],
     _SK_=include$75[100],
     _SL_=include$75[101],
     _SM_=include$75[102],
     _SN_=include$75[103],
     _SO_=include$75[104],
     _SP_=include$75[105],
     _SQ_=include$75[106],
     _SR_=include$75[107],
     _SS_=include$75[108],
     _ST_=include$75[109],
     _SU_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$161),0,_dA_],0],
     _SV_=caml_call1(Bin_prot_Shape[4][1],cst_src_bigstring_ml_13_6),
     group$99=caml_call2(Bin_prot_Shape[6],_SV_,_SU_),
     _SW_=caml_call1(Bin_prot_Shape[2][1],cst_t$162),
     bin_shape_t$78=caml_call1(caml_call2(Bin_prot_Shape[14],group$99,_SW_),0),
     bin_writer_t$71=[0,bin_size_t_frozen,bin_write_t_frozen],
     bin_reader_t$71=[0,bin_read_t_frozen,bin_read_t_frozen$0],
     bin_t$71=[0,bin_shape_t$78,bin_writer_t$71,bin_reader_t$71],
     _SX_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t_frozen),0,bin_shape_t$78],0],
     _SY_=caml_call1(Bin_prot_Shape[4][1],cst_src_bigstring_ml_18_4),
     group$100=caml_call2(Bin_prot_Shape[6],_SY_,_SX_),
     _SZ_=caml_call1(Bin_prot_Shape[2][1],cst_t_frozen$0),
     bin_shape_t_frozen=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$100,_SZ_),0),
     bin_writer_t_frozen=[0,bin_size_t_frozen,bin_write_t_frozen],
     bin_reader_t_frozen=[0,bin_read_t_frozen,bin_read_t_frozen$0],
     bin_t_frozen=
      [0,bin_shape_t_frozen,bin_writer_t_frozen,bin_reader_t_frozen];
    function arg(max_mem_waiting_gc,size)
     {var
       max_mem_waiting_gc_in_bytes=
        caml_call2(_xW_,max_mem_waiting_gc,bytes_int_exn);
      return caml_call2(_Rk_,max_mem_waiting_gc_in_bytes,size)}
    function sub_shared(opt,len,bstr)
     {if(opt)var sth=opt[1],pos=sth;else var pos=0;
      var len$0=caml_call3(_Rs_,bstr,pos,len);
      return runtime.caml_ba_sub(bstr,pos,len$0)}
    function read_bin_prot_verbose_errors(t,opt,len,reader)
     {if(opt)var sth=opt[1],pos=sth;else var pos=0;
      var len$0=caml_call3(_Rs_,t,pos,len),limit=pos + len$0 | 0;
      caml_call4(_Rr_,cst_read_bin_prot_verbose_erro,pos,len$0,t);
      function invalid_data(message,a,sexp_of_a)
       {return [0,-810630190,caml_call5(_n4_,0,0,message,a,sexp_of_a)]}
      function read(bin_reader,pos,len)
       {if(caml_call2(_Ns_,len,limit - pos | 0))return 658743757;
        var pos_ref=[0,pos];
        try
         {var _bdH_=[0,17724,caml_call2(bin_reader,t,pos_ref)],_bdF_=_bdH_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          var _bdF_=[0,-810630190,caml_call2(_n$_,0,exn)]}
        if(17724 <= _bdF_[1])
         {var result=_bdF_[2],expected_pos=pos + len | 0;
          if(caml_call2(_Nr_,pos_ref[1],expected_pos))
           return [0,17724,[0,result,expected_pos]];
          var
           _bdG_=
            function(param)
             {var
               v1=param[2],
               v0=param[1],
               v0$0=caml_call1(sexp_of_t$48,v0),
               v1$0=caml_call1(sexp_of_t$48,v1);
              return [1,[0,v0$0,[0,v1$0,0]]]};
          return invalid_data
                  (cst_pos_ref_expected_pos,[0,pos_ref[1],expected_pos],_bdG_)}
        return _bdF_}
      var x=read(Bin_prot_Utils[2],pos,Bin_prot_Utils[1]);
      if(typeof x !== "number" && 17724 <= x[1])
       {var match=x[2],pos$0=match[2],element_length=match[1];
        return caml_call2(_Nt_,element_length,0)
                ?invalid_data
                  (cst_negative_element_length_d,element_length,sexp_of_t$48)
                :read(reader[1],pos$0,element_length)}
      return x}
    function read_bin_prot(t,pos,len,reader)
     {var match=read_bin_prot_verbose_errors(t,pos,len,reader);
      if(typeof match === "number")
       return caml_call1(_tX_,cst_not_enough_data);
      if(17724 <= match[1]){var x=match[2];return [0,x]}
      var e=match[2];
      return [1,caml_call2(_n7_,e,cst_Invalid_data)]}
    function write_bin_prot(t,opt,writer,v)
     {if(opt)var sth=opt[1],pos=sth;else var pos=0;
      var
       data_len=caml_call1(writer[1],v),
       total_len=data_len + Bin_prot_Utils[1] | 0;
      if(caml_call2(_Nt_,pos,0))
       failwiths(0,_S0_,cst_Bigstring_write_bin_prot_n,pos,sexp_of_t$48);
      if(caml_call2(_Ns_,pos + total_len | 0,caml_call1(_Rt_,t)))
       {var
         _bdD_=
          function(param)
           {var
             v2=param[3],
             v1=param[2],
             v0=param[1],
             v0$0=v0[2],
             v0$1=[1,[0,_S1_,[0,caml_call1(sexp_of_t$48,v0$0),0]]],
             v0$2=v1[2],
             v1$0=[1,[0,_S2_,[0,caml_call1(sexp_of_t$48,v0$2),0]]],
             v0$3=v2[2],
             v2$0=[1,[0,_S3_,[0,caml_call1(sexp_of_t$48,v0$3),0]]];
            return [1,[0,v0$1,[0,v1$0,[0,v2$0,0]]]]};
        failwiths
         (0,
          _S4_,
          cst_Bigstring_write_bin_prot_n$0,
          [0,
           [0,5594516,pos],
           [0,179941454,pos + total_len | 0],
           [0,-978093804,caml_call1(_Rt_,t)]],
          _bdD_)}
      var
       pos_after_size_header=caml_call3(Bin_prot_Utils[3],t,pos,data_len),
       pos_after_data=caml_call3(writer[2],t,pos_after_size_header,v);
      if(caml_call2(_Nu_,pos_after_data - pos | 0,total_len))
       {var
         _bdE_=
          function(param)
           {var
             v4=param[5],
             v3=param[4],
             v2=param[3],
             v1=param[2],
             v0=param[1],
             v0$0=v0[2],
             v0$1=[1,[0,_S5_,[0,caml_call1(sexp_of_t$48,v0$0),0]]],
             v0$2=v1[2],
             v1$0=[1,[0,_S6_,[0,caml_call1(sexp_of_t$48,v0$2),0]]],
             v0$3=v2[2],
             v2$0=[1,[0,_S7_,[0,caml_call1(sexp_of_t$48,v0$3),0]]],
             v0$4=v3[2],
             v3$0=[1,[0,_S8_,[0,caml_call1(sexp_of_t$48,v0$4),0]]],
             v0$5=v4[2],
             v4$0=[1,[0,_S9_,[0,caml_call1(sexp_of_t$48,v0$5),0]]];
            return [1,[0,v0$1,[0,v1$0,[0,v2$0,[0,v3$0,[0,v4$0,0]]]]]]};
        failwiths
         (0,
          _S__,
          cst_Bigstring_write_bin_prot_b,
          [0,
           [0,187782776,pos_after_data],
           [0,221966327,pos],
           [0,-494937222,Bin_prot_Utils[1]],
           [0,330843136,data_len],
           [0,-251717990,total_len]],
          _bdE_)}
      return pos_after_data}
    var
     get$3=caml_ba_get_1,
     include$76=_BP_([0,_Rt_,get$3]),
     _S$_=include$76[1];
    function get_tail_padded_fixed_string(padding,t,pos$1,len,param)
     {var pos$2=pos$1 + len | 0,pos=pos$2;
      for(;;)
       {var pos$0=pos - 1 | 0;
        if
         (caml_call2(_Np_,pos$0,pos$1)
          &&
          caml_call2(_FH_,caml_ba_get_1(t,pos$0),padding))
         {var pos=pos$0;continue}
        return caml_call3(_Ro_,[0,pos$1],[0,pos - pos$1 | 0],t)}}
    function set_tail_padded_fixed_string(padding,t,pos,len,value)
     {var slen=caml_ml_string_length(value);
      if(caml_call2(_Ns_,slen,len))caml_call4(failwithf,_Ta_,value,len,0);
      caml_call5(_RB_[1],value,0,t,pos,slen);
      var _bdA_=pos + slen | 0,_bdB_=(pos + len | 0) - 1 | 0;
      if(! (_bdB_ < _bdA_))
       {var i=_bdA_;
        for(;;)
         {caml_ba_set_1(t,i,padding);
          var _bdC_=i + 1 | 0;
          if(_bdB_ !== i){var i=_bdC_;continue}
          break}}
      return 0}
    function set_head_padded_fixed_string(padding,t,pos,len,value)
     {var slen=caml_ml_string_length(value);
      if(caml_call2(_Ns_,slen,len))caml_call4(failwithf,_Tb_,value,len,0);
      caml_call5(_RB_[1],value,0,t,(pos + len | 0) - slen | 0,slen);
      var _bdy_=((pos + len | 0) - slen | 0) - 1 | 0;
      if(! (_bdy_ < pos))
       {var i=pos;
        for(;;)
         {caml_ba_set_1(t,i,padding);
          var _bdz_=i + 1 | 0;
          if(_bdy_ !== i){var i=_bdz_;continue}
          break}}
      return 0}
    function get_head_padded_fixed_string(padding,t,pos$1,len,param)
     {var max_pos=(pos$1 + len | 0) - 1 | 0,pos=pos$1;
      for(;;)
       {if
         (caml_call2(_Nq_,pos,max_pos)
          &&
          caml_call2(_FH_,caml_ba_get_1(t,pos),padding))
         {var pos$0=caml_call1(next$0,pos),pos=pos$0;continue}
        return caml_call3(_Ro_,[0,pos],[0,len - (pos - pos$1 | 0) | 0],t)}}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$250);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Bigstring$0);
    var
     Core_kernel_Bigstring=
      [0,
       _Rb_,
       _Rc_,
       _Rd_,
       _Re_,
       _Rf_,
       _Rg_,
       _Rh_,
       _Ri_,
       _Rj_,
       _Rl_,
       _Rm_,
       _Rn_,
       _Ro_,
       _Rp_,
       _Rq_,
       _Rr_,
       _Rs_,
       _Rt_,
       _Ru_,
       _Rv_,
       _Rw_,
       _Rx_,
       _Ry_,
       _Rz_,
       _RA_,
       _RB_,
       _RC_,
       _RD_,
       _RE_,
       _RF_,
       _RG_,
       _RH_,
       _RI_,
       _RJ_,
       _RK_,
       _RL_,
       _RM_,
       _RN_,
       _RO_,
       _RP_,
       _RQ_,
       _RR_,
       _RS_,
       _RT_,
       _RU_,
       _RV_,
       _RW_,
       _RX_,
       _RY_,
       _RZ_,
       _R0_,
       _R1_,
       _R2_,
       _R3_,
       _R4_,
       _R5_,
       _R6_,
       _R7_,
       _R8_,
       _R9_,
       _R__,
       _R$_,
       _Sa_,
       _Sb_,
       _Sc_,
       _Sd_,
       _Se_,
       _Sf_,
       _Sg_,
       _Sh_,
       _Si_,
       _Sj_,
       _Sk_,
       _Sl_,
       _Sm_,
       _Sn_,
       _So_,
       _Sp_,
       _Sq_,
       _Sr_,
       _Ss_,
       _St_,
       _Su_,
       _Sv_,
       _Sw_,
       _Sx_,
       _Sy_,
       _Sz_,
       _SA_,
       _SB_,
       _SC_,
       _SD_,
       _SE_,
       _SF_,
       _SG_,
       _SH_,
       _SI_,
       _SJ_,
       _SK_,
       _SL_,
       _SM_,
       _SN_,
       _SO_,
       _SP_,
       _SQ_,
       _SR_,
       _SS_,
       _ST_,
       _S$_,
       arg,
       sub_shared,
       write_bin_prot,
       read_bin_prot,
       read_bin_prot_verbose_errors,
       get_tail_padded_fixed_string,
       set_tail_padded_fixed_string,
       get_head_padded_fixed_string,
       set_head_padded_fixed_string,
       [0,
        bin_size_t_frozen,
        bin_write_t_frozen,
        bin_read_t_frozen,
        bin_read_t_frozen$0,
        bin_shape_t$78,
        bin_writer_t$71,
        bin_reader_t$71,
        bin_t$71,
        _Rb_,
        _Rd_,
        bin_shape_t_frozen,
        bin_size_t_frozen,
        bin_write_t_frozen,
        bin_writer_t_frozen,
        bin_read_t_frozen,
        bin_read_t_frozen$0,
        bin_reader_t_frozen,
        bin_t_frozen,
        _Re_,
        _Rf_,
        _Rg_,
        _Rh_],
       [0,
        [0,
         bin_size_t_frozen,
         bin_write_t_frozen,
         bin_read_t_frozen,
         bin_read_t_frozen$0,
         bin_shape_t$78,
         bin_writer_t$71,
         bin_reader_t$71,
         bin_t$71,
         _Rb_,
         _Rc_,
         _Rd_,
         bin_shape_t_frozen,
         bin_size_t_frozen,
         bin_write_t_frozen,
         bin_writer_t_frozen,
         bin_read_t_frozen,
         bin_read_t_frozen$0,
         bin_reader_t_frozen,
         bin_t_frozen,
         _Re_,
         _Rf_,
         _Rg_,
         _Rh_,
         _Ri_]]];
    caml_register_global(5068,Core_kernel_Bigstring,"Core_kernel__Bigstring");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Core_bin_prot);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$251);
    caml_call1(Expect_test_collector[4][1],cst_src_core_bin_prot_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$252,cst$87);
    function to_string$15(t,v)
     {var len=caml_call1(t[1],v),buf=arg(0,len),pos=caml_call3(t[2],buf,0,v);
      if(caml_call2(_a5_,pos,caml_call1(_Rt_,buf)))
       {var str=caml_call3(_Ro_,0,0,buf);
        runtime.bigstring_destroy_stub(buf);
        return str}
      throw [0,Assert_failure,_Tc_]}
    function to_bytes(t,v)
     {var len=caml_call1(t[1],v),buf=arg(0,len),pos=caml_call3(t[2],buf,0,v);
      if(caml_call2(_a5_,pos,caml_call1(_Rt_,buf)))
       {var str=caml_call3(_Rp_,0,0,buf);
        runtime.bigstring_destroy_stub(buf);
        return str}
      throw [0,Assert_failure,_Td_]}
    var Writer=[0,to_string$15,to_bytes];
    function of_string$13(t,string)
     {var
       buf=caml_call3(_Rm_,0,0,string),
       pos_ref=[0,0],
       v=caml_call2(t[1],buf,pos_ref),
       _bdx_=caml_call1(_Rt_,buf);
      if(caml_call2(_a5_,pos_ref[1],_bdx_))
       {runtime.bigstring_destroy_stub(buf);return v}
      throw [0,Assert_failure,_Te_]}
    function of_bytes(t,bytes)
     {var
       buf=caml_call3(_Rn_,0,0,bytes),
       pos_ref=[0,0],
       v=caml_call2(t[1],buf,pos_ref),
       _bdw_=caml_call1(_Rt_,buf);
      if(caml_call2(_a5_,pos_ref[1],_bdw_))
       {runtime.bigstring_destroy_stub(buf);return v}
      throw [0,Assert_failure,_Tf_]}
    var Reader=[0,of_string$13,of_bytes];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$253);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Core_bin_prot$0);
    var Core_kernel_Core_bin_prot=[0,Writer,Reader];
    caml_register_global
     (5069,Core_kernel_Core_bin_prot,"Core_kernel__Core_bin_prot");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Md5);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$254);
    caml_call1(Expect_test_collector[4][1],cst_src_md5_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$255,cst$88);
    var
     to_hex=Bin_prot_Md5[6],
     of_hex_exn=Bin_prot_Md5[7],
     compare$57=Bin_prot_Md5[8],
     to_binable$2=Bin_prot_Md5[9],
     of_binable$2=Bin_prot_Md5[10];
    function sexp_of_t$63(t)
     {return caml_call1(sexp_of_t$43,caml_call1(to_hex,t))}
    function t_of_sexp$54(s)
     {return caml_call1(of_hex_exn,caml_call1(t_of_sexp$35,s))}
    function hash_fold_t$30(accum,t)
     {return caml_call2(hash_fold_t$14,accum,caml_call1(to_binable$2,t))}
    function hash$26(t){return caml_call1(hash$11,caml_call1(to_binable$2,t))}
    function sexp_of_t$64(x)
     {return caml_call1(sexp_of_t$43,caml_call1(to_binable$2,x))}
    function t_of_sexp$55(x)
     {return caml_call1(of_binable$2,caml_call1(t_of_sexp$35,x))}
    var
     include$77=
      caml_call1
       (Bin_prot_Utils[11],
        [0,
         [0,
          bin_shape_t$46,
          bin_size_t$48,
          bin_write_t$48,
          bin_read_t$98,
          bin_read_t$99],
         to_binable$2,
         of_binable$2]),
     bin_size_t$63=include$77[1],
     bin_write_t$64=include$77[2],
     bin_read_t$130=include$77[3],
     bin_read_t$131=include$77[4],
     bin_shape_t$79=include$77[5],
     bin_writer_t$72=include$77[6],
     bin_reader_t$72=include$77[7],
     bin_t$72=include$77[8],
     _Tg_=Make$2([0,compare$57,t_of_sexp$55,sexp_of_t$64]),
     symbol$136=_Tg_[1],
     symbol$137=_Tg_[2],
     symbol$138=_Tg_[3],
     symbol$139=_Tg_[4],
     symbol$140=_Tg_[5],
     symbol$141=_Tg_[6],
     equal$27=_Tg_[7],
     min$9=_Tg_[9],
     max$9=_Tg_[10],
     ascending$9=_Tg_[11],
     descending$9=_Tg_[12],
     between$9=_Tg_[13],
     clamp_exn$9=_Tg_[14],
     clamp$9=_Tg_[15],
     comparator$14=_Tg_[16],
     validate_lbound$9=_Tg_[17],
     validate_ubound$9=_Tg_[18],
     validate_bound$9=_Tg_[19],
     Replace_polymorphic_compare$8=_Tg_[20],
     Map$12=_Tg_[21],
     Set$12=_Tg_[22],
     include$78=
      Make$4([0,hash_fold_t$30,t_of_sexp$55,compare$57,sexp_of_t$64,hash$26]),
     compare$58=include$78[1],
     hash_fold_t$31=include$78[2],
     hash$27=include$78[3],
     hashable$9=include$78[4],
     Table$10=include$78[5],
     Hash_set$10=include$78[6],
     Hash_queue$9=include$78[7];
    function to_binable$3(_bdv_){return _bdv_}
    function of_binable$3(_bdu_){return _bdu_}
    var
     include$79=
      caml_call1
       (Bin_prot_Utils[11],
        [0,
         [0,
          Bin_prot_Md5[1],
          Bin_prot_Md5[2],
          Bin_prot_Md5[3],
          Bin_prot_Md5[4],
          Bin_prot_Md5[5]],
         to_binable$3,
         of_binable$3]),
     bin_size_t$64=include$79[1],
     bin_write_t$65=include$79[2],
     bin_read_t$132=include$79[3],
     bin_read_t$133=include$79[4],
     bin_shape_t$80=include$79[5],
     bin_writer_t$73=include$79[6],
     bin_reader_t$73=include$79[7],
     bin_t$73=include$79[8];
    function string(s){return caml_call1(Md5_lib[8],s)}
    var
     _Th_=Make$2([0,compare$57,t_of_sexp$54,sexp_of_t$63]),
     _Ti_=_Th_[1],
     _Tj_=_Th_[2],
     _Tk_=_Th_[3],
     _Tl_=_Th_[4],
     _Tm_=_Th_[5],
     _Tn_=_Th_[6],
     _To_=_Th_[7],
     _Tp_=_Th_[9],
     _Tq_=_Th_[10],
     _Tr_=_Th_[11],
     _Ts_=_Th_[12],
     _Tt_=_Th_[13],
     _Tu_=_Th_[14],
     _Tv_=_Th_[15],
     _Tw_=_Th_[16],
     _Tx_=_Th_[17],
     _Ty_=_Th_[18],
     _Tz_=_Th_[19],
     _TA_=_Th_[20],
     _TB_=_Th_[21],
     _TC_=_Th_[22],
     include$80=
      Make$4([0,hash_fold_t$30,t_of_sexp$54,compare$57,sexp_of_t$63,hash$26]),
     _TK_=Md5_lib[9],
     _TD_=include$80[1],
     _TE_=include$80[2],
     _TF_=include$80[3],
     _TG_=include$80[4],
     _TH_=include$80[5],
     _TI_=include$80[6],
     _TJ_=include$80[7],
     digest_num_bytes=16;
    function file(path)
     {var
       _bdq_=runtime.caml_sys_close,
       _bdr_=runtime.caml_sys_open(path,_TL_,0);
      function _bds_(_bdt_){return runtime.core_md5_fd(_bdt_)}
      return caml_call1
              (of_binable$2,caml_call3(Base_Exn[11],_bds_,_bdr_,_bdq_))}
    function digest_channel_blocking_withou(channel,len)
     {return caml_call1(of_binable$2,runtime.caml_md5_chan(channel,len))}
    function channel(channel,len)
     {return digest_channel_blocking_withou(channel,len)}
    function output_blocking(t,oc)
     {var _bdp_=caml_call1(to_binable$2,t);
      return caml_call2(Stdlib_digest[8],oc,_bdp_)}
    function output$0(oc,t){return output_blocking(t,oc)}
    function input(ic)
     {return caml_call1(of_binable$2,caml_call1(Stdlib_digest[9],ic))}
    var _TM_=Md5_lib[10];
    function subbytes(s,pos,len){return caml_call3(_TM_,s,pos,len)}
    function digest_bin_prot(writer,value)
     {return string(caml_call2(Writer[1],writer,value))}
    function unsafe_digest_subbigstring(buf,pos,len)
     {var res=caml_call1(_Eq_,16);
      runtime.core_md5_digest_subbigstring(buf,pos,len,res);
      var _bdo_=caml_call1(_EJ_,res);
      return caml_call1(Md5_lib[5],_bdo_)}
    function digest_subbigstring(buf,pos,len)
     {caml_call3(_iu_,pos,len,caml_call1(_Rt_,buf));
      return unsafe_digest_subbigstring(buf,pos,len)}
    function digest_bigstring(buf)
     {return unsafe_digest_subbigstring(buf,0,caml_call1(_Rt_,buf))}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$256);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Md5$0);
    var
     _TN_=
      [0,
       [0,
        [0,
         t_of_sexp$55,
         sexp_of_t$64,
         bin_size_t$63,
         bin_write_t$64,
         bin_read_t$130,
         bin_read_t$131,
         bin_shape_t$79,
         bin_writer_t$72,
         bin_reader_t$72,
         bin_t$72,
         compare$57,
         hash_fold_t$30,
         hash$26]],
       t_of_sexp$55,
       sexp_of_t$64,
       symbol$136,
       symbol$137,
       symbol$138,
       symbol$139,
       symbol$140,
       symbol$141,
       equal$27,
       min$9,
       max$9,
       ascending$9,
       descending$9,
       between$9,
       clamp_exn$9,
       clamp$9,
       comparator$14,
       validate_lbound$9,
       validate_ubound$9,
       validate_bound$9,
       Replace_polymorphic_compare$8,
       Map$12,
       Set$12,
       bin_size_t$63,
       bin_write_t$64,
       bin_read_t$130,
       bin_read_t$131,
       bin_shape_t$79,
       bin_writer_t$72,
       bin_reader_t$72,
       bin_t$72,
       compare$58,
       hash_fold_t$31,
       hash$27,
       hashable$9,
       Table$10,
       Hash_set$10,
       Hash_queue$9],
     Core_kernel_Md5=
      [0,
       [0,
        [0,
         t_of_sexp$54,
         sexp_of_t$63,
         bin_size_t$64,
         bin_write_t$65,
         bin_read_t$132,
         bin_read_t$133,
         bin_shape_t$80,
         bin_writer_t$73,
         bin_reader_t$73,
         bin_t$73,
         compare$57,
         hash_fold_t$30,
         hash$26]],
       _TN_,
       t_of_sexp$54,
       sexp_of_t$63,
       _Ti_,
       _Tj_,
       _Tk_,
       _Tl_,
       _Tm_,
       _Tn_,
       _To_,
       _Tp_,
       _Tq_,
       _Tr_,
       _Ts_,
       _Tt_,
       _Tu_,
       _Tv_,
       _Tw_,
       _Tx_,
       _Ty_,
       _Tz_,
       _TA_,
       _TB_,
       _TC_,
       bin_size_t$64,
       bin_write_t$65,
       bin_read_t$132,
       bin_read_t$133,
       bin_shape_t$80,
       bin_writer_t$73,
       bin_reader_t$73,
       bin_t$73,
       _TD_,
       _TE_,
       _TF_,
       _TG_,
       _TH_,
       _TI_,
       _TJ_,
       digest_num_bytes,
       to_binable$2,
       of_binable$2,
       to_hex,
       of_hex_exn,
       string,
       _TK_,
       _TM_,
       file,
       digest_channel_blocking_withou,
       input,
       output_blocking,
       string,
       _TK_,
       subbytes,
       of_hex_exn,
       file,
       channel,
       output$0,
       input,
       digest_bin_prot,
       digest_bigstring,
       digest_subbigstring];
    caml_register_global(5073,Core_kernel_Md5,"Core_kernel__Md5");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Zone_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$257);
    caml_call1(Expect_test_collector[4][1],cst_src_zone_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$258,cst$89);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$259);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Zone_intf$0);
    var Core_kernel_Zone_intf=[0];
    caml_register_global(5074,Core_kernel_Zone_intf,"Core_kernel__Zone_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Binable);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$260);
    caml_call1(Expect_test_collector[4][1],cst_src_binable_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$261,cst$90);
    function of_string$14(m,string)
     {return of_bigstring(m,caml_call3(_Rm_,0,0,string))}
    function to_string$16(m,t)
     {return caml_call3(_Ro_,0,0,to_bigstring(0,m,t))}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$262);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Binable$0);
    var
     _TO_=Stable$0[2][1],
     _TP_=Stable$0[1][1],
     Core_kernel_Binable=
      [0,
       Minimal,
       Stable$0[1][2],
       Stable$0[2][2],
       Stable$0[3][2],
       Stable$0[4][2],
       _TP_,
       _TO_,
       Stable$0[3][1],
       Stable$0[4][1],
       Stable$0[5][2],
       Stable$0[6][2],
       Stable$0[5][1],
       Stable$0[6][1],
       of_bigstring,
       to_bigstring,
       of_string$14,
       to_string$16,
       Stable$0];
    caml_register_global(5075,Core_kernel_Binable,"Core_kernel__Binable");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Zone);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$263);
    caml_call1(Expect_test_collector[4][1],cst_src_zone_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$264,cst$91);
    var
     Invalid_file_format=
      [248,cst_Core_kernel_Zone_Invalid_f,caml_fresh_oo_id(0)];
    function _TQ_(param)
     {if(param[1] === Invalid_file_format)
       {var v0=param[2],v0$0=caml_call1(sexp_of_t$43,v0);
        return [1,[0,_TR_,[0,v0$0,0]]]}
      throw [0,Assert_failure,_TS_]}
    caml_call3(Sexplib0_Sexp_conv[51][2],0,Invalid_file_format,_TQ_);
    var before_first_transition=-1;
    function to_external(t)
     {return caml_call2(Replace_polymorphic_compare$3[10],0,t)}
    function of_external(param){return -1}
    var
     include$81=
      caml_call1
       (caml_call1
         (_TP_,
          [0,
           bin_shape_t$55,
           bin_size_t$50,
           bin_write_t$50,
           bin_read_t$102,
           bin_read_t$103]),
        [0,to_external,of_external]),
     bin_size_t$65=include$81[1],
     bin_write_t$66=include$81[2],
     bin_read_t$134=include$81[3],
     bin_shape_t$81=include$81[5],
     include$82=
      caml_call1
       (caml_call1(Base_Sexpable[1],[0,t_of_sexp$39,sexp_of_t$48]),
        [0,to_external,of_external]),
     t_of_sexp$56=include$82[1],
     sexp_of_t$65=include$82[2],
     _TT_=
      caml_call1
       (Bin_prot_Shape[8],
        [0,
         [0,cst_utc_offset_in_seconds,Stable$5[1][5]],
         [0,
          [0,cst_is_dst,bin_shape_bool],
          [0,[0,cst_abbrv,bin_shape_string],0]]]),
     _TU_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$163),0,_TT_],0],
     _TV_=caml_call1(Bin_prot_Shape[4][1],cst_src_zone_ml_62_8),
     group$101=caml_call2(Bin_prot_Shape[6],_TV_,_TU_),
     _TW_=caml_call1(Bin_prot_Shape[2][1],cst_t$164),
     bin_shape_t$82=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$101,_TW_),0);
    function bin_size_t$66(param)
     {var
       v3=param[3],
       v2=param[2],
       v1=param[1],
       _bdl_=caml_call1(Stable$5[1][1],v1),
       size=caml_call2(Bin_prot_Common[23],0,_bdl_),
       _bdm_=caml_call1(bin_size_t$47,v2),
       size$0=caml_call2(Bin_prot_Common[23],size,_bdm_),
       _bdn_=caml_call1(bin_size_t$48,v3);
      return caml_call2(Bin_prot_Common[23],size$0,_bdn_)}
    function bin_write_t$67(buf,pos,param)
     {var
       v3=param[3],
       v2=param[2],
       v1=param[1],
       pos$0=caml_call3(Stable$5[1][2],buf,pos,v1),
       pos$1=caml_call3(bin_write_t$47,buf,pos$0,v2);
      return caml_call3(bin_write_t$48,buf,pos$1,v3)}
    function bin_read_t$135(buf,pos_ref)
     {var
       v_utc_offset_in_seconds=caml_call2(Stable$5[1][3],buf,pos_ref),
       v_is_dst=caml_call2(bin_read_t$96,buf,pos_ref),
       v_abbrv=caml_call2(bin_read_t$98,buf,pos_ref);
      return [0,v_utc_offset_in_seconds,v_is_dst,v_abbrv]}
    function t_of_sexp$57(sexp)
     {if(0 === sexp[0])
       return caml_call2(Sexplib0_Sexp_conv_error[16],tp_loc$17,sexp);
      var
       field_sexps=sexp[1],
       utc_offset_in_seconds_field=[0,0],
       is_dst_field=[0,0],
       abbrv_field=[0,0],
       duplicates=[0,0],
       extra=[0,0],
       param=field_sexps;
      for(;;)
       {if(param)
         {var _bdc_=param[1];
          if(1 === _bdc_[0])
           {var _bdd_=_bdc_[1];
            if(_bdd_)
             {var _bde_=_bdd_[1];
              if(0 === _bde_[0])
               {var _bdf_=_bdd_[2],_bdg_=_bde_[1],switch$0=0;
                if(! _bdf_ || ! _bdf_[2])switch$0 = 1;
                if(switch$0)
                 {var
                   tail=param[2],
                   field_sexp$3=
                    function(_bdk_)
                     {function field_sexp(param)
                       {if(_bdk_)
                         {if(_bdk_[2])throw [0,Assert_failure,_TX_];
                          var x=_bdk_[1];
                          return x}
                        return caml_call2
                                (Sexplib0_Sexp_conv_error[10],tp_loc$17,sexp)}
                      return field_sexp},
                   field_sexp=field_sexp$3(_bdf_);
                  if(caml_string_notequal(_bdg_,cst_abbrv$0))
                   if(caml_string_notequal(_bdg_,cst_is_dst$0))
                    if(caml_string_notequal(_bdg_,cst_utc_offset_in_seconds$0))
                     {if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_bdg_,extra[1]]}
                    else
                     if(utc_offset_in_seconds_field[1])
                      duplicates[1] = [0,_bdg_,duplicates[1]];
                     else
                      {var
                        field_sexp$0=field_sexp(0),
                        fvalue=caml_call1(Stable$5[1][10],field_sexp$0);
                       utc_offset_in_seconds_field[1] = [0,fvalue]}
                   else
                    if(is_dst_field[1])
                     duplicates[1] = [0,_bdg_,duplicates[1]];
                    else
                     {var
                       field_sexp$1=field_sexp(0),
                       fvalue$0=caml_call1(t_of_sexp$32,field_sexp$1);
                      is_dst_field[1] = [0,fvalue$0]}
                  else
                   if(abbrv_field[1])
                    duplicates[1] = [0,_bdg_,duplicates[1]];
                   else
                    {var
                      field_sexp$2=field_sexp(0),
                      fvalue$1=caml_call1(t_of_sexp$35,field_sexp$2);
                     abbrv_field[1] = [0,fvalue$1]}
                  var param=tail;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[10],tp_loc$17,_bdc_)}
        if(duplicates[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],tp_loc$17,duplicates[1],sexp);
        if(extra[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[13],tp_loc$17,extra[1],sexp);
        var
         _bdh_=utc_offset_in_seconds_field[1],
         _bdi_=is_dst_field[1],
         _bdj_=abbrv_field[1];
        if(_bdh_ && _bdi_ && _bdj_)
         {var
           abbrv_value=_bdj_[1],
           is_dst_value=_bdi_[1],
           utc_offset_in_seconds_value=_bdh_[1];
          return [0,utc_offset_in_seconds_value,is_dst_value,abbrv_value]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[15],
                 tp_loc$17,
                 sexp,
                 [0,
                  [0,
                   0 === utc_offset_in_seconds_field[1]?1:0,
                   cst_utc_offset_in_seconds$1],
                  [0,
                   [0,0 === is_dst_field[1]?1:0,cst_is_dst$1],
                   [0,[0,0 === abbrv_field[1]?1:0,cst_abbrv$1],0]]])}}
    function sexp_of_t$66(param)
     {var
       v_abbrv=param[3],
       v_is_dst=param[2],
       v_utc_offset_in_seconds=param[1],
       arg=caml_call1(sexp_of_t$43,v_abbrv),
       bnds=[0,[1,[0,_TY_,[0,arg,0]]],0],
       arg$0=caml_call1(sexp_of_t$40,v_is_dst),
       bnds$0=[0,[1,[0,_TZ_,[0,arg$0,0]]],bnds],
       arg$1=caml_call1(Stable$5[1][11],v_utc_offset_in_seconds),
       bnds$1=[0,[1,[0,_T0_,[0,arg$1,0]]],bnds$0];
      return [1,bnds$1]}
    var
     _T1_=
      caml_call1
       (Bin_prot_Shape[8],
        [0,
         [0,cst_time_in_seconds_since_epoc,Stable$5[1][5]],
         [0,[0,cst_seconds,bin_shape_int],0]]),
     _T2_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$165),0,_T1_],0],
     _T3_=caml_call1(Bin_prot_Shape[4][1],cst_src_zone_ml_74_8),
     group$102=caml_call2(Bin_prot_Shape[6],_T3_,_T2_),
     _T4_=caml_call1(Bin_prot_Shape[2][1],cst_t$166),
     bin_shape_t$83=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$102,_T4_),0);
    function bin_size_t$67(param)
     {var
       v2=param[2],
       v1=param[1],
       _bda_=caml_call1(Stable$5[1][1],v1),
       size=caml_call2(Bin_prot_Common[23],0,_bda_),
       _bdb_=caml_call1(bin_size_t$50,v2);
      return caml_call2(Bin_prot_Common[23],size,_bdb_)}
    function bin_write_t$68(buf,pos,param)
     {var v2=param[2],v1=param[1],pos$0=caml_call3(Stable$5[1][2],buf,pos,v1);
      return caml_call3(bin_write_t$50,buf,pos$0,v2)}
    function bin_read_t$136(buf,pos_ref)
     {var
       v_time_in_seconds_since_epoch=caml_call2(Stable$5[1][3],buf,pos_ref),
       v_seconds=caml_call2(bin_read_t$102,buf,pos_ref);
      return [0,v_time_in_seconds_since_epoch,v_seconds]}
    function t_of_sexp$58(sexp)
     {if(0 === sexp[0])
       return caml_call2(Sexplib0_Sexp_conv_error[16],tp_loc$18,sexp);
      var
       field_sexps=sexp[1],
       time_in_seconds_since_epoch_fi=[0,0],
       seconds_field=[0,0],
       duplicates=[0,0],
       extra=[0,0],
       param=field_sexps;
      for(;;)
       {if(param)
         {var _bc4_=param[1];
          if(1 === _bc4_[0])
           {var _bc5_=_bc4_[1];
            if(_bc5_)
             {var _bc6_=_bc5_[1];
              if(0 === _bc6_[0])
               {var _bc7_=_bc5_[2],_bc8_=_bc6_[1],switch$0=0;
                if(! _bc7_ || ! _bc7_[2])switch$0 = 1;
                if(switch$0)
                 {var
                   tail=param[2],
                   field_sexp$2=
                    function(_bc$_)
                     {function field_sexp(param)
                       {if(_bc$_)
                         {if(_bc$_[2])throw [0,Assert_failure,_T5_];
                          var x=_bc$_[1];
                          return x}
                        return caml_call2
                                (Sexplib0_Sexp_conv_error[10],tp_loc$18,sexp)}
                      return field_sexp},
                   field_sexp=field_sexp$2(_bc7_);
                  if(caml_string_notequal(_bc8_,cst_seconds$0))
                   if
                    (caml_string_notequal
                      (_bc8_,cst_time_in_seconds_since_epoc$0))
                    {if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_bc8_,extra[1]]}
                   else
                    if(time_in_seconds_since_epoch_fi[1])
                     duplicates[1] = [0,_bc8_,duplicates[1]];
                    else
                     {var
                       field_sexp$0=field_sexp(0),
                       fvalue=caml_call1(Stable$5[1][10],field_sexp$0);
                      time_in_seconds_since_epoch_fi[1] = [0,fvalue]}
                  else
                   if(seconds_field[1])
                    duplicates[1] = [0,_bc8_,duplicates[1]];
                   else
                    {var
                      field_sexp$1=field_sexp(0),
                      fvalue$0=caml_call1(t_of_sexp$39,field_sexp$1);
                     seconds_field[1] = [0,fvalue$0]}
                  var param=tail;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[10],tp_loc$18,_bc4_)}
        if(duplicates[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],tp_loc$18,duplicates[1],sexp);
        if(extra[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[13],tp_loc$18,extra[1],sexp);
        var _bc9_=time_in_seconds_since_epoch_fi[1],_bc__=seconds_field[1];
        if(_bc9_ && _bc__)
         {var seconds_value=_bc__[1],time_in_seconds_since_epoch_va=_bc9_[1];
          return [0,time_in_seconds_since_epoch_va,seconds_value]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[15],
                 tp_loc$18,
                 sexp,
                 [0,
                  [0,
                   0 === time_in_seconds_since_epoch_fi[1]?1:0,
                   cst_time_in_seconds_since_epoc$1],
                  [0,[0,0 === seconds_field[1]?1:0,cst_seconds$1],0]])}}
    function sexp_of_t$67(param)
     {var
       v_seconds=param[2],
       v_time_in_seconds_since_epoch=param[1],
       arg=caml_call1(sexp_of_t$48,v_seconds),
       bnds=[0,[1,[0,_T6_,[0,arg,0]]],0],
       arg$0=caml_call1(Stable$5[1][11],v_time_in_seconds_since_epoch),
       bnds$0=[0,[1,[0,_T7_,[0,arg$0,0]]],bnds];
      return [1,bnds$0]}
    var
     _T8_=
      caml_call1
       (Bin_prot_Shape[8],
        [0,
         [0,cst_start_time_in_seconds_sinc,Stable$5[1][5]],
         [0,[0,cst_new_regime,bin_shape_t$82],0]]),
     _T9_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$167),0,_T8_],0],
     _T__=caml_call1(Bin_prot_Shape[4][1],cst_src_zone_ml_82_8),
     group$103=caml_call2(Bin_prot_Shape[6],_T__,_T9_),
     _T$_=caml_call1(Bin_prot_Shape[2][1],cst_t$168),
     bin_shape_t$84=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$103,_T$_),0);
    function bin_size_t$68(param)
     {var
       v2=param[2],
       v1=param[1],
       _bc2_=caml_call1(Stable$5[1][1],v1),
       size=caml_call2(Bin_prot_Common[23],0,_bc2_),
       _bc3_=bin_size_t$66(v2);
      return caml_call2(Bin_prot_Common[23],size,_bc3_)}
    function bin_write_t$69(buf,pos,param)
     {var v2=param[2],v1=param[1],pos$0=caml_call3(Stable$5[1][2],buf,pos,v1);
      return bin_write_t$67(buf,pos$0,v2)}
    function bin_read_t$137(buf,pos_ref)
     {var
       v_start_time_in_seconds_since_=caml_call2(Stable$5[1][3],buf,pos_ref),
       v_new_regime=bin_read_t$135(buf,pos_ref);
      return [0,v_start_time_in_seconds_since_,v_new_regime]}
    function t_of_sexp$59(sexp)
     {if(0 === sexp[0])
       return caml_call2(Sexplib0_Sexp_conv_error[16],tp_loc$19,sexp);
      var
       field_sexps=sexp[1],
       start_time_in_seconds_since_ep=[0,0],
       new_regime_field=[0,0],
       duplicates=[0,0],
       extra=[0,0],
       param=field_sexps;
      for(;;)
       {if(param)
         {var _bcU_=param[1];
          if(1 === _bcU_[0])
           {var _bcV_=_bcU_[1];
            if(_bcV_)
             {var _bcW_=_bcV_[1];
              if(0 === _bcW_[0])
               {var _bcX_=_bcV_[2],_bcY_=_bcW_[1],switch$0=0;
                if(! _bcX_ || ! _bcX_[2])switch$0 = 1;
                if(switch$0)
                 {var
                   tail=param[2],
                   field_sexp$2=
                    function(_bc1_)
                     {function field_sexp(param)
                       {if(_bc1_)
                         {if(_bc1_[2])throw [0,Assert_failure,_Ua_];
                          var x=_bc1_[1];
                          return x}
                        return caml_call2
                                (Sexplib0_Sexp_conv_error[10],tp_loc$19,sexp)}
                      return field_sexp},
                   field_sexp=field_sexp$2(_bcX_);
                  if(caml_string_notequal(_bcY_,cst_new_regime$0))
                   if
                    (caml_string_notequal
                      (_bcY_,cst_start_time_in_seconds_sinc$0))
                    {if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_bcY_,extra[1]]}
                   else
                    if(start_time_in_seconds_since_ep[1])
                     duplicates[1] = [0,_bcY_,duplicates[1]];
                    else
                     {var
                       field_sexp$0=field_sexp(0),
                       fvalue=caml_call1(Stable$5[1][10],field_sexp$0);
                      start_time_in_seconds_since_ep[1] = [0,fvalue]}
                  else
                   if(new_regime_field[1])
                    duplicates[1] = [0,_bcY_,duplicates[1]];
                   else
                    {var
                      field_sexp$1=field_sexp(0),
                      fvalue$0=t_of_sexp$57(field_sexp$1);
                     new_regime_field[1] = [0,fvalue$0]}
                  var param=tail;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[10],tp_loc$19,_bcU_)}
        if(duplicates[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],tp_loc$19,duplicates[1],sexp);
        if(extra[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[13],tp_loc$19,extra[1],sexp);
        var _bcZ_=start_time_in_seconds_since_ep[1],_bc0_=new_regime_field[1];
        if(_bcZ_ && _bc0_)
         {var
           new_regime_value=_bc0_[1],
           start_time_in_seconds_since_ep$0=_bcZ_[1];
          return [0,start_time_in_seconds_since_ep$0,new_regime_value]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[15],
                 tp_loc$19,
                 sexp,
                 [0,
                  [0,
                   0 === start_time_in_seconds_since_ep[1]?1:0,
                   cst_start_time_in_seconds_sinc$1],
                  [0,[0,0 === new_regime_field[1]?1:0,cst_new_regime$1],0]])}}
    function sexp_of_t$68(param)
     {var
       v_new_regime=param[2],
       v_start_time_in_seconds_since_=param[1],
       arg=sexp_of_t$66(v_new_regime),
       bnds=[0,[1,[0,_Ub_,[0,arg,0]]],0],
       arg$0=caml_call1(Stable$5[1][11],v_start_time_in_seconds_since_),
       bnds$0=[0,[1,[0,_Uc_,[0,arg$0,0]]],bnds];
      return [1,bnds$0]}
    var
     _Ud_=
      [0,
       [0,cst_last_regime_index,bin_shape_t$81],
       [0,
        [0,cst_default_local_time_type,bin_shape_t$82],
        [0,[0,cst_leap_seconds,bin_shape_list(bin_shape_t$83)],0]]],
     _Ue_=[0,[0,cst_transitions,bin_shape_array(bin_shape_t$84)],_Ud_],
     _Uf_=[0,[0,cst_digest,bin_shape_option(_TN_[29])],_Ue_],
     _Ug_=
      [0,
       [0,cst_name,bin_shape_string],
       [0,[0,cst_original_filename,bin_shape_option(bin_shape_string)],_Uf_]],
     _Uh_=caml_call1(Bin_prot_Shape[8],_Ug_),
     _Ui_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$169),0,_Uh_],0],
     _Uj_=caml_call1(Bin_prot_Shape[4][1],cst_src_zone_ml_89_6),
     group$104=caml_call2(Bin_prot_Shape[6],_Uj_,_Ui_),
     _Uk_=caml_call1(Bin_prot_Shape[2][1],cst_t$170),
     bin_shape_t$85=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$104,_Uk_),0);
    function bin_size_t$69(param)
     {var
       v4=param[4],
       v3=param[3],
       v2=param[2],
       v1=param[1],
       v5=param[5],
       v7=param[7],
       v6=param[6],
       _bcN_=caml_call1(bin_size_t$48,v1),
       size=caml_call2(Bin_prot_Common[23],0,_bcN_),
       _bcO_=bin_size_option(bin_size_t$48,v2),
       size$0=caml_call2(Bin_prot_Common[23],size,_bcO_),
       _bcP_=bin_size_option(_TN_[25],v3),
       size$1=caml_call2(Bin_prot_Common[23],size$0,_bcP_),
       _bcQ_=bin_size_array(bin_size_t$68,v4),
       size$2=caml_call2(Bin_prot_Common[23],size$1,_bcQ_),
       _bcR_=caml_call1(bin_size_t$65,v5),
       size$3=caml_call2(Bin_prot_Common[23],size$2,_bcR_),
       _bcS_=bin_size_t$66(v6),
       size$4=caml_call2(Bin_prot_Common[23],size$3,_bcS_),
       _bcT_=bin_size_list(bin_size_t$67,v7);
      return caml_call2(Bin_prot_Common[23],size$4,_bcT_)}
    function bin_write_t$70(buf,pos,param)
     {var
       v4=param[4],
       v3=param[3],
       v2=param[2],
       v1=param[1],
       v5=param[5],
       v7=param[7],
       v6=param[6],
       pos$0=caml_call3(bin_write_t$48,buf,pos,v1),
       pos$3=bin_write_option(bin_write_t$48,buf,pos$0,v2),
       pos$4=bin_write_option(_TN_[26],buf,pos$3,v3),
       pos$5=bin_write_array(bin_write_t$69,buf,pos$4,v4),
       pos$1=caml_call3(bin_write_t$66,buf,pos$5,v5),
       pos$2=bin_write_t$67(buf,pos$1,v6);
      return bin_write_list(bin_write_t$68,buf,pos$2,v7)}
    var bin_writer_t$74=[0,bin_size_t$69,bin_write_t$70];
    function bin_read_t$138(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_src_zone_ml_Stable_Full_da,pos_ref[1])}
    function bin_read_t$139(buf,pos_ref)
     {var
       v_name=caml_call2(bin_read_t$98,buf,pos_ref),
       v_original_filename=bin_read_option$0(bin_read_t$98,buf,pos_ref),
       v_digest=bin_read_option$0(_TN_[27],buf,pos_ref),
       v_transitions=bin_read_array$0(bin_read_t$137,buf,pos_ref),
       v_last_regime_index=caml_call2(bin_read_t$134,buf,pos_ref),
       v_default_local_time_type=bin_read_t$135(buf,pos_ref),
       v_leap_seconds=bin_read_list$0(bin_read_t$136,buf,pos_ref);
      return [0,
              v_name,
              v_original_filename,
              v_digest,
              v_transitions,
              v_last_regime_index,
              v_default_local_time_type,
              v_leap_seconds]}
    var
     bin_reader_t$74=[0,bin_read_t$139,bin_read_t$138],
     bin_t$74=[0,bin_shape_t$85,bin_writer_t$74,bin_reader_t$74];
    function t_of_sexp$60(sexp)
     {if(0 === sexp[0])
       return caml_call2(Sexplib0_Sexp_conv_error[16],tp_loc$20,sexp);
      var
       field_sexps=sexp[1],
       name_field=[0,0],
       original_filename_field=[0,0],
       digest_field=[0,0],
       transitions_field=[0,0],
       last_regime_index_field=[0,0],
       default_local_time_type_field=[0,0],
       leap_seconds_field=[0,0],
       duplicates=[0,0],
       extra=[0,0],
       param=field_sexps;
      for(;;)
       {if(param)
         {var _bcA_=param[1];
          if(1 === _bcA_[0])
           {var _bcB_=_bcA_[1];
            if(_bcB_)
             {var _bcC_=_bcB_[1];
              if(0 === _bcC_[0])
               {var _bcD_=_bcB_[2],_bcE_=_bcC_[1],switch$0=0;
                if(! _bcD_ || ! _bcD_[2])switch$0 = 1;
                if(switch$0)
                 {var
                   tail=param[2],
                   field_sexp$7=
                    function(_bcM_)
                     {function field_sexp(param)
                       {if(_bcM_)
                         {if(_bcM_[2])throw [0,Assert_failure,_Ul_];
                          var x=_bcM_[1];
                          return x}
                        return caml_call2
                                (Sexplib0_Sexp_conv_error[10],tp_loc$20,sexp)}
                      return field_sexp},
                   field_sexp=field_sexp$7(_bcD_);
                  if
                   (caml_string_notequal(_bcE_,cst_default_local_time_type$0))
                   if(caml_string_notequal(_bcE_,cst_digest$0))
                    if(caml_string_notequal(_bcE_,cst_last_regime_index$0))
                     if(caml_string_notequal(_bcE_,cst_leap_seconds$0))
                      if(caml_string_notequal(_bcE_,cst_name$0))
                       if(caml_string_notequal(_bcE_,cst_original_filename$0))
                        if(caml_string_notequal(_bcE_,cst_transitions$0))
                         {if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_bcE_,extra[1]]}
                        else
                         if(transitions_field[1])
                          duplicates[1] = [0,_bcE_,duplicates[1]];
                         else
                          {var
                            field_sexp$0=field_sexp(0),
                            fvalue=caml_call2(_k5_,t_of_sexp$59,field_sexp$0);
                           transitions_field[1] = [0,fvalue]}
                       else
                        if(original_filename_field[1])
                         duplicates[1] = [0,_bcE_,duplicates[1]];
                        else
                         {var
                           field_sexp$1=field_sexp(0),
                           fvalue$0=caml_call2(t_of_sexp$26,t_of_sexp$35,field_sexp$1);
                          original_filename_field[1] = [0,fvalue$0]}
                      else
                       if(name_field[1])
                        duplicates[1] = [0,_bcE_,duplicates[1]];
                       else
                        {var
                          field_sexp$2=field_sexp(0),
                          fvalue$1=caml_call1(t_of_sexp$35,field_sexp$2);
                         name_field[1] = [0,fvalue$1]}
                     else
                      if(leap_seconds_field[1])
                       duplicates[1] = [0,_bcE_,duplicates[1]];
                      else
                       {var
                         field_sexp$3=field_sexp(0),
                         fvalue$2=caml_call2(t_of_sexp$18,t_of_sexp$58,field_sexp$3);
                        leap_seconds_field[1] = [0,fvalue$2]}
                    else
                     if(last_regime_index_field[1])
                      duplicates[1] = [0,_bcE_,duplicates[1]];
                     else
                      {var
                        field_sexp$4=field_sexp(0),
                        fvalue$3=caml_call1(t_of_sexp$56,field_sexp$4);
                       last_regime_index_field[1] = [0,fvalue$3]}
                   else
                    if(digest_field[1])
                     duplicates[1] = [0,_bcE_,duplicates[1]];
                    else
                     {var
                       field_sexp$5=field_sexp(0),
                       fvalue$4=caml_call2(t_of_sexp$26,_TN_[2],field_sexp$5);
                      digest_field[1] = [0,fvalue$4]}
                  else
                   if(default_local_time_type_field[1])
                    duplicates[1] = [0,_bcE_,duplicates[1]];
                   else
                    {var
                      field_sexp$6=field_sexp(0),
                      fvalue$5=t_of_sexp$57(field_sexp$6);
                     default_local_time_type_field[1] = [0,fvalue$5]}
                  var param=tail;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[10],tp_loc$20,_bcA_)}
        if(duplicates[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],tp_loc$20,duplicates[1],sexp);
        if(extra[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[13],tp_loc$20,extra[1],sexp);
        var
         _bcF_=name_field[1],
         _bcG_=original_filename_field[1],
         _bcH_=digest_field[1],
         _bcI_=transitions_field[1],
         _bcJ_=last_regime_index_field[1],
         _bcK_=default_local_time_type_field[1],
         _bcL_=leap_seconds_field[1];
        if(_bcF_ && _bcG_ && _bcH_ && _bcI_ && _bcJ_ && _bcK_ && _bcL_)
         {var
           leap_seconds_value=_bcL_[1],
           default_local_time_type_value=_bcK_[1],
           last_regime_index_value=_bcJ_[1],
           transitions_value=_bcI_[1],
           digest_value=_bcH_[1],
           original_filename_value=_bcG_[1],
           name_value=_bcF_[1];
          return [0,
                  name_value,
                  original_filename_value,
                  digest_value,
                  transitions_value,
                  last_regime_index_value,
                  default_local_time_type_value,
                  leap_seconds_value]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[15],
                 tp_loc$20,
                 sexp,
                 [0,
                  [0,0 === name_field[1]?1:0,cst_name$1],
                  [0,
                   [0,
                    0 === original_filename_field[1]?1:0,
                    cst_original_filename$1],
                   [0,
                    [0,0 === digest_field[1]?1:0,cst_digest$1],
                    [0,
                     [0,0 === transitions_field[1]?1:0,cst_transitions$1],
                     [0,
                      [0,
                       0 === last_regime_index_field[1]?1:0,
                       cst_last_regime_index$1],
                      [0,
                       [0,
                        0 === default_local_time_type_field[1]?1:0,
                        cst_default_local_time_type$1],
                       [0,[0,0 === leap_seconds_field[1]?1:0,cst_leap_seconds$1],0]]]]]]])}}
    function sexp_of_t$69(param)
     {var
       v_transitions=param[4],
       v_digest=param[3],
       v_original_filename=param[2],
       v_name=param[1],
       v_last_regime_index=param[5],
       v_leap_seconds=param[7],
       v_default_local_time_type=param[6],
       arg=caml_call2(sexp_of_t$17,sexp_of_t$67,v_leap_seconds),
       bnds=[0,[1,[0,_Um_,[0,arg,0]]],0],
       arg$0=sexp_of_t$66(v_default_local_time_type),
       bnds$0=[0,[1,[0,_Un_,[0,arg$0,0]]],bnds],
       arg$1=caml_call1(sexp_of_t$65,v_last_regime_index),
       bnds$1=[0,[1,[0,_Uo_,[0,arg$1,0]]],bnds$0],
       arg$2=caml_call2(_k4_,sexp_of_t$68,v_transitions),
       bnds$2=[0,[1,[0,_Up_,[0,arg$2,0]]],bnds$1],
       arg$3=caml_call2(sexp_of_t$33,_TN_[3],v_digest),
       bnds$3=[0,[1,[0,_Uq_,[0,arg$3,0]]],bnds$2],
       arg$4=caml_call2(sexp_of_t$33,sexp_of_t$43,v_original_filename),
       bnds$4=[0,[1,[0,_Ur_,[0,arg$4,0]]],bnds$3],
       arg$5=caml_call1(sexp_of_t$43,v_name),
       bnds$5=[0,[1,[0,_Us_,[0,arg$5,0]]],bnds$4];
      return [1,bnds$5]}
    function compare$59(t1,t2){return caml_call2(compare$37,t1[1],t2[1])}
    function original_filename(zone){return zone[2]}
    function digest(zone){return zone[3]}
    function bool_of_int(i)
     {return caml_call2(Replace_polymorphic_compare$3[6],i,0)}
    var long$0=caml_call1(_Eq_,4);
    function int32_of_char(chr){return caml_call1(of_int_exn$0,chr)}
    function input_long_as_int32(ic)
     {caml_call4(Stdio_In_channel[8],ic,long$0,0,4);
      var
       sb1=
        caml_call2(shift_left$0,int32_of_char(caml_call2(_Ey_,long$0,0)),24),
       sb2=
        caml_call2(shift_left$0,int32_of_char(caml_call2(_Ey_,long$0,1)),16),
       sb3=caml_call2(shift_left$0,int32_of_char(caml_call2(_Ey_,long$0,2)),8),
       sb4=int32_of_char(caml_call2(_Ey_,long$0,3)),
       _bcz_=caml_call2(bit_or$0,sb3,sb4);
      return caml_call2(bit_or$0,caml_call2(bit_or$0,sb1,sb2),_bcz_)}
    function input_long_as_int(ic)
     {return caml_call1(to_int_exn$0,input_long_as_int32(ic))}
    function input_long_as_int63(ic)
     {return caml_call1(of_int32$2,input_long_as_int32(ic))}
    function input_long_long_as_int63(ic)
     {function int63_of_char(chr){return caml_call1(of_int_exn$2,chr)}
      function shift(c,bits)
       {return caml_call2(shift_left$2,int63_of_char(c),bits)}
      var long_long=caml_call1(_Eq_,8);
      caml_call4(Stdio_In_channel[8],ic,long_long,0,8);
      var
       result=shift(caml_call2(_Ey_,long_long,0),56),
       result$0=
        caml_call2(bit_or$2,result,shift(caml_call2(_Ey_,long_long,1),48)),
       result$1=
        caml_call2(bit_or$2,result$0,shift(caml_call2(_Ey_,long_long,2),40)),
       result$2=
        caml_call2(bit_or$2,result$1,shift(caml_call2(_Ey_,long_long,3),32)),
       result$3=
        caml_call2(bit_or$2,result$2,shift(caml_call2(_Ey_,long_long,4),24)),
       result$4=
        caml_call2(bit_or$2,result$3,shift(caml_call2(_Ey_,long_long,5),16)),
       result$5=
        caml_call2(bit_or$2,result$4,shift(caml_call2(_Ey_,long_long,6),8)),
       result$6=
        caml_call2
         (bit_or$2,result$5,int63_of_char(caml_call2(_Ey_,long_long,7)));
      return result$6}
    function input_list(ic,c,f)
     {var c$0=c,lst=0;
      for(;;)
       {if(caml_call2(Replace_polymorphic_compare$3[4],c$0,0))
         {var
           lst$0=[0,caml_call1(f,ic),lst],
           c$1=c$0 - 1 | 0,
           c$0=c$1,
           lst=lst$0;
          continue}
        return caml_call1(parts,lst)}}
    function input_array(ic,len,f)
     {return caml_call1(of_list,input_list(ic,len,f))}
    function input_regime(ic)
     {var
       utc_offset_in_seconds=input_long_as_int63(ic),
       is_dst=
        bool_of_int
         (caml_call4(_x7_,0,0,0,caml_call1(Stdio_In_channel[10],ic))),
       abbrv_index=caml_call4(_x7_,0,0,0,caml_call1(Stdio_In_channel[10],ic));
      function lt(abbrv){return [0,utc_offset_in_seconds,is_dst,abbrv]}
      return [0,lt,abbrv_index]}
    function input_tz_file_gen(input_transition,input_leap_second,ic)
     {var
       utc_local_count=input_long_as_int(ic),
       std_wall_count=input_long_as_int(ic),
       leap_count=input_long_as_int(ic),
       transition_count=input_long_as_int(ic),
       type_count=input_long_as_int(ic),
       len=input_long_as_int(ic),
       transition_times=input_list(ic,transition_count,input_transition),
       transition_indices=
        input_list
         (ic,
          transition_count,
          function(ic)
           {return caml_call4(_x7_,0,0,0,caml_call1(Stdio_In_channel[10],ic))}),
       regimes=input_list(ic,type_count,input_regime),
       raw_abbrvs=
        input_list
         (ic,
          len,
          function(ic)
           {return caml_call4(_x7_,0,0,0,caml_call1(Stdio_In_channel[9],ic))}),
       buf=caml_call1(Stdlib_buffer[1],len);
      function _bcx_(param,c)
       {var abbrvs=param[2],index=param[1];
        if(c){caml_call2(Stdlib_buffer[10],buf,c);return [0,index,abbrvs]}
        var
         data=caml_call1(Stdlib_buffer[2],buf),
         next_index=(index + caml_ml_string_length(data) | 0) + 1 | 0,
         abbrvs$0=caml_call3(set$2,abbrvs,index,data);
        caml_call1(Stdlib_buffer[8],buf);
        return [0,next_index,abbrvs$0]}
      var
       match=caml_call3(_o__,raw_abbrvs,[0,0,_wk_[13]],_bcx_),
       indexed_abbrvs=match[2],
       _bcy_=caml_call1(Stdlib_buffer[7],buf);
      if(caml_call2(Replace_polymorphic_compare$3[6],_bcy_,0))
       throw [0,Invalid_file_format,cst_missing_terminating_charac];
      var leap_seconds=input_list(ic,leap_count,input_leap_second);
      input_array
       (ic,
        std_wall_count,
        function(ic)
         {return bool_of_int
                  (caml_call4(_x7_,0,0,0,caml_call1(Stdio_In_channel[10],ic)))});
      input_array
       (ic,
        utc_local_count,
        function(ic)
         {return bool_of_int
                  (caml_call4(_x7_,0,0,0,caml_call1(Stdio_In_channel[10],ic)))});
      var
       regimes$0=
        caml_call1
         (of_list,
          caml_call2
           (_p9_,
            regimes,
            function(param)
             {var
               abbrv_index=param[2],
               lt=param[1],
               abbrv=caml_call2(find_exn$2,indexed_abbrvs,abbrv_index);
              return caml_call1(lt,abbrv)})),
       l=
        caml_call3
         (_qe_,
          transition_times,
          transition_indices,
          function(time,index)
           {var regime=caml_check_bound(regimes$0,index)[1 + index];
            return [0,time,regime]}),
       acc=0,
       l$0=l;
      for(;;)
       {if(l$0)
         {var
           l$1=l$0[2],
           match$0=l$0[1],
           new_regime=match$0[2],
           start_time_in_seconds_since_ep=match$0[1],
           acc$0=[0,[0,start_time_in_seconds_since_ep,new_regime],acc],
           acc=acc$0,
           l$0=l$1;
          continue}
        var
         transitions=caml_call1(of_list,caml_call1(parts,acc)),
         match$1=caml_call2(find,regimes$0,function(r){return 1 - r[2]});
        if(match$1)
         var ltt=match$1[1],default_local_time_type=ltt;
        else
         var default_local_time_type=caml_check_bound(regimes$0,0)[1];
        return function(name,original_filename,digest)
         {return [0,
                  name,
                  [0,original_filename],
                  [0,digest],
                  transitions,
                  before_first_transition,
                  default_local_time_type,
                  leap_seconds]}}}
    function input_leap_second_gen(input_leap_second,ic)
     {var
       time_in_seconds_since_epoch=caml_call1(input_leap_second,ic),
       seconds=input_long_as_int(ic);
      return [0,time_in_seconds_since_epoch,seconds]}
    function read_header(ic)
     {var buf=caml_call1(_Eq_,4);
      caml_call4(Stdio_In_channel[8],ic,buf,0,4);
      var magic=caml_call1(_EJ_,buf);
      if(1 - caml_call2(equal$18,magic,cst_TZif))
       throw [0,Invalid_file_format,cst_magic_characters_TZif_not_];
      var match=caml_call1(Stdio_In_channel[9],ic);
      if(match)
       {var _bcu_=match[1],switcher=_bcu_ - 50 | 0;
        if(1 < switcher >>> 0)
         {if(-49 <= switcher)
           throw [0,Invalid_file_format,caml_call2(_fw_,_Ut_,_bcu_)];
          var _bcv_=19227}
        else
         var _bcv_=switcher?19229:19228;
        var _bcw_=caml_call1(_Eq_,15);
        caml_call4(Stdio_In_channel[8],ic,_bcw_,0,15);
        return _bcv_}
      throw [0,Invalid_file_format,cst_expected_version_found_not]}
    function input_tz_file_v1(ic)
     {function input_leap_second(_bct_)
       {return input_leap_second_gen(input_long_as_int63,_bct_)}
      return input_tz_file_gen(input_long_as_int63,input_leap_second,ic)}
    function input_tz_file(zonename,filename)
     {try
       {var
         _bco_=Stdio_In_channel[5],
         _bcp_=caml_call2(Stdio_In_channel[3],0,filename),
         _bcq_=
          caml_call3
           (_Pk_,
            function(ic)
             {var version=read_header(ic);
              if(19228 <= version)
               {input_tz_file_v1(ic);
                var x_001=read_header(ic);
                if(caml_call2(Ppx_compare_lib[1],x_001,version))
                 var match=0;
                else
                 {var switch$0=0;
                  if(19228 === x_001)
                   if(19228 === version)var match=0;else switch$0 = 1;
                  else
                   if(19229 <= x_001)
                    if(19229 === version)var match=0;else switch$0 = 1;
                   else
                    if(19227 === version)var match=0;else switch$0 = 1;
                  if(switch$0)var match=caml_int_compare(x_001,version)}
                var _bcr_=0 === match?1:0;
                if(! _bcr_)throw [0,Assert_failure,_Uu_];
                var
                 input_leap_second=
                  function(_bcs_)
                   {return input_leap_second_gen
                            (input_long_long_as_int63,_bcs_)},
                 make_zone=
                  input_tz_file_gen
                   (input_long_long_as_int63,input_leap_second,ic)}
              else
               var make_zone=input_tz_file_v1(ic);
              var
               digest=file(filename),
               r=caml_call3(make_zone,zonename,filename,digest);
              return r},
            _bcp_,
            _bco_);
        return _bcq_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] === Invalid_file_format)
         {var reason=exn[2];
          throw [0,Invalid_file_format,caml_call3(_fw_,_Uv_,filename,reason)]}
        throw exn}}
    function of_utc_offset(offset)
     {if
       (caml_call2(Replace_polymorphic_compare$3[1],offset,-24)
        &&
        caml_call2(Replace_polymorphic_compare$3[2],offset,24))
       {if(caml_call2(Replace_polymorphic_compare$3[3],offset,0))
         var name=cst_UTC;
        else
         var
          _bcm_=caml_call1(_Gf_,offset),
          _bcn_=
           caml_call2(Replace_polymorphic_compare$3[5],offset,0)?cst$92:cst$93,
          name=caml_call3(_fw_,_Uw_,_bcn_,_bcm_);
        var
         utc_offset_in_seconds=
          caml_call1(of_int$3,(offset * 60 | 0) * 60 | 0);
        return [0,
                name,
                0,
                0,
                [0],
                before_first_transition,
                [0,utc_offset_in_seconds,0,name],
                0]}
      throw [0,Assert_failure,_Ux_]}
    function sexp_of_t$70(t){return [0,t[1]]}
    var likely_machine_zones=[0,_Uy_],utc=of_utc_offset(0);
    function name$51(zone){return zone[1]}
    function reset_transition_cache(t)
     {t[5] = before_first_transition;return 0}
    function get_regime_exn(t,index)
     {return caml_call2(Replace_polymorphic_compare$3[5],index,0)
              ?t[6]
              :caml_check_bound(t[4],index)[1 + index][2]}
    function effective_start_time(mode,x)
     {return mode?caml_call2(include$62[100][1],x[1],x[2][1]):x[1]}
    function index_lower_bound_contains_sec(t,index,mode,seconds)
     {var _bcl_=caml_call2(Replace_polymorphic_compare$3[5],index,0);
      return _bcl_
              ?_bcl_
              :caml_call2
                (symbol$99,
                 seconds,
                 effective_start_time
                  (mode,caml_check_bound(t[4],index)[1 + index]))}
    function index_upper_bound_contains_sec(t,index,mode,seconds)
     {var
       _bci_=caml_call1(length,t[4]),
       _bcj_=caml_call2(Replace_polymorphic_compare$3[1],index + 1 | 0,_bci_);
      if(_bcj_)return _bcj_;
      var _bck_=index + 1 | 0;
      return caml_call2
              (symbol$103,
               seconds,
               effective_start_time
                (mode,caml_check_bound(t[4],_bck_)[1 + _bck_]))}
    function binary_search_index_of_seconds(t,mode,seconds)
     {var _bcg_=125585502;
      function _bch_(transition)
       {return caml_call2
                 (symbol$100,effective_start_time(mode,transition),seconds)
                ?847852583
                :-57574468}
      return caml_call2
              (_x6_,
               caml_call5(binary_search_segmented,0,0,t[4],_bch_,_bcg_),
               before_first_transition)}
    function index_of_seconds_since_epoch(t,mode,seconds)
     {var index=t[5];
      if(index_lower_bound_contains_sec(t,index,mode,seconds))
       if(index_upper_bound_contains_sec(t,index,mode,seconds))
        var index$0=index;
       else
        var
         index$1=index + 1 | 0,
         index$2=
          index_upper_bound_contains_sec(t,index$1,mode,seconds)
           ?index$1
           :binary_search_index_of_seconds(t,mode,seconds),
         index$0=index$2;
      else
       var
        index$3=index - 1 | 0,
        index$4=
         index_lower_bound_contains_sec(t,index$3,mode,seconds)
          ?index$3
          :binary_search_index_of_seconds(t,mode,seconds),
        index$0=index$4;
      t[5] = index$0;
      return index$0}
    var
     Span=[0,ident,ident],
     Date_and_ofday=[0,ident,ident],
     Time_in_seconds=[0,Span,Date_and_ofday,ident,ident];
    function index(t,time)
     {var _bcf_=caml_call1(Time_in_seconds[4],time);
      return index_of_seconds_since_epoch
              (t,0,caml_call1(Time_in_seconds[1][2],_bcf_))}
    function index_of_date_and_ofday(t,time)
     {var _bce_=caml_call1(Time_in_seconds[2][2],time);
      return index_of_seconds_since_epoch
              (t,1,caml_call1(Time_in_seconds[1][2],_bce_))}
    function index_has_prev_clock_shift(t,index)
     {var _bcc_=caml_call2(Replace_polymorphic_compare$3[1],index,0);
      if(_bcc_)
       {var _bcd_=caml_call1(length,t[4]);
        return caml_call2(Replace_polymorphic_compare$3[5],index,_bcd_)}
      return _bcc_}
    function index_has_next_clock_shift(t,index)
     {return index_has_prev_clock_shift(t,index + 1 | 0)}
    function index_prev_clock_shift_time_ex(t,index)
     {var
       transition=caml_check_bound(t[4],index)[1 + index],
       _bcb_=caml_call1(Time_in_seconds[1][1],transition[1]);
      return caml_call1(Time_in_seconds[3],_bcb_)}
    function index_next_clock_shift_time_ex(t,index)
     {return index_prev_clock_shift_time_ex(t,index + 1 | 0)}
    function index_prev_clock_shift_amount_(t,index)
     {var
       transition=caml_check_bound(t[4],index)[1 + index],
       after=transition[2];
      if(caml_call2(Replace_polymorphic_compare$3[3],index,0))
       var before=t[6];
      else
       var
        _bca_=index - 1 | 0,
        before=caml_check_bound(t[4],_bca_)[1 + _bca_][2];
      var _bb$_=caml_call2(symbol$106,after[1],before[1]);
      return caml_call1(Time_in_seconds[1][1],_bb$_)}
    function index_next_clock_shift_amount_(t,index)
     {return index_prev_clock_shift_amount_(t,index + 1 | 0)}
    function index_abbreviation_exn(t,index)
     {var regime=get_regime_exn(t,index);return regime[3]}
    function index_offset_from_utc_exn(t,index)
     {var regime=get_regime_exn(t,index);
      return caml_call1(Time_in_seconds[1][1],regime[1])}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$265);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Zone$0);
    var
     _Uz_=
      [0,
       [0,
        [0,
         bin_size_t$69,
         bin_write_t$70,
         bin_read_t$139,
         bin_read_t$138,
         bin_shape_t$85,
         bin_writer_t$74,
         bin_reader_t$74,
         bin_t$74,
         compare$59,
         t_of_sexp$60,
         sexp_of_t$69]]],
     Index=[0,next$0,prev$1],
     include$83=
      [0,
       sexp_of_t$70,
       compare$59,
       input_tz_file,
       likely_machine_zones,
       of_utc_offset,
       utc,
       name$51,
       original_filename,
       digest,
       Time_in_seconds,
       reset_transition_cache,
       Index,
       index,
       index_of_date_and_ofday,
       index_offset_from_utc_exn,
       index_abbreviation_exn,
       index_has_prev_clock_shift,
       index_prev_clock_shift_time_ex,
       index_prev_clock_shift_amount_,
       index_has_next_clock_shift,
       index_next_clock_shift_time_ex,
       index_next_clock_shift_amount_,
       _Uz_];
    caml_register_global(5079,include$83,"Core_kernel__Zone");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Source_code_po$1);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$266);
    caml_call1(Expect_test_collector[4][1],cst_src_source_code_position_m);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$267,cst$94);
    var
     _UA_=[0,_mV_,_mX_],
     _UB_=
      [0,
       include$17[4],
       include$17[5],
       include$17[6],
       include$17[7],
       include$17[8],
       include$17[9],
       include$17[10],
       include$17[11],
       include$17[12],
       include$17[13],
       include$17[14],
       include$17[15],
       include$17[16],
       include$17[17],
       include$17[18],
       include$17[19],
       include$17[20],
       include$17[21],
       include$17[22]],
     _UC_=function(_bb__){return _xh_(_UB_,_bb__)}(_UA_),
     _UD_=_UC_[1],
     _UE_=_UC_[2],
     _UF_=_UC_[3],
     _UG_=_UC_[4],
     _UH_=_UC_[5],
     _UI_=_UC_[6],
     _UJ_=_UC_[7],
     _UK_=_UC_[9],
     _UL_=_UC_[10],
     _UM_=_UC_[11],
     _UN_=_UC_[12],
     _UO_=_UC_[13],
     _UP_=_UC_[14],
     _UQ_=_UC_[15],
     _UR_=_UC_[16],
     _US_=_UC_[17],
     _UT_=_UC_[18],
     _UU_=_UC_[19],
     _UV_=_UC_[20],
     _UW_=_UC_[21],
     _UX_=_UC_[22],
     include$84=Make$4([0,_mT_,_mV_,_mS_,_mX_,_mU_]),
     _UY_=include$84[1],
     _UZ_=include$84[2],
     _U0_=include$84[3],
     _U1_=include$84[4],
     _U2_=include$84[5],
     _U3_=include$84[6],
     _U4_=include$84[7];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$268);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Source_code_po$2);
    var
     _U5_=Stable$1[1],
     Core_kernel_Source_code_positi$0=
      [0,
       _mX_,
       _mW_,
       _mJ_,
       _UD_,
       _UE_,
       _UF_,
       _UG_,
       _UH_,
       _UI_,
       _UJ_,
       _UK_,
       _UL_,
       _UM_,
       _UN_,
       _UO_,
       _UP_,
       _UQ_,
       _UR_,
       _US_,
       _UT_,
       _UU_,
       _UV_,
       _UW_,
       _UX_,
       _UY_,
       _UZ_,
       _U0_,
       _U1_,
       _U2_,
       _U3_,
       _U4_,
       [0,
        [0,
         _U5_[22],
         _U5_[23],
         _U5_[26],
         _U5_[25],
         _U5_[21],
         _U5_[24],
         _U5_[27],
         _U5_[28],
         _U5_[29],
         _U5_[32],
         _U5_[33],
         _U5_[15]]]];
    caml_register_global
     (5080,
      Core_kernel_Source_code_positi$0,
      "Core_kernel__Source_code_position");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Validated_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$269);
    caml_call1(Expect_test_collector[4][1],cst_src_validated_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$270,cst$95);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$271);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Validated_intf$0);
    var Core_kernel_Validated_intf=[0];
    caml_register_global
     (5081,Core_kernel_Validated_intf,"Core_kernel__Validated_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Validated);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$272);
    caml_call1(Expect_test_collector[4][1],cst_src_validated_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$273,cst$96);
    function raw(t){return t}
    function Make$8(Raw)
     {var sexp_of_t=Raw[2];
      function validation_failed(t,error)
       {function _bb9_(param)
         {var
           v2=param[3],
           v1=param[2],
           v0=param[1],
           v0$0=caml_call1(Raw[2],v0),
           v1$0=caml_call1(_nV_,v1),
           v2$0=caml_call1(_mX_,v2);
          return [1,[0,v0$0,[0,v1$0,[0,v2$0,0]]]]}
        return caml_call5
                (_n4_,0,0,cst_validation_failed,[0,t,error,Raw[3]],_bb9_)}
      function create_exn(t)
       {var
         _bb8_=caml_call1(Raw[4],t),
         match=caml_call1(Base_Validate[15],_bb8_);
        if(0 === match[0])return t;
        var error=match[1];
        return caml_call1(_oc_,validation_failed(t,error))}
      function create(t)
       {var
         _bb7_=caml_call1(Raw[4],t),
         match=caml_call1(Base_Validate[15],_bb7_);
        if(0 === match[0])return [0,t];
        var error=match[1];
        return [1,validation_failed(t,error)]}
      function t_of_sexp(sexp){return create_exn(caml_call1(Raw[1],sexp))}
      function raw(t){return t}
      return [0,sexp_of_t,validation_failed,create_exn,create,t_of_sexp,raw]}
    function Add_bin_io(Raw,Validated)
     {function of_binable(raw)
       {return Raw[13]?caml_call1(Validated[4],raw):raw}
      function to_binable(_bb6_){return _bb6_}
      var
       include=
        caml_call1
         (caml_call1(_TP_,[0,Raw[5],Raw[1],Raw[2],Raw[3],Raw[4]]),
          [0,to_binable,of_binable]),
       bin_size_t=include[1],
       bin_write_t=include[2],
       bin_read_t=include[3],
       bin_read_t$0=include[4],
       bin_shape_t=include[5],
       bin_writer_t=include[6],
       bin_reader_t=include[7],
       bin_t=include[8];
      return [0,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t]}
    function Add_compare(Raw,Validated)
     {function compare(a_001,b_002){return caml_call2(Raw[1],a_001,b_002)}
      return [0,compare]}
    function Add_hash(Raw,Validated)
     {function hash_fold_t(state,t)
       {var _bb5_=caml_call1(Validated[5],t);
        return caml_call2(Raw[1],state,_bb5_)}
      function hash(t)
       {var _bb4_=caml_call1(Validated[5],t);return caml_call1(Raw[2],_bb4_)}
      return [0,hash_fold_t,hash]}
    function Make_binable$0(Raw)
     {var
       T0=Make$8([0,Raw[9],Raw[10],Raw[11],Raw[12]]),
       sexp_of_t=T0[1],
       validation_failed=T0[2],
       create_exn=T0[3],
       create=T0[4],
       t_of_sexp=T0[5],
       raw=T0[6],
       include=Add_bin_io(Raw,[0,T0[5],T0[1],T0[4],T0[3],T0[6]]),
       bin_size_t=include[1],
       bin_write_t=include[2],
       bin_read_t=include[3],
       bin_read_t$0=include[4],
       bin_shape_t=include[5],
       bin_writer_t=include[6],
       bin_reader_t=include[7],
       bin_t=include[8];
      return [0,
              T0,
              sexp_of_t,
              validation_failed,
              create_exn,
              create,
              t_of_sexp,
              raw,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$274);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Validated$0);
    function _U6_(Raw,_bb3_)
     {var
       Typename_of_t=caml_call1(Typerep_lib_Make_typename[1],[0,name$52]),
       typename_of_t=Typename_of_t[2],
       name_of_t=Typename_of_t[1],
       typerep_of_t=[9,[0,name_of_t,[0,Raw[1]]]];
      return [0,typerep_of_t,typename_of_t]}
    function _U7_(Raw)
     {var
       T=
        Make_binable$0
         ([0,
           Raw[4],
           Raw[5],
           Raw[6],
           Raw[7],
           Raw[8],
           Raw[9],
           Raw[10],
           Raw[11],
           Raw[12],
           Raw[13],
           Raw[14],
           Raw[15],
           Raw[16]]),
       sexp_of_t=T[2],
       create_exn=T[4],
       create=T[5],
       t_of_sexp=T[6],
       raw=T[7],
       bin_size_t=T[8],
       bin_write_t=T[9],
       bin_read_t=T[10],
       bin_read_t$0=T[11],
       bin_shape_t=T[12],
       bin_writer_t=T[13],
       bin_reader_t=T[14],
       bin_t=T[15],
       compare=
        Add_compare
          ([0,Raw[1],Raw[12],Raw[13],Raw[14],Raw[15]],
           [0,T[6],T[2],T[5],T[4],T[7]])
         [1],
       include=
        Add_hash
         ([0,Raw[2],Raw[3],Raw[12],Raw[13],Raw[14],Raw[15]],
          [0,T[6],T[2],T[5],T[4],T[7]]),
       hash_fold_t=include[1],
       hash=include[2];
      return [0,
              t_of_sexp,
              sexp_of_t,
              create,
              create_exn,
              raw,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t,
              compare,
              hash_fold_t,
              hash]}
    function _U8_(_bb1_)
     {var _bb2_=Make_binable$0(_bb1_);
      return [0,
              _bb2_[6],
              _bb2_[2],
              _bb2_[5],
              _bb2_[4],
              _bb2_[7],
              _bb2_[8],
              _bb2_[9],
              _bb2_[10],
              _bb2_[11],
              _bb2_[12],
              _bb2_[13],
              _bb2_[14],
              _bb2_[15]]}
    var
     Core_kernel_Validated=
      [0,
       raw,
       function(_bbZ_)
        {var _bb0_=Make$8(_bbZ_);
         return [0,_bb0_[5],_bb0_[1],_bb0_[4],_bb0_[3],_bb0_[6]]},
       _U8_,
       _U7_,
       Add_bin_io,
       Add_compare,
       Add_hash,
       _U6_];
    caml_register_global(5083,Core_kernel_Validated,"Core_kernel__Validated");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Type_equal);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$275);
    caml_call1(Expect_test_collector[4][1],cst_src_type_equal_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$276,cst$97);
    var
     refl=include$85[2],
     sym=include$85[3],
     trans=include$85[4],
     conv=include$85[5],
     detuple2=include$85[9],
     tuple2$2=include$85[10],
     Id=include$85[12],
     sexp_of_t$71=Id[1],
     uid=Id[3],
     create$13=Id[4],
     hash$28=Id[5],
     name$53=Id[6],
     to_sexp=Id[7],
     hash_fold_t$32=Id[8],
     same=Id[9],
     same_witness=Id[10],
     same_witness_exn=Id[11],
     include$86=include$85[12][2],
     t_of_sexp$61=include$86[3],
     sexp_of_t$72=include$86[4],
     t_of_sexp$62=include$85[12][2][3],
     sexp_of_t$73=include$85[12][2][4],
     _U$_=include$85[12][2],
     _U9_=include$85[1],
     _U__=[0,t_of_sexp$62,sexp_of_t$73],
     _Va_=
      [0,
       _U$_[5],
       _U$_[6],
       _U$_[7],
       _U$_[8],
       _U$_[9],
       _U$_[10],
       _U$_[11],
       _U$_[12],
       _U$_[13],
       _U$_[14],
       _U$_[15],
       _U$_[16],
       _U$_[17],
       _U$_[18],
       _U$_[19],
       _U$_[20],
       _U$_[21],
       _U$_[22],
       _U$_[23]],
     _Vb_=function(_bbY_){return _xh_(_Va_,_bbY_)}(_U__),
     symbol$142=_Vb_[1],
     symbol$143=_Vb_[2],
     symbol$144=_Vb_[3],
     symbol$145=_Vb_[4],
     symbol$146=_Vb_[5],
     symbol$147=_Vb_[6],
     equal$28=_Vb_[7],
     min$10=_Vb_[9],
     max$10=_Vb_[10],
     ascending$10=_Vb_[11],
     descending$10=_Vb_[12],
     between$10=_Vb_[13],
     clamp_exn$10=_Vb_[14],
     clamp$10=_Vb_[15],
     comparator$15=_Vb_[16],
     validate_lbound$10=_Vb_[17],
     validate_ubound$10=_Vb_[18],
     validate_bound$10=_Vb_[19],
     Replace_polymorphic_compare$9=_Vb_[20],
     Map$13=_Vb_[21],
     Set$13=_Vb_[22],
     _Vc_=include$85[12][2],
     include$87=Make$4([0,_Vc_[1],_Vc_[3],_Vc_[12],_Vc_[4],_Vc_[2]]),
     compare$60=include$87[1],
     hash_fold_t$33=include$87[2],
     hash$29=include$87[3],
     hashable$10=include$87[4],
     Table$11=include$87[5],
     Hash_set$11=include$87[6],
     Hash_queue$10=include$87[7],
     Uid=
      [0,
       t_of_sexp$61,
       sexp_of_t$72,
       symbol$142,
       symbol$143,
       symbol$144,
       symbol$145,
       symbol$146,
       symbol$147,
       equal$28,
       min$10,
       max$10,
       ascending$10,
       descending$10,
       between$10,
       clamp_exn$10,
       clamp$10,
       comparator$15,
       validate_lbound$10,
       validate_ubound$10,
       validate_bound$10,
       Replace_polymorphic_compare$9,
       Map$13,
       Set$13,
       compare$60,
       hash_fold_t$33,
       hash$29,
       hashable$10,
       Table$11,
       Hash_set$11,
       Hash_queue$10],
     Id$0=
      [0,
       sexp_of_t$71,
       uid,
       create$13,
       hash$28,
       name$53,
       to_sexp,
       hash_fold_t$32,
       same,
       same_witness,
       same_witness_exn,
       Uid];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$277);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Type_equal$0);
    var
     Core_kernel_Type_equal=
      [0,_U9_,refl,sym,trans,conv,detuple2,tuple2$2,Id$0];
    caml_register_global
     (5085,Core_kernel_Type_equal,"Core_kernel__Type_equal");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Type_equal_int);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$278);
    caml_call1(Expect_test_collector[4][1],cst_src_type_equal_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$279,cst$98);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$280);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Type_equal_int$0);
    var Core_kernel_Type_equal_intf=[0];
    caml_register_global
     (5086,Core_kernel_Type_equal_intf,"Core_kernel__Type_equal_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Univ_map_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$281);
    caml_call1(Expect_test_collector[4][1],cst_src_univ_map_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$282,cst$99);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$283);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Univ_map_intf$0);
    var Core_kernel_Univ_map_intf=[0];
    caml_register_global
     (5087,Core_kernel_Univ_map_intf,"Core_kernel__Univ_map_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Univ_map);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$284);
    caml_call1(Expect_test_collector[4][1],cst_src_univ_map_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$285,cst$100);
    function Make1$0(Key,Data)
     {var sexp_of_t=Key[1];
      function sexp_of_type_id(type_id)
       {var _bbT_=0,_bbU_=0;
        if(_fj_)
         var _bbV_=_Vd_;
        else
         var
          _bbX_=caml_call1(Id$0[2],type_id),
          _bbV_=caml_call1(Id$0[11][2],_bbX_);
        var
         _bbW_=
          [0,[1,[0,_Ve_,[0,caml_call1(sexp_of_t$37,_bbV_),_bbU_]]],_bbT_];
        return [1,
                [0,
                 [1,
                  [0,
                   _Vf_,
                   [0,caml_call1(sexp_of_t$43,caml_call1(Id$0[5],type_id)),0]]],
                 _bbW_]]}
      function to_type_id(key)
       {var type_id1=caml_call1(Key[2],key),type_id2=caml_call1(Key[2],key);
        if(caml_call2(Id$0[8],type_id1,type_id2))return type_id1;
        var
         _bbO_=[0,[1,[0,_Vg_,[0,sexp_of_type_id(type_id2),0]]],0],
         _bbP_=[0,[1,[0,_Vh_,[0,sexp_of_type_id(type_id1),0]]],_bbO_],
         _bbQ_=0;
        function _bbR_(param){return _Vi_}
        var
         _bbS_=
          [0,[1,[0,_Vj_,[0,caml_call2(Key[1],_bbR_,key),_bbQ_]]],_bbP_];
        return caml_call1
                (_od_,
                 [1,
                  [0,
                   caml_call1
                    (Sexplib0_Sexp_conv[7],cst_Key_to_type_id_must_not_pr),
                   _bbS_]])}
      var Key$0=[0,sexp_of_t,sexp_of_type_id,to_type_id];
      function name_of_key(key)
       {var _bbN_=caml_call1(Key$0[3],key);return caml_call1(Id$0[5],_bbN_)}
      function uid_of_key(key)
       {var _bbM_=caml_call1(Key$0[3],key);return caml_call1(Id$0[2],_bbM_)}
      function sexp_of_t$0(sexp_of_a,param)
       {var
         data=param[2],
         key=param[1],
         _bbK_=caml_call1(Key$0[3],key),
         _bbL_=caml_call1(Id$0[6],_bbK_);
        return caml_call3(Data[1],sexp_of_a,_bbL_,data)}
      function type_id_name(param){var key=param[1];return name_of_key(key)}
      function type_id_uid(param){var key=param[1];return uid_of_key(key)}
      var Packed=[0,sexp_of_t$0,type_id_name,type_id_uid];
      function sexp_of_t$1(sexp_of_a,t)
       {function _bbG_(param,_bbJ_)
         {var b=_bbJ_[1],a=param[1];return caml_call2(compare$37,a,b)}
        function _bbH_(u){return [0,caml_call1(Packed[2],u),u]}
        var
         _bbI_=
          caml_call2(_pW_,caml_call2(_p9_,caml_call1(data$1,t),_bbH_),_bbG_);
        return caml_call1
                (caml_call1
                  (sexp_of_t$17,
                   function(param)
                    {var
                      v1=param[2],
                      v0=param[1],
                      v0$0=caml_call1(sexp_of_t$43,v0),
                      v1$0=caml_call2(Packed[1],sexp_of_a,v1);
                     return [1,[0,v0$0,[0,v1$0,0]]]}),
                 _bbI_)}
      function invariant(t)
       {function _bbB_(param)
         {return caml_call2
                  (iteri$2,
                   t,
                   function(key,data)
                    {var _bbF_=caml_call1(Packed[3],data);
                     if(caml_call2(Id$0[11][9],key,_bbF_))return 0;
                     throw [0,Assert_failure,_Vk_]})}
        function _bbC_(param){return _Vl_}
        function _bbD_(_bbE_){return sexp_of_t$1(_bbC_,_bbE_)}
        return caml_call4(Base_Invariant[1],_Vm_,t,_bbD_,_bbB_)}
      function set(t,key,data)
       {return caml_call3(set$2,t,uid_of_key(key),[0,key,data])}
      function mem_by_id(t,id){return caml_call2(mem$3,t,id)}
      function mem(t,key){return mem_by_id(t,uid_of_key(key))}
      function remove_by_id(t,id){return caml_call2(remove$2,t,id)}
      function remove(t,key){return remove_by_id(t,uid_of_key(key))}
      var empty=Id$0[11][22][4];
      function find(t,key)
       {var match=caml_call2(find$3,t,uid_of_key(key));
        if(match)
         {var
           match$0=match[1],
           value=match$0[2],
           key$0=match$0[1],
           _bbz_=caml_call1(Key$0[3],key$0),
           _bbA_=caml_call1(Key$0[3],key);
          caml_call2(Id$0[10],_bbA_,_bbz_);
          return [0,value]}
        return 0}
      function find_exn(t,key)
       {var match=find(t,key);
        if(match){var data=match[1];return data}
        return caml_call3(_Pe_,_Vn_,name_of_key(key),0)}
      function add(t,key,data)
       {return mem(t,key)?-1024851605:[0,17724,set(t,key,data)]}
      function add_exn(t,key,data)
       {var match=add(t,key,data);
        if(typeof match === "number")
         return caml_call3(_Pe_,_Vo_,name_of_key(key),0);
        var t$0=match[2];
        return t$0}
      function change_exn(t,key,update)
       {var match=find(t,key);
        if(match){var data=match[1];return set(t,key,caml_call1(update,data))}
        return caml_call3(_Pe_,_Vp_,name_of_key(key),0)}
      function change(t,key,update)
       {var orig=find(t,key),next=caml_call1(update,orig);
        if(next){var data=next[1];return set(t,key,data)}
        return caml_call1(_x1_,orig)?t:remove(t,key)}
      function update(t,key,f)
       {return change(t,key,function(data){return [0,caml_call1(f,data)]})}
      function to_alist(t){return caml_call1(data$1,t)}
      function of_alist_exn(t)
       {var
         _bby_=
          caml_call2(_p9_,t,function(p){return [0,caml_call1(Packed[3],p),p]});
        return caml_call1(Id$0[11][22][8],_bby_)}
      return [0,
              Key$0,
              name_of_key,
              uid_of_key,
              Packed,
              sexp_of_t$1,
              invariant,
              set,
              mem_by_id,
              mem,
              remove_by_id,
              remove,
              empty,
              is_empty$4,
              find,
              find_exn,
              add,
              add_exn,
              change_exn,
              change,
              update,
              to_alist,
              of_alist_exn]}
    function Make$9(Key,Data)
     {function sexp_of_t(of_v_x_001,of_a,v){return caml_call2(Data[1],of_a,v)}
      var M=Make1$0(Key,[0,sexp_of_t]);
      function sexp_of_t$0(v){return caml_call2(M[5],sexp_of_t$57,v)}
      var
       invariant=M[6],
       empty=M[12],
       is_empty=M[13],
       set=M[7],
       mem=M[9],
       mem_by_id=M[8],
       find=M[14],
       find_exn=M[15],
       add=M[16],
       add_exn=M[17],
       change=M[19],
       change_exn=M[18],
       update=M[20],
       remove=M[11],
       remove_by_id=M[10],
       Packed=[0];
      function to_alist(t)
       {function _bbx_(param)
         {var data=param[2],key=param[1];return [0,key,data]}
        return caml_call2(_p9_,caml_call1(M[21],t),_bbx_)}
      function of_alist_exn(t)
       {var
         _bbw_=
          caml_call2
           (_p9_,
            t,
            function(param)
             {var data=param[2],key=param[1];return [0,key,data]});
        return caml_call1(M[22],_bbw_)}
      return [0,
              M,
              sexp_of_t$0,
              Key,
              invariant,
              empty,
              is_empty,
              set,
              mem,
              mem_by_id,
              find,
              find_exn,
              add,
              add_exn,
              change,
              change_exn,
              update,
              remove,
              remove_by_id,
              Packed,
              to_alist,
              of_alist_exn]}
    var sexp_of_t$74=Id$0[1];
    function to_type_id(_bbv_){return _bbv_}
    var Type_id_key=[0,sexp_of_t$74,to_type_id];
    function sexp_of_t$75(of_a,v){return caml_call1(of_a,v)}
    var
     _Vq_=[0,sexp_of_t$75],
     _Vr_=function(_bbu_){return Make$9(Type_id_key,_bbu_)}(_Vq_),
     of_alist_exn$5=_Vr_[21],
     to_alist$4=_Vr_[20],
     Packed=_Vr_[19],
     remove_by_id=_Vr_[18],
     remove$10=_Vr_[17],
     update$4=_Vr_[16],
     change_exn=_Vr_[15],
     change$4=_Vr_[14],
     add_exn$4=_Vr_[13],
     add$10=_Vr_[12],
     find_exn$9=_Vr_[11],
     find$10=_Vr_[10],
     mem_by_id=_Vr_[9],
     mem$10=_Vr_[8],
     set$8=_Vr_[7],
     is_empty$12=_Vr_[6],
     empty$9=_Vr_[5],
     invariant$10=_Vr_[4],
     sexp_of_t$76=_Vr_[2];
    function create$14(default$0,name,sexp_of)
     {return [0,caml_call2(Id$0[3],name,sexp_of),default$0]}
    function id(t){return t[1]}
    var Key=[0,create$14,id];
    function find$11(t,param)
     {var default$0=param[2],key=param[1];
      return caml_call2(_x6_,caml_call2(find$10,t,key),default$0)}
    function set$9(t,param,v)
     {var key=param[1];return caml_call3(set$8,t,key,v)}
    function change$5(t,k,update)
     {return set$9(t,k,caml_call1(update,find$11(t,k)))}
    function create$15(init,f,name,sexp_of)
     {return [0,caml_call3(Key[1],init,name,sexp_of),f]}
    function id$0(t){return caml_call1(Key[2],t[1])}
    var Key$0=[0,create$15,id$0];
    function find$12(t,param){var key=param[1];return find$11(t,key)}
    function set$10(t,param,v){var key=param[1];return set$9(t,key,v)}
    function change$6(t,param,update)
     {var key=param[1];return change$5(t,key,update)}
    function add$11(t,param,v)
     {var f=param[2],key=param[1];
      return change$5(t,key,function(acc){return caml_call2(f,acc,v)})}
    function create$16(name,sexp_of)
     {var _bbs_=caml_call1(sexp_of_t$17,sexp_of);
      function _bbt_(xs,x){return [0,x,xs]}
      return caml_call4(Key$0[1],0,_bbt_,name,_bbs_)}
    var
     id$1=Key$0[2],
     Key$1=[0,create$16,id$1],
     Multi=[0,Key$1,set$10,find$12,add$11,change$6];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$286);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Univ_map$0);
    var
     With_fold=[0,Key$0,set$10,find$12,add$11,change$6],
     With_default=[0,Key,set$9,find$11,change$5];
    function Merge(Key,_bbk_,_bbj_,Output_data)
     {function merge(t1,t2,param)
       {var f=param[1];
        function f$0(key,merge_result)
         {function _bbr_(data){return [0,key,data]}
          return caml_call2(_xW_,caml_call2(f,key,merge_result),_bbr_)}
        return caml_call3
                (merge$1,
                 t1,
                 t2,
                 function(param,_bbl_)
                  {var _bbm_=_bbl_[1];
                   if(737457313 === _bbm_)
                    {var
                      _bbn_=_bbl_[2],
                      _bbo_=_bbn_[2],
                      right_data=_bbo_[2],
                      right_key=_bbo_[1],
                      match=_bbn_[1],
                      left_data=match[2],
                      left_key=match[1],
                      _bbp_=caml_call1(Key[2],right_key),
                      _bbq_=caml_call1(Key[2],left_key);
                     caml_call2(Id$0[10],_bbq_,_bbp_);
                     return f$0(left_key,[0,737457313,[0,left_data,right_data]])}
                   if(847852583 <= _bbm_)
                    {var match$0=_bbl_[2],data=match$0[2],key=match$0[1];
                     return f$0(key,[0,847852583,data])}
                   var match$1=_bbl_[2],data$0=match$1[2],key$0=match$1[1];
                   return f$0(key$0,[0,-57574468,data$0])})}
      return [0,merge]}
    function Make1$1(_bbg_,_bbf_)
     {var _bbh_=Make1$0(_bbg_,_bbf_),_bbi_=_bbh_[1];
      return [0,
              _bbh_[5],
              [0,_bbi_[1],_bbi_[3]],
              _bbh_[6],
              _bbh_[12],
              _bbh_[13],
              _bbh_[7],
              _bbh_[9],
              _bbh_[8],
              _bbh_[14],
              _bbh_[15],
              _bbh_[16],
              _bbh_[17],
              _bbh_[19],
              _bbh_[18],
              _bbh_[20],
              _bbh_[11],
              _bbh_[10],
              [0],
              _bbh_[21],
              _bbh_[22]]}
    function Make$10(_bbd_,_bbc_)
     {var _bbe_=Make$9(_bbd_,_bbc_);
      return [0,
              _bbe_[2],
              _bbe_[3],
              _bbe_[4],
              _bbe_[5],
              _bbe_[6],
              _bbe_[7],
              _bbe_[8],
              _bbe_[9],
              _bbe_[10],
              _bbe_[11],
              _bbe_[12],
              _bbe_[13],
              _bbe_[14],
              _bbe_[15],
              _bbe_[16],
              _bbe_[17],
              _bbe_[18],
              _bbe_[19],
              _bbe_[20],
              _bbe_[21]]}
    var
     include$88=
      [0,
       Type_id_key,
       sexp_of_t$76,
       invariant$10,
       empty$9,
       is_empty$12,
       set$8,
       mem$10,
       mem_by_id,
       find$10,
       find_exn$9,
       add$10,
       add_exn$4,
       change$4,
       change_exn,
       update$4,
       remove$10,
       remove_by_id,
       Packed,
       to_alist$4,
       of_alist_exn$5,
       Make$10,
       Make1$1,
       Merge,
       With_default,
       With_fold,
       Multi];
    caml_register_global(5089,include$88,"Core_kernel__Univ_map");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Unit_of_time);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$287);
    caml_call1(Expect_test_collector[4][1],cst_src_unit_of_time_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$288,cst$101);
    function t_of_sexp$63(sexp)
     {if(0 === sexp[0])
       {var _ba8_=sexp[1],_ba9_=caml_string_compare(_ba8_,cst_day),switch$0=0;
        if(0 <= _ba9_)
         if(0 < _ba9_)
          if(caml_string_notequal(_ba8_,cst_hour))
           if(caml_string_notequal(_ba8_,cst_microsecond))
            if(caml_string_notequal(_ba8_,cst_millisecond))
             if(caml_string_notequal(_ba8_,cst_minute))
              if(caml_string_notequal(_ba8_,cst_nanosecond))
               {if(! caml_string_notequal(_ba8_,cst_second$1))switch$0 = 4}
              else
               switch$0 = 1;
             else
              switch$0 = 5;
            else
             switch$0 = 3;
           else
            switch$0 = 2;
          else
           switch$0 = 6;
         else
          switch$0 = 7;
        else
         if(caml_string_notequal(_ba8_,cst_Day))
          if(caml_string_notequal(_ba8_,cst_Hour))
           if(caml_string_notequal(_ba8_,cst_Microsecond))
            if(caml_string_notequal(_ba8_,cst_Millisecond))
             if(caml_string_notequal(_ba8_,cst_Minute))
              if(caml_string_notequal(_ba8_,cst_Nanosecond))
               {if(! caml_string_notequal(_ba8_,cst_Second$3))switch$0 = 4}
              else
               switch$0 = 1;
             else
              switch$0 = 5;
            else
             switch$0 = 3;
           else
            switch$0 = 2;
          else
           switch$0 = 6;
         else
          switch$0 = 7;
        switch(switch$0)
         {case 1:return 0;
          case 2:return 1;
          case 3:return 2;
          case 4:return 3;
          case 5:return 4;
          case 6:return 5;
          case 7:return 6
          }}
      else
       {var _ba__=sexp[1];
        if(! _ba__)
         return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$21,sexp);
        var _ba$_=_ba__[1];
        if(0 !== _ba$_[0])
         return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$21,sexp);
        var
         _bba_=_ba$_[1],
         _bbb_=caml_string_compare(_bba_,cst_day$0),
         switch$1=0;
        if(0 <= _bbb_)
         if(0 < _bbb_)
          if(caml_string_notequal(_bba_,cst_hour$0))
           if(caml_string_notequal(_bba_,cst_microsecond$0))
            if(caml_string_notequal(_bba_,cst_millisecond$0))
             if(caml_string_notequal(_bba_,cst_minute$0))
              if(caml_string_notequal(_bba_,cst_nanosecond$0))
               {if(! caml_string_notequal(_bba_,cst_second$2))switch$1 = 4}
              else
               switch$1 = 1;
             else
              switch$1 = 5;
            else
             switch$1 = 3;
           else
            switch$1 = 2;
          else
           switch$1 = 6;
         else
          switch$1 = 7;
        else
         if(caml_string_notequal(_bba_,cst_Day$0))
          if(caml_string_notequal(_bba_,cst_Hour$0))
           if(caml_string_notequal(_bba_,cst_Microsecond$0))
            if(caml_string_notequal(_bba_,cst_Millisecond$0))
             if(caml_string_notequal(_bba_,cst_Minute$0))
              if(caml_string_notequal(_bba_,cst_Nanosecond$0))
               {if(! caml_string_notequal(_bba_,cst_Second$4))switch$1 = 4}
              else
               switch$1 = 1;
             else
              switch$1 = 5;
            else
             switch$1 = 3;
           else
            switch$1 = 2;
          else
           switch$1 = 6;
         else
          switch$1 = 7;
        switch(switch$1)
         {case 1:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$21,sexp);
          case 2:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$21,sexp);
          case 3:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$21,sexp);
          case 4:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$21,sexp);
          case 5:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$21,sexp);
          case 6:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$21,sexp);
          case 7:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$21,sexp)
          }}
      return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$21,sexp)}
    function sexp_of_t$77(param)
     {switch(param)
       {case 0:return _Vs_;
        case 1:return _Vt_;
        case 2:return _Vu_;
        case 3:return _Vv_;
        case 4:return _Vw_;
        case 5:return _Vx_;
        default:return _Vy_}}
    var compare$61=caml_int_compare;
    function hash_fold_t$34(hsv,arg)
     {switch(arg)
       {case 0:return caml_call2(Base_Hash[3],hsv,0);
        case 1:return caml_call2(Base_Hash[3],hsv,1);
        case 2:return caml_call2(Base_Hash[3],hsv,2);
        case 3:return caml_call2(Base_Hash[3],hsv,3);
        case 4:return caml_call2(Base_Hash[3],hsv,4);
        case 5:return caml_call2(Base_Hash[3],hsv,5);
        default:return caml_call2(Base_Hash[3],hsv,6)}}
    function hash$30(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_ba7_=hash_fold_t$34(hsv,x);
      return caml_call1(Base_Hash[9],_ba7_)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$289);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Unit_of_time$0);
    var
     Core_kernel_Unit_of_time=
      [0,
       t_of_sexp$63,
       sexp_of_t$77,
       compare$61,
       unit_of_time_list,
       hash_fold_t$34,
       hash$30];
    caml_register_global
     (5090,Core_kernel_Unit_of_time,"Core_kernel__Unit_of_time");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Unique_id_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$290);
    caml_call1(Expect_test_collector[4][1],cst_src_unique_id_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$291,cst$102);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$292);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Unique_id_intf$0);
    var Core_kernel_Unique_id_intf=[0];
    caml_register_global
     (5091,Core_kernel_Unique_id_intf,"Core_kernel__Unique_id_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Unique_id);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$293);
    caml_call1(Expect_test_collector[4][1],cst_src_unique_id_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$294,cst$103);
    function race_free_create_loop(cell,make)
     {for(;;)
       {var x=cell[1],new_x=caml_call1(make,x);
        if(caml_call2(_Pg_,cell[1],x)){cell[1] = new_x;return x}
        continue}}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$295);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Unique_id$0);
    function _Vz_(_ba6_)
     {var current=[0,zero$4];
      function create(param){return race_free_create_loop(current,succ$1)}
      return [0,
              bin_size_t$55,
              bin_write_t$55,
              bin_read_t$112,
              bin_read_t$113,
              bin_shape_t$65,
              bin_writer_t$58,
              bin_reader_t$58,
              bin_t$58,
              _KO_,
              _KP_,
              _fd_,
              _eS_,
              symbol$99,
              symbol$100,
              symbol$101,
              symbol$102,
              symbol$103,
              symbol$104,
              equal$24,
              compare$49,
              min$6,
              max$6,
              ascending$6,
              descending$6,
              between$6,
              clamp_exn$6,
              clamp$6,
              validate_lbound$6,
              validate_ubound$6,
              validate_bound$6,
              include$64,
              comparator$11,
              Map$9,
              Set$9,
              hash_fold_t$24,
              _KN_,
              hashable$6,
              Table$7,
              Hash_set$7,
              Hash_queue$6,
              of_int_exn$2,
              to_int_exn$2,
              _KQ_,
              _KR_,
              create]}
    var
     Core_kernel_Unique_id=
      [0,
       function(_ba5_)
        {var current=[0,zero$1];
         function create(param){return race_free_create_loop(current,next$0)}
         return [0,
                 bin_size_t$50,
                 bin_write_t$50,
                 bin_read_t$102,
                 bin_read_t$103,
                 bin_shape_t$55,
                 bin_writer_t$48,
                 bin_reader_t$48,
                 bin_t$48,
                 t_of_sexp$39,
                 sexp_of_t$48,
                 typerep_of_t$9,
                 typename_of_t$9,
                 symbol$54,
                 symbol$55,
                 symbol$56,
                 symbol$57,
                 symbol$58,
                 symbol$59,
                 equal$21,
                 compare$42,
                 min$3,
                 max$3,
                 ascending$3,
                 descending$3,
                 between$3,
                 clamp_exn$3,
                 clamp$3,
                 validate_lbound$3,
                 validate_ubound$3,
                 validate_bound$3,
                 Replace_polymorphic_compare$3,
                 comparator$7,
                 Map$5,
                 Set$5,
                 hash_fold_t$18,
                 hash$15,
                 hashable$3,
                 Table$4,
                 Hash_set$4,
                 Hash_queue$3,
                 of_int_exn,
                 to_int_exn,
                 of_string$3,
                 to_string$4,
                 create]},
       _Vz_];
    caml_register_global(5092,Core_kernel_Unique_id,"Core_kernel__Unique_id");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Uniform_array);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$296);
    caml_call1(Expect_test_collector[4][1],cst_src_uniform_array_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$297,cst$104);
    var
     t_of_sexp$64=include$89[1],
     sexp_of_t$78=include$89[2],
     invariant$11=include$89[3],
     empty$10=include$89[4],
     create$17=include$89[5],
     singleton$9=include$89[6],
     init$3=include$89[7],
     length$16=include$89[8],
     get$4=include$89[9],
     unsafe_get=include$89[10],
     set$11=include$89[11],
     unsafe_set=include$89[12],
     swap$1=include$89[13],
     unsafe_set_omit_phys_equal_che=include$89[14],
     map$21=include$89[15],
     iter$16=include$89[16],
     iteri$6=include$89[17],
     of_array$4=include$89[18],
     to_array$5=include$89[19],
     of_list$8=include$89[20],
     to_list$6=include$89[21],
     blit$2=include$89[22],
     blito$2=include$89[23],
     unsafe_blit$0=include$89[24],
     sub$2=include$89[25],
     subo$2=include$89[26],
     copy$3=include$89[27],
     unsafe_create_uninitialized=include$89[28],
     create_obj_array=include$89[29],
     unsafe_set_assuming_currently_=include$89[30],
     unsafe_set_int_assuming_curren=include$89[31],
     unsafe_set_int=include$89[32],
     unsafe_clear_if_pointer=include$89[33],
     exists$10=include$89[34],
     map2_exn$0=include$89[35],
     min_elt$9=include$89[36],
     max_elt$9=include$89[37],
     include$90=
      caml_call1
       (caml_call1
         (_TO_,
          [0,
           bin_shape_t$12,
           bin_size_t$21,
           bin_write_t$21,
           bin_read_t$46,
           bin_read_t$45]),
        [0,to_array$5,of_array$4]),
     _VA_=include$90[1],
     _VB_=include$90[2],
     _VC_=include$90[3],
     _VD_=include$90[4],
     _VE_=include$90[5],
     _VF_=include$90[6],
     _VG_=include$90[7],
     _VH_=include$90[8];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$298);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Uniform_array$0);
    var
     Core_kernel_Uniform_array=
      [0,
       _VA_,
       _VB_,
       _VC_,
       _VD_,
       _VE_,
       _VF_,
       _VG_,
       _VH_,
       t_of_sexp$64,
       sexp_of_t$78,
       invariant$11,
       empty$10,
       create$17,
       singleton$9,
       init$3,
       length$16,
       get$4,
       unsafe_get,
       set$11,
       unsafe_set,
       swap$1,
       unsafe_set_omit_phys_equal_che,
       map$21,
       iter$16,
       iteri$6,
       of_array$4,
       to_array$5,
       of_list$8,
       to_list$6,
       blit$2,
       blito$2,
       unsafe_blit$0,
       sub$2,
       subo$2,
       copy$3,
       unsafe_create_uninitialized,
       create_obj_array,
       unsafe_set_assuming_currently_,
       unsafe_set_int_assuming_curren,
       unsafe_set_int,
       unsafe_clear_if_pointer,
       exists$10,
       map2_exn$0,
       min_elt$9,
       max_elt$9];
    caml_register_global
     (5094,Core_kernel_Uniform_array,"Core_kernel__Uniform_array");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Type_immediacy);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$299);
    caml_call1(Expect_test_collector[4][1],cst_src_type_immediacy_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$300,cst$105);
    function hash$31(x){return x}
    var Key$2=[0,compare,sexp_of_t$0,hash$31];
    function equal$29(x_005,x_006)
     {var match=caml_int_compare(x_005,x_006);return 0 === match?1:0}
    function to_string$17(param)
     {switch(param)
       {case 0:return cst_Always;
        case 1:return cst_Sometimes;
        default:return cst_Never}}
    function create$18(typename,immediacy,allowed_ints)
     {return [0,
              immediacy,
              allowed_ints,
              caml_call1(Typerep_lib_Typename[10],typename)]}
    function never_with_name(name){return [0,2,0,name]}
    function never(typename){return create$18(typename,2,0)}
    var
     option=[0,1,_VI_,cst_option$2],
     list$0=[0,1,_VJ_,cst_list$2],
     int32=never(_eV_),
     int64=never(_eU_),
     nativeint=never(_eT_),
     float$0=never(_eQ_),
     string$0=never(_eP_),
     bytes=never(_eO_),
     array=never_with_name(cst_array$2),
     ref=never_with_name(cst_ref$2),
     tuple2$3=never_with_name(cst_tuple2),
     tuple3$2=never_with_name(cst_tuple3),
     tuple4$2=never_with_name(cst_tuple4),
     tuple5$2=never_with_name(cst_tuple5),
     function$0=never_with_name(cst_function),
     int$2=create$18(_eW_,0,1),
     unit$0=create$18(_eM_,0,_VK_),
     bool$2=create$18(_eN_,0,_VL_),
     char$3=create$18(_eR_,0,_VM_),
     _VN_=caml_call1(Typerep_lib_Type_generic[1][1],[0]),
     Tag_internal=_VN_[1],
     Tag=_VN_[2],
     Variant_internal=_VN_[3],
     Variant=_VN_[4],
     Field_internal=_VN_[5],
     Field=_VN_[6],
     Record_internal=_VN_[7],
     Record=_VN_[8];
    function ref$0(param){return ref}
    function array$0(param){return array}
    function tuple2$4(param,_ba4_){return tuple2$3}
    function tuple3$3(param,_ba3_,_ba2_){return tuple3$2}
    function tuple4$3(param,_ba1_,_ba0_,_baZ_){return tuple4$2}
    function tuple5$3(param,_baY_,_baX_,_baW_,_baV_){return tuple5$2}
    function function$1(param,_baU_){return function$0}
    function option$0(param){return option}
    function list$1(param){return list$0}
    function lazy_t(t)
     {var match=t[1],immediacy=2 <= match?2:1;
      return [0,immediacy,t[2],cst_lazy_t$2]}
    function record(r){return never(caml_call1(Record[1],r))}
    function variant(variant)
     {function _baP_(list,tag)
       {var t=tag[1];
        return caml_call2(_a5_,caml_call1(Tag[2],t),0)?[0,tag,list]:list}
      var
       _baQ_=caml_call3(Variant[6],variant,0,_baP_),
       no_arg_list=caml_call1(include$23[37],_baQ_),
       no_arg_count=caml_call1(include$23[7],no_arg_list);
      if(caml_call2(_a5_,no_arg_count,0))
       return never(caml_call1(Variant[1],variant));
      if(caml_call1(Variant[4],variant))
       {var
         _baR_=[0,caml_call2(_aL_,no_arg_count,2)],
         hash_set=caml_call3(include$22[2],0,_baR_,Key$2),
         _baS_=
          function(param)
           {var tag=param[1],match=caml_call1(Tag[6],tag);
            if(0 === match[0])throw [0,Assert_failure,_VO_];
            var _baT_=caml_call1(Tag[5],tag);
            return caml_call2(include$22[22],hash_set,_baT_)};
        caml_call2(include$23[9],no_arg_list,_baS_);
        var allowed_ints=[0,hash_set]}
      else
       var allowed_ints=[1,caml_call2(_aK_,no_arg_count,1)];
      var
       immediacy=
        caml_call2(_a6_,caml_call1(Variant[2],variant),no_arg_count)?1:0;
      return create$18(caml_call1(Variant[1],variant),immediacy,allowed_ints)}
    var required=0;
    function create$19(param){return 0}
    var Context=[0,create$19];
    function init$4(param,name){return [0,create$18(name,1,0)]}
    function get_wip_computation(comp){return comp[1]}
    function set_final_computation(r,t){r[1] = t;return t}
    function share(param){return 1}
    var
     Named$2=
      [0,Context,init$4,get_wip_computation,set_final_computation,share],
     Generic=
      caml_call1
       (Typerep_lib_Type_generic[5],
        [0,
         name$54,
         required,
         Tag_internal,
         Tag,
         Variant_internal,
         Variant,
         Field_internal,
         Field,
         Record_internal,
         Record,
         int$2,
         int32,
         int64,
         nativeint,
         char$3,
         float$0,
         string$0,
         bytes,
         bool$2,
         unit$0,
         option$0,
         list$1,
         array$0,
         lazy_t,
         ref$0,
         function$1,
         tuple2$4,
         tuple3$3,
         tuple4$3,
         tuple5$3,
         record,
         variant,
         Named$2]);
    function of_typerep(typerep)
     {var match=caml_call1(Generic[10],typerep),t=match[2];return t}
    function For_all_parameters(M)
     {function witness(typerep1,typerep2)
       {var t1=of_typerep(typerep1),t2=of_typerep(typerep2),i1=t1[1],i2=t2[1];
        if(equal$29(i1,i2))
         {if(equal$29(i1,M[1]))return t1;
          var
           _baL_=to_string$17(i1),
           _baM_=to_string$17(M[1]),
           _baN_=caml_call1(include$74[1][14],typerep1);
          return caml_call1
                  (_bl_,
                   caml_call4
                    (_fw_,
                     _VP_,
                     caml_call1(Typerep_lib_Typename[10],_baN_),
                     _baM_,
                     _baL_))}
        var _baO_=caml_call1(include$74[1][14],typerep1);
        return caml_call1
                (_bl_,
                 caml_call2
                  (_fw_,_VQ_,caml_call1(Typerep_lib_Typename[10],_baO_)))}
      var ra=0,rn=6;
      function For_all_parameters_S1(X)
       {var _baK_=caml_call1(X[1],rn),t=witness(caml_call1(X[1],ra),_baK_);
        function witness$0(param){return t}
        return [0,t,witness$0]}
      function For_all_parameters_S2(X)
       {var
         _baJ_=caml_call2(X[1],rn,rn),
         t=witness(caml_call2(X[1],ra,ra),_baJ_);
        function witness$0(param){return t}
        return [0,t,witness$0]}
      function For_all_parameters_S3(X)
       {var
         _baI_=caml_call3(X[1],rn,rn,rn),
         t=witness(caml_call3(X[1],ra,ra,ra),_baI_);
        function witness$0(param){return t}
        return [0,t,witness$0]}
      function For_all_parameters_S4(X)
       {var
         _baH_=caml_call4(X[1],rn,rn,rn,rn),
         t=witness(caml_call4(X[1],ra,ra,ra,ra),_baH_);
        function witness$0(param){return t}
        return [0,t,witness$0]}
      function For_all_parameters_S5(X)
       {var
         _baG_=caml_call5(X[1],rn,rn,rn,rn,rn),
         t=witness(caml_call5(X[1],ra,ra,ra,ra,ra),_baG_);
        function witness$0(param){return t}
        return [0,t,witness$0]}
      return [0,
              witness,
              ra,
              rn,
              For_all_parameters_S1,
              For_all_parameters_S2,
              For_all_parameters_S3,
              For_all_parameters_S4,
              For_all_parameters_S5]}
    function int_is_value(t,int$0)
     {var _baF_=t[2];
      if(typeof _baF_ === "number")
       return 0 === _baF_?0:1;
      else
       {if(0 === _baF_[0])
         {var hash_set=_baF_[1];
          return caml_call2(include$22[20],hash_set,int$0)}
        var n=_baF_[1],_baE_=caml_call2(_a3_,0,int$0);
        return _baE_?caml_call2(_a3_,int$0,n):_baE_}}
    function int_as_value(t,int$0){return int_is_value(t,int$0)?[0,int$0]:0}
    function int_as_value_exn(t,int$0)
     {return int_is_value(t,int$0)
              ?int$0
              :caml_call1(_bl_,caml_call3(_fw_,_VR_,t[3],int$0))}
    function value_as_int_exn(t,a)
     {return typeof a === "number"
              ?a
              :caml_call1(_bl_,caml_call2(_fw_,_VS_,t[3]))}
    function value_as_int(param,a){return typeof a === "number"?[0,a]:0}
    function value_is_int(param,a){return typeof a === "number"?1:0}
    var
     include$91=For_all_parameters([0,0]),
     For_all_parameters_S1=include$91[4],
     For_all_parameters_S2=include$91[5],
     For_all_parameters_S3=include$91[6],
     For_all_parameters_S4=include$91[7],
     For_all_parameters_S5=include$91[8];
    function of_typerep$0(typerep)
     {var t=of_typerep(typerep),match=t[1];return match?0:[0,t]}
    function of_typerep_exn(here,typerep)
     {return caml_call4(_x7_,[0,here],0,0,of_typerep$0(typerep))}
    function value_as_int$0(param,a){return a}
    var
     include$92=For_all_parameters([0,1]),
     For_all_parameters_S1$0=include$92[4],
     For_all_parameters_S2$0=include$92[5],
     For_all_parameters_S3$0=include$92[6],
     For_all_parameters_S4$0=include$92[7],
     For_all_parameters_S5$0=include$92[8];
    function of_typerep$1(typerep)
     {var t=of_typerep(typerep),match=t[1];return 1 === match?[0,t]:0}
    function of_typerep_exn$0(here,typerep)
     {return caml_call4(_x7_,[0,here],0,0,of_typerep$1(typerep))}
    var
     _VT_=For_all_parameters([0,2]),
     For_all_parameters_S1$1=_VT_[4],
     For_all_parameters_S2$1=_VT_[5],
     For_all_parameters_S3$1=_VT_[6],
     For_all_parameters_S4$1=_VT_[7],
     For_all_parameters_S5$1=_VT_[8];
    function of_typerep$2(typerep)
     {var t=of_typerep(typerep),match=t[1];return 2 <= match?[0,t]:0}
    function of_typerep_exn$1(here,typerep)
     {return caml_call4(_x7_,[0,here],0,0,of_typerep$2(typerep))}
    function dest(t)
     {var match=t[1];
      switch(match)
       {case 0:return [0,t];case 1:return [1,t];default:return [2,t]}}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$301);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Type_immediacy$0);
    function _VU_(_baD_)
     {return [0,caml_call1(For_all_parameters_S5$1,_baD_)[2]]}
    function _VV_(_baC_)
     {return [0,caml_call1(For_all_parameters_S4$1,_baC_)[2]]}
    function _VW_(_baB_)
     {return [0,caml_call1(For_all_parameters_S3$1,_baB_)[2]]}
    function _VX_(_baA_)
     {return [0,caml_call1(For_all_parameters_S2$1,_baA_)[2]]}
    var
     _VY_=
      [0,
       of_typerep$2,
       of_typerep_exn$1,
       function(_baz_)
        {return [0,caml_call1(For_all_parameters_S1$1,_baz_)[2]]},
       _VX_,
       _VW_,
       _VV_,
       _VU_,
       int32,
       int64,
       nativeint,
       float$0,
       string$0,
       bytes,
       array,
       ref,
       tuple2$3,
       tuple3$2,
       tuple4$2,
       tuple5$2];
    function _VZ_(_bay_)
     {return [0,caml_call1(For_all_parameters_S5$0,_bay_)[2]]}
    function _V0_(_bax_)
     {return [0,caml_call1(For_all_parameters_S4$0,_bax_)[2]]}
    function _V1_(_baw_)
     {return [0,caml_call1(For_all_parameters_S3$0,_baw_)[2]]}
    function _V2_(_bav_)
     {return [0,caml_call1(For_all_parameters_S2$0,_bav_)[2]]}
    var
     _V3_=
      [0,
       of_typerep$1,
       of_typerep_exn$0,
       int_as_value,
       int_as_value_exn,
       int_is_value,
       value_as_int,
       value_as_int_exn,
       value_is_int,
       function(_bau_)
        {return [0,caml_call1(For_all_parameters_S1$0,_bau_)[2]]},
       _V2_,
       _V1_,
       _V0_,
       _VZ_,
       option,
       list$0];
    function _V4_(_bat_)
     {return [0,caml_call1(For_all_parameters_S5,_bat_)[2]]}
    function _V5_(_bas_)
     {return [0,caml_call1(For_all_parameters_S4,_bas_)[2]]}
    function _V6_(_bar_)
     {return [0,caml_call1(For_all_parameters_S3,_bar_)[2]]}
    function _V7_(_baq_)
     {return [0,caml_call1(For_all_parameters_S2,_baq_)[2]]}
    var
     Core_kernel_Type_immediacy=
      [0,
       [0,
        of_typerep$0,
        of_typerep_exn,
        int_as_value,
        int_as_value_exn,
        int_is_value,
        value_as_int$0,
        function(_bap_){return [0,caml_call1(For_all_parameters_S1,_bap_)[2]]},
        _V7_,
        _V6_,
        _V5_,
        _V4_,
        int$2,
        char$3,
        bool$2,
        unit$0],
       _V3_,
       _VY_,
       of_typerep,
       dest,
       int_as_value,
       int_as_value_exn,
       int_is_value,
       value_as_int,
       value_as_int_exn,
       value_is_int];
    caml_register_global
     (5096,Core_kernel_Type_immediacy,"Core_kernel__Type_immediacy");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Tuple);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$302);
    caml_call1(Expect_test_collector[4][1],cst_src_tuple_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$303,cst$106);
    function Make$11(T1,T2){return [0]}
    function t_of_sexp$65(of_a,of_b,sexp)
     {if(1 === sexp[0])
       {var _ban_=sexp[1];
        if(_ban_)
         {var _bao_=_ban_[2];
          if(_bao_ && ! _bao_[2])
           {var
             v1=_bao_[1],
             v0=_ban_[1],
             v0$0=caml_call1(of_a,v0),
             v1$0=caml_call1(of_b,v1);
            return [0,v0$0,v1$0]}}}
      return caml_call3(Sexplib0_Sexp_conv_error[2],tp_loc$22,2,sexp)}
    function sexp_of_t$79(of_a,of_b,param)
     {var
       v1=param[2],
       v0=param[1],
       v0$0=caml_call1(of_a,v0),
       v1$0=caml_call1(of_b,v1);
      return [1,[0,v0$0,[0,v1$0,0]]]}
    var
     Typename_of_t$21=caml_call1(Typerep_lib_Make_typename[3],[0,name$55]),
     typename_of_t$21=Typename_of_t$21[2];
    function typerep_of_t$21(of_a,of_b)
     {var name_of_t=caml_call2(Typename_of_t$21[1],of_a,of_b);
      return [9,
              [0,
               name_of_t,
               [0,[246,function(_bam_){return caml_call2(_e0_,of_a,of_b)}]]]]}
    function create$20(a,b){return [0,a,b]}
    function curry(f){return function(a,b){return caml_call1(f,[0,a,b])}}
    function uncurry(f)
     {return function(param)
       {var b=param[2],a=param[1];return caml_call2(f,a,b)}}
    function map1(f,param)
     {var y=param[2],x=param[1];return [0,caml_call1(f,x),y]}
    function map2$0(f,param)
     {var y=param[2],x=param[1];return [0,x,caml_call1(f,y)]}
    function map$22(param,f)
     {var y=param[2],x=param[1],_bal_=caml_call1(f,y);
      return [0,caml_call1(f,x),_bal_]}
    function map_fst(param,f)
     {var y=param[2],x=param[1];return [0,caml_call1(f,x),y]}
    function map_snd(param,f)
     {var y=param[2],x=param[1];return [0,x,caml_call1(f,y)]}
    function compare$62(cmp1,cmp2,param,_bak_)
     {var
       y=_bak_[2],
       x=_bak_[1],
       y$0=param[2],
       x$0=param[1],
       i=caml_call2(cmp1,x$0,x);
      return 0 === i?caml_call2(cmp2,y$0,y):i}
    function equal$30(eq1,eq2,param,_bai_)
     {var
       y=_bai_[2],
       x=_bai_[1],
       y$0=param[2],
       x$0=param[1],
       _baj_=caml_call2(eq1,x$0,x);
      return _baj_?caml_call2(eq2,y$0,y):_baj_}
    function swap$2(param){var b=param[2],a=param[1];return [0,b,a]}
    function compare$63(cmp1,cmp2)
     {return function(_bag_,_bah_){return compare$62(cmp1,cmp2,_bag_,_bah_)}}
    var
     include$93=caml_call1(Derived2,[0,compare$63,sexp_of_t$79]),
     comparator$16=include$93[1];
    function t_of_sexp$66(of_a,of_b,of_c,sexp)
     {if(1 === sexp[0])
       {var _bad_=sexp[1];
        if(_bad_)
         {var _bae_=_bad_[2];
          if(_bae_)
           {var _baf_=_bae_[2];
            if(_baf_ && ! _baf_[2])
             {var
               v2=_baf_[1],
               v1=_bae_[1],
               v0=_bad_[1],
               v0$0=caml_call1(of_a,v0),
               v1$0=caml_call1(of_b,v1),
               v2$0=caml_call1(of_c,v2);
              return [0,v0$0,v1$0,v2$0]}}}}
      return caml_call3(Sexplib0_Sexp_conv_error[2],tp_loc$23,3,sexp)}
    function sexp_of_t$80(of_a,of_b,of_c,param)
     {var
       v2=param[3],
       v1=param[2],
       v0=param[1],
       v0$0=caml_call1(of_a,v0),
       v1$0=caml_call1(of_b,v1),
       v2$0=caml_call1(of_c,v2);
      return [1,[0,v0$0,[0,v1$0,[0,v2$0,0]]]]}
    var
     Typename_of_t$22=caml_call1(Typerep_lib_Make_typename[4],[0,name$56]),
     typename_of_t$22=Typename_of_t$22[2];
    function typerep_of_t$22(of_a,of_b,of_c)
     {var name_of_t=caml_call3(Typename_of_t$22[1],of_a,of_b,of_c);
      return [9,
              [0,
               name_of_t,
               [0,
                [246,function(_bac_){return caml_call3(_eZ_,of_a,of_b,of_c)}]]]]}
    function create$21(a,b,c){return [0,a,b,c]}
    function curry$0(f)
     {return function(a,b,c){return caml_call1(f,[0,a,b,c])}}
    function uncurry$0(f)
     {return function(param)
       {var c=param[3],b=param[2],a=param[1];return caml_call3(f,a,b,c)}}
    function map1$0(f,param)
     {var z=param[3],y=param[2],x=param[1];return [0,caml_call1(f,x),y,z]}
    function map2$1(f,param)
     {var z=param[3],y=param[2],x=param[1];return [0,x,caml_call1(f,y),z]}
    function map3$0(f,param)
     {var z=param[3],y=param[2],x=param[1];return [0,x,y,caml_call1(f,z)]}
    function map$23(param,f)
     {var
       z=param[3],
       y=param[2],
       x=param[1],
       _baa_=caml_call1(f,z),
       _bab_=caml_call1(f,y);
      return [0,caml_call1(f,x),_bab_,_baa_]}
    function map_fst$0(param,f)
     {var z=param[3],y=param[2],x=param[1];return [0,caml_call1(f,x),y,z]}
    function map_snd$0(param,f)
     {var z=param[3],y=param[2],x=param[1];return [0,x,caml_call1(f,y),z]}
    function map_trd(param,f)
     {var z=param[3],y=param[2],x=param[1];return [0,x,y,caml_call1(f,z)]}
    function get3(param){var a=param[3];return a}
    function compare$64(cmp1,cmp2,cmp3,param,_a$$_)
     {var
       z=_a$$_[3],
       y=_a$$_[2],
       x=_a$$_[1],
       z$0=param[3],
       y$0=param[2],
       x$0=param[1],
       c1=caml_call2(cmp1,x$0,x);
      if(caml_call2(_a4_,c1,0))return c1;
      var c2=caml_call2(cmp2,y$0,y);
      return caml_call2(_a4_,c2,0)?c2:caml_call2(cmp3,z$0,z)}
    function equal$31(eq1,eq2,eq3,param,_a$7_)
     {var
       z=_a$7_[3],
       y=_a$7_[2],
       x=_a$7_[1],
       z$0=param[3],
       y$0=param[2],
       x$0=param[1],
       _a$8_=caml_call2(eq1,x$0,x);
      if(_a$8_)
       {var _a$9_=caml_call2(eq2,y$0,y);
        if(_a$9_)return caml_call2(eq3,z$0,z);
        var _a$__=_a$9_}
      else
       var _a$__=_a$8_;
      return _a$__}
    function Sexpable(S1,S2)
     {function t_of_sexp(sexp)
       {if(1 === sexp[0])
         {var _a$5_=sexp[1];
          if(_a$5_)
           {var _a$6_=_a$5_[2];
            if(_a$6_ && ! _a$6_[2])
             {var
               v1=_a$6_[1],
               v0=_a$5_[1],
               v0$0=caml_call1(S1[1],v0),
               v1$0=caml_call1(S2[1],v1);
              return [0,v0$0,v1$0]}}}
        return caml_call3(Sexplib0_Sexp_conv_error[2],tp_loc$24,2,sexp)}
      function sexp_of_t(param)
       {var
         v1=param[2],
         v0=param[1],
         v0$0=caml_call1(S1[2],v0),
         v1$0=caml_call1(S2[2],v1);
        return [1,[0,v0$0,[0,v1$0,0]]]}
      return [0,t_of_sexp,sexp_of_t]}
    function Hasher(H1,H2)
     {function compare(a_001,b_002)
       {var
         t_004=a_001[2],
         t_003=a_001[1],
         t_006=b_002[2],
         t_005=b_002[1],
         n=caml_call2(H1[1],t_003,t_005);
        return 0 === n?caml_call2(H2[1],t_004,t_006):n}
      function hash_fold_t(hsv,arg)
       {var
         e1=arg[2],
         e0=arg[1],
         hsv$0=caml_call2(H1[2],hsv,e0),
         hsv$1=caml_call2(H2[2],hsv$0,e1);
        return hsv$1}
      function hash(x)
       {var hsv=caml_call2(Base_Hash[11],0,0),_a$4_=hash_fold_t(hsv,x);
        return caml_call1(Base_Hash[9],_a$4_)}
      function t_of_sexp(sexp)
       {if(1 === sexp[0])
         {var _a$2_=sexp[1];
          if(_a$2_)
           {var _a$3_=_a$2_[2];
            if(_a$3_ && ! _a$3_[2])
             {var
               v1=_a$3_[1],
               v0=_a$2_[1],
               v0$0=caml_call1(H1[4],v0),
               v1$0=caml_call1(H2[4],v1);
              return [0,v0$0,v1$0]}}}
        return caml_call3(Sexplib0_Sexp_conv_error[2],tp_loc$25,2,sexp)}
      function sexp_of_t(param)
       {var
         v1=param[2],
         v0=param[1],
         v0$0=caml_call1(H1[5],v0),
         v1$0=caml_call1(H2[5],v1);
        return [1,[0,v0$0,[0,v1$0,0]]]}
      var
       T=[0,compare,hash_fold_t,hash,t_of_sexp,sexp_of_t],
       t_of_sexp$0=T[4],
       sexp_of_t$0=T[5],
       include=Make$4([0,T[2],T[4],T[1],T[5],T[3]]),
       compare$0=include[1],
       hash_fold_t$0=include[2],
       hash$0=include[3],
       hashable=include[4],
       Table=include[5],
       Hash_set=include[6],
       Hash_queue=include[7];
      return [0,
              T,
              t_of_sexp$0,
              sexp_of_t$0,
              compare$0,
              hash_fold_t$0,
              hash$0,
              hashable,
              Table,
              Hash_set,
              Hash_queue]}
    function Hasher_sexpable_of_hashable_se(S)
     {var t_of_sexp=S[1],sexp_of_t=S[2],compare=S[3],hash=S[5];
      function hash_fold_t$0(state,t)
       {return caml_call2(hash_fold_t,state,caml_call1(hash,t))}
      return [0,compare,hash_fold_t$0,hash,t_of_sexp,sexp_of_t]}
    function Hashable_t(_a$0_,_a$Z_)
     {var _a$1_=Hasher_sexpable_of_hashable_se(_a$Z_);
      return Hasher(Hasher_sexpable_of_hashable_se(_a$0_),_a$1_)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$304);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Tuple$0);
    function _V8_(_a$X_,_a$W_)
     {var _a$Y_=Hasher(_a$X_,_a$W_);
      return [0,
              _a$Y_[2],
              _a$Y_[3],
              _a$Y_[4],
              _a$Y_[5],
              _a$Y_[6],
              _a$Y_[7],
              _a$Y_[8],
              _a$Y_[9],
              _a$Y_[10]]}
    function _V9_(B1,B2)
     {var
       _a$Q_=caml_call1(Bin_prot_Shape[7],[0,B1[5],[0,B2[5],0]]),
       _a$R_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$171),0,_a$Q_],0],
       _a$S_=caml_call1(Bin_prot_Shape[4][1],cst_src_tuple_ml_114_2),
       group=caml_call2(Bin_prot_Shape[6],_a$S_,_a$R_),
       _a$T_=caml_call1(Bin_prot_Shape[2][1],cst_t$172),
       bin_shape_t=caml_call1(caml_call2(Bin_prot_Shape[14],group,_a$T_),0);
      function bin_size_t(param)
       {var
         v2=param[2],
         v1=param[1],
         _a$U_=caml_call1(B1[1],v1),
         size=caml_call2(Bin_prot_Common[23],0,_a$U_),
         _a$V_=caml_call1(B2[1],v2);
        return caml_call2(Bin_prot_Common[23],size,_a$V_)}
      function bin_write_t(buf,pos,param)
       {var v2=param[2],v1=param[1],pos$0=caml_call3(B1[2],buf,pos,v1);
        return caml_call3(B2[2],buf,pos$0,v2)}
      var bin_writer_t=[0,bin_size_t,bin_write_t];
      function bin_read_t(buf,pos_ref,vint)
       {return caml_call2
                (Bin_prot_Common[19],cst_src_tuple_ml_Binable_t,pos_ref[1])}
      function bin_read_t$0(buf,pos_ref)
       {var v1=caml_call2(B1[3],buf,pos_ref),v2=caml_call2(B2[3],buf,pos_ref);
        return [0,v1,v2]}
      var
       bin_reader_t=[0,bin_read_t$0,bin_read_t],
       bin_t=[0,bin_shape_t,bin_writer_t,bin_reader_t];
      return [0,
              bin_size_t,
              bin_write_t,
              bin_read_t$0,
              bin_read_t,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t]}
    function _V__(_a$O_,_a$N_)
     {var _a$P_=Hashable_t(_a$O_,_a$N_);
      return [0,
              _a$P_[2],
              _a$P_[3],
              _a$P_[4],
              _a$P_[5],
              _a$P_[6],
              _a$P_[7],
              _a$P_[8],
              _a$P_[9],
              _a$P_[10]]}
    function _V$_(_a$L_,_a$K_)
     {var _a$M_=Hashable_t(_a$L_,_a$K_);
      return [0,
              _a$M_[2],
              _a$M_[3],
              _a$M_[4],
              _a$M_[5],
              _a$M_[6],
              _a$M_[7],
              _a$M_[8],
              _a$M_[9],
              _a$M_[10]]}
    function _Wa_(S1,S2)
     {var
       include$0=Sexpable([0,S1[1],S1[2]],[0,S2[1],S2[2]]),
       t_of_sexp=include$0[1],
       sexp_of_t=include$0[2];
      function compare(param,_a$J_)
       {var
         s2=_a$J_[2],
         s1=_a$J_[1],
         s2$0=param[2],
         s1$0=param[1],
         x=caml_call2(S1[10],s1$0,s1);
        return 0 === x?caml_call2(S2[10],s2$0,s2):x}
      var
       include=Make$2([0,compare,t_of_sexp,sexp_of_t]),
       symbol=include[1],
       symbol$0=include[2],
       symbol$1=include[3],
       symbol$2=include[4],
       symbol$3=include[5],
       symbol$4=include[6],
       equal=include[7],
       compare$0=include[8],
       min=include[9],
       max=include[10],
       ascending=include[11],
       descending=include[12],
       between=include[13],
       clamp_exn=include[14],
       clamp=include[15],
       comparator=include[16],
       validate_lbound=include[17],
       validate_ubound=include[18],
       validate_bound=include[19],
       Replace_polymorphic_compare=include[20],
       Map=include[21],
       Set=include[22];
      return [0,
              t_of_sexp,
              sexp_of_t,
              symbol,
              symbol$0,
              symbol$1,
              symbol$2,
              symbol$3,
              symbol$4,
              equal,
              compare$0,
              min,
              max,
              ascending,
              descending,
              between,
              clamp_exn,
              clamp,
              comparator,
              validate_lbound,
              validate_ubound,
              validate_bound,
              Replace_polymorphic_compare,
              Map,
              Set]}
    var
     Core_kernel_Tuple=
      [0,
       [0,
        t_of_sexp$65,
        sexp_of_t$79,
        typerep_of_t$21,
        typename_of_t$21,
        comparator$16,
        create$20,
        curry,
        uncurry,
        compare$62,
        equal$30,
        map1,
        map2$0,
        map$22,
        map_fst,
        map_snd,
        swap$2],
       [0,
        t_of_sexp$66,
        sexp_of_t$80,
        typerep_of_t$22,
        typename_of_t$22,
        create$21,
        curry$0,
        uncurry$0,
        equal$31,
        compare$64,
        get3,
        map1$0,
        map2$1,
        map3$0,
        map$23,
        map_fst$0,
        map_snd$0,
        map_trd],
       Make$11,
       function(_a$I_,_a$H_)
        {var
          comparator=caml_call2(comparator$16,_a$I_[16],_a$H_[16]),
          sexp_of_t=comparator[2],
          include=Make_plain_using_comparator$1([0,sexp_of_t,comparator]),
          symbol=include[1],
          symbol$0=include[2],
          symbol$1=include[3],
          symbol$2=include[4],
          symbol$3=include[5],
          symbol$4=include[6],
          equal=include[7],
          compare=include[8],
          min=include[9],
          max=include[10],
          ascending=include[11],
          descending=include[12],
          between=include[13],
          clamp_exn=include[14],
          clamp=include[15],
          comparator$0=include[16],
          validate_lbound=include[17],
          validate_ubound=include[18],
          validate_bound=include[19],
          Replace_polymorphic_compare=include[20],
          Map=include[21],
          Set=include[22];
         return [0,
                 symbol,
                 symbol$0,
                 symbol$1,
                 symbol$2,
                 symbol$3,
                 symbol$4,
                 equal,
                 compare,
                 min,
                 max,
                 ascending,
                 descending,
                 between,
                 clamp_exn,
                 clamp,
                 comparator$0,
                 validate_lbound,
                 validate_ubound,
                 validate_bound,
                 Replace_polymorphic_compare,
                 Map,
                 Set]},
       _Wa_,
       _V$_,
       _V__,
       Sexpable,
       _V9_,
       _V8_];
    caml_register_global(5097,Core_kernel_Tuple,"Core_kernel__Tuple");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Day_of_week);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$305);
    caml_call1(Expect_test_collector[4][1],cst_src_day_of_week_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$306,cst$107);
    var
     _Wc_=caml_call1(Bin_prot_Shape[9],_Wb_),
     _Wd_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$173),0,_Wc_],0],
     _We_=caml_call1(Bin_prot_Shape[4][1],cst_src_day_of_week_ml_8_6),
     group$105=caml_call2(Bin_prot_Shape[6],_We_,_Wd_),
     _Wf_=caml_call1(Bin_prot_Shape[2][1],cst_t$174),
     bin_shape_t$86=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$105,_Wf_),0);
    function bin_size_t$70(param){return 1}
    function bin_write_t$71(buf,pos,param)
     {switch(param)
       {case 0:return caml_call3(Bin_prot_Write[30],buf,pos,0);
        case 1:return caml_call3(Bin_prot_Write[30],buf,pos,1);
        case 2:return caml_call3(Bin_prot_Write[30],buf,pos,2);
        case 3:return caml_call3(Bin_prot_Write[30],buf,pos,3);
        case 4:return caml_call3(Bin_prot_Write[30],buf,pos,4);
        case 5:return caml_call3(Bin_prot_Write[30],buf,pos,5);
        default:return caml_call3(Bin_prot_Write[30],buf,pos,6)}}
    var bin_writer_t$75=[0,bin_size_t$70,bin_write_t$71];
    function bin_read_t$140(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_src_day_of_week_ml_Stable_,pos_ref[1])}
    function bin_read_t$141(buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[29],buf,pos_ref);
      if(6 < match >>> 0)
       return caml_call2(Bin_prot_Common[18],_Wg_,pos_ref[1]);
      switch(match)
       {case 0:return 0;
        case 1:return 1;
        case 2:return 2;
        case 3:return 3;
        case 4:return 4;
        case 5:return 5;
        default:return 6}}
    var
     bin_reader_t$75=[0,bin_read_t$141,bin_read_t$140],
     bin_t$75=[0,bin_shape_t$86,bin_writer_t$75,bin_reader_t$75],
     compare$65=caml_int_compare;
    function hash_fold_t$35(hsv,arg)
     {switch(arg)
       {case 0:return caml_call2(Base_Hash[3],hsv,0);
        case 1:return caml_call2(Base_Hash[3],hsv,1);
        case 2:return caml_call2(Base_Hash[3],hsv,2);
        case 3:return caml_call2(Base_Hash[3],hsv,3);
        case 4:return caml_call2(Base_Hash[3],hsv,4);
        case 5:return caml_call2(Base_Hash[3],hsv,5);
        default:return caml_call2(Base_Hash[3],hsv,6)}}
    function hash$32(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_a$G_=hash_fold_t$35(hsv,x);
      return caml_call1(Base_Hash[9],_a$G_)}
    var _Wh_=0;
    function _Wi_(size_018,random_019){return 6}
    var _Wj_=[0,[0,1.,caml_call1(Base_quickcheck_Generator[113],_Wi_)],_Wh_];
    function _Wk_(size_016,random_017){return 5}
    var _Wl_=[0,[0,1.,caml_call1(Base_quickcheck_Generator[113],_Wk_)],_Wj_];
    function _Wm_(size_014,random_015){return 4}
    var _Wn_=[0,[0,1.,caml_call1(Base_quickcheck_Generator[113],_Wm_)],_Wl_];
    function _Wo_(size_012,random_013){return 3}
    var _Wp_=[0,[0,1.,caml_call1(Base_quickcheck_Generator[113],_Wo_)],_Wn_];
    function _Wq_(size_010,random_011){return 2}
    var _Wr_=[0,[0,1.,caml_call1(Base_quickcheck_Generator[113],_Wq_)],_Wp_];
    function _Ws_(size_008,random_009){return 1}
    var _Wt_=[0,[0,1.,caml_call1(Base_quickcheck_Generator[113],_Ws_)],_Wr_];
    function _Wu_(size_006,random_007){return 0}
    var
     _Wv_=[0,[0,1.,caml_call1(Base_quickcheck_Generator[113],_Wu_)],_Wt_],
     quickcheck_generator$10=caml_call1(Base_quickcheck_Generator[56],_Wv_);
    function _Ww_(x_003,size_004,hash_005)
     {switch(x_003)
       {case 0:
         var hash_005$0=caml_call2(Base[117],hash_005,0);return hash_005$0;
        case 1:
         var hash_005$1=caml_call2(Base[117],hash_005,1);return hash_005$1;
        case 2:
         var hash_005$2=caml_call2(Base[117],hash_005,2);return hash_005$2;
        case 3:
         var hash_005$3=caml_call2(Base[117],hash_005,3);return hash_005$3;
        case 4:
         var hash_005$4=caml_call2(Base[117],hash_005,4);return hash_005$4;
        case 5:
         var hash_005$5=caml_call2(Base[117],hash_005,5);return hash_005$5;
        default:
         var hash_005$6=caml_call2(Base[117],hash_005,6);return hash_005$6}}
    var quickcheck_observer$9=caml_call1(Base_quickcheck_Observer[32],_Ww_);
    function _Wx_(param)
     {switch(param)
       {case 0:return caml_call1(include$9[66],0);
        case 1:return caml_call1(include$9[66],0);
        case 2:return caml_call1(include$9[66],0);
        case 3:return caml_call1(include$9[66],0);
        case 4:return caml_call1(include$9[66],0);
        case 5:return caml_call1(include$9[66],0);
        default:return caml_call1(include$9[66],0)}}
    var quickcheck_shrinker$9=caml_call1(Base_quickcheck_Shrinker[32],_Wx_);
    function to_string$18(t)
     {switch(t)
       {case 0:return cst_SUN;
        case 1:return cst_MON;
        case 2:return cst_TUE;
        case 3:return cst_WED;
        case 4:return cst_THU;
        case 5:return cst_FRI;
        default:return cst_SAT}}
    function to_string_long(t)
     {switch(t)
       {case 0:return cst_Sunday;
        case 1:return cst_Monday;
        case 2:return cst_Tuesday;
        case 3:return cst_Wednesday;
        case 4:return cst_Thursday;
        case 5:return cst_Friday;
        default:return cst_Saturday}}
    function of_string_internal(s)
     {var
       match=caml_call1(_Cg_,s),
       _a$F_=caml_string_compare(match,cst_SUNDAY),
       switch$0=0;
      if(0 <= _a$F_)
       if(0 < _a$F_)
        {var switch$1=0;
         if
          (caml_string_notequal(match,cst_THU$0)
           &&
           caml_string_notequal(match,cst_THURSDAY))
          {var switch$2=0;
           if
            (caml_string_notequal(match,cst_TUE$0)
             &&
             caml_string_notequal(match,cst_TUESDAY))
            {var switch$3=0;
             if
              (caml_string_notequal(match,cst_WED$0)
               &&
               caml_string_notequal(match,cst_WEDNESDAY))
              {switch$1 = 1;switch$2 = 1;switch$3 = 1}
             if(! switch$3)return 3}
           if(! switch$2)return 2}
         if(! switch$1)return 4}
       else
        switch$0 = 1;
      else
       {var switch$4=0;
        if
         (caml_string_notequal(match,cst_FRI$0)
          &&
          caml_string_notequal(match,cst_FRIDAY))
         {var switch$5=0;
          if
           (caml_string_notequal(match,cst_MON$0)
            &&
            caml_string_notequal(match,cst_MONDAY))
           {var switch$6=0;
            if
             (caml_string_notequal(match,cst_SAT$0)
              &&
              caml_string_notequal(match,cst_SATURDAY))
             if(caml_string_notequal(match,cst_SUN$0))
              {switch$4 = 1;switch$5 = 1;switch$6 = 1}
             else
              {switch$0 = 1;switch$4 = 1;switch$5 = 1;switch$6 = 1}
            if(! switch$6)return 6}
          if(! switch$5)return 1}
        if(! switch$4)return 5}
      return switch$0?0:caml_call3(failwithf,_Wy_,s,0)}
    function of_int_exn$4(i)
     {if(6 < i >>> 0)return caml_call3(failwithf,_Wz_,i,0);
      switch(i)
       {case 0:return 0;
        case 1:return 1;
        case 2:return 2;
        case 3:return 3;
        case 4:return 4;
        case 5:return 5;
        default:return 6}}
    function of_string$15(s)
     {try
       {var _a$C_=of_string_internal(s);return _a$C_}
      catch(_a$D_)
       {try
         {var _a$B_=of_int_exn$4(caml_call1(of_string$3,s));return _a$B_}
        catch(_a$E_){return caml_call3(failwithf,_WA_,s,0)}}}
    var
     include$94=caml_call1(Stable[5][1],[0,of_string$15,to_string$18]),
     t_of_sexp$67=include$94[1],
     sexp_of_t$81=include$94[2],
     _WB_=
      _xj_
       ([0,
         bin_size_t$70,
         bin_write_t$71,
         bin_read_t$141,
         bin_read_t$140,
         bin_shape_t$86,
         bin_writer_t$75,
         bin_reader_t$75,
         bin_t$75,
         compare$65,
         t_of_sexp$67,
         sexp_of_t$81]),
     symbol$148=_WB_[1],
     symbol$149=_WB_[2],
     symbol$150=_WB_[3],
     symbol$151=_WB_[4],
     symbol$152=_WB_[5],
     symbol$153=_WB_[6],
     equal$32=_WB_[7],
     compare$66=_WB_[8],
     min$11=_WB_[9],
     max$11=_WB_[10],
     ascending$11=_WB_[11],
     descending$11=_WB_[12],
     between$11=_WB_[13],
     clamp_exn$11=_WB_[14],
     clamp$11=_WB_[15],
     validate_lbound$11=_WB_[16],
     validate_ubound$11=_WB_[17],
     validate_bound$11=_WB_[18],
     Replace_polymorphic_compare$10=_WB_[19],
     comparator$17=_WB_[20],
     Map$14=_WB_[21],
     Set$14=_WB_[22],
     include$95=
      Make_binable
       ([0,
         hash_fold_t$35,
         bin_size_t$70,
         bin_write_t$71,
         bin_read_t$141,
         bin_read_t$140,
         bin_shape_t$86,
         bin_writer_t$75,
         bin_reader_t$75,
         bin_t$75,
         t_of_sexp$67,
         compare$65,
         sexp_of_t$81,
         hash$32]),
     hash_fold_t$36=include$95[1],
     hash$33=include$95[2],
     hashable$11=include$95[3],
     Table$12=include$95[4],
     Hash_set$12=include$95[5],
     Hash_queue$11=include$95[6],
     _WC_=
      caml_call1
       (Stable$2[1][1],
        [0,
         bin_size_t$70,
         bin_write_t$71,
         bin_read_t$141,
         bin_read_t$140,
         bin_shape_t$86,
         bin_writer_t$75,
         bin_reader_t$75,
         bin_t$75,
         compare$66,
         t_of_sexp$67,
         sexp_of_t$81,
         comparator$17]),
     Map$15=_WC_[1],
     Set$15=_WC_[2],
     include$96=
      caml_call1
       (Stable$3[1][1],
        [0,
         bin_size_t$70,
         bin_write_t$71,
         bin_read_t$141,
         bin_read_t$140,
         bin_shape_t$86,
         bin_writer_t$75,
         bin_reader_t$75,
         bin_t$75,
         t_of_sexp$67,
         compare$66,
         sexp_of_t$81,
         hash$33]),
     Table$13=include$96[1],
     Hash_set$13=include$96[2];
    function of_int$5(i)
     {try {var _a$z_=[0,of_int_exn$4(i)];return _a$z_}catch(_a$A_){return 0}}
    function to_int$4(t)
     {switch(t)
       {case 0:return 0;
        case 1:return 1;
        case 2:return 2;
        case 3:return 3;
        case 4:return 4;
        case 5:return 5;
        default:return 6}}
    function iso_8601_weekday_number(t)
     {switch(t)
       {case 0:return 7;
        case 1:return 1;
        case 2:return 2;
        case 3:return 3;
        case 4:return 4;
        case 5:return 5;
        default:return 6}}
    var num_days_in_week=7;
    function shift(t,i)
     {return of_int_exn$4
              (caml_call2
                (symbol$66,caml_call2(_aJ_,to_int$4(t),i),num_days_in_week))}
    function num_days(from,to)
     {var _a$y_=to_int$4(from),d=caml_call2(_aK_,to_int$4(to),_a$y_);
      return caml_call2(symbol$58,d,0)?caml_call2(_aJ_,d,num_days_in_week):d}
    function is_sun_or_sat(t)
     {var _a$x_=caml_call2(symbol$150,t,0);
      return _a$x_?_a$x_:caml_call2(symbol$150,t,6)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$307);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Day_of_week$0);
    var
     Core_kernel_Day_of_week=
      [0,
       bin_size_t$70,
       bin_write_t$71,
       bin_read_t$141,
       bin_read_t$140,
       bin_shape_t$86,
       bin_writer_t$75,
       bin_reader_t$75,
       bin_t$75,
       quickcheck_generator$10,
       quickcheck_observer$9,
       quickcheck_shrinker$9,
       t_of_sexp$67,
       sexp_of_t$81,
       symbol$148,
       symbol$149,
       symbol$150,
       symbol$151,
       symbol$152,
       symbol$153,
       equal$32,
       compare$66,
       min$11,
       max$11,
       ascending$11,
       descending$11,
       between$11,
       clamp_exn$11,
       clamp$11,
       validate_lbound$11,
       validate_ubound$11,
       validate_bound$11,
       Replace_polymorphic_compare$10,
       comparator$17,
       Map$14,
       Set$14,
       hash_fold_t$36,
       hash$33,
       hashable$11,
       Table$12,
       Hash_set$12,
       Hash_queue$11,
       of_string$15,
       to_string$18,
       to_string_long,
       of_int_exn$4,
       of_int$5,
       to_int$4,
       iso_8601_weekday_number,
       shift,
       num_days,
       is_sun_or_sat,
       all$3,
       weekdays,
       weekends,
       [0,
        [0,
         bin_size_t$70,
         bin_write_t$71,
         bin_read_t$141,
         bin_read_t$140,
         bin_shape_t$86,
         bin_writer_t$75,
         bin_reader_t$75,
         bin_t$75,
         t_of_sexp$67,
         sexp_of_t$81,
         compare$65,
         hash_fold_t$35,
         hash$32,
         Map$15,
         Set$15,
         Table$13,
         Hash_set$13]]];
    caml_register_global
     (5098,Core_kernel_Day_of_week,"Core_kernel__Day_of_week");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Day_of_week_in);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$308);
    caml_call1(Expect_test_collector[4][1],cst_src_day_of_week_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$309,cst$108);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$310);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Day_of_week_in$0);
    var Core_kernel_Day_of_week_intf=[0];
    caml_register_global
     (5099,Core_kernel_Day_of_week_intf,"Core_kernel__Day_of_week_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Digit_string_h);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$311);
    caml_call1(Expect_test_collector[4][1],cst_src_digit_string_helpers_m);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$312,cst$109);
    var compare$67=caml_int_compare;
    function sexp_of_t$82(param){return param?_WD_:_WE_}
    var
     Round=[0,compare$67,sexp_of_t$82],
     divisor=caml_call1(of_int$3,2),
     int63_ten=caml_call1(of_int$3,10),
     int63_twenty=caml_call1(of_int$3,20),
     int63_billion=caml_call1(of_int$3,1000000000),
     max_billions=caml_call2(symbol$112,max_value$2,int63_billion);
    function digits_of_positive_int63(n)
     {return caml_call2(symbol$103,n,int63_ten)
              ?1
              :caml_call1
                (next$0,
                 digits_of_positive_int63(caml_call2(symbol$112,n,int63_ten)))}
    var digits_of_int63_max_value=digits_of_positive_int63(max_value$2);
    function max_int63_with(digits)
     {var switcher=digits - 1 | 0;
      if(8 < switcher >>> 0)
       {if
         (caml_call2
           (Replace_polymorphic_compare$3[1],digits,digits_of_int63_max_value))
         return max_value$2;
        var billions=caml_call1(succ$1,max_int63_with(digits - 9 | 0));
        return caml_call1
                (pred$1,caml_call2(symbol$107,int63_billion,billions))}
      switch(switcher)
       {case 0:return caml_call1(of_int$3,9);
        case 1:return caml_call1(of_int$3,99);
        case 2:return caml_call1(of_int$3,999);
        case 3:return caml_call1(of_int$3,9999);
        case 4:return caml_call1(of_int$3,99999);
        case 5:return caml_call1(of_int$3,999999);
        case 6:return caml_call1(of_int$3,9999999);
        case 7:return caml_call1(of_int$3,99999999);
        default:return caml_call1(of_int$3,999999999)}}
    function digit_of_char(char$0){return caml_call1(_E$_,char$0)}
    function write_1_digit_int(bytes,pos,int$0)
     {caml_bytes_unsafe_set
       (bytes,pos,caml_call1(_Fl_,caml_call1(_Fo_,48) + int$0 | 0));
      return 0}
    function return_tens_and_write_ones(bytes,pos,int$0)
     {var tens=int$0 / 10 | 0,ones=int$0 - (tens * 10 | 0) | 0;
      write_1_digit_int(bytes,pos,ones);
      return tens}
    function write_2_digit_int(bytes,pos,int$0)
     {var tens=return_tens_and_write_ones(bytes,pos + 1 | 0,int$0);
      return write_1_digit_int(bytes,pos,tens)}
    function write_3_digit_int(bytes,pos,int$0)
     {var tens=return_tens_and_write_ones(bytes,pos + 2 | 0,int$0);
      return write_2_digit_int(bytes,pos,tens)}
    function write_4_digit_int(bytes,pos,int$0)
     {var tens=return_tens_and_write_ones(bytes,pos + 3 | 0,int$0);
      return write_3_digit_int(bytes,pos,tens)}
    function write_5_digit_int(bytes,pos,int$0)
     {var tens=return_tens_and_write_ones(bytes,pos + 4 | 0,int$0);
      return write_4_digit_int(bytes,pos,tens)}
    function write_6_digit_int(bytes,pos,int$0)
     {var tens=return_tens_and_write_ones(bytes,pos + 5 | 0,int$0);
      return write_5_digit_int(bytes,pos,tens)}
    function write_7_digit_int(bytes,pos,int$0)
     {var tens=return_tens_and_write_ones(bytes,pos + 6 | 0,int$0);
      return write_6_digit_int(bytes,pos,tens)}
    function write_8_digit_int(bytes,pos,int$0)
     {var tens=return_tens_and_write_ones(bytes,pos + 7 | 0,int$0);
      return write_7_digit_int(bytes,pos,tens)}
    function write_9_digit_int(bytes,pos,int$0)
     {var tens=return_tens_and_write_ones(bytes,pos + 8 | 0,int$0);
      return write_8_digit_int(bytes,pos,tens)}
    function read_1_digit_int(string,pos)
     {return digit_of_char(caml_string_unsafe_get(string,pos))}
    function read_2_digit_int(string,pos)
     {var _a$w_=read_1_digit_int(string,pos + 1 | 0);
      return (read_1_digit_int(string,pos) * 10 | 0) + _a$w_ | 0}
    function read_3_digit_int(string,pos)
     {var _a$v_=read_1_digit_int(string,pos + 2 | 0);
      return (read_2_digit_int(string,pos) * 10 | 0) + _a$v_ | 0}
    function read_4_digit_int(string,pos)
     {var _a$u_=read_1_digit_int(string,pos + 3 | 0);
      return (read_3_digit_int(string,pos) * 10 | 0) + _a$u_ | 0}
    function read_5_digit_int(string,pos)
     {var _a$t_=read_1_digit_int(string,pos + 4 | 0);
      return (read_4_digit_int(string,pos) * 10 | 0) + _a$t_ | 0}
    function read_6_digit_int(string,pos)
     {var _a$s_=read_1_digit_int(string,pos + 5 | 0);
      return (read_5_digit_int(string,pos) * 10 | 0) + _a$s_ | 0}
    function read_7_digit_int(string,pos)
     {var _a$r_=read_1_digit_int(string,pos + 6 | 0);
      return (read_6_digit_int(string,pos) * 10 | 0) + _a$r_ | 0}
    function read_8_digit_int(string,pos)
     {var _a$q_=read_1_digit_int(string,pos + 7 | 0);
      return (read_7_digit_int(string,pos) * 10 | 0) + _a$q_ | 0}
    function read_9_digit_int(string,pos)
     {var _a$p_=read_1_digit_int(string,pos + 8 | 0);
      return (read_8_digit_int(string,pos) * 10 | 0) + _a$p_ | 0}
    function raise_int63_overflow(name)
     {return caml_call4(_Pf_,_WF_,module_name$6,name,0)}
    function read_int63(string,pos,digits)
     {var switcher=digits - 1 | 0;
      if(8 < switcher >>> 0)
       {var
         digits_of_billions=digits - 9 | 0,
         billions=read_int63(string,pos,digits_of_billions),
         remainder=
          caml_call1
           (of_int$3,read_9_digit_int(string,pos + digits_of_billions | 0));
        if(caml_call2(symbol$102,billions,max_billions))
         raise_int63_overflow(cst_read_int63);
        var
         sum=
          caml_call2
           (symbol$105,
            caml_call2(symbol$107,billions,int63_billion),
            remainder);
        if(caml_call2(symbol$103,sum,zero$4))
         raise_int63_overflow(cst_read_int63$0);
        return sum}
      switch(switcher)
       {case 0:return caml_call1(of_int$3,read_1_digit_int(string,pos));
        case 1:return caml_call1(of_int$3,read_2_digit_int(string,pos));
        case 2:return caml_call1(of_int$3,read_3_digit_int(string,pos));
        case 3:return caml_call1(of_int$3,read_4_digit_int(string,pos));
        case 4:return caml_call1(of_int$3,read_5_digit_int(string,pos));
        case 5:return caml_call1(of_int$3,read_6_digit_int(string,pos));
        case 6:return caml_call1(of_int$3,read_7_digit_int(string,pos));
        case 7:return caml_call1(of_int$3,read_8_digit_int(string,pos));
        default:return caml_call1(of_int$3,read_9_digit_int(string,pos))}}
    function divide_and_round_up(numerator,denominator)
     {var
       _a$n_=caml_call2(include$62[100][1],numerator,denominator),
       _a$o_=caml_call2(include$62[100][2],_a$n_,one$2);
      return caml_call2(include$62[100][17],_a$o_,denominator)}
    var max_scale=caml_call2(symbol$112,max_value$2,int63_twenty);
    function check_digits(name,digits)
     {var _a$m_=caml_call2(Replace_polymorphic_compare$3[5],digits,1);
      return _a$m_?caml_call5(_Pf_,_WI_,module_name$6,name,digits,0):_a$m_}
    function check_pos(name,len,pos,digits)
     {var
       _a$k_=caml_call2(Replace_polymorphic_compare$3[5],pos,0),
       _a$l_=
        _a$k_
        ||
        caml_call2(Replace_polymorphic_compare$3[4],pos + digits | 0,len);
      if(_a$l_)
       {if
         (!
          caml_call2(Replace_polymorphic_compare$3[5],pos,0)
          &&
          !
          caml_call2(Replace_polymorphic_compare$3[1],pos,len))
         return caml_call7(_Pf_,_WL_,module_name$6,name,digits,pos,len,0);
        return caml_call6(_Pf_,_WK_,module_name$6,name,pos,len,0)}
      return _a$l_}
    function check_write(name,bytes,pos,digits,max,int$0)
     {var len=caml_call1(_Ex_,bytes);
      check_pos(name,len,pos,digits);
      var
       _a$i_=caml_call2(Replace_polymorphic_compare$3[5],int$0,0),
       _a$j_=_a$i_ || caml_call2(Replace_polymorphic_compare$3[4],int$0,max);
      return _a$j_?caml_call6(_Pf_,_WM_,module_name$6,name,int$0,max,0):_a$j_}
    function write_1_digit_int$0(bytes,pos,int$0)
     {check_write(cst_write_1_digit_int,bytes,pos,1,9,int$0);
      return write_1_digit_int(bytes,pos,int$0)}
    function write_2_digit_int$0(bytes,pos,int$0)
     {check_write(cst_write_2_digit_int,bytes,pos,2,99,int$0);
      return write_2_digit_int(bytes,pos,int$0)}
    function write_3_digit_int$0(bytes,pos,int$0)
     {check_write(cst_write_3_digit_int,bytes,pos,3,999,int$0);
      return write_3_digit_int(bytes,pos,int$0)}
    function write_4_digit_int$0(bytes,pos,int$0)
     {check_write(cst_write_4_digit_int,bytes,pos,4,9999,int$0);
      return write_4_digit_int(bytes,pos,int$0)}
    function write_5_digit_int$0(bytes,pos,int$0)
     {check_write(cst_write_5_digit_int,bytes,pos,5,99999,int$0);
      return write_5_digit_int(bytes,pos,int$0)}
    function write_6_digit_int$0(bytes,pos,int$0)
     {check_write(cst_write_6_digit_int,bytes,pos,6,999999,int$0);
      return write_6_digit_int(bytes,pos,int$0)}
    function write_7_digit_int$0(bytes,pos,int$0)
     {check_write(cst_write_7_digit_int,bytes,pos,7,9999999,int$0);
      return write_7_digit_int(bytes,pos,int$0)}
    function write_8_digit_int$0(bytes,pos,int$0)
     {check_write(cst_write_8_digit_int,bytes,pos,8,99999999,int$0);
      return write_8_digit_int(bytes,pos,int$0)}
    function write_9_digit_int$0(bytes,pos,int$0)
     {check_write(cst_write_9_digit_int,bytes,pos,9,999999999,int$0);
      return write_9_digit_int(bytes,pos,int$0)}
    function write_int63(bytes,pos$0,digits$1,int63$1)
     {check_digits(name$58,digits$1);
      var max=max_int63_with(digits$1),len=caml_call1(_Ex_,bytes);
      check_pos(name$58,len,pos$0,digits$1);
      var
       _a$g_=caml_call2(symbol$103,int63$1,zero$4),
       _a$h_=_a$g_ || caml_call2(symbol$102,int63$1,max);
      if(_a$h_)
       {var
         _a$e_=0,
         _a$f_=
          [11,
           cst_out_of_range_0,
           [24,
            _WO_,
            function(param,custom_printf_003)
             {return caml_call1(_KR_,custom_printf_003)},
            _WN_]];
        caml_call6
         (_Pf_,
          [0,
           [2,
            0,
            [12,
             46,
             [2,
              0,
              [11,
               cst$110,
               [24,
                _WP_,
                function(param,custom_printf_004)
                 {return caml_call1(_KR_,custom_printf_004)},
                _a$f_]]]]],
           cst_s_s_Int63_out_of_range_0_I],
          module_name$6,
          name$58,
          int63$1,
          max,
          _a$e_)}
      var digits=digits$1,int63$0=int63$1;
      for(;;)
       {var switcher=digits - 1 | 0;
        if(8 < switcher >>> 0)
         {var
           digits$0=digits - 9 | 0,
           pos=pos$0 + digits$0 | 0,
           int63=caml_call2(symbol$112,int63$0,int63_billion),
           remainder=
            caml_call2
             (symbol$106,int63$0,caml_call2(symbol$107,int63,int63_billion));
          write_9_digit_int(bytes,pos,caml_call1(to_int_exn$2,remainder));
          var digits=digits$0,int63$0=int63;
          continue}
        switch(switcher)
         {case 0:
           return write_1_digit_int
                   (bytes,pos$0,caml_call1(to_int_exn$2,int63$0));
          case 1:
           return write_2_digit_int
                   (bytes,pos$0,caml_call1(to_int_exn$2,int63$0));
          case 2:
           return write_3_digit_int
                   (bytes,pos$0,caml_call1(to_int_exn$2,int63$0));
          case 3:
           return write_4_digit_int
                   (bytes,pos$0,caml_call1(to_int_exn$2,int63$0));
          case 4:
           return write_5_digit_int
                   (bytes,pos$0,caml_call1(to_int_exn$2,int63$0));
          case 5:
           return write_6_digit_int
                   (bytes,pos$0,caml_call1(to_int_exn$2,int63$0));
          case 6:
           return write_7_digit_int
                   (bytes,pos$0,caml_call1(to_int_exn$2,int63$0));
          case 7:
           return write_8_digit_int
                   (bytes,pos$0,caml_call1(to_int_exn$2,int63$0));
          default:
           return write_9_digit_int
                   (bytes,pos$0,caml_call1(to_int_exn$2,int63$0))}}}
    function check_read(name,string,pos,digits)
     {var len=caml_ml_string_length(string);
      return check_pos(name,len,pos,digits)}
    function read_1_digit_int$0(string,pos)
     {check_read(cst_read_1_digit_int,string,pos,1);
      return read_1_digit_int(string,pos)}
    function read_2_digit_int$0(string,pos)
     {check_read(cst_read_2_digit_int,string,pos,2);
      return read_2_digit_int(string,pos)}
    function read_3_digit_int$0(string,pos)
     {check_read(cst_read_3_digit_int,string,pos,3);
      return read_3_digit_int(string,pos)}
    function read_4_digit_int$0(string,pos)
     {check_read(cst_read_4_digit_int,string,pos,4);
      return read_4_digit_int(string,pos)}
    function read_5_digit_int$0(string,pos)
     {check_read(cst_read_5_digit_int,string,pos,5);
      return read_5_digit_int(string,pos)}
    function read_6_digit_int$0(string,pos)
     {check_read(cst_read_6_digit_int,string,pos,6);
      return read_6_digit_int(string,pos)}
    function read_7_digit_int$0(string,pos)
     {check_read(cst_read_7_digit_int,string,pos,7);
      return read_7_digit_int(string,pos)}
    function read_8_digit_int$0(string,pos)
     {check_read(cst_read_8_digit_int,string,pos,8);
      return read_8_digit_int(string,pos)}
    function read_9_digit_int$0(string,pos)
     {check_read(cst_read_9_digit_int,string,pos,9);
      return read_9_digit_int(string,pos)}
    function read_int63$0(string,pos,digits)
     {check_digits(name$59,digits);
      var len=caml_ml_string_length(string);
      check_pos(name$59,len,pos,digits);
      return read_int63(string,pos,digits)}
    function read_int63_decimal
     (string,pos$0,decimals,scale$0,round_ties,allow_underscore)
     {var len=caml_ml_string_length(string);
      if(caml_call2(Replace_polymorphic_compare$3[5],decimals,0))
       caml_call5(_Pf_,_WH_,module_name$6,name$60,decimals,0);
      var
       _a$c_=caml_call2(symbol$103,scale$0,one$2),
       _a$d_=_a$c_ || caml_call2(symbol$102,scale$0,max_scale);
      if(_a$d_)
       {var
         _a$a_=caml_call1(to_int64$2,max_scale),
         _a$b_=caml_call1(to_int64$2,one$2);
        caml_call7
         (_Pf_,
          _WJ_,
          module_name$6,
          name$60,
          caml_call1(to_int64$2,scale$0),
          _a$b_,
          _a$a_,
          0)}
      check_pos(name$60,len,pos$0,decimals);
      var
       scale=caml_call2(symbol$107,scale$0,divisor),
       until=caml_call2(symbol$60,pos$0,decimals),
       divisor$0=[0,divisor],
       round_at=[0,one$2],
       sum=[0,zero$4],
       pos=[0,pos$0];
      for(;;)
       {if
         (caml_call2(symbol$59,pos[1],until)
          &&
          caml_call2(include$62[100][11],round_at[1],scale))
         {var char$0=caml_string_unsafe_get(string,pos[1]),switch$0=0;
          if(58 <= char$0)
           {if(95 === char$0 && allow_underscore)switch$0 = 1}
          else
           if(48 <= char$0)
            {var digit=caml_call1(of_int$3,digit_of_char(char$0));
             divisor$0[1]
             =
             caml_call2(include$62[100][3],divisor$0[1],int63_ten);
             round_at[1]
             =
             caml_call2(include$62[100][3],round_at[1],int63_ten);
             var
              _a_9_=round_at[1],
              _a___=caml_call2(include$62[100][3],digit,scale),
              numerator=caml_call2(include$62[100][2],_a___,_a_9_),
              denominator=divisor$0[1],
              increment=divide_and_round_up(numerator,denominator),
              _a_$_=caml_call2(include$62[100][3],increment,denominator),
              remainder=caml_call2(include$62[100][2],numerator,_a_$_);
             round_at[1] = caml_call1(include$62[100][5],remainder);
             sum[1] = caml_call2(include$62[100][1],sum[1],increment);
             divisor$0[1] = caml_call2(min$6,denominator,scale);
             switch$0 = 1}
          if(! switch$0)caml_call4(_Pf_,_WG_,module_name$6,name$57,0);
          pos[1] = caml_call1(next$0,pos[1]);
          continue}
        if
         (caml_call2(include$62[100][9],round_at[1],include$62[100][15])
          &&
          !
          round_ties)
         sum[1] = caml_call2(include$62[100][1],sum[1],one$2);
        return sum[1]}}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$313);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Digit_string_h$0);
    var
     Core_kernel_Digit_string_helpe=
      [0,
       write_int63,
       write_1_digit_int$0,
       write_2_digit_int$0,
       write_3_digit_int$0,
       write_4_digit_int$0,
       write_5_digit_int$0,
       write_6_digit_int$0,
       write_7_digit_int$0,
       write_8_digit_int$0,
       write_9_digit_int$0,
       read_int63$0,
       read_1_digit_int$0,
       read_2_digit_int$0,
       read_3_digit_int$0,
       read_4_digit_int$0,
       read_5_digit_int$0,
       read_6_digit_int$0,
       read_7_digit_int$0,
       read_8_digit_int$0,
       read_9_digit_int$0,
       Round,
       read_int63_decimal,
       max_int63_with,
       [0,divide_and_round_up]];
    caml_register_global
     (5100,Core_kernel_Digit_string_helpe,"Core_kernel__Digit_string_helpers");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Month);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$314);
    caml_call1(Expect_test_collector[4][1],cst_src_month_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$315,cst$111);
    function t_of_sexp$68(sexp)
     {if(0 === sexp[0])
       {var _a_Z_=sexp[1],_a_0_=caml_string_compare(_a_Z_,cst_apr),switch$0=0;
        if(0 <= _a_0_)
         if(0 < _a_0_)
          {var _a_1_=caml_string_compare(_a_Z_,cst_jun);
           if(0 <= _a_1_)
            if(0 < _a_1_)
             if(caml_string_notequal(_a_Z_,cst_mar))
              if(caml_string_notequal(_a_Z_,cst_may))
               if(caml_string_notequal(_a_Z_,cst_nov))
                if(caml_string_notequal(_a_Z_,cst_oct))
                 {if(! caml_string_notequal(_a_Z_,cst_sep))switch$0 = 9}
                else
                 switch$0 = 10;
               else
                switch$0 = 11;
              else
               switch$0 = 5;
             else
              switch$0 = 3;
            else
             switch$0 = 6;
           else
            if(caml_string_notequal(_a_Z_,cst_aug))
             if(caml_string_notequal(_a_Z_,cst_dec))
              if(caml_string_notequal(_a_Z_,cst_feb))
               if(caml_string_notequal(_a_Z_,cst_jan))
                {if(! caml_string_notequal(_a_Z_,cst_jul))switch$0 = 7}
               else
                switch$0 = 1;
              else
               switch$0 = 2;
             else
              switch$0 = 12;
            else
             switch$0 = 8}
         else
          switch$0 = 4;
        else
         {var _a_2_=caml_string_compare(_a_Z_,cst_Jun);
          if(0 <= _a_2_)
           if(0 < _a_2_)
            if(caml_string_notequal(_a_Z_,cst_Mar))
             if(caml_string_notequal(_a_Z_,cst_May))
              if(caml_string_notequal(_a_Z_,cst_Nov))
               if(caml_string_notequal(_a_Z_,cst_Oct))
                {if(! caml_string_notequal(_a_Z_,cst_Sep))switch$0 = 9}
               else
                switch$0 = 10;
              else
               switch$0 = 11;
             else
              switch$0 = 5;
            else
             switch$0 = 3;
           else
            switch$0 = 6;
          else
           if(caml_string_notequal(_a_Z_,cst_Apr))
            if(caml_string_notequal(_a_Z_,cst_Aug))
             if(caml_string_notequal(_a_Z_,cst_Dec))
              if(caml_string_notequal(_a_Z_,cst_Feb))
               if(caml_string_notequal(_a_Z_,cst_Jan))
                {if(! caml_string_notequal(_a_Z_,cst_Jul))switch$0 = 7}
               else
                switch$0 = 1;
              else
               switch$0 = 2;
             else
              switch$0 = 12;
            else
             switch$0 = 8;
           else
            switch$0 = 4}
        switch(switch$0)
         {case 1:return 0;
          case 2:return 1;
          case 3:return 2;
          case 4:return 3;
          case 5:return 4;
          case 6:return 5;
          case 7:return 6;
          case 8:return 7;
          case 9:return 8;
          case 10:return 9;
          case 11:return 10;
          case 12:return 11
          }}
      else
       {var _a_3_=sexp[1];
        if(! _a_3_)
         return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$26,sexp);
        var _a_4_=_a_3_[1];
        if(0 !== _a_4_[0])
         return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$26,sexp);
        var
         _a_5_=_a_4_[1],
         _a_6_=caml_string_compare(_a_5_,cst_apr$0),
         switch$1=0;
        if(0 <= _a_6_)
         if(0 < _a_6_)
          {var _a_7_=caml_string_compare(_a_5_,cst_jun$0);
           if(0 <= _a_7_)
            if(0 < _a_7_)
             if(caml_string_notequal(_a_5_,cst_mar$0))
              if(caml_string_notequal(_a_5_,cst_may$0))
               if(caml_string_notequal(_a_5_,cst_nov$0))
                if(caml_string_notequal(_a_5_,cst_oct$0))
                 {if(! caml_string_notequal(_a_5_,cst_sep$0))switch$1 = 9}
                else
                 switch$1 = 10;
               else
                switch$1 = 11;
              else
               switch$1 = 5;
             else
              switch$1 = 3;
            else
             switch$1 = 6;
           else
            if(caml_string_notequal(_a_5_,cst_aug$0))
             if(caml_string_notequal(_a_5_,cst_dec$0))
              if(caml_string_notequal(_a_5_,cst_feb$0))
               if(caml_string_notequal(_a_5_,cst_jan$0))
                {if(! caml_string_notequal(_a_5_,cst_jul$0))switch$1 = 7}
               else
                switch$1 = 1;
              else
               switch$1 = 2;
             else
              switch$1 = 12;
            else
             switch$1 = 8}
         else
          switch$1 = 4;
        else
         {var _a_8_=caml_string_compare(_a_5_,cst_Jun$0);
          if(0 <= _a_8_)
           if(0 < _a_8_)
            if(caml_string_notequal(_a_5_,cst_Mar$0))
             if(caml_string_notequal(_a_5_,cst_May$0))
              if(caml_string_notequal(_a_5_,cst_Nov$0))
               if(caml_string_notequal(_a_5_,cst_Oct$0))
                {if(! caml_string_notequal(_a_5_,cst_Sep$0))switch$1 = 9}
               else
                switch$1 = 10;
              else
               switch$1 = 11;
             else
              switch$1 = 5;
            else
             switch$1 = 3;
           else
            switch$1 = 6;
          else
           if(caml_string_notequal(_a_5_,cst_Apr$0))
            if(caml_string_notequal(_a_5_,cst_Aug$0))
             if(caml_string_notequal(_a_5_,cst_Dec$0))
              if(caml_string_notequal(_a_5_,cst_Feb$0))
               if(caml_string_notequal(_a_5_,cst_Jan$0))
                {if(! caml_string_notequal(_a_5_,cst_Jul$0))switch$1 = 7}
               else
                switch$1 = 1;
              else
               switch$1 = 2;
             else
              switch$1 = 12;
            else
             switch$1 = 8;
           else
            switch$1 = 4}
        switch(switch$1)
         {case 1:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$26,sexp);
          case 2:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$26,sexp);
          case 3:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$26,sexp);
          case 4:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$26,sexp);
          case 5:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$26,sexp);
          case 6:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$26,sexp);
          case 7:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$26,sexp);
          case 8:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$26,sexp);
          case 9:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$26,sexp);
          case 10:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$26,sexp);
          case 11:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$26,sexp);
          case 12:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$26,sexp)
          }}
      return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$26,sexp)}
    function sexp_of_t$83(param)
     {switch(param)
       {case 0:return _WQ_;
        case 1:return _WR_;
        case 2:return _WS_;
        case 3:return _WT_;
        case 4:return _WU_;
        case 5:return _WV_;
        case 6:return _WW_;
        case 7:return _WX_;
        case 8:return _WY_;
        case 9:return _WZ_;
        case 10:return _W0_;
        default:return _W1_}}
    var compare$68=caml_int_compare;
    function hash_fold_t$37(hsv,arg)
     {switch(arg)
       {case 0:return caml_call2(Base_Hash[3],hsv,0);
        case 1:return caml_call2(Base_Hash[3],hsv,1);
        case 2:return caml_call2(Base_Hash[3],hsv,2);
        case 3:return caml_call2(Base_Hash[3],hsv,3);
        case 4:return caml_call2(Base_Hash[3],hsv,4);
        case 5:return caml_call2(Base_Hash[3],hsv,5);
        case 6:return caml_call2(Base_Hash[3],hsv,6);
        case 7:return caml_call2(Base_Hash[3],hsv,7);
        case 8:return caml_call2(Base_Hash[3],hsv,8);
        case 9:return caml_call2(Base_Hash[3],hsv,9);
        case 10:return caml_call2(Base_Hash[3],hsv,10);
        default:return caml_call2(Base_Hash[3],hsv,11)}}
    function hash$34(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_a_Y_=hash_fold_t$37(hsv,x);
      return caml_call1(Base_Hash[9],_a_Y_)}
    var
     jan$0=[0,cst_Jan$1,0,0],
     feb$0=[0,cst_Feb$1,1,1],
     mar$0=[0,cst_Mar$1,2,2],
     apr$0=[0,cst_Apr$1,3,3],
     may$0=[0,cst_May$1,4,4],
     jun$0=[0,cst_Jun$1,5,5],
     jul$0=[0,cst_Jul$1,6,6],
     aug$0=[0,cst_Aug$1,7,7],
     sep$0=[0,cst_Sep$1,8,8],
     oct$0=[0,cst_Oct$1,9,9],
     nov$0=[0,cst_Nov$1,10,10],
     dec$0=[0,cst_Dec$1,11,11],
     jan=0,
     feb=1,
     mar=2,
     apr=3,
     may=4,
     jun=5,
     jul=6,
     aug=7,
     sep=8,
     oct=9,
     nov=10,
     dec=11;
    function fold$11
     (init,
      jan_fun,
      feb_fun,
      mar_fun,
      apr_fun,
      may_fun,
      jun_fun,
      jul_fun,
      aug_fun,
      sep_fun,
      oct_fun,
      nov_fun,
      dec_fun)
     {return caml_call2
              (dec_fun,
               caml_call2
                (nov_fun,
                 caml_call2
                  (oct_fun,
                   caml_call2
                    (sep_fun,
                     caml_call2
                      (aug_fun,
                       caml_call2
                        (jul_fun,
                         caml_call2
                          (jun_fun,
                           caml_call2
                            (may_fun,
                             caml_call2
                              (apr_fun,
                               caml_call2
                                (mar_fun,
                                 caml_call2(feb_fun,caml_call2(jan_fun,init,jan$0),feb$0),
                                 mar$0),
                               apr$0),
                             may$0),
                           jun$0),
                         jul$0),
                       aug$0),
                     sep$0),
                   oct$0),
                 nov$0),
               dec$0)}
    function iter$17
     (jan_fun,
      feb_fun,
      mar_fun,
      apr_fun,
      may_fun,
      jun_fun,
      jul_fun,
      aug_fun,
      sep_fun,
      oct_fun,
      nov_fun,
      dec_fun)
     {caml_call1(jan_fun,jan$0);
      caml_call1(feb_fun,feb$0);
      caml_call1(mar_fun,mar$0);
      caml_call1(apr_fun,apr$0);
      caml_call1(may_fun,may$0);
      caml_call1(jun_fun,jun$0);
      caml_call1(jul_fun,jul$0);
      caml_call1(aug_fun,aug$0);
      caml_call1(sep_fun,sep$0);
      caml_call1(oct_fun,oct$0);
      caml_call1(nov_fun,nov$0);
      return caml_call1(dec_fun,dec$0)}
    function map$24
     (t,
      jan_fun,
      feb_fun,
      mar_fun,
      apr_fun,
      may_fun,
      jun_fun,
      jul_fun,
      aug_fun,
      sep_fun,
      oct_fun,
      nov_fun,
      dec_fun)
     {switch(t)
       {case 0:return caml_call1(jan_fun,jan$0);
        case 1:return caml_call1(feb_fun,feb$0);
        case 2:return caml_call1(mar_fun,mar$0);
        case 3:return caml_call1(apr_fun,apr$0);
        case 4:return caml_call1(may_fun,may$0);
        case 5:return caml_call1(jun_fun,jun$0);
        case 6:return caml_call1(jul_fun,jul$0);
        case 7:return caml_call1(aug_fun,aug$0);
        case 8:return caml_call1(sep_fun,sep$0);
        case 9:return caml_call1(oct_fun,oct$0);
        case 10:return caml_call1(nov_fun,nov$0);
        default:return caml_call1(dec_fun,dec$0)}}
    function make_matcher
     (jan_fun,
      feb_fun,
      mar_fun,
      apr_fun,
      may_fun,
      jun_fun,
      jul_fun,
      aug_fun,
      sep_fun,
      oct_fun,
      nov_fun,
      dec_fun,
      compile_acc)
     {var
       match=caml_call2(jan_fun,jan$0,compile_acc),
       compile_acc$0=match[2],
       jan_gen=match[1],
       match$0=caml_call2(feb_fun,feb$0,compile_acc$0),
       compile_acc$1=match$0[2],
       feb_gen=match$0[1],
       match$1=caml_call2(mar_fun,mar$0,compile_acc$1),
       compile_acc$2=match$1[2],
       mar_gen=match$1[1],
       match$2=caml_call2(apr_fun,apr$0,compile_acc$2),
       compile_acc$3=match$2[2],
       apr_gen=match$2[1],
       match$3=caml_call2(may_fun,may$0,compile_acc$3),
       compile_acc$4=match$3[2],
       may_gen=match$3[1],
       match$4=caml_call2(jun_fun,jun$0,compile_acc$4),
       compile_acc$5=match$4[2],
       jun_gen=match$4[1],
       match$5=caml_call2(jul_fun,jul$0,compile_acc$5),
       compile_acc$6=match$5[2],
       jul_gen=match$5[1],
       match$6=caml_call2(aug_fun,aug$0,compile_acc$6),
       compile_acc$7=match$6[2],
       aug_gen=match$6[1],
       match$7=caml_call2(sep_fun,sep$0,compile_acc$7),
       compile_acc$8=match$7[2],
       sep_gen=match$7[1],
       match$8=caml_call2(oct_fun,oct$0,compile_acc$8),
       compile_acc$9=match$8[2],
       oct_gen=match$8[1],
       match$9=caml_call2(nov_fun,nov$0,compile_acc$9),
       compile_acc$10=match$9[2],
       nov_gen=match$9[1],
       match$10=caml_call2(dec_fun,dec$0,compile_acc$10),
       compile_acc$11=match$10[2],
       dec_gen=match$10[1];
      function _a_L_(param){return caml_call1(jan_gen,0)}
      function _a_M_(param){return caml_call1(feb_gen,0)}
      function _a_N_(param){return caml_call1(mar_gen,0)}
      function _a_O_(param){return caml_call1(apr_gen,0)}
      function _a_P_(param){return caml_call1(may_gen,0)}
      function _a_Q_(param){return caml_call1(jun_gen,0)}
      function _a_R_(param){return caml_call1(jul_gen,0)}
      function _a_S_(param){return caml_call1(aug_gen,0)}
      function _a_T_(param){return caml_call1(sep_gen,0)}
      function _a_U_(param){return caml_call1(oct_gen,0)}
      function _a_V_(param){return caml_call1(nov_gen,0)}
      function _a_W_(param){return caml_call1(dec_gen,0)}
      return [0,
              function(_a_X_)
               {return map$24
                        (_a_X_,
                         _a_L_,
                         _a_M_,
                         _a_N_,
                         _a_O_,
                         _a_P_,
                         _a_Q_,
                         _a_R_,
                         _a_S_,
                         _a_T_,
                         _a_U_,
                         _a_V_,
                         _a_W_)},
              compile_acc$11]}
    function to_rank(param)
     {switch(param)
       {case 0:return 0;
        case 1:return 1;
        case 2:return 2;
        case 3:return 3;
        case 4:return 4;
        case 5:return 5;
        case 6:return 6;
        case 7:return 7;
        case 8:return 8;
        case 9:return 9;
        case 10:return 10;
        default:return 11}}
    function to_name(param)
     {switch(param)
       {case 0:return cst_Jan$2;
        case 1:return cst_Feb$2;
        case 2:return cst_Mar$2;
        case 3:return cst_Apr$2;
        case 4:return cst_May$2;
        case 5:return cst_Jun$2;
        case 6:return cst_Jul$2;
        case 7:return cst_Aug$2;
        case 8:return cst_Sep$2;
        case 9:return cst_Oct$2;
        case 10:return cst_Nov$2;
        default:return cst_Dec$2}}
    var
     Variants=
      [0,
       jan$0,
       feb$0,
       mar$0,
       apr$0,
       may$0,
       jun$0,
       jul$0,
       aug$0,
       sep$0,
       oct$0,
       nov$0,
       dec$0,
       fold$11,
       iter$17,
       map$24,
       make_matcher,
       to_rank,
       to_name,
       descriptions];
    function equal$33(_a_K_,_a_J_){return _a_K_ === _a_J_?1:0}
    function of_int_exn$5(i)
     {var switcher=i - 1 | 0;
      if(11 < switcher >>> 0)return caml_call3(failwithf,_W2_,i,0);
      switch(switcher)
       {case 0:return 0;
        case 1:return 1;
        case 2:return 2;
        case 3:return 3;
        case 4:return 4;
        case 5:return 5;
        case 6:return 6;
        case 7:return 7;
        case 8:return 8;
        case 9:return 9;
        case 10:return 10;
        default:return 11}}
    function of_int$6(i)
     {try {var _a_H_=[0,of_int_exn$5(i)];return _a_H_}catch(_a_I_){return 0}}
    function to_int$5(t)
     {switch(t)
       {case 0:return 1;
        case 1:return 2;
        case 2:return 3;
        case 3:return 4;
        case 4:return 5;
        case 5:return 6;
        case 6:return 7;
        case 7:return 8;
        case 8:return 9;
        case 9:return 10;
        case 10:return 11;
        default:return 12}}
    function to_binable$4(t){return caml_call2(_aK_,to_int$5(t),1)}
    function of_binable$4(i){return of_int_exn$5(caml_call2(_aJ_,i,1))}
    var
     include$97=
      caml_call1
       (caml_call1
         (Stable$0[1][1],
          [0,
           bin_shape_t$55,
           bin_size_t$50,
           bin_write_t$50,
           bin_read_t$102,
           bin_read_t$103]),
        [0,to_binable$4,of_binable$4]),
     bin_size_t$71=include$97[1],
     bin_write_t$72=include$97[2],
     bin_read_t$142=include$97[3],
     bin_read_t$143=include$97[4],
     bin_shape_t$87=include$97[5],
     bin_writer_t$76=include$97[6],
     bin_reader_t$76=include$97[7],
     bin_t$76=include$97[8],
     _W3_=
      Make_binable
       ([0,
         hash_fold_t$37,
         bin_size_t$71,
         bin_write_t$72,
         bin_read_t$142,
         bin_read_t$143,
         bin_shape_t$87,
         bin_writer_t$76,
         bin_reader_t$76,
         bin_t$76,
         t_of_sexp$68,
         compare$68,
         sexp_of_t$83,
         to_int$5]),
     hash_fold_t$38=_W3_[1],
     hash$35=_W3_[2],
     hashable$12=_W3_[3],
     Table$14=_W3_[4],
     Hash_set$14=_W3_[5],
     Hash_queue$12=_W3_[6],
     num_months=12;
    function t_of_sexp$69(sexp)
     {var
       match=
        caml_call1(_yc_,function(param){return caml_call1(t_of_sexp$39,sexp)});
      if(match){var i=match[1];return of_int_exn$5(caml_call2(_aJ_,i,1))}
      return t_of_sexp$68(sexp)}
    var
     include$98=
      _xj_
       ([0,
         bin_size_t$71,
         bin_write_t$72,
         bin_read_t$142,
         bin_read_t$143,
         bin_shape_t$87,
         bin_writer_t$76,
         bin_reader_t$76,
         bin_t$76,
         compare$68,
         t_of_sexp$69,
         sexp_of_t$83]),
     symbol$154=include$98[1],
     symbol$155=include$98[2],
     symbol$156=include$98[3],
     symbol$157=include$98[4],
     symbol$158=include$98[5],
     symbol$159=include$98[6],
     equal$34=include$98[7],
     compare$69=include$98[8],
     min$12=include$98[9],
     max$12=include$98[10],
     ascending$12=include$98[11],
     descending$12=include$98[12],
     between$12=include$98[13],
     clamp_exn$12=include$98[14],
     clamp$12=include$98[15],
     validate_lbound$12=include$98[16],
     validate_ubound$12=include$98[17],
     validate_bound$12=include$98[18],
     Replace_polymorphic_compare$11=include$98[19],
     comparator$18=include$98[20],
     Map$16=include$98[21],
     Set$16=include$98[22];
    function shift$0(t,i)
     {return of_int_exn$5
              (caml_call2
                (_aJ_,
                 1,
                 caml_call2
                  (symbol$66,
                   caml_call2(_aJ_,caml_call2(_aK_,to_int$5(t),1),i),
                   num_months)))}
    var
     all_strings=
      [246,
       function(_a_G_)
        {return caml_call1
                 (of_list,
                  caml_call2
                   (_p9_,
                    all$4,
                    function(variant)
                     {return caml_call1(to_string$0,sexp_of_t$83(variant))}))}];
    function to_string$19(t)
     {var
       _a_E_=caml_obj_tag(all_strings),
       all_strings$0=
        250 === _a_E_
         ?all_strings[1]
         :246 === _a_E_
           ?caml_call1(CamlinternalLazy[2],all_strings)
           :all_strings,
       _a_F_=caml_call2(_aK_,to_int$5(t),1);
      return caml_check_bound(all_strings$0,_a_F_)[1 + _a_F_]}
    var
     table=
      [246,
       function(_a_y_)
        {var table=caml_call3(Table$1[4],0,[0,num_months],0);
         function _a_z_(i,s)
          {var t=of_int_exn$5(caml_call2(_aJ_,i,1));
           caml_call3(Core_kernel_Hashtbl[34],table,s,t);
           var _a_C_=caml_call1(_Ch_,s);
           caml_call3(Core_kernel_Hashtbl[34],table,_a_C_,t);
           var _a_D_=caml_call1(_Cg_,s);
           return caml_call3(Core_kernel_Hashtbl[34],table,_a_D_,t)}
         var
          _a_A_=caml_obj_tag(all_strings),
          _a_B_=
           250 === _a_A_
            ?all_strings[1]
            :246 === _a_A_
              ?caml_call1(CamlinternalLazy[2],all_strings)
              :all_strings;
         caml_call2(iteri,_a_B_,_a_z_);
         return table}];
    function of_string$16(str)
     {var
       _a_w_=caml_obj_tag(table),
       _a_x_=
        250 === _a_w_
         ?table[1]
         :246 === _a_w_?caml_call1(CamlinternalLazy[2],table):table,
       match=caml_call2(Core_kernel_Hashtbl[52],_a_x_,str);
      if(match){var x=match[1];return x}
      return caml_call3(failwithf,_W4_,str,0)}
    var Export=[0];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$316);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Month$0);
    var
     _W5_=
      [0,
       [0,
        t_of_sexp$68,
        sexp_of_t$83,
        bin_size_t$71,
        bin_write_t$72,
        bin_read_t$142,
        bin_read_t$143,
        bin_shape_t$87,
        bin_writer_t$76,
        bin_reader_t$76,
        bin_t$76,
        compare$68,
        hash_fold_t$37,
        hash$34,
        equal$33]],
     Core_kernel_Month=
      [0,
       bin_size_t$71,
       bin_write_t$72,
       bin_read_t$142,
       bin_read_t$143,
       bin_shape_t$87,
       bin_writer_t$76,
       bin_reader_t$76,
       bin_t$76,
       t_of_sexp$68,
       sexp_of_t$83,
       jan,
       feb,
       mar,
       apr,
       may,
       jun,
       jul,
       aug,
       sep,
       oct,
       nov,
       dec,
       Variants,
       symbol$154,
       symbol$155,
       symbol$156,
       symbol$157,
       symbol$158,
       symbol$159,
       equal$34,
       compare$69,
       min$12,
       max$12,
       ascending$12,
       descending$12,
       between$12,
       clamp_exn$12,
       clamp$12,
       validate_lbound$12,
       validate_ubound$12,
       validate_bound$12,
       Replace_polymorphic_compare$11,
       comparator$18,
       Map$16,
       Set$16,
       hash_fold_t$38,
       hash$35,
       hashable$12,
       Table$14,
       Hash_set$14,
       Hash_queue$12,
       of_string$16,
       to_string$19,
       all$4,
       of_int$6,
       of_int_exn$5,
       to_int$5,
       shift$0,
       Export,
       _W5_];
    caml_register_global(5101,Core_kernel_Month,"Core_kernel__Month");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Month_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$317);
    caml_call1(Expect_test_collector[4][1],cst_src_month_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$318,cst$112);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$319);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Month_intf$0);
    var Core_kernel_Month_intf=[0];
    caml_register_global
     (5102,Core_kernel_Month_intf,"Core_kernel__Month_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Date0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$320);
    caml_call1(Expect_test_collector[4][1],cst_src_date0_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$321,cst$113);
    function is_leap_year(year)
     {var
       _a_u_=caml_call2(_Nr_,year % 4 | 0,0),
       _a_v_=_a_u_?1 - caml_call2(_Nr_,year % 100 | 0,0):_a_u_;
      return _a_v_?_a_v_:caml_call2(_Nr_,year % 400 | 0,0)}
    function hash$36(x){return hash_int(x)}
    var
     Typename_of_t$23=caml_call1(Typerep_lib_Make_typename[1],[0,name$61]),
     typename_of_t$23=Typename_of_t$23[2],
     name_of_t$15=Typename_of_t$23[1],
     typerep_of_t$23=[9,[0,name_of_t$15,[0,typerep_of_int]]],
     _W6_=caml_call1(Bin_prot_Shape[5][1],cst_899ee3e0_490a_11e6_a10a_a3),
     bin_shape_t$88=caml_call1(caml_call1(Bin_prot_Shape[16],_W6_),0);
    function create0(year,month,day)
     {return year << 16 | to_int$5(month) << 8 | day}
    function year(t){return t >>> 16 | 0}
    function month(t){return of_int_exn$5((t >>> 8 | 0) & 255)}
    function day(t){return t & 255}
    function days_in_month(year,month)
     {switch(month)
       {case 1:return is_leap_year(year)?29:28;
        case 3:
        case 5:
        case 8:
        case 10:return 30;
        default:return 31}}
    function create_exn(year,month,day)
     {function invalid(year,month,day,msg)
       {var _a_t_=0;
        return caml_call6
                (_Pf_,
                 [0,
                  [11,
                   cst_Date_create_exn_y,
                   [4,
                    0,
                    0,
                    0,
                    [11,
                     cst_m,
                     [24,
                      _W8_,
                      function(param,custom_printf_001)
                       {return to_string$19(custom_printf_001)},
                      _W7_]]]],
                  cst_Date_create_exn_y_d_m_Mont],
                 year,
                 month,
                 day,
                 msg,
                 _a_t_)}
      var
       _a_r_=caml_call2(_Nt_,year,0),
       _a_s_=_a_r_ || caml_call2(_Ns_,year,9999);
      if(_a_s_)invalid(year,month,day,cst_year_outside_of_0_9999);
      if(caml_call2(_Nq_,day,0))invalid(year,month,day,cst_day_0);
      var days_in_month$0=days_in_month(year,month);
      if(caml_call2(_Ns_,day,days_in_month$0))
       invalid(year,month,day,caml_call2(_fw_,_W9_,days_in_month$0));
      return create0(year,month,day)}
    function bin_read_t$144(buf,pos_ref)
     {var
       year=caml_call2(bin_read_t$102,buf,pos_ref),
       month=caml_call2(_W5_[1][5],buf,pos_ref),
       day=caml_call2(bin_read_t$102,buf,pos_ref);
      return create0(year,month,day)}
    function bin_read_t$145(buf,pos_ref)
     {return caml_call2(Bin_prot_Common[19],cst_Date_t,pos_ref[1])}
    var bin_reader_t$77=[0,bin_read_t$144,bin_read_t$145];
    function bin_size_t$72(t)
     {var
       _a_p_=caml_call1(bin_size_t$50,t & 255),
       _a_q_=caml_call1(bin_size_t$71,month(t));
      return (caml_call1(bin_size_t$50,t >>> 16 | 0) + _a_q_ | 0) + _a_p_ | 0}
    function bin_write_t$73(buf,pos,t)
     {var
       pos$0=caml_call3(bin_write_t$50,buf,pos,t >>> 16 | 0),
       pos$1=caml_call3(bin_write_t$72,buf,pos$0,month(t));
      return caml_call3(bin_write_t$50,buf,pos$1,t & 255)}
    var
     bin_writer_t$77=[0,bin_size_t$72,bin_write_t$73],
     bin_t$77=[0,bin_shape_t$88,bin_writer_t$77,bin_reader_t$77];
    function to_int$6(t){return t}
    function unchecked_value(n)
     {return create_exn(n >>> 16 | 0,month(n),n & 255)}
    var none$0=0;
    function _W__(param)
     {function _a_o_(param){return unchecked_value(none$0)}
      return caml_call1(Base_Exn[16],_a_o_)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_invalid_value,
      0,
      cst_src_date0_ml$0,
      122,
      8,
      137,
      _W__);
    function to_string$20(t)
     {var buf=caml_call1(_Eq_,10);
      write_4_digit_int$0(buf,0,t >>> 16 | 0);
      caml_call3(_Ez_,buf,4,45);
      write_2_digit_int$0(buf,5,to_int$5(month(t)));
      caml_call3(_Ez_,buf,7,45);
      write_2_digit_int$0(buf,8,t & 255);
      return caml_call1(_EJ_,buf)}
    function to_string_iso8601_basic(t)
     {var buf=caml_call1(_Eq_,8);
      write_4_digit_int$0(buf,0,t >>> 16 | 0);
      write_2_digit_int$0(buf,4,to_int$5(month(t)));
      write_2_digit_int$0(buf,6,t & 255);
      return caml_call1(_EJ_,buf)}
    function to_string_american(t)
     {var buf=caml_call1(_Eq_,10);
      write_2_digit_int$0(buf,0,to_int$5(month(t)));
      caml_call3(_Ez_,buf,2,47);
      write_2_digit_int$0(buf,3,t & 255);
      caml_call3(_Ez_,buf,5,47);
      write_4_digit_int$0(buf,6,t >>> 16 | 0);
      return caml_call1(_EJ_,buf)}
    function parse_year4(str,pos){return read_4_digit_int$0(str,pos)}
    function parse_month(str,pos)
     {return of_int_exn$5(read_2_digit_int$0(str,pos))}
    function parse_day(str,pos){return read_2_digit_int$0(str,pos)}
    function of_string_iso8601_basic(str,pos)
     {if(caml_call2(_Ns_,pos + 8 | 0,caml_ml_string_length(str)))
       caml_call1(_Ga_,cst_Date_of_string_iso8601_bas);
      var _a_m_=parse_day(str,pos + 6 | 0),_a_n_=parse_month(str,pos + 4 | 0);
      return create_exn(parse_year4(str,pos),_a_n_,_a_m_)}
    function _W$_(s)
     {function invalid(param)
       {return caml_call1(_Gb_,caml_call2(_Gp_,cst_invalid_date,s))}
      function ensure(b){var _a_l_=1 - b;return _a_l_?invalid(0):_a_l_}
      function month_num(year,month,day)
       {var _a_j_=parse_day(s,day),_a_k_=parse_month(s,month);
        return create_exn(parse_year4(s,year),_a_k_,_a_j_)}
      function month_abrv(year,month,day)
       {var
         _a_h_=parse_day(s,day),
         _a_i_=of_string$16(caml_call3(_BR_,s,month,3));
        return create_exn(parse_year4(s,year),_a_i_,_a_h_)}
      if(caml_call4(_Cf_,0,0,s,47))
       {var match=caml_call2(_CI_,s,47),switch$0=0;
        if(match)
         {var _a9__=match[2];
          if(_a9__)
           {var _a9$_=_a9__[2];
            if(_a9$_ && ! _a9$_[2])
             {var c=_a9$_[1],b=_a9__[1],a=match[1];
              if(caml_call2(_Nr_,caml_ml_string_length(a),4))
               {var d=c,m=b,y=a;switch$0 = 1}
              else
               {var d=b,m=a,y=c;switch$0 = 1}}}}
        if(! switch$0)var _a_a_=invalid(0),d=_a_a_[3],m=_a_a_[2],y=_a_a_[1];
        var
         year=caml_call1(of_string$3,y),
         year$0=
          caml_call2(_Np_,year,100)
           ?year
           :caml_call2(_Nt_,year,75)?2000 + year | 0:1900 + year | 0,
         month=of_int_exn$5(caml_call1(of_string$3,m)),
         day=caml_call1(of_string$3,d);
        return create_exn(year$0,month,day)}
      if(caml_call4(_Cf_,0,0,s,45))
       {var _a_b_=caml_call2(_Nr_,caml_ml_string_length(s),10);
        if(_a_b_)
         var
          _a_c_=caml_call2(_FH_,caml_string_get(s,4),45),
          _a_d_=_a_c_?caml_call2(_FH_,caml_string_get(s,7),45):_a_c_;
        else
         var _a_d_=_a_b_;
        ensure(_a_d_);
        return month_num(0,5,8)}
      if(caml_call4(_Cf_,0,0,s,32))
       {if
         (caml_call2(_Nr_,caml_ml_string_length(s),11)
          &&
          caml_call2(_FH_,caml_string_get(s,2),32)
          &&
          caml_call2(_FH_,caml_string_get(s,6),32))
         return month_abrv(7,3,0);
        var _a_e_=caml_call2(_Nr_,caml_ml_string_length(s),11);
        if(_a_e_)
         var
          _a_f_=caml_call2(_FH_,caml_string_get(s,4),32),
          _a_g_=_a_f_?caml_call2(_FH_,caml_string_get(s,8),32):_a_f_;
        else
         var _a_g_=_a_e_;
        ensure(_a_g_);
        return month_abrv(0,5,9)}
      return caml_call2(_Nr_,caml_ml_string_length(s),9)
              ?month_abrv(5,2,0)
              :caml_call2(_Nr_,caml_ml_string_length(s),8)
                ?month_num(0,4,6)
                :invalid(0)}
    function of_string$17(s)
     {try
       {var _a99_=_W$_(s);return _a99_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        return caml_call4(_Pf_,_Xa_,s,caml_call1(Base_Exn[9],exn),0)}}
    function _Xc_(sexp)
     {if(0 === sexp[0]){var s=sexp[1];return of_string$17(s)}
      if(0 === sexp[0])
       var _a97_=caml_call2(Sexplib0_Sexp_conv_error[16],tp_loc$27,sexp);
      else
       {var
         field_sexps=sexp[1],
         y_field=[0,0],
         m_field=[0,0],
         d_field=[0,0],
         duplicates=[0,0],
         extra=[0,0],
         param=field_sexps;
        for(;;)
         {if(param)
           {var _a9X_=param[1];
            if(1 === _a9X_[0])
             {var _a9Y_=_a9X_[1];
              if(_a9Y_)
               {var _a9Z_=_a9Y_[1];
                if(0 === _a9Z_[0])
                 {var _a90_=_a9Y_[2],_a91_=_a9Z_[1],switch$0=0;
                  if(! _a90_ || ! _a90_[2])switch$0 = 1;
                  if(switch$0)
                   {var
                     tail=param[2],
                     field_sexp$3=
                      function(_a98_)
                       {function field_sexp(param)
                         {if(_a98_)
                           {if(_a98_[2])throw [0,Assert_failure,_Xb_];
                            var x=_a98_[1];
                            return x}
                          return caml_call2
                                  (Sexplib0_Sexp_conv_error[10],tp_loc$27,sexp)}
                        return field_sexp},
                     field_sexp=field_sexp$3(_a90_);
                    if(caml_string_notequal(_a91_,cst_d))
                     if(caml_string_notequal(_a91_,cst_m$0))
                      if(caml_string_notequal(_a91_,cst_y))
                       {if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_a91_,extra[1]]}
                      else
                       if(y_field[1])
                        duplicates[1] = [0,_a91_,duplicates[1]];
                       else
                        {var
                          field_sexp$0=field_sexp(0),
                          fvalue=caml_call1(t_of_sexp$39,field_sexp$0);
                         y_field[1] = [0,fvalue]}
                     else
                      if(m_field[1])
                       duplicates[1] = [0,_a91_,duplicates[1]];
                      else
                       {var
                         field_sexp$1=field_sexp(0),
                         fvalue$0=caml_call1(t_of_sexp$39,field_sexp$1);
                        m_field[1] = [0,fvalue$0]}
                    else
                     if(d_field[1])
                      duplicates[1] = [0,_a91_,duplicates[1]];
                     else
                      {var
                        field_sexp$2=field_sexp(0),
                        fvalue$1=caml_call1(t_of_sexp$39,field_sexp$2);
                       d_field[1] = [0,fvalue$1]}
                    var param=tail;
                    continue}}}}
            caml_call2(Sexplib0_Sexp_conv_error[10],tp_loc$27,_a9X_)}
          if(duplicates[1])
           var
            _a97_=
             caml_call3
              (Sexplib0_Sexp_conv_error[12],tp_loc$27,duplicates[1],sexp);
          else
           if(extra[1])
            var
             _a97_=
              caml_call3(Sexplib0_Sexp_conv_error[13],tp_loc$27,extra[1],sexp);
           else
            {var
              _a92_=y_field[1],
              _a93_=m_field[1],
              _a94_=d_field[1],
              switch$1=0;
             if(_a92_ && _a93_ && _a94_)
              var
               d_value=_a94_[1],
               m_value=_a93_[1],
               y_value=_a92_[1],
               _a97_=[0,y_value,m_value,d_value];
             else
              switch$1 = 1;
             if(switch$1)
              var
               _a97_=
                caml_call3
                 (Sexplib0_Sexp_conv_error[15],
                  tp_loc$27,
                  sexp,
                  [0,
                   [0,0 === y_field[1]?1:0,cst_y$0],
                   [0,
                    [0,0 === m_field[1]?1:0,cst_m$1],
                    [0,[0,0 === d_field[1]?1:0,cst_d$0],0]]])}
          break}}
      var _a95_=_a97_[3],_a96_=of_int_exn$5(_a97_[2]);
      return create_exn(_a97_[1],_a96_,_a95_)}
    function t_of_sexp$70(s)
     {try
       {var _a9W_=_Xc_(s);return _a9W_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] === _Oc_)throw exn;
        if(exn[1] === Stdlib[6]){var a=exn[2];return caml_call2(_Od_,a,s)}
        throw exn}}
    function sexp_of_t$84(t){return [0,to_string$20(t)]}
    function compare$70(t1,t2)
     {var n=caml_call2(compare$42,t1 >>> 16 | 0,t2 >>> 16 | 0);
      if(caml_call2(_Nu_,n,0))return n;
      var _a9V_=month(t2),n$0=caml_call2(compare$69,month(t1),_a9V_);
      return caml_call2(_Nu_,n$0,0)
              ?n$0
              :caml_call2(compare$42,t1 & 255,t2 & 255)}
    var
     include$99=caml_call2(_hc_[1][1],compare$70,sexp_of_t$84),
     comparator$19=include$99[1],
     include$100=
      caml_call1
       (Stable$2[1][1],
        [0,
         bin_size_t$72,
         bin_write_t$73,
         bin_read_t$144,
         bin_read_t$145,
         bin_shape_t$88,
         bin_writer_t$77,
         bin_reader_t$77,
         bin_t$77,
         compare$70,
         t_of_sexp$70,
         sexp_of_t$84,
         comparator$19]),
     Map$17=include$100[1],
     Set$17=include$100[2],
     _Xd_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$175),0,bin_shape_int],0],
     _Xe_=caml_call1(Bin_prot_Shape[4][1],cst_src_date0_ml_284_6),
     group$106=caml_call2(Bin_prot_Shape[6],_Xe_,_Xd_),
     _Xf_=caml_call1(Bin_prot_Shape[2][1],cst_t$176),
     bin_shape_t$89=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$106,_Xf_),0),
     bin_writer_t$78=[0,bin_size_t$50,bin_write_t$50],
     bin_reader_t$78=[0,bin_read_t$102,bin_read_t$103],
     bin_t$78=[0,bin_shape_t$89,bin_writer_t$78,bin_reader_t$78],
     _Xg_=caml_call1(Bin_prot_Shape[5][1],cst_826a3e79_3321_451a_9707_ed),
     bin_shape_t$90=caml_call1(caml_call1(Bin_prot_Shape[16],_Xg_),0);
    function hash$37(x){return hash_int(x)}
    var
     Typename_of_t$24=caml_call1(Typerep_lib_Make_typename[1],[0,name$62]),
     typename_of_t$24=Typename_of_t$24[2],
     name_of_t$16=Typename_of_t$24[1],
     typerep_of_t$24=[9,[0,name_of_t$16,[0,typerep_of_int]]];
    function is_none(t){return caml_call2(_Nr_,t,none$0)}
    function is_some(t){return 1 - is_none(t)}
    function some_is_representable(param){return 1}
    function some(t){return t}
    function to_option(t){return is_some(t)?[0,unchecked_value(t)]:0}
    function of_option(opt){if(opt){var v=opt[1];return v}return none$0}
    function value_exn(t)
     {if(is_some(t))return unchecked_value(t);
      var
       _a9U_=
        [0,caml_call1(Sexplib0_Sexp_conv[7],cst_Date_Option_value_exn_none),0];
      return caml_call1
              (_od_,
               [1,
                [0,
                 caml_call1(Sexplib0_Sexp_conv[7],cst_src_date0_ml_309_31),
                 _a9U_]])}
    function value$2(t,default$0)
     {return is_some(t)?unchecked_value(t):default$0}
    function sexp_of_t$85(t)
     {return caml_call2(sexp_of_t$33,sexp_of_t$84,to_option(t))}
    function t_of_sexp$71(sexp)
     {return of_option(caml_call1(caml_call1(t_of_sexp$26,t_of_sexp$70),sexp))}
    var
     C$0=
      _xi_
       ([0,
         bin_size_t$72,
         bin_write_t$73,
         bin_read_t$144,
         bin_read_t$145,
         bin_shape_t$88,
         bin_writer_t$77,
         bin_reader_t$77,
         bin_t$77,
         t_of_sexp$70,
         sexp_of_t$84,
         comparator$19]),
     symbol$160=C$0[1],
     symbol$161=C$0[2],
     symbol$162=C$0[3],
     symbol$163=C$0[4],
     symbol$164=C$0[5],
     symbol$165=C$0[6],
     equal$35=C$0[7],
     compare$71=C$0[8],
     min$13=C$0[9],
     max$13=C$0[10],
     ascending$13=C$0[11],
     descending$13=C$0[12],
     between$13=C$0[13],
     clamp_exn$13=C$0[14],
     clamp$13=C$0[15],
     validate_lbound$13=C$0[16],
     validate_ubound$13=C$0[17],
     validate_bound$13=C$0[18],
     Replace_polymorphic_compare$12=C$0[19],
     comparator$20=C$0[20],
     Map$18=C$0[21],
     Set$18=C$0[22],
     symbol$166=C$0[6],
     symbol$167=C$0[5],
     symbol$168=C$0[4],
     symbol$169=C$0[3],
     symbol$170=C$0[2],
     symbol$171=C$0[1],
     O$1=[0,symbol$171,symbol$170,symbol$169,symbol$168,symbol$167,symbol$166];
    function compare$72(a,b){return caml_call2(compare$71,a,b)}
    var
     include$101=
      Make_binable
       ([0,
         hash_fold_t$18,
         bin_size_t$72,
         bin_write_t$73,
         bin_read_t$144,
         bin_read_t$145,
         bin_shape_t$88,
         bin_writer_t$77,
         bin_reader_t$77,
         bin_t$77,
         t_of_sexp$70,
         compare$72,
         sexp_of_t$84,
         hash$36]),
     hash_fold_t$39=include$101[1],
     hash$38=include$101[2],
     hashable$13=include$101[3],
     Table$15=include$101[4],
     Hash_set$15=include$101[5],
     Hash_queue$13=include$101[6],
     include$102=
      caml_call1(Base_Pretty_printer[2],[0,module_name$7,to_string$20]),
     _Xh_=include$102[1],
     unix_epoch=create_exn(1970,0,1);
    function of_year(y)
     {var
       _a9R_=caml_call2(symbol$67,y,400),
       _a9S_=caml_call2(symbol$67,y,100),
       _a9T_=caml_call2(symbol$67,y,4);
      return caml_call2
              (symbol$60,
               caml_call2
                (symbol$61,
                 caml_call2(symbol$60,caml_call2(symbol$62,365,y),_a9T_),
                 _a9S_),
               _a9R_)}
    function of_date(date)
     {var
       m=
        caml_call2(symbol$66,caml_call2(symbol$60,to_int$5(month(date)),9),12),
       y=caml_call2(symbol$61,date >>> 16 | 0,caml_call2(symbol$67,m,10)),
       _a9P_=caml_call2(symbol$61,date & 255,1),
       _a9Q_=
        caml_call2
         (symbol$67,caml_call2(symbol$60,caml_call2(symbol$62,m,306),5),10);
      return caml_call2
              (symbol$60,caml_call2(symbol$60,of_year(y),_a9Q_),_a9P_)}
    var
     c_10_000=caml_call1(of_int$3,10000),
     c_14_780=caml_call1(of_int$3,14780),
     c_3_652_425=caml_call1(of_int$3,3652425);
    function to_date(days)
     {var
       y=
        caml_call1
         (to_int_exn$2,
          caml_call2
           (symbol$112,
            caml_call2
             (symbol$105,
              caml_call2(symbol$107,c_10_000,caml_call1(of_int$3,days)),
              c_14_780),
            c_3_652_425)),
       ddd=caml_call2(symbol$61,days,of_year(y));
      if(caml_call2(symbol$58,ddd,0))
       var
        y$0=caml_call2(symbol$61,y,1),
        ddd$0=caml_call2(symbol$61,days,of_year(y$0)),
        y$1=y$0;
      else
       var ddd$0=ddd,y$1=y;
      var
       mi=
        caml_call2
         (symbol$67,
          caml_call2(symbol$60,caml_call2(symbol$62,100,ddd$0),52),
          3060),
       y$2=
        caml_call2
         (symbol$60,y$1,caml_call2(symbol$67,caml_call2(symbol$60,mi,2),12)),
       m=
        caml_call2
         (symbol$60,caml_call2(symbol$66,caml_call2(symbol$60,mi,2),12),1),
       d=
        caml_call2
         (symbol$60,
          caml_call2
           (symbol$61,
            ddd$0,
            caml_call2
             (symbol$67,
              caml_call2(symbol$60,caml_call2(symbol$62,mi,306),5),
              10)),
          1);
      return create_exn(y$2,of_int_exn$5(m),d)}
    var unix_epoch$0=of_date(unix_epoch);
    function add_days(t,days){return caml_call2(symbol$60,t,days)}
    function diff$4(t1,t2){return caml_call2(symbol$61,t1,t2)}
    var Days=[0,of_date,to_date,diff$4,add_days,unix_epoch$0];
    function add_days$0(t,days)
     {var _a9N_=caml_call1(Days[1],t),_a9O_=caml_call2(Days[4],_a9N_,days);
      return caml_call1(Days[2],_a9O_)}
    function diff$5(t1,t2)
     {var _a9L_=caml_call1(Days[1],t2),_a9M_=caml_call1(Days[1],t1);
      return caml_call2(Days[3],_a9M_,_a9L_)}
    function add_months(t,n)
     {var
       total_months=to_int$5(month(t)) + n | 0,
       y=(t >>> 16 | 0) + caml_call2(symbol$65,total_months,12) | 0,
       m=caml_call2(symbol$66,total_months,12);
      if(caml_call2(symbol$56,m,0))
       var m$0=m + 12 | 0,y$0=y - 1 | 0;
      else
       var m$0=m,y$0=y;
      var m$1=of_int_exn$5(m$0);
      function try_create(d)
       {var d$0=d;
        for(;;)
         try
          {var _a9J_=create_exn(y$0,m$1,d$0);return _a9J_}
         catch(_a9K_)
          {if(caml_call2(symbol$54,d$0,1))
            {var d$1=d$0 - 1 | 0,d$0=d$1;continue}
           throw [0,Assert_failure,_Xi_]}}
      return try_create(t & 255)}
    function add_years(t,n){return add_months(t,n * 12 | 0)}
    var table$0=_Xj_.slice();
    function day_of_week(t)
     {var
       m=to_int$5(month(t)),
       y=caml_call2(symbol$58,m,3)?(t >>> 16 | 0) - 1 | 0:t >>> 16 | 0,
       _a9I_=m - 1 | 0;
      return of_int_exn$4
              (caml_call2
                (symbol$66,
                 ((((y + (y / 4 | 0) | 0) - (y / 100 | 0) | 0)
                   +
                   (y / 400 | 0)
                   |
                   0)
                  +
                  caml_check_bound(table$0,_a9I_)[1 + _a9I_]
                  |
                  0)
                 +
                 (t & 255)
                 |
                 0,
                 7))}
    var non_leap_year_table=_Xk_.slice(),leap_year_table=_Xl_.slice();
    function ordinal_date(t)
     {var
       table=is_leap_year(t >>> 16 | 0)?leap_year_table:non_leap_year_table,
       _a9H_=to_int$5(month(t)) - 1 | 0,
       offset=caml_check_bound(table,_a9H_)[1 + _a9H_];
      return (t & 255) + offset | 0}
    function last_week_of_year(y)
     {var first_of_year=create_exn(y,0,1);
      function is(t,day){return caml_call2(equal$32,day_of_week(t),day)}
      if(! is(first_of_year,4))
       {var switch$0=0;
        if(! is_leap_year(y) || ! is(first_of_year,3))switch$0 = 1;
        if(switch$0)return 52}
      return 53}
    function call_with_week_and_year(t,f)
     {var
       ordinal=ordinal_date(t),
       weekday=iso_8601_weekday_number(day_of_week(t)),
       week=((ordinal - weekday | 0) + 10 | 0) / 7 | 0,
       year=t >>> 16 | 0;
      return caml_call2(symbol$58,week,1)
              ?caml_call2(f,last_week_of_year(year - 1 | 0),year - 1 | 0)
              :caml_call2(symbol$57,week,last_week_of_year(year))
                ?caml_call2(f,1,year + 1 | 0)
                :caml_call2(f,week,year)}
    function week_number_and_year(t)
     {return call_with_week_and_year
              (t,function(week,year){return [0,week,year]})}
    function week_number(t)
     {return call_with_week_and_year(t,function(week,param){return week})}
    function is_weekend(t){return is_sun_or_sat(day_of_week(t))}
    function is_weekday(t){return 1 - is_weekend(t)}
    function is_business_day(t,is_holiday)
     {var _a9F_=is_weekday(t),_a9G_=_a9F_?1 - caml_call1(is_holiday,t):_a9F_;
      return _a9G_}
    function diff_weekend_days(t1,t2)
     {if(caml_call2(symbol$164,t1,t2))return - diff_weekend_days(t2,t1) | 0;
      var
       diff=diff$5(t1,t2),
       d1=day_of_week(t1),
       d2=day_of_week(t2),
       _a9C_=to_int$4(d2),
       num_satsun_crossings=
        caml_call2(symbol$58,to_int$4(d1),_a9C_)
         ?1 + (diff / 7 | 0) | 0
         :diff / 7 | 0,
       _a9D_=caml_call2(symbol$150,d1,0)?-1:0,
       _a9E_=caml_call2(symbol$150,d2,0)?1:0;
      return ((num_satsun_crossings * 2 | 0) + _a9E_ | 0) + _a9D_ | 0}
    function diff_weekdays(t1,t2)
     {var _a9B_=diff_weekend_days(t1,t2);return diff$5(t1,t2) - _a9B_ | 0}
    function add_days_skipping(t,skip,n)
     {var
       step=caml_call2(symbol$54,n,0)?1:-1,
       k$1=caml_call1(_Gf_,n),
       t$0=t,
       k=k$1;
      for(;;)
       {var t$1=add_days$0(t$0,step);
        if(caml_call1(skip,t$0)){var t$0=t$1;continue}
        if(caml_call2(symbol$56,k,0))return t$0;
        var k$0=k - 1 | 0,t$0=t$1,k=k$0;
        continue}}
    function first_day_satisfying(t,step,condition)
     {var t$0=t;
      for(;;)
       {if(caml_call1(condition,t$0))return t$0;
        var t$1=add_days$0(t$0,step),t$0=t$1;
        continue}}
    function next_day_satisfying(t,step,condition)
     {var next_day=add_days$0(t,step);
      return first_day_satisfying(next_day,step,condition)}
    function following_weekday(t){return next_day_satisfying(t,1,is_weekday)}
    function previous_weekday(t){return next_day_satisfying(t,-1,is_weekday)}
    function add_weekdays_rounding_in_direc(t,n)
     {return add_days_skipping(t,is_weekend,n)}
    function add_weekdays_rounding_forward(t,n)
     {return add_days_skipping
              (first_day_satisfying(t,1,is_weekday),is_weekend,n)}
    function add_weekdays_rounding_backward(t,n)
     {return add_days_skipping
              (first_day_satisfying(t,-1,is_weekday),is_weekend,n)}
    function add_business_days_rounding_in_(t,is_holiday,n)
     {return add_days_skipping
              (t,
               function(d)
                {var _a9A_=is_weekend(d);
                 return _a9A_?_a9A_:caml_call1(is_holiday,d)},
               n)}
    function add_business_days_rounding_for(t,is_holiday,n)
     {function _a9y_(d){return 1 - is_business_day(d,is_holiday)}
      return add_days_skipping
              (first_day_satisfying
                (t,
                 1,
                 function(_a9z_){return is_business_day(_a9z_,is_holiday)}),
               _a9y_,
               n)}
    function add_business_days_rounding_bac(t,is_holiday,n)
     {function _a9w_(d){return 1 - is_business_day(d,is_holiday)}
      return add_days_skipping
              (first_day_satisfying
                (t,
                 -1,
                 function(_a9x_){return is_business_day(_a9x_,is_holiday)}),
               _a9w_,
               n)}
    function dates_between(t1,t)
     {var t$0=t,l=0;
      for(;;)
       {if(caml_call2(symbol$164,t$0,t1))return l;
        var l$0=[0,t$0,l],t$1=add_days$0(t$0,-1),t$0=t$1,l=l$0;
        continue}}
    function weekdays_between(min,max)
     {var all_dates=dates_between(min,max);
      function _a9v_(first_date)
       {var
         first_weekday=day_of_week(first_date),
         date_and_weekdays=
          caml_call2
           (_qr_,
            all_dates,
            function(i,date){return [0,date,shift(first_weekday,i)]});
        return caml_call2
                (_qT_,
                 date_and_weekdays,
                 function(param)
                  {var weekday=param[2],date=param[1];
                   return is_sun_or_sat(weekday)?0:[0,date]})}
      return caml_call3(_x3_,caml_call1(_pZ_,all_dates),0,_a9v_)}
    function business_dates_between(min,max,is_holiday)
     {function _a9u_(d){return 1 - caml_call1(is_holiday,d)}
      return caml_call2(_pO_,weekdays_between(min,max),_a9u_)}
    function first_strictly_after(t,dow)
     {var
       dow$0=to_int$4(dow),
       tplus1=add_days$0(t,1),
       cur=to_int$4(day_of_week(tplus1)),
       diff=((dow$0 + 7 | 0) - cur | 0) % 7 | 0;
      return add_days$0(tplus1,diff)}
    function gen_uniform_incl(d1,d2)
     {if(caml_call2(symbol$163,d1,d2))
       {var
         _a9q_=[0,[1,[0,_Xm_,[0,sexp_of_t$84(d2),0]]],0],
         _a9r_=[0,[1,[0,_Xn_,[0,sexp_of_t$84(d1),0]]],_a9q_];
        caml_call1
         (_od_,
          [1,
           [0,
            caml_call1(Sexplib0_Sexp_conv[7],cst_Date_gen_uniform_incl_boun),
            _a9r_]])}
      function _a9s_(days){return add_days$0(d1,days)}
      var _a9t_=caml_call2(_Kb_,0,diff$5(d2,d1));
      return caml_call2(_uW_[10],_a9t_,_a9s_)}
    function gen_incl(d1,d2)
     {var
       _a9n_=[0,[0,18.,gen_uniform_incl(d1,d2)],0],
       _a9o_=[0,[0,1.,caml_call1(_uW_[9],d2)],_a9n_],
       _a9p_=[0,[0,1.,caml_call1(_uW_[9],d1)],_a9o_];
      return caml_call1(_uW_[64],_a9p_)}
    var
     _Xo_=of_string$17(cst_2100_01_01),
     quickcheck_generator$11=gen_incl(of_string$17(cst_1900_01_01),_Xo_);
    function _Xp_(t,param,hash){return caml_call2(hash_fold_t$39,hash,t)}
    var
     quickcheck_observer$10=caml_call1(_uV_[1],_Xp_),
     quickcheck_shrinker$10=caml_call1(_uU_[3],0),
     Private$2=[0,leap_year_table,non_leap_year_table,ordinal_date],
     Optional_syntax=[0,is_none,unchecked_value],
     Optional_syntax$0=[0,Optional_syntax],
     _Xq_=caml_call1(_ym_,quickcheck_generator$11),
     quickcheck_generator$12=caml_call2(_uW_[10],_Xq_,of_option),
     _Xr_=caml_call1(_yo_,quickcheck_shrinker$10),
     quickcheck_shrinker$11=caml_call3(_uU_[6],_Xr_,of_option,to_option);
    function hash$39(x){return hash$37(x)}
    var
     quickcheck_observer$11=caml_call1(_uV_[3],[0,hash_fold_t$18,hash$39]),
     include$103=Make_plain$1([0,compare$42,sexp_of_t$85]),
     symbol$172=include$103[1],
     symbol$173=include$103[2],
     symbol$174=include$103[3],
     symbol$175=include$103[4],
     symbol$176=include$103[5],
     symbol$177=include$103[6],
     equal$36=include$103[7],
     compare$73=include$103[8],
     min$14=include$103[9],
     max$14=include$103[10],
     ascending$14=include$103[11],
     descending$14=include$103[12],
     between$14=include$103[13],
     clamp_exn$14=include$103[14],
     clamp$14=include$103[15],
     comparator$21=include$103[16],
     validate_lbound$14=include$103[17],
     validate_ubound$14=include$103[18],
     validate_bound$14=include$103[19],
     Replace_polymorphic_compare$13=include$103[20],
     Map$19=include$103[21],
     Set$19=include$103[22];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$322);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Date0$0);
    var
     Stable$6=
      [0,
       [0,
        hash_fold_t$18,
        hash$36,
        to_int$6,
        unchecked_value,
        bin_size_t$72,
        bin_write_t$73,
        bin_read_t$144,
        bin_read_t$145,
        bin_shape_t$88,
        bin_writer_t$77,
        bin_reader_t$77,
        bin_t$77,
        compare$70,
        t_of_sexp$70,
        sexp_of_t$84,
        comparator$19,
        Map$17,
        Set$17],
       [0,
        [0,
         bin_size_t$50,
         bin_write_t$50,
         bin_read_t$102,
         bin_read_t$103,
         bin_shape_t$90,
         bin_writer_t$78,
         bin_reader_t$78,
         bin_t$78,
         compare$42,
         t_of_sexp$71,
         sexp_of_t$85]]],
     Option=
      [0,
       hash_fold_t$18,
       hash$37,
       sexp_of_t$85,
       typerep_of_t$24,
       typename_of_t$24,
       none$0,
       some,
       some_is_representable,
       is_none,
       is_some,
       value$2,
       value_exn,
       unchecked_value,
       to_option,
       of_option,
       Optional_syntax$0,
       symbol$172,
       symbol$173,
       symbol$174,
       symbol$175,
       symbol$176,
       symbol$177,
       equal$36,
       compare$73,
       min$14,
       max$14,
       ascending$14,
       descending$14,
       between$14,
       clamp_exn$14,
       clamp$14,
       comparator$21,
       validate_lbound$14,
       validate_ubound$14,
       validate_bound$14,
       Replace_polymorphic_compare$13,
       Map$19,
       Set$19,
       quickcheck_generator$12,
       quickcheck_observer$11,
       quickcheck_shrinker$11],
     include$104=
      [0,
       bin_size_t$72,
       bin_write_t$73,
       bin_read_t$144,
       bin_read_t$145,
       bin_shape_t$88,
       bin_writer_t$77,
       bin_reader_t$77,
       bin_t$77,
       t_of_sexp$70,
       sexp_of_t$84,
       typerep_of_t$23,
       typename_of_t$23,
       hash_fold_t$39,
       hash$38,
       hashable$13,
       Table$15,
       Hash_set$15,
       Hash_queue$13,
       of_string$17,
       to_string$20,
       symbol$160,
       symbol$161,
       symbol$162,
       symbol$163,
       symbol$164,
       symbol$165,
       equal$35,
       compare$71,
       min$13,
       max$13,
       ascending$13,
       descending$13,
       between$13,
       clamp_exn$13,
       clamp$13,
       validate_lbound$13,
       validate_ubound$13,
       validate_bound$13,
       Replace_polymorphic_compare$12,
       comparator$20,
       Map$18,
       Set$18,
       _Xh_,
       create_exn,
       of_string_iso8601_basic,
       to_string_iso8601_basic,
       to_string_american,
       day,
       month,
       year,
       day_of_week,
       week_number_and_year,
       week_number,
       is_weekend,
       is_weekday,
       is_business_day,
       add_days$0,
       add_months,
       add_years,
       diff$5,
       diff_weekdays,
       diff_weekend_days,
       add_weekdays_rounding_backward,
       add_weekdays_rounding_forward,
       add_business_days_rounding_bac,
       add_business_days_rounding_for,
       add_weekdays_rounding_in_direc,
       add_weekdays_rounding_in_direc,
       add_business_days_rounding_in_,
       add_business_days_rounding_in_,
       add_days_skipping,
       dates_between,
       business_dates_between,
       weekdays_between,
       previous_weekday,
       following_weekday,
       first_strictly_after,
       days_in_month,
       is_leap_year,
       unix_epoch,
       quickcheck_generator$11,
       quickcheck_observer$10,
       quickcheck_shrinker$10,
       gen_incl,
       gen_uniform_incl,
       Days,
       Option,
       Stable$6,
       O$1,
       Private$2];
    caml_register_global(5103,include$104,"Core_kernel__Date0");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Immediate_opti);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$323);
    caml_call1(Expect_test_collector[4][1],cst_src_immediate_option_intf_);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$324,cst$114);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$325);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Immediate_opti$0);
    var Core_kernel_Immediate_option_i=[0];
    caml_register_global
     (5104,
      Core_kernel_Immediate_option_i,
      "Core_kernel__Immediate_option_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Date0_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$326);
    caml_call1(Expect_test_collector[4][1],cst_src_date0_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$327,cst$115);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$328);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Date0_intf$0);
    var Core_kernel_Date0_intf=[0];
    caml_register_global
     (5105,Core_kernel_Date0_intf,"Core_kernel__Date0_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Immediate_opti$1);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$329);
    caml_call1(Expect_test_collector[4][1],cst_src_immediate_option_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$330,cst$116);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$331);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Immediate_opti$2);
    var Core_kernel_Immediate_option=[0];
    caml_register_global
     (5106,Core_kernel_Immediate_option,"Core_kernel__Immediate_option");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Ofday_helpers);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$332);
    caml_call1(Expect_test_collector[4][1],cst_src_ofday_helpers_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$333,cst$117);
    function suffixes(char$0)
     {function _a9i_(suffix)
       {var _a9m_=[0,caml_call1(_Cg_,suffix),0];
        return [0,caml_call1(_Ch_,suffix),_a9m_]}
      var
       _a9j_=[0,caml_call2(_fw_,_Xs_,char$0),0],
       _a9k_=[0,caml_call2(_fw_,_Xt_,char$0),_a9j_],
       _a9l_=[0,caml_call2(_fw_,_Xu_,char$0),_a9k_];
      return caml_call2(_qc_,[0,caml_call2(_fw_,_Xv_,char$0),_a9l_],_a9i_)}
    var
     am_suffixes=[246,function(_a9h_){return suffixes(65)}],
     pm_suffixes=[246,function(_a9g_){return suffixes(80)}];
    function find_suffix(string,suffixes)
     {var suffixes$0=suffixes;
      for(;;)
       {if(suffixes$0)
         {var suffixes$1=suffixes$0[2],suffix=suffixes$0[1];
          if(caml_call2(_CC_,string,suffix))return suffix;
          var suffixes$0=suffixes$1;
          continue}
        return cst$118}}
    function has_colon(string,pos,until)
     {var _a9f_=caml_call2(_Nt_,pos,until);
      return _a9f_?caml_call2(_FD_,58,caml_string_get(string,pos)):_a9f_}
    function decrement_length_if_ends_in_sp(string,len)
     {if
       (caml_call2(_Ns_,len,0)
        &&
        caml_call2(_FD_,32,caml_string_get(string,len - 1 | 0)))
       return len - 1 | 0;
      return len}
    function invalid_string(string,reason)
     {var
       _a9d_=[0,caml_call1(Sexplib0_Sexp_conv[7],reason),0],
       _a9e_=[0,caml_call1(Sexplib0_Sexp_conv[7],string),_a9d_];
      return caml_call1
              (_od_,
               [1,
                [0,
                 caml_call1
                  (Sexplib0_Sexp_conv[7],cst_Time_Ofday_invalid_string),
                 _a9e_]])}
    function parse$0(string,f)
     {var
       len=caml_ml_string_length(string),
       _a86_=caml_obj_tag(am_suffixes),
       _a87_=
        250 === _a86_
         ?am_suffixes[1]
         :246 === _a86_
           ?caml_call1(CamlinternalLazy[2],am_suffixes)
           :am_suffixes,
       match$0=find_suffix(string,_a87_),
       _a88_=caml_obj_tag(pm_suffixes),
       _a89_=
        250 === _a88_
         ?pm_suffixes[1]
         :246 === _a88_
           ?caml_call1(CamlinternalLazy[2],pm_suffixes)
           :pm_suffixes,
       match$1=find_suffix(string,_a89_),
       switch$0=0;
      if
       (caml_string_notequal(match$0,cst$119)
        ||
        caml_string_notequal(match$1,cst$122))
       switch$0 = 1;
      else
       var until=len,am_or_pm=760146199;
      if(switch$0)
       if(caml_string_notequal(match$1,cst$120))
        {if(caml_string_notequal(match$0,cst$121))
          throw [0,Assert_failure,_Xw_];
         var
          until=
           decrement_length_if_ends_in_sp
            (string,len - caml_ml_string_length(match$1) | 0),
          am_or_pm=760152914}
       else
        var
         until=
          decrement_length_if_ends_in_sp
           (string,len - caml_ml_string_length(match$0) | 0),
         am_or_pm=760149569;
      var pos$0=0;
      if(has_colon(string,1,until))
       var
        expect_minutes_and_seconds=1047113856,
        hr=read_1_digit_int$0(string,pos$0),
        pos$1=2;
      else
       if(has_colon(string,2,until))
        var
         expect_minutes_and_seconds=1047113856,
         hr=read_2_digit_int$0(string,pos$0),
         pos$1=3;
       else
        if(caml_call2(_Nr_,1,until))
         var
          expect_minutes_and_seconds=866457669,
          hr=read_1_digit_int$0(string,pos$0),
          pos$1=1;
        else
         if(caml_call2(_Nr_,2,until))
          var
           expect_minutes_and_seconds=866457669,
           hr=read_2_digit_int$0(string,pos$0),
           pos$1=2;
         else
          var
           hr$1=read_2_digit_int$0(string,pos$0),
           expect_minutes_and_seconds=-316951979,
           hr=hr$1,
           pos$1=2;
      if(866457669 === expect_minutes_and_seconds)
       var expect_seconds=0,min=0,pos$2=pos$1;
      else
       if(has_colon(string,pos$1 + 2 | 0,until))
        var
         _a9b_=
          1047113856 <= expect_minutes_and_seconds
           ?1
           :invalid_string(string,cst_expected_end_of_string_aft),
         expect_seconds=_a9b_,
         min=read_2_digit_int$0(string,pos$1),
         pos$2=pos$1 + 3 | 0;
       else
        if(caml_call2(_Nr_,pos$1 + 2 | 0,until))
         var
          expect_seconds=0,
          min=read_2_digit_int$0(string,pos$1),
          pos$2=pos$1 + 2 | 0;
        else
         var
          _a9c_=invalid_string(string,cst_expected_colon_or_am_pm_su),
          expect_seconds=_a9c_[3],
          min=_a9c_[2],
          pos$2=_a9c_[1];
      if(expect_seconds)
       if(caml_call2(_Ns_,pos$2 + 2 | 0,until))
        var
         _a8__=invalid_string(string,cst_expected_two_digits_of_sec),
         subsec_nonzero=_a8__[4],
         subsec_len=_a8__[3],
         subsec_pos=_a8__[2],
         sec=_a8__[1];
       else
        {var sec$1=read_2_digit_int$0(string,pos$2),pos$3=pos$2 + 2 | 0;
         if(caml_call2(_Nr_,pos$3,until))
          var subsec_nonzero=0,subsec_len=0,subsec_pos=pos$3,sec=sec$1;
         else
          {var switch$1=0;
           if
            (caml_call2(_Nt_,pos$3,until)
             &&
             caml_call2(_FD_,46,caml_string_get(string,pos$3)))
            {var pos$4=pos$3 + 1 | 0,nonzero=[0,0],_a84_=until - 1 | 0;
             if(! (_a84_ < pos$4))
              {var pos=pos$4;
               for(;;)
                {var
                  match=caml_string_get(string,pos),
                  switcher=match - 48 | 0,
                  switch$2=0;
                 if(9 < switcher >>> 0)
                  if(47 === switcher)
                   switch$2 = 1;
                  else
                   invalid_string(string,cst_expected_digits_and_or_und);
                 else
                  if(switcher)nonzero[1] = 1;else switch$2 = 1;
                 var _a85_=pos + 1 | 0;
                 if(_a84_ !== pos){var pos=_a85_;continue}
                 break}}
             var
              subsec_nonzero=nonzero[1],
              subsec_len=until - pos$3 | 0,
              subsec_pos=pos$3,
              sec=sec$1}
           else
            switch$1 = 1;
           if(switch$1)
            var
             _a8$_=invalid_string(string,cst_expected_decimal_point_or_),
             subsec_nonzero=_a8$_[4],
             subsec_len=_a8$_[3],
             subsec_pos=_a8$_[2],
             sec=_a8$_[1]}}
      else
       if(caml_call2(_Nr_,pos$2,until))
        var subsec_nonzero=0,subsec_len=0,subsec_pos=pos$2,sec=0;
       else
        var
         _a9a_=invalid_string(string,cst_BUG_did_not_expect_seconds),
         subsec_nonzero=_a9a_[4],
         subsec_len=_a9a_[3],
         subsec_pos=_a9a_[2],
         sec=_a9a_[1];
      if(760149569 === am_or_pm)
       {var switch$3=0;
        if(caml_call2(_Nt_,hr,1) || caml_call2(_Ns_,hr,12))
         switch$3 = 1;
        else
         var hr$0=caml_call2(_Nr_,hr,12)?0:hr;
        if(switch$3)var hr$0=invalid_string(string,cst_hours_out_of_bounds)}
      else
       if(760152914 <= am_or_pm)
        {var switch$4=0;
         if(caml_call2(_Nt_,hr,1) || caml_call2(_Ns_,hr,12))
          switch$4 = 1;
         else
          var hr$0=caml_call2(_Nr_,hr,12)?12:hr + 12 | 0;
         if(switch$4)var hr$0=invalid_string(string,cst_hours_out_of_bounds$0)}
       else
        if(866457669 === expect_minutes_and_seconds)
         var hr$0=invalid_string(string,cst_hours_without_minutes_or_A);
        else
         if(caml_call2(_Ns_,hr,24))
          var hr$0=invalid_string(string,cst_hours_out_of_bounds$1);
         else
          {var switch$5=0;
           if(caml_call2(_Nr_,hr,24))
            {var switch$6=0;
             if
              (!
               caml_call2(_Ns_,min,0)
               &&
               !
               caml_call2(_Ns_,sec,0)
               &&
               !
               subsec_nonzero)
              {switch$5 = 1;switch$6 = 1}
             if(! switch$6)
              var hr$0=invalid_string(string,cst_time_is_past_24_00_00)}
           else
            switch$5 = 1;
           if(switch$5)var hr$0=hr}
      var
       min$0=
        caml_call2(_Ns_,min,59)
         ?invalid_string(string,cst_minutes_out_of_bounds)
         :min,
       sec$0=
        caml_call2(_Ns_,sec,60)
         ?invalid_string(string,cst_seconds_out_of_bounds)
         :sec,
       switch$7=0;
      if(! caml_call2(_Nr_,sec$0,60) && subsec_nonzero)
       {var subsec_len$0=subsec_len;switch$7 = 1}
      if(! switch$7)var subsec_len$0=0;
      return caml_call6(f,string,hr$0,min$0,sec$0,subsec_pos,subsec_len$0)}
    function parse_iso8601_extended(pos$0,len,str,f)
     {var match$0=caml_call4(_is_,pos$0,len,0,caml_ml_string_length(str));
      if(0 === match$0[0])
       var z=match$0[1],match$1=z;
      else
       var s=match$0[1],match$1=caml_call3(_Pe_,_Xy_,caml_call1(_nY_,s),0);
      var len$0=match$1[2],pos$1=match$1[1];
      if(caml_call2(_Nt_,len$0,2))return caml_call1(_Gb_,cst_len_2);
      var hr=read_2_digit_int$0(str,pos$1);
      if(caml_call2(_Ns_,hr,24))caml_call1(_Gb_,cst_hour_24);
      if(caml_call2(_Nr_,len$0,2))
       return caml_call6(f,str,hr,0,0,pos$1 + len$0 | 0,0);
      if(caml_call2(_Nt_,len$0,5))return caml_call1(_Gb_,cst_2_len_5);
      if(caml_call2(_FD_,caml_string_get(str,pos$1 + 2 | 0),58))
       {var min=read_2_digit_int$0(str,pos$1 + 3 | 0);
        if(caml_call2(_Np_,min,60))caml_call1(_Gb_,cst_minute_60);
        var
         _a80_=caml_call2(_Nr_,hr,24),
         _a81_=_a80_?caml_call2(_Nu_,min,0):_a80_;
        if(_a81_)caml_call1(_Gb_,cst_24_hours_and_non_zero_minu);
        if(caml_call2(_Nr_,len$0,5))
         return caml_call6(f,str,hr,min,0,pos$1 + len$0 | 0,0);
        if(caml_call2(_Nt_,len$0,8))return caml_call1(_Gb_,cst_5_len_8);
        if(caml_call2(_FD_,caml_string_get(str,pos$1 + 5 | 0),58))
         {var sec=read_2_digit_int$0(str,pos$1 + 6 | 0);
          if(caml_call2(_Ns_,sec,60))caml_call3(_Pe_,_Xx_,sec,0);
          var
           _a82_=caml_call2(_Nr_,hr,24),
           _a83_=_a82_?caml_call2(_Nu_,sec,0):_a82_;
          if(_a83_)caml_call1(_Gb_,cst_24_hours_and_non_zero_seco);
          if(caml_call2(_Nr_,len$0,8))
           return caml_call6(f,str,hr,min,sec,pos$1 + len$0 | 0,0);
          if(caml_call2(_Nr_,len$0,9))return caml_call1(_Gb_,cst_length_9);
          var match$2=caml_string_get(str,pos$1 + 8 | 0);
          if(44 !== match$2 && 46 !== match$2)
           return caml_call1(_Gb_,cst_missing_subsecond_separato);
          var
           subsec_pos=pos$1 + 8 | 0,
           until=pos$1 + len$0 | 0,
           pos$2=subsec_pos + 1 | 0,
           nonzero=[0,0],
           _a8Y_=until - 1 | 0;
          if(! (_a8Y_ < pos$2))
           {var pos=pos$2;
            for(;;)
             {var match=caml_string_get(str,pos),switch$0=0;
              if(49 <= match)
               if(58 <= match)switch$0 = 1;else nonzero[1] = 1;
              else
               if(! (48 <= match))switch$0 = 1;
              if(switch$0)invalid_string(str,cst_expected_digits_after_deci);
              var _a8Z_=pos + 1 | 0;
              if(_a8Y_ !== pos){var pos=_a8Z_;continue}
              break}}
          var switch$1=0;
          if(nonzero[1])
           if(caml_call2(_Nr_,sec,60))
            var subsec_len=0;
           else
            if(caml_call2(_Nr_,hr,24))
             var subsec_len=caml_call1(_Gb_,cst_24_hours_and_non_zero_subs);
            else
             switch$1 = 1;
          else
           switch$1 = 1;
          if(switch$1)var subsec_len=len$0 - 8 | 0;
          return caml_call6(f,str,hr,min,sec,subsec_pos,subsec_len)}
        return caml_call1(_Gb_,cst_second_colon_missing)}
      return caml_call1(_Gb_,cst_first_colon_missing)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$334);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Ofday_helpers$0);
    var
     Core_kernel_Ofday_helpers=
      [0,
       parse$0,
       parse_iso8601_extended,
       invalid_string,
       am_suffixes,
       pm_suffixes];
    caml_register_global
     (5107,Core_kernel_Ofday_helpers,"Core_kernel__Ofday_helpers");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Stable_interna);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$335);
    caml_call1(Expect_test_collector[4][1],cst_src_stable_internal_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$336,cst$123);
    var
     _Xz_=Bin_prot_Std[1],
     _XA_=Bin_prot_Std[2],
     _XB_=Bin_prot_Std[3],
     _XC_=Bin_prot_Std[4],
     _XD_=Bin_prot_Std[5],
     _XE_=Bin_prot_Std[6],
     _XF_=Bin_prot_Std[7],
     _XG_=Bin_prot_Std[8],
     _XH_=Bin_prot_Std[9],
     _XI_=Bin_prot_Std[10],
     _XJ_=Bin_prot_Std[11],
     _XK_=Bin_prot_Std[12],
     _XL_=Bin_prot_Std[13],
     _XM_=Bin_prot_Std[14],
     _XN_=Bin_prot_Std[15],
     _XO_=Bin_prot_Std[16],
     _XP_=Bin_prot_Std[17],
     _XQ_=Bin_prot_Std[18],
     _XR_=Bin_prot_Std[19],
     _XS_=Bin_prot_Std[20],
     _XT_=Bin_prot_Std[21],
     _XU_=Bin_prot_Std[22],
     _XV_=Bin_prot_Std[23],
     _XW_=Bin_prot_Std[24],
     _XX_=Bin_prot_Std[25],
     _XY_=Bin_prot_Std[26],
     _XZ_=Bin_prot_Std[27],
     _X0_=Bin_prot_Std[28],
     _X1_=Bin_prot_Std[29],
     _X2_=Bin_prot_Std[30],
     _X3_=Bin_prot_Std[31],
     _X4_=Bin_prot_Std[32],
     _X5_=Bin_prot_Std[33],
     _X6_=Bin_prot_Std[34],
     _X7_=Bin_prot_Std[35],
     _X8_=Bin_prot_Std[36],
     _X9_=Bin_prot_Std[37],
     _X__=Bin_prot_Std[38],
     _X$_=Bin_prot_Std[39],
     _Ya_=Bin_prot_Std[40],
     _Yb_=Bin_prot_Std[41],
     _Yc_=Bin_prot_Std[42],
     _Yd_=Bin_prot_Std[43],
     _Ye_=Bin_prot_Std[44],
     _Yf_=Bin_prot_Std[45],
     _Yg_=Bin_prot_Std[46],
     _Yh_=Bin_prot_Std[47],
     _Yi_=Bin_prot_Std[48],
     _Yj_=Bin_prot_Std[49],
     _Yk_=Bin_prot_Std[50],
     _Yl_=Bin_prot_Std[51],
     _Ym_=Bin_prot_Std[52],
     _Yn_=Bin_prot_Std[53],
     _Yo_=Bin_prot_Std[54],
     _Yp_=Bin_prot_Std[55],
     _Yq_=Bin_prot_Std[56],
     _Yr_=Bin_prot_Std[57],
     _Ys_=Bin_prot_Std[58],
     _Yt_=Bin_prot_Std[59],
     _Yu_=Bin_prot_Std[60],
     _Yv_=Bin_prot_Std[61],
     _Yw_=Bin_prot_Std[62],
     _Yx_=Bin_prot_Std[63],
     _Yy_=Bin_prot_Std[64],
     _Yz_=Bin_prot_Std[65],
     _YA_=Bin_prot_Std[66],
     _YB_=Bin_prot_Std[67],
     _YC_=Bin_prot_Std[68],
     _YD_=Bin_prot_Std[69],
     _YE_=Bin_prot_Std[70],
     _YF_=Bin_prot_Std[71],
     _YG_=Bin_prot_Std[72],
     _YH_=Bin_prot_Std[73],
     _YI_=Bin_prot_Std[74],
     _YJ_=Bin_prot_Std[75],
     _YK_=Bin_prot_Std[76],
     _YL_=Bin_prot_Std[77],
     _YM_=Bin_prot_Std[78],
     _YN_=Bin_prot_Std[79],
     _YO_=Bin_prot_Std[80],
     _YP_=Bin_prot_Std[81],
     _YQ_=Bin_prot_Std[82],
     _YR_=Bin_prot_Std[83],
     _YS_=Bin_prot_Std[84],
     _YT_=Bin_prot_Std[85],
     _YU_=Bin_prot_Std[86],
     _YV_=Bin_prot_Std[87],
     _YW_=Bin_prot_Std[88],
     _YX_=Bin_prot_Std[89],
     _YY_=Bin_prot_Std[90],
     _YZ_=Bin_prot_Std[91],
     _Y0_=Bin_prot_Std[92],
     _Y1_=Bin_prot_Std[93],
     _Y2_=Bin_prot_Std[94],
     _Y3_=Bin_prot_Std[95],
     _Y4_=Bin_prot_Std[96],
     _Y5_=Bin_prot_Std[97],
     _Y6_=Bin_prot_Std[98],
     _Y7_=Bin_prot_Std[99],
     _Y8_=Bin_prot_Std[100],
     _Y9_=Bin_prot_Std[101],
     _Y__=Bin_prot_Std[102],
     _Y$_=Bin_prot_Std[103],
     _Za_=Bin_prot_Std[104],
     _Zb_=Bin_prot_Std[105],
     _Zc_=Bin_prot_Std[106],
     _Zd_=Bin_prot_Std[107],
     _Ze_=Bin_prot_Std[108],
     _Zf_=Bin_prot_Std[109],
     _Zg_=Bin_prot_Std[110],
     _Zh_=Bin_prot_Std[111],
     _Zi_=Bin_prot_Std[112],
     _Zj_=Bin_prot_Std[113],
     _Zk_=Bin_prot_Std[114],
     _Zl_=Bin_prot_Std[115],
     _Zm_=Bin_prot_Std[116],
     _Zn_=Bin_prot_Std[117],
     _Zo_=Bin_prot_Std[118],
     _Zp_=Bin_prot_Std[119],
     _Zq_=Bin_prot_Std[120],
     _Zr_=Bin_prot_Std[121],
     _Zs_=Bin_prot_Std[122],
     _Zt_=Bin_prot_Std[123],
     _Zu_=Bin_prot_Std[124],
     _Zv_=Bin_prot_Std[125],
     _Zw_=Bin_prot_Std[126],
     _Zx_=Bin_prot_Std[127],
     _Zy_=Bin_prot_Std[128],
     _Zz_=Bin_prot_Std[129],
     _ZA_=Bin_prot_Std[130],
     _ZB_=Bin_prot_Std[131],
     _ZC_=Bin_prot_Std[132],
     _ZD_=Bin_prot_Std[133],
     _ZE_=Bin_prot_Std[134],
     _ZF_=Bin_prot_Std[135],
     _ZG_=Bin_prot_Std[136],
     _ZH_=Bin_prot_Std[137],
     _ZI_=Bin_prot_Std[138],
     _ZJ_=Bin_prot_Std[139],
     _ZK_=Bin_prot_Std[140],
     _ZL_=Bin_prot_Std[141],
     _ZM_=Bin_prot_Std[142],
     _ZN_=Bin_prot_Std[143],
     _ZO_=Bin_prot_Std[144],
     _ZP_=Bin_prot_Std[145],
     _ZQ_=Bin_prot_Std[146],
     _ZR_=Bin_prot_Std[147],
     _ZS_=Bin_prot_Std[148],
     _ZT_=Bin_prot_Std[149],
     _ZU_=Bin_prot_Std[150],
     _ZV_=Bin_prot_Std[151],
     _ZW_=Bin_prot_Std[152],
     _ZX_=Bin_prot_Std[153],
     _ZY_=Bin_prot_Std[154],
     _ZZ_=Bin_prot_Std[155],
     _Z0_=Bin_prot_Std[156],
     _Z1_=Bin_prot_Std[157],
     _Z2_=Bin_prot_Std[158],
     _Z3_=Bin_prot_Std[159],
     _Z4_=Bin_prot_Std[160],
     _Z5_=Bin_prot_Std[161],
     _Z6_=Bin_prot_Std[162],
     _Z7_=Bin_prot_Std[163],
     _Z8_=Bin_prot_Std[164],
     _Z9_=Bin_prot_Std[165],
     _Z__=Bin_prot_Std[166],
     _Z$_=Bin_prot_Std[167],
     __a_=Bin_prot_Std[168],
     __b_=Bin_prot_Std[169],
     __c_=Bin_prot_Std[170],
     __d_=Bin_prot_Std[171],
     __e_=Bin_prot_Std[172],
     __f_=Bin_prot_Std[173],
     __g_=Bin_prot_Std[174],
     __h_=Bin_prot_Std[175],
     __i_=Bin_prot_Std[176],
     __j_=Bin_prot_Std[177],
     __k_=Bin_prot_Std[178],
     __l_=Bin_prot_Std[179],
     __m_=Bin_prot_Std[180],
     __n_=Bin_prot_Std[181],
     __o_=Bin_prot_Std[182],
     __p_=Bin_prot_Std[183],
     __q_=Bin_prot_Std[184],
     __r_=Bin_prot_Std[185],
     __s_=Bin_prot_Std[186],
     __t_=Bin_prot_Std[187],
     __u_=Bin_prot_Std[188],
     __v_=Bin_prot_Std[189],
     __w_=Bin_prot_Std[190],
     __x_=Bin_prot_Std[191],
     __y_=Bin_prot_Std[192],
     __z_=Bin_prot_Std[193],
     __A_=Bin_prot_Std[194],
     __B_=Bin_prot_Std[195],
     __C_=Bin_prot_Std[196],
     __D_=Bin_prot_Std[197],
     __E_=Bin_prot_Std[198],
     __F_=Bin_prot_Std[199],
     __G_=Bin_prot_Std[200],
     __H_=Bin_prot_Std[201],
     __I_=Bin_prot_Std[202],
     __J_=Bin_prot_Std[203],
     __K_=Bin_prot_Std[204],
     __L_=Bin_prot_Std[205],
     __M_=Bin_prot_Std[206],
     __N_=Bin_prot_Std[207],
     __O_=Bin_prot_Std[208],
     __P_=Bin_prot_Std[209],
     __Q_=Bin_prot_Std[210],
     __R_=Bin_prot_Std[211],
     __S_=Bin_prot_Std[212],
     __T_=Bin_prot_Std[213],
     __U_=Bin_prot_Std[214],
     __V_=Bin_prot_Std[215],
     __W_=Bin_prot_Std[216],
     __X_=Bin_prot_Std[217],
     __Y_=Bin_prot_Std[218],
     __Z_=Base_Hash[13],
     __0_=__Z_[1],
     __1_=__Z_[2],
     __2_=__Z_[3],
     __3_=__Z_[4],
     __4_=__Z_[5],
     __5_=__Z_[6],
     __6_=__Z_[7],
     hash_fold_t$40=__Z_[8],
     __7_=__Z_[9],
     __8_=__Z_[10],
     __9_=__Z_[11],
     ____=__Z_[12],
     __$_=__Z_[13],
     _$a_=__Z_[14],
     _$b_=__Z_[15],
     _$c_=__Z_[16],
     _$d_=__Z_[17],
     _$e_=__Z_[18],
     _$f_=__Z_[19],
     _$g_=__Z_[20],
     _$h_=__Z_[21],
     _$i_=__Z_[22],
     _$j_=__Z_[23],
     _$k_=Base[178],
     _$l_=Base[176],
     _$m_=Base[177],
     _$n_=Base[171],
     _$o_=Base[169],
     _$p_=Base[170],
     _$q_=Base[166],
     _$r_=Base[164],
     _$s_=Base[165],
     _$t_=Base[159],
     _$u_=Base[157],
     _$v_=Base[158],
     _$w_=Base[154],
     _$x_=Base[152],
     _$y_=Base[153],
     _$z_=Base[148],
     _$A_=Base[146],
     _$B_=Base[147],
     _$C_=Base[141],
     _$D_=Base[139],
     _$E_=Base[140],
     _$F_=Base[135],
     _$G_=Base[133],
     _$H_=Base[134],
     _$I_=Base[128],
     _$J_=Base[126],
     _$K_=Base[127],
     _$L_=Base[121],
     _$M_=Base[119],
     _$N_=Base[120],
     _$O_=Base[114],
     _$P_=Base[112],
     _$Q_=Base[113],
     _$R_=Base[107],
     _$S_=Base[106],
     _$T_=Base[104],
     _$U_=Base[105],
     _$V_=Base[99],
     _$W_=Base[97],
     _$X_=Base[98],
     _$Y_=Base[92],
     _$Z_=Base[90],
     _$0_=Base[91],
     _$1_=caml_call1(Bin_prot_Shape[3][1],cst_a$79),
     _$2_=caml_call1(Bin_prot_Shape[4][1],cst_src_stable_internal_ml_42_),
     _$3_=bin_shape_sexp_option(caml_call2(Bin_prot_Shape[15],_$2_,_$1_)),
     _$4_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$80),0],
     _$5_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_sexp_option$1),_$4_,_$3_],0],
     _$6_=caml_call1(Bin_prot_Shape[4][1],cst_src_stable_internal_ml_42_$0),
     group$107=caml_call2(Bin_prot_Shape[6],_$6_,_$5_);
    function bin_shape_sexp_option$0(a)
     {var _a8X_=caml_call1(Bin_prot_Shape[2][1],cst_sexp_option$2);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$107,_a8X_),[0,a,0])}
    function bin_size_sexp_option$0(size_of_a,v)
     {return bin_size_sexp_option(size_of_a,v)}
    function bin_write_sexp_option$0(write_a,buf,pos,v)
     {return bin_write_sexp_option(write_a,buf,pos,v)}
    function bin_writer_sexp_option$0(bin_writer_a)
     {function _a8T_(v)
       {var _a8U_=bin_writer_a[2];
        return function(_a8V_,_a8W_)
         {return bin_write_sexp_option$0(_a8U_,v,_a8V_,_a8W_)}}
      return [0,
              function(v){return bin_size_sexp_option$0(bin_writer_a[1],v)},
              _a8T_]}
    function bin_read_sexp_option$1(of_a,buf,pos_ref,vint)
     {return bin_read_sexp_option(of_a,buf,pos_ref,vint)}
    function bin_read_sexp_option$2(of_a,buf,pos_ref)
     {return bin_read_sexp_option$0(of_a,buf,pos_ref)}
    function bin_reader_sexp_option$0(bin_reader_a)
     {function _a8S_(buf,pos_ref,vtag)
       {return bin_read_sexp_option$1(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_sexp_option$2(bin_reader_a[1],buf,pos_ref)},
              _a8S_]}
    function bin_sexp_option$0(bin_a)
     {var
       _a8Q_=bin_reader_sexp_option$0(bin_a[3]),
       _a8R_=bin_writer_sexp_option$0(bin_a[2]);
      return [0,bin_shape_sexp_option$0(bin_a[1]),_a8R_,_a8Q_]}
    function compare_sexp_option$0(cmp_a,a_001,b_002)
     {return compare_sexp_option
              (function(a_003,b_004){return caml_call2(cmp_a,a_003,b_004)},
               a_001,
               b_002)}
    var
     _$7_=caml_call1(Bin_prot_Shape[3][1],cst_a$81),
     _$8_=caml_call1(Bin_prot_Shape[4][1],cst_src_stable_internal_ml_45_),
     _$9_=bin_shape_sexp_list(caml_call2(Bin_prot_Shape[15],_$8_,_$7_)),
     _$__=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$82),0],
     _$$_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_sexp_list$1),_$__,_$9_],0],
     _aaa_=caml_call1(Bin_prot_Shape[4][1],cst_src_stable_internal_ml_45_$0),
     group$108=caml_call2(Bin_prot_Shape[6],_aaa_,_$$_);
    function bin_shape_sexp_list$0(a)
     {var _a8P_=caml_call1(Bin_prot_Shape[2][1],cst_sexp_list$2);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$108,_a8P_),[0,a,0])}
    function bin_size_sexp_list$0(size_of_a,v)
     {return bin_size_sexp_list(size_of_a,v)}
    function bin_write_sexp_list$0(write_a,buf,pos,v)
     {return bin_write_sexp_list(write_a,buf,pos,v)}
    function bin_writer_sexp_list$0(bin_writer_a)
     {function _a8L_(v)
       {var _a8M_=bin_writer_a[2];
        return function(_a8N_,_a8O_)
         {return bin_write_sexp_list$0(_a8M_,v,_a8N_,_a8O_)}}
      return [0,
              function(v){return bin_size_sexp_list$0(bin_writer_a[1],v)},
              _a8L_]}
    function bin_read_sexp_list$1(of_a,buf,pos_ref,vint)
     {return bin_read_sexp_list(of_a,buf,pos_ref,vint)}
    function bin_read_sexp_list$2(of_a,buf,pos_ref)
     {return bin_read_sexp_list$0(of_a,buf,pos_ref)}
    function bin_reader_sexp_list$0(bin_reader_a)
     {function _a8K_(buf,pos_ref,vtag)
       {return bin_read_sexp_list$1(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_sexp_list$2(bin_reader_a[1],buf,pos_ref)},
              _a8K_]}
    function bin_sexp_list$0(bin_a)
     {var
       _a8I_=bin_reader_sexp_list$0(bin_a[3]),
       _a8J_=bin_writer_sexp_list$0(bin_a[2]);
      return [0,bin_shape_sexp_list$0(bin_a[1]),_a8J_,_a8I_]}
    function compare_sexp_list$0(cmp_a,a_005,b_006)
     {return compare_sexp_list
              (function(a_007,b_008){return caml_call2(cmp_a,a_007,b_008)},
               a_005,
               b_006)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$337);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Stable_interna$0);
    var
     Core_kernel_Stable_internal=
      [0,
       _Xz_,
       _XA_,
       _XB_,
       _XC_,
       _XD_,
       _XE_,
       _XF_,
       _XG_,
       _XH_,
       _XI_,
       _XJ_,
       _XK_,
       _XL_,
       _XM_,
       _XN_,
       _XO_,
       _XP_,
       _XQ_,
       _XR_,
       _XS_,
       _XT_,
       _XU_,
       _XV_,
       _XW_,
       _XX_,
       _XY_,
       _XZ_,
       _X0_,
       _X1_,
       _X2_,
       _X3_,
       _X4_,
       _X5_,
       _X6_,
       _X7_,
       _X8_,
       _X9_,
       _X__,
       _X$_,
       _Ya_,
       _Yb_,
       _Yc_,
       _Yd_,
       _Ye_,
       _Yf_,
       _Yg_,
       _Yh_,
       _Yi_,
       _Yj_,
       _Yk_,
       _Yl_,
       _Ym_,
       _Yn_,
       _Yo_,
       _Yp_,
       _Yq_,
       _Yr_,
       _Ys_,
       _Yt_,
       _Yu_,
       _Yv_,
       _Yw_,
       _Yx_,
       _Yy_,
       _Yz_,
       _YA_,
       _YB_,
       _YC_,
       _YD_,
       _YE_,
       _YF_,
       _YG_,
       _YH_,
       _YI_,
       _YJ_,
       _YK_,
       _YL_,
       _YM_,
       _YN_,
       _YO_,
       _YP_,
       _YQ_,
       _YR_,
       _YS_,
       _YT_,
       _YU_,
       _YV_,
       _YW_,
       _YX_,
       _YY_,
       _YZ_,
       _Y0_,
       _Y1_,
       _Y2_,
       _Y3_,
       _Y4_,
       _Y5_,
       _Y6_,
       _Y7_,
       _Y8_,
       _Y9_,
       _Y__,
       _Y$_,
       _Za_,
       _Zb_,
       _Zc_,
       _Zd_,
       _Ze_,
       _Zf_,
       _Zg_,
       _Zh_,
       _Zi_,
       _Zj_,
       _Zk_,
       _Zl_,
       _Zm_,
       _Zn_,
       _Zo_,
       _Zp_,
       _Zq_,
       _Zr_,
       _Zs_,
       _Zt_,
       _Zu_,
       _Zv_,
       _Zw_,
       _Zx_,
       _Zy_,
       _Zz_,
       _ZA_,
       _ZB_,
       _ZC_,
       _ZD_,
       _ZE_,
       _ZF_,
       _ZG_,
       _ZH_,
       _ZI_,
       _ZJ_,
       _ZK_,
       _ZL_,
       _ZM_,
       _ZN_,
       _ZO_,
       _ZP_,
       _ZQ_,
       _ZR_,
       _ZS_,
       _ZT_,
       _ZU_,
       _ZV_,
       _ZW_,
       _ZX_,
       _ZY_,
       _ZZ_,
       _Z0_,
       _Z1_,
       _Z2_,
       _Z3_,
       _Z4_,
       _Z5_,
       _Z6_,
       _Z7_,
       _Z8_,
       _Z9_,
       _Z__,
       _Z$_,
       __a_,
       __b_,
       __c_,
       __d_,
       __e_,
       __f_,
       __g_,
       __h_,
       __i_,
       __j_,
       __k_,
       __l_,
       __m_,
       __n_,
       __o_,
       __p_,
       __q_,
       __r_,
       __s_,
       __t_,
       __u_,
       __v_,
       __w_,
       __x_,
       __y_,
       __z_,
       __A_,
       __B_,
       __C_,
       __D_,
       __E_,
       __F_,
       __G_,
       __H_,
       __I_,
       __J_,
       __K_,
       __L_,
       __M_,
       __N_,
       __O_,
       __P_,
       __Q_,
       __R_,
       __S_,
       __T_,
       __U_,
       __V_,
       __W_,
       __X_,
       __Y_,
       __0_,
       __1_,
       __2_,
       __3_,
       __4_,
       __5_,
       __6_,
       hash_fold_t$40,
       __7_,
       __8_,
       __9_,
       ____,
       __$_,
       _$a_,
       _$b_,
       _$c_,
       _$d_,
       _$e_,
       _$f_,
       _$g_,
       _$h_,
       _$i_,
       _$j_,
       _$0_,
       _$Z_,
       _$Y_,
       _$X_,
       _$W_,
       _$V_,
       _$U_,
       _$T_,
       _$S_,
       _$R_,
       _$Q_,
       _$P_,
       _$O_,
       _$N_,
       _$M_,
       _$L_,
       _$K_,
       _$J_,
       _$I_,
       _$H_,
       _$G_,
       _$F_,
       _$E_,
       _$D_,
       _$C_,
       _$B_,
       _$A_,
       _$z_,
       _$y_,
       _$x_,
       _$w_,
       _$v_,
       _$u_,
       _$t_,
       _$s_,
       _$r_,
       _$q_,
       _$p_,
       _$o_,
       _$n_,
       _$m_,
       _$l_,
       _$k_,
       bin_shape_sexp_option$0,
       bin_size_sexp_option$0,
       bin_write_sexp_option$0,
       bin_writer_sexp_option$0,
       bin_read_sexp_option$2,
       bin_read_sexp_option$1,
       bin_reader_sexp_option$0,
       bin_sexp_option$0,
       compare_sexp_option$0,
       hash_fold_sexp_option,
       bin_shape_sexp_list$0,
       bin_size_sexp_list$0,
       bin_write_sexp_list$0,
       bin_writer_sexp_list$0,
       bin_read_sexp_list$2,
       bin_read_sexp_list$1,
       bin_reader_sexp_list$0,
       bin_sexp_list$0,
       compare_sexp_list$0,
       hash_fold_sexp_list];
    caml_register_global
     (5108,Core_kernel_Stable_internal,"Core_kernel__Stable_internal");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Float_with_fin);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$338);
    caml_call1(Expect_test_collector[4][1],cst_src_float_with_finite_only);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$339,cst$124);
    var Nan_or_inf=[248,cst_Core_kernel_Float_with_fin$0,caml_fresh_oo_id(0)];
    function _aab_(param)
     {if(param === Nan_or_inf)return _aac_;throw [0,Assert_failure,_aad_]}
    caml_call3(Sexplib0_Sexp_conv[51][2],0,Nan_or_inf,_aab_);
    var compare$74=Ppx_compare_lib[4][3];
    function hash$40(x){return caml_call1(_$i_,x)}
    function verify(t)
     {var match=runtime.caml_classify_float(t);
      if(3 <= match)throw Nan_or_inf;
      return 0}
    function of_binable$5(t){verify(t);return t}
    function to_binable$5(t){verify(t);return t}
    var
     include$105=
      caml_call1
       (caml_call1
         (Stable$0[1][1],
          [0,
           bin_shape_t$51,
           bin_size_t$5,
           bin_write_t$5,
           bin_read_t$11,
           bin_read_t$12]),
        [0,to_binable$5,of_binable$5]),
     bin_size_t$73=include$105[1],
     bin_write_t$74=include$105[2],
     bin_read_t$146=include$105[3],
     bin_read_t$147=include$105[4],
     bin_shape_t$91=include$105[5],
     bin_writer_t$79=include$105[6],
     bin_reader_t$79=include$105[7],
     bin_t$79=include$105[8];
    function t_of_sexp$72(sexp)
     {if(0 === sexp[0])
       {var t=caml_call1(_Iw_,sexp);
        try
         {verify(t)}
        catch(e)
         {e = caml_wrap_exception(e);
          caml_call2(_es_,caml_call1(Base_Exn[9],e),sexp)}
        return t}
      return caml_call2(_es_,cst_Decimal_t_of_sexp_Expected,sexp)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$340);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Float_with_fin$1);
    var
     Core_kernel_Float_with_finite_=
      [0,
       bin_size_t$73,
       bin_write_t$74,
       bin_read_t$146,
       bin_read_t$147,
       bin_shape_t$91,
       bin_writer_t$79,
       bin_reader_t$79,
       bin_t$79,
       t_of_sexp$72,
       sexp_of_t$46,
       compare$74,
       hash_fold_t$40,
       hash$40,
       [0,
        [0,
         bin_size_t$73,
         bin_write_t$74,
         bin_read_t$146,
         bin_read_t$147,
         bin_shape_t$91,
         bin_writer_t$79,
         bin_reader_t$79,
         bin_t$79,
         t_of_sexp$72,
         sexp_of_t$46,
         compare$74,
         hash_fold_t$40,
         hash$40]]];
    caml_register_global
     (5109,
      Core_kernel_Float_with_finite_,
      "Core_kernel__Float_with_finite_only_serialization");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Percent);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$341);
    caml_call1(Expect_test_collector[4][1],cst_src_percent_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$342,cst$125);
    function hash$41(x){return hash_float(x)}
    var
     Typename_of_t$25=caml_call1(Typerep_lib_Make_typename[1],[0,name$63]),
     name_of_t$17=Typename_of_t$25[1],
     typerep_of_t$25=[9,[0,name_of_t$17,[0,typerep_of_float]]];
    function of_mult(f){return f}
    function to_mult(t){return t}
    function of_percentage(f){return f / 100.}
    function to_percentage(t){return t * 100.}
    function of_bp(f){return f / 10000.}
    function to_bp(t){return t * 10000.}
    function of_bp_int(i){return caml_call1(_IU_,i) / 10000.}
    function to_bp_int(t){return caml_call1(_IV_,t * 10000.)}
    function round_significant(p,significant_digits)
     {return caml_call2(_Ji_,p,significant_digits)}
    function round_decimal_mult(p,decimal_digits)
     {return caml_call2(_Jj_,p,decimal_digits)}
    function round_decimal_percentage(p,decimal_digits)
     {return caml_call2(_Jj_,p * 100.,decimal_digits) / 100.}
    function round_decimal_bp(p,decimal_digits)
     {return caml_call2(_Jj_,p * 10000.,decimal_digits) / 10000.}
    function sexp_of_t$86(param)
     {if(typeof param === "number")
       return _aae_;
      else
       switch(param[0])
        {case 0:
          var v0=param[1],v0$0=caml_call1(sexp_of_t$48,v0);
          return [1,[0,_aaf_,[0,v0$0,0]]];
         case 1:
          var v0$1=param[1],v0$2=caml_call1(sexp_of_t$48,v0$1);
          return [1,[0,_aag_,[0,v0$2,0]]];
         case 2:
          var v0$3=param[1],v0$4=caml_call1(sexp_of_t$48,v0$3);
          return [1,[0,_aah_,[0,v0$4,0]]];
         case 3:
          var v0$5=param[1],v0$6=caml_call1(sexp_of_t$48,v0$5);
          return [1,[0,_aai_,[0,v0$6,0]]];
         case 4:
          var v0$7=param[1],v0$8=caml_call1(sexp_of_t$48,v0$7);
          return [1,[0,_aaj_,[0,v0$8,0]]];
         case 5:
          var v0$9=param[1],v0$10=caml_call1(sexp_of_t$48,v0$9);
          return [1,[0,_aak_,[0,v0$10,0]]];
         default:
          var v0$11=param[1],v0$12=caml_call1(sexp_of_t$48,v0$11);
          return [1,[0,_aal_,[0,v0$12,0]]]}}
    function exponent(precision){return [0,precision]}
    function exponent_E(precision){return [1,precision]}
    function decimal(precision){return [2,precision]}
    var ocaml=0;
    function compact(precision){return [3,precision]}
    function compact_E(precision){return [4,precision]}
    function hex(precision){return [5,precision]}
    function hex_E(precision){return [6,precision]}
    function format(x,t)
     {var x_abs=caml_call1(abs,x);
      function string(float$0)
       {if(typeof t === "number")
         var _a8H_=caml_call1(_fw_,_aam_);
        else
         switch(t[0])
          {case 0:
            var precision=t[1],_a8H_=caml_call2(_fw_,_aan_,precision);break;
           case 1:
            var precision$0=t[1],_a8H_=caml_call2(_fw_,_aao_,precision$0);
            break;
           case 2:
            var precision$1=t[1],_a8H_=caml_call2(_fw_,_aap_,precision$1);
            break;
           case 3:
            var precision$2=t[1],_a8H_=caml_call2(_fw_,_aaq_,precision$2);
            break;
           case 4:
            var precision$3=t[1],_a8H_=caml_call2(_fw_,_aar_,precision$3);
            break;
           case 5:
            var precision$4=t[1],_a8H_=caml_call2(_fw_,_aas_,precision$4);
            break;
           default:
            var precision$5=t[1],_a8H_=caml_call2(_fw_,_aat_,precision$5)}
        return caml_call1(_a8H_,float$0)}
      return caml_call2(symbol$23,x_abs,0.)
              ?cst_0x
              :caml_call2(symbol$21,x_abs,1.)
                ?caml_call2(_Gp_,string(x * 1.),cst_x)
                :caml_call2(symbol$21,x_abs,0.01)
                  ?caml_call2(_Gp_,string(x * 100.),cst$126)
                  :caml_call2(_Gp_,string(x * 10000.),cst_bp)}
    function to_string$21(x)
     {var x_abs=caml_call1(abs,x);
      function string(float$0){return caml_call2(_fw_,_aau_,float$0)}
      return caml_call2(symbol$23,x_abs,0.)
              ?cst_0x$0
              :caml_call2(symbol$21,x_abs,1.)
                ?caml_call2(_Gp_,string(x * 1.),cst_x$0)
                :caml_call2(symbol$21,x_abs,0.01)
                  ?caml_call2(_Gp_,string(x * 100.),cst$127)
                  :caml_call2(_Gp_,string(x * 10000.),cst_bp$0)}
    function really_of_string(str,float_of_string)
     {var match=caml_call2(_CZ_,str,cst_x$1);
      if(match){var str$0=match[1];return caml_call1(float_of_string,str$0)}
      var match$0=caml_call2(_CZ_,str,cst$128);
      if(match$0)
       {var str$1=match$0[1];return caml_call1(float_of_string,str$1) * 0.01}
      var match$1=caml_call2(_CZ_,str,cst_bp$1);
      if(match$1)
       {var str$2=match$1[1];
        return caml_call1(float_of_string,str$2) / 10000.}
      return caml_call3(_Pe_,_aav_,str,0)}
    function of_string$18(str)
     {function float$0(str){return t_of_sexp$72([0,str])}
      return really_of_string(str,float$0)}
    var
     _aaw_=caml_call1(Stable[5][1],[0,of_string$18,to_string$21]),
     _aax_=_aaw_[1],
     _aay_=_aaw_[2],
     _aaz_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$177),0,bin_shape_t$51],0],
     _aaA_=caml_call1(Bin_prot_Shape[4][1],cst_src_percent_ml_133_8),
     group$109=caml_call2(Bin_prot_Shape[6],_aaA_,_aaz_),
     _aaB_=caml_call1(Bin_prot_Shape[2][1],cst_t$178),
     bin_shape_t$92=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$109,_aaB_),0),
     bin_writer_t$80=[0,bin_size_t$5,bin_write_t$5],
     bin_reader_t$80=[0,bin_read_t$11,bin_read_t$12],
     bin_t$80=[0,bin_shape_t$92,bin_writer_t$80,bin_reader_t$80];
    function t_of_sexp$73(sexp)
     {try
       {var float$0=caml_call1(_Iw_,sexp);return float$0}
      catch(_a8G_){return caml_call1(_aax_,sexp)}}
    var
     include$106=
      _xj_
       ([0,
         bin_size_t$5,
         bin_write_t$5,
         bin_read_t$11,
         bin_read_t$12,
         bin_shape_t$92,
         bin_writer_t$80,
         bin_reader_t$80,
         bin_t$80,
         compare$40,
         t_of_sexp$73,
         _aay_]),
     symbol$178=include$106[1],
     symbol$179=include$106[2],
     symbol$180=include$106[3],
     symbol$181=include$106[4],
     symbol$182=include$106[5],
     symbol$183=include$106[6],
     equal$37=include$106[7],
     compare$75=include$106[8],
     min$15=include$106[9],
     max$15=include$106[10],
     ascending$15=include$106[11],
     descending$15=include$106[12],
     between$15=include$106[13],
     clamp_exn$15=include$106[14],
     clamp$15=include$106[15],
     validate_lbound$15=include$106[16],
     validate_ubound$15=include$106[17],
     validate_bound$15=include$106[18],
     Replace_polymorphic_compare$14=include$106[19],
     comparator$22=include$106[20],
     Map$20=include$106[21],
     Set$20=include$106[22],
     _aaC_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$179),0,bin_shape_t$51],0],
     _aaD_=caml_call1(Bin_prot_Shape[4][1],cst_src_percent_ml_148_6),
     group$110=caml_call2(Bin_prot_Shape[6],_aaD_,_aaC_),
     _aaE_=caml_call1(Bin_prot_Shape[2][1],cst_t$180),
     bin_shape_t$93=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$110,_aaE_),0),
     bin_writer_t$81=[0,bin_size_t$5,bin_write_t$5],
     bin_reader_t$81=[0,bin_read_t$11,bin_read_t$12],
     bin_t$81=[0,bin_shape_t$93,bin_writer_t$81,bin_reader_t$81];
    function hash$42(x){return hash$41(x)}
    var
     Typename_of_t$26=caml_call1(Typerep_lib_Make_typename[1],[0,name$64]),
     typename_of_t$25=Typename_of_t$26[2],
     name_of_t$18=Typename_of_t$26[1],
     typerep_of_t$26=[9,[0,name_of_t$18,[0,typerep_of_t$25]]];
    function is_none$0(t){return caml_call1(is_nan,t)}
    function some_is_representable$0(t){return 1 - is_none$0(t)}
    function some$0(_a8F_){return _a8F_}
    function unchecked_value$0(_a8E_){return _a8E_}
    function to_option$0(t){return some_is_representable$0(t)?[0,t]:0}
    function of_option$0(opt){if(opt){var v=opt[1];return v}return none}
    function value_exn$0(t)
     {if(some_is_representable$0(t))return t;
      var
       _a8D_=
        [0,caml_call1(Sexplib0_Sexp_conv[7],cst_Percent_Option_value_exn_n),0];
      return caml_call1
              (_od_,
               [1,
                [0,
                 caml_call1(Sexplib0_Sexp_conv[7],cst_src_percent_ml_167_31),
                 _a8D_]])}
    function value$3(t,default$0)
     {return some_is_representable$0(t)?t:default$0}
    function sexp_of_t$87(t)
     {return caml_call2(sexp_of_t$33,_aay_,to_option$0(t))}
    function t_of_sexp$74(sexp)
     {return of_option$0(caml_call1(caml_call1(t_of_sexp$26,_aax_),sexp))}
    var
     Optional_syntax$1=[0,is_none$0,unchecked_value$0],
     Optional_syntax$2=[0,Optional_syntax$1];
    function is_zero(t){return caml_call2(symbol$180,t,0.)}
    function apply$0(t,f){return t * f}
    function scale$0(t,f){return t * f}
    function of_string_allow_nan_and_inf(str)
     {return really_of_string(str,_Ix_)}
    function t_of_sexp_allow_nan_and_inf(sexp)
     {return of_string_allow_nan_and_inf(caml_call1(to_string$0,sexp))}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$343);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Percent$0);
    var
     Core_kernel_Percent=
      [0,
       hash_fold_t$17,
       hash$41,
       of_string$18,
       to_string$21,
       _aax_,
       _aay_,
       bin_size_t$5,
       bin_write_t$5,
       bin_read_t$11,
       bin_read_t$12,
       bin_shape_t$51,
       bin_writer_t$44,
       bin_reader_t$44,
       bin_t$44,
       symbol$178,
       symbol$179,
       symbol$180,
       symbol$181,
       symbol$182,
       symbol$183,
       equal$37,
       compare$75,
       min$15,
       max$15,
       ascending$15,
       descending$15,
       between$15,
       clamp_exn$15,
       clamp$15,
       validate_lbound$15,
       validate_ubound$15,
       validate_bound$15,
       Replace_polymorphic_compare$14,
       comparator$22,
       Map$20,
       Set$20,
       validate_positive,
       validate_non_negative,
       validate_negative,
       validate_non_positive,
       is_positive,
       is_non_negative,
       is_negative,
       is_non_positive,
       symbol$30,
       symbol$31,
       symbol$32,
       symbol$33,
       symbol$34,
       symbol$35,
       robustly_compare,
       quickcheck_generator$8,
       quickcheck_observer$8,
       quickcheck_shrinker$8,
       [0,
        compare$75,
        hash_fold_t$17,
        hash$42,
        sexp_of_t$87,
        typerep_of_t$26,
        typename_of_t$25,
        none,
        some$0,
        some_is_representable$0,
        is_none$0,
        some_is_representable$0,
        value$3,
        value_exn$0,
        unchecked_value$0,
        to_option$0,
        of_option$0,
        Optional_syntax$2],
       symbol$29,
       symbol$27,
       symbol$28,
       zero,
       neg,
       abs,
       is_zero,
       is_nan,
       is_inf,
       apply$0,
       scale$0,
       of_mult,
       to_mult,
       of_percentage,
       to_percentage,
       of_bp,
       to_bp,
       of_bp_int,
       to_bp_int,
       round_significant,
       round_decimal_mult,
       round_decimal_percentage,
       round_decimal_bp,
       t_of_sexp_allow_nan_and_inf,
       of_string_allow_nan_and_inf,
       [0,
        sexp_of_t$86,
        exponent,
        exponent_E,
        decimal,
        ocaml,
        compact,
        compact_E,
        hex,
        hex_E],
       format,
       _IB_,
       sign,
       sign,
       [0,
        [0,
         _aax_,
         _aay_,
         bin_size_t$5,
         bin_write_t$5,
         bin_read_t$11,
         bin_read_t$12,
         bin_shape_t$51,
         bin_writer_t$44,
         bin_reader_t$44,
         bin_t$44,
         compare$75,
         hash_fold_t$17,
         hash$41],
        [0,
         [0,
          bin_size_t$5,
          bin_write_t$5,
          bin_read_t$11,
          bin_read_t$12,
          bin_shape_t$93,
          bin_writer_t$81,
          bin_reader_t$81,
          bin_t$81,
          compare$75,
          hash_fold_t$17,
          hash$42,
          t_of_sexp$74,
          sexp_of_t$87]]]];
    caml_register_global(5110,Core_kernel_Percent,"Core_kernel__Percent");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Span_helpers);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$344);
    caml_call1(Expect_test_collector[4][1],cst_src_span_helpers_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$345,cst$129);
    function randomize(span,percent,scale)
     {var
       _a8z_=caml_call2(symbol$25,percent,0.),
       _a8A_=_a8z_ || caml_call2(symbol$24,percent,1.);
      if(_a8A_)
       {var _a8B_=[0,[1,[0,_aaF_,[0,caml_call1(_aay_,percent),0]]],0];
        caml_call1
         (_od_,
          [1,
           [0,
            caml_call1(Sexplib0_Sexp_conv[7],cst_Span_randomize_percent_is_),
            _a8B_]])}
      var
       _a8C_=caml_call2(_IT_,19067,1. + percent),
       factor=caml_call2(Base_Random[14],1. - percent,_a8C_);
      return caml_call2(scale,span,factor)}
    function format_decimal(n,tenths,units)
     {if(caml_call2(_Np_,tenths,0) && caml_call2(_Nt_,tenths,10))
       {if(caml_call2(_Nt_,n,10) && caml_call2(_Nu_,tenths,0))
         return caml_call4(_fw_,_aaG_,n,tenths,units);
        return caml_call3(_fw_,_aaH_,n,units)}
      throw [0,Assert_failure,_aaI_]}
    function short_string(sign,hr,min,sec,ms,us,ns)
     {var
       s=
        caml_call2(_Np_,hr,24)
         ?format_decimal
           (hr / 24 | 0,
            caml_call1
             (of_float$1,caml_call1(_IU_,caml_call2(symbol$66,hr,24)) / 2.4),
            cst_d$1)
         :caml_call2(_Ns_,hr,0)
           ?format_decimal(hr,min / 6 | 0,cst_h)
           :caml_call2(_Ns_,min,0)
             ?format_decimal(min,sec / 6 | 0,cst_m$2)
             :caml_call2(_Ns_,sec,0)
               ?format_decimal(sec,ms / 100 | 0,cst_s$4)
               :caml_call2(_Ns_,ms,0)
                 ?format_decimal(ms,us / 100 | 0,cst_ms)
                 :caml_call2(_Ns_,us,0)
                   ?format_decimal(us,ns / 100 | 0,cst_us)
                   :caml_call2(_fw_,_aaJ_,ns);
      return sign?s:caml_call2(_Gp_,cst$130,s)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$346);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Span_helpers$0);
    var Core_kernel_Span_helpers=[0,randomize,short_string];
    caml_register_global
     (5111,Core_kernel_Span_helpers,"Core_kernel__Span_helpers");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Span_float);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$347);
    caml_call1(Expect_test_collector[4][1],cst_src_span_float_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$348,cst$131);
    function compare$76(a_001,b_002)
     {if(caml_call2(Ppx_compare_lib[1],a_001,b_002))return 0;
      var n=caml_call2(_H__,a_001[1],b_002[1]);
      if(0 === n)
       {var n$0=caml_call2(compare$42,a_001[2],b_002[2]);
        if(0 === n$0)
         {var n$1=caml_call2(compare$42,a_001[3],b_002[3]);
          if(0 === n$1)
           {var n$2=caml_call2(compare$42,a_001[4],b_002[4]);
            if(0 === n$2)
             {var n$3=caml_call2(compare$42,a_001[5],b_002[5]);
              if(0 === n$3)
               {var n$4=caml_call2(compare$42,a_001[6],b_002[6]);
                return 0 === n$4?caml_call2(compare$42,a_001[7],b_002[7]):n$4}
              return n$3}
            return n$2}
          return n$1}
        return n$0}
      return n}
    function t_of_sexp$75(sexp)
     {if(0 === sexp[0])
       return caml_call2(Sexplib0_Sexp_conv_error[16],tp_loc$28,sexp);
      var
       field_sexps=sexp[1],
       sign_field=[0,0],
       hr_field=[0,0],
       min_field=[0,0],
       sec_field=[0,0],
       ms_field=[0,0],
       us_field=[0,0],
       ns_field=[0,0],
       duplicates=[0,0],
       extra=[0,0],
       param=field_sexps;
      for(;;)
       {if(param)
         {var _a8m_=param[1];
          if(1 === _a8m_[0])
           {var _a8n_=_a8m_[1];
            if(_a8n_)
             {var _a8o_=_a8n_[1];
              if(0 === _a8o_[0])
               {var _a8p_=_a8n_[2],_a8q_=_a8o_[1],switch$0=0;
                if(! _a8p_ || ! _a8p_[2])switch$0 = 1;
                if(switch$0)
                 {var
                   tail=param[2],
                   field_sexp$7=
                    function(_a8y_)
                     {function field_sexp(param)
                       {if(_a8y_)
                         {if(_a8y_[2])throw [0,Assert_failure,_aaK_];
                          var x=_a8y_[1];
                          return x}
                        return caml_call2
                                (Sexplib0_Sexp_conv_error[10],tp_loc$28,sexp)}
                      return field_sexp},
                   field_sexp=field_sexp$7(_a8p_);
                  if(caml_string_notequal(_a8q_,cst_hr))
                   if(caml_string_notequal(_a8q_,cst_min))
                    if(caml_string_notequal(_a8q_,cst_ms$0))
                     if(caml_string_notequal(_a8q_,cst_ns))
                      if(caml_string_notequal(_a8q_,cst_sec))
                       if(caml_string_notequal(_a8q_,cst_sign))
                        if(caml_string_notequal(_a8q_,cst_us$0))
                         {if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_a8q_,extra[1]]}
                        else
                         if(us_field[1])
                          duplicates[1] = [0,_a8q_,duplicates[1]];
                         else
                          {var
                            field_sexp$0=field_sexp(0),
                            fvalue=caml_call1(t_of_sexp$39,field_sexp$0);
                           us_field[1] = [0,fvalue]}
                       else
                        if(sign_field[1])
                         duplicates[1] = [0,_a8q_,duplicates[1]];
                        else
                         {var
                           field_sexp$1=field_sexp(0),
                           fvalue$0=caml_call1(_HY_,field_sexp$1);
                          sign_field[1] = [0,fvalue$0]}
                      else
                       if(sec_field[1])
                        duplicates[1] = [0,_a8q_,duplicates[1]];
                       else
                        {var
                          field_sexp$2=field_sexp(0),
                          fvalue$1=caml_call1(t_of_sexp$39,field_sexp$2);
                         sec_field[1] = [0,fvalue$1]}
                     else
                      if(ns_field[1])
                       duplicates[1] = [0,_a8q_,duplicates[1]];
                      else
                       {var
                         field_sexp$3=field_sexp(0),
                         fvalue$2=caml_call1(t_of_sexp$39,field_sexp$3);
                        ns_field[1] = [0,fvalue$2]}
                    else
                     if(ms_field[1])
                      duplicates[1] = [0,_a8q_,duplicates[1]];
                     else
                      {var
                        field_sexp$4=field_sexp(0),
                        fvalue$3=caml_call1(t_of_sexp$39,field_sexp$4);
                       ms_field[1] = [0,fvalue$3]}
                   else
                    if(min_field[1])
                     duplicates[1] = [0,_a8q_,duplicates[1]];
                    else
                     {var
                       field_sexp$5=field_sexp(0),
                       fvalue$4=caml_call1(t_of_sexp$39,field_sexp$5);
                      min_field[1] = [0,fvalue$4]}
                  else
                   if(hr_field[1])
                    duplicates[1] = [0,_a8q_,duplicates[1]];
                   else
                    {var
                      field_sexp$6=field_sexp(0),
                      fvalue$5=caml_call1(t_of_sexp$39,field_sexp$6);
                     hr_field[1] = [0,fvalue$5]}
                  var param=tail;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[10],tp_loc$28,_a8m_)}
        if(duplicates[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],tp_loc$28,duplicates[1],sexp);
        if(extra[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[13],tp_loc$28,extra[1],sexp);
        var
         _a8r_=sign_field[1],
         _a8s_=hr_field[1],
         _a8t_=min_field[1],
         _a8u_=sec_field[1],
         _a8v_=ms_field[1],
         _a8w_=us_field[1],
         _a8x_=ns_field[1];
        if(_a8r_ && _a8s_ && _a8t_ && _a8u_ && _a8v_ && _a8w_ && _a8x_)
         {var
           ns_value=_a8x_[1],
           us_value=_a8w_[1],
           ms_value=_a8v_[1],
           sec_value=_a8u_[1],
           min_value=_a8t_[1],
           hr_value=_a8s_[1],
           sign_value=_a8r_[1];
          return [0,
                  sign_value,
                  hr_value,
                  min_value,
                  sec_value,
                  ms_value,
                  us_value,
                  ns_value]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[15],
                 tp_loc$28,
                 sexp,
                 [0,
                  [0,0 === sign_field[1]?1:0,cst_sign$0],
                  [0,
                   [0,0 === hr_field[1]?1:0,cst_hr$0],
                   [0,
                    [0,0 === min_field[1]?1:0,cst_min$0],
                    [0,
                     [0,0 === sec_field[1]?1:0,cst_sec$0],
                     [0,
                      [0,0 === ms_field[1]?1:0,cst_ms$1],
                      [0,
                       [0,0 === us_field[1]?1:0,cst_us$1],
                       [0,[0,0 === ns_field[1]?1:0,cst_ns$0],0]]]]]]])}}
    function sexp_of_t$88(param)
     {var
       v_ns=param[7],
       v_us=param[6],
       v_ms=param[5],
       v_sec=param[4],
       v_min=param[3],
       v_hr=param[2],
       v_sign=param[1],
       arg=caml_call1(sexp_of_t$48,v_ns),
       bnds=[0,[1,[0,_aaL_,[0,arg,0]]],0],
       arg$0=caml_call1(sexp_of_t$48,v_us),
       bnds$0=[0,[1,[0,_aaM_,[0,arg$0,0]]],bnds],
       arg$1=caml_call1(sexp_of_t$48,v_ms),
       bnds$1=[0,[1,[0,_aaN_,[0,arg$1,0]]],bnds$0],
       arg$2=caml_call1(sexp_of_t$48,v_sec),
       bnds$2=[0,[1,[0,_aaO_,[0,arg$2,0]]],bnds$1],
       arg$3=caml_call1(sexp_of_t$48,v_min),
       bnds$3=[0,[1,[0,_aaP_,[0,arg$3,0]]],bnds$2],
       arg$4=caml_call1(sexp_of_t$48,v_hr),
       bnds$4=[0,[1,[0,_aaQ_,[0,arg$4,0]]],bnds$3],
       arg$5=caml_call1(_HZ_,v_sign),
       bnds$5=[0,[1,[0,_aaR_,[0,arg$5,0]]],bnds$4];
      return [1,bnds$5]}
    var Parts=[0,compare$76,t_of_sexp$75,sexp_of_t$88];
    function next$1(t){return caml_call2(_IT_,19067,t)}
    function prev$2(t){return caml_call2(_IT_,759637122,t)}
    var
     include$107=caml_call1(Robust_compare[1],[0,1e-06]),
     robust_comparison_tolerance=include$107[1],
     symbol$184=include$107[2],
     symbol$185=include$107[3],
     symbol$186=include$107[4],
     symbol$187=include$107[5],
     symbol$188=include$107[6],
     symbol$189=include$107[7],
     robustly_compare$1=include$107[8],
     nanosecond=caml_call1(of_float,1e-09),
     microsecond=caml_call1(of_float,1e-06),
     millisecond=caml_call1(of_float,0.001),
     second$0=caml_call1(of_float,1.),
     minute=caml_call1(of_float,60.),
     hour=caml_call1(of_float,3600.),
     day$0=caml_call1(of_float,86400.);
    function to_parts(t)
     {var
       sign$0=caml_call1(sign,t),
       t$0=caml_call1(abs,t),
       integral=caml_call1(_I3_,t$0),
       fractional=t$0 - integral,
       seconds=caml_call1(_Ja_,integral),
       nanoseconds=caml_call1(_Jc_,fractional * 1000000000.);
      if(caml_call2(equal$21,nanoseconds,1000000000))
       var nanoseconds$0=0,seconds$0=caml_call1(next$0,seconds);
      else
       var nanoseconds$0=nanoseconds,seconds$0=seconds;
      var
       sec=seconds$0 % 60 | 0,
       minutes=seconds$0 / 60 | 0,
       min=minutes % 60 | 0,
       hr=minutes / 60 | 0,
       ns=nanoseconds$0 % 1000 | 0,
       microseconds=nanoseconds$0 / 1000 | 0,
       us=microseconds % 1000 | 0,
       milliseconds=microseconds / 1000 | 0;
      return [0,sign$0,hr,min,sec,milliseconds,us,ns]}
    function symbol$190(t,f){return caml_call1(of_float,t / f)}
    function symbol$191(f,t){return f / t}
    function to_ns(x){return x * 1000000000.}
    function to_us(x){return x * 1000000.}
    function to_ms(x){return x * 1000.}
    function of_span_since_epoch(x){return x}
    function to_min(x){return x / minute}
    function to_hr(x){return x / hour}
    function to_day(x){return x / day$0}
    function to_int63_seconds_round_down_ex(x){return caml_call1(_Jd_,x)}
    function symbol$192(f,t){return caml_call1(of_float,f * t)}
    function of_ns(x){return caml_call1(of_float,x / 1000000000.)}
    function of_us(x){return caml_call1(of_float,x / 1000000.)}
    function of_ms(x){return caml_call1(of_float,x / 1000.)}
    function to_span_since_epoch(x){return caml_call1(of_float,x)}
    function of_int_sec(x){return to_span_since_epoch(caml_call1(_IU_,x))}
    function of_int32_seconds(sec)
     {return to_span_since_epoch(caml_call1(to_float$1,sec))}
    function of_int63_seconds(sec)
     {return to_span_since_epoch(caml_call1(to_float$3,sec))}
    function of_min(x){return symbol$192(x,minute)}
    function of_hr(x){return symbol$192(x,hour)}
    function of_day(x){return symbol$192(x,day$0)}
    function divide_by_unit_of_time(t,unit_of_time)
     {switch(unit_of_time)
       {case 0:return t * 1000000000.;
        case 1:return t * 1000000.;
        case 2:return t * 1000.;
        case 3:return t;
        case 4:return to_min(t);
        case 5:return to_hr(t);
        default:return to_day(t)}}
    function scale_by_unit_of_time(float$0,unit_of_time)
     {switch(unit_of_time)
       {case 0:return of_ns(float$0);
        case 1:return of_us(float$0);
        case 2:return of_ms(float$0);
        case 3:return to_span_since_epoch(float$0);
        case 4:return of_min(float$0);
        case 5:return of_hr(float$0);
        default:return of_day(float$0)}}
    function create$22(opt,_a8f_,_a8e_,_a8d_,_a8c_,_a8b_,_a8a_,_a7$_,param)
     {if(opt)var sth=opt[1],sign=sth;else var sign=2;
      if(_a8f_)var sth$0=_a8f_[1],day=sth$0;else var day=0;
      if(_a8e_)var sth$1=_a8e_[1],hr=sth$1;else var hr=0;
      if(_a8d_)var sth$2=_a8d_[1],min=sth$2;else var min=0;
      if(_a8c_)var sth$3=_a8c_[1],sec=sth$3;else var sec=0;
      if(_a8b_)var sth$4=_a8b_[1],ms=sth$4;else var ms=0;
      if(_a8a_)var sth$5=_a8a_[1],us=sth$5;else var us=0;
      if(_a7$_)var sth$6=_a7$_[1],ns=sth$6;else var ns=0;
      var
       _a8g_=of_ns(caml_call1(_IU_,ns)),
       _a8h_=of_us(caml_call1(_IU_,us)),
       _a8i_=of_ms(caml_call1(_IU_,ms)),
       _a8j_=to_span_since_epoch(caml_call1(_IU_,sec)),
       _a8k_=of_min(caml_call1(_IU_,min)),
       _a8l_=of_hr(caml_call1(_IU_,hr)),
       t=
        caml_call2
         (symbol$27,
          caml_call2
           (symbol$27,
            caml_call2
             (symbol$27,
              caml_call2
               (symbol$27,
                caml_call2
                 (symbol$27,
                  caml_call2(symbol$27,of_day(caml_call1(_IU_,day)),_a8l_),
                  _a8k_),
                _a8j_),
              _a8i_),
            _a8h_),
          _a8g_);
      return sign?t:caml_call2(symbol$28,zero,t)}
    function randomize$0(t,percent){return randomize(t,percent,scale)}
    function to_short_string(t)
     {var
       match=to_parts(t),
       ns=match[7],
       us=match[6],
       ms=match[5],
       sec=match[4],
       min=match[3],
       hr=match[2],
       sign=match[1];
      return short_string(sign,hr,min,sec,ms,us,ns)}
    function of_sexp_error_exn(exn,sexp)
     {return caml_call2(_Od_,caml_call1(Base_Exn[9],exn),sexp)}
    var T_of_sexp=[248,cst_Core_kernel_Span_float_Sta,caml_fresh_oo_id(0)];
    function _aaT_(param)
     {if(param[1] === T_of_sexp)
       {var
         v1=param[3],
         v0=param[2],
         v0$0=caml_call1(sexp_of_t$37,v0),
         v1$0=caml_call1(_QG_,v1);
        return [1,[0,_aaU_,[0,v0$0,[0,v1$0,0]]]]}
      throw [0,Assert_failure,_aaV_]}
    caml_call3(Sexplib0_Sexp_conv[51][2],0,T_of_sexp,_aaT_);
    var
     T_of_sexp_expected_atom_but_go=
      [248,cst_Core_kernel_Span_float_Sta$0,caml_fresh_oo_id(0)];
    function _aaW_(param)
     {if(param[1] === T_of_sexp_expected_atom_but_go)
       {var v0=param[2],v0$0=caml_call1(sexp_of_t$37,v0);
        return [1,[0,_aaX_,[0,v0$0,0]]]}
      throw [0,Assert_failure,_aaY_]}
    caml_call3
     (Sexplib0_Sexp_conv[51][2],0,T_of_sexp_expected_atom_but_go,_aaW_);
    function t_of_sexp_v1_v2(sexp,is_v2)
     {if(0 === sexp[0])
       {var x=sexp[1];
        try
         {try
           {if(caml_string_notequal(x,cst$132))
             {var
               float$0=
                function(n)
                 {var s=caml_call2(_C5_,x,n);
                  if(caml_string_notequal(s,cst$133))
                   {var v=caml_call1(_Ix_,s),_a7__=caml_call1(_IB_,v);
                    caml_call1(Base_Validate[17],_a7__);
                    return v}
                  return caml_call1(_Gb_,cst_no_number_given)},
               len=caml_ml_string_length(x),
               match=caml_string_get(x,caml_call2(symbol$61,len,1)),
               switcher=match - 100 | 0,
               switch$0=0;
              if(15 < switcher >>> 0)
               switch$0 = 1;
              else
               {var switch$1=0;
                switch(switcher)
                 {case 0:var _a78_=of_day(float$0(1));break;
                  case 4:var _a78_=of_hr(float$0(1));break;
                  case 9:var _a78_=of_min(float$0(1));break;
                  case 15:
                   var switch$2=0;
                   if
                    (caml_call2(symbol$54,len,2)
                     &&
                     caml_call2
                      (_FH_,caml_string_get(x,caml_call2(symbol$61,len,2)),109))
                    {var _a78_=of_ms(float$0(2));switch$2 = 1}
                   if(! switch$2)
                    {var switch$3=0;
                     if
                      (is_v2
                       &&
                       caml_call2(symbol$54,len,2)
                       &&
                       caml_call2
                        (_FH_,caml_string_get(x,caml_call2(symbol$61,len,2)),117))
                      {var _a78_=of_us(float$0(2));switch$3 = 1}
                     if(! switch$3)
                      {var switch$4=0;
                       if
                        (is_v2
                         &&
                         caml_call2(symbol$54,len,2)
                         &&
                         caml_call2
                          (_FH_,caml_string_get(x,caml_call2(symbol$61,len,2)),110))
                        {var _a78_=of_ns(float$0(2));switch$4 = 1}
                       if(! switch$4)var _a78_=caml_call1(of_float,float$0(1))}}
                   break;
                  default:switch$0 = 1;switch$1 = 1}
                if(! switch$1)var _a76_=_a78_}
              if(switch$0)
               var
                _a76_=
                 is_v2
                  ?caml_call1(_Gb_,cst_Time_spans_must_end_in_ns_)
                  :caml_call1(_Gb_,cst_Time_spans_must_end_in_ms_);
              var _a77_=_a76_}
            else
             var _a77_=caml_call1(_Gb_,cst_empty_string);
            var _a79_=_a77_}
          catch(exn)
           {exn = caml_wrap_exception(exn);
            var _a79_=caml_call4(_Pf_,_aaS_,x,caml_call1(Base_Exn[9],exn),0)}
          return _a79_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          return of_sexp_error_exn([0,T_of_sexp,sexp,exn],sexp)}}
      return of_sexp_error_exn([0,T_of_sexp_expected_atom_but_go,sexp],sexp)}
    function string$1(is_v2,suffix,float$0)
     {return is_v2
              ?caml_call2(_Gp_,caml_call1(Sexplib_Conv[1][1],float$0),suffix)
              :caml_call3(_fw_,_aaZ_,float$0,suffix)}
    function sexp_of_t_v1_v2(t,is_v2)
     {var match=caml_call1(_JB_,t);
      switch(match)
       {case 0:var _a75_=caml_call2(symbol$24,t,zero)?cst_inf:cst_inf$0;break;
        case 1:var _a75_=cst_nan;break;
        case 2:
         var abs_t=caml_call1(of_float,caml_call1(abs,t)),switch$0=0;
         if(is_v2 && caml_call2(symbol$25,abs_t,microsecond))
          var _a75_=string$1(is_v2,cst_ns$1,t * 1000000000.);
         else
          switch$0 = 1;
         if(switch$0)
          {var switch$1=0;
           if(is_v2 && caml_call2(symbol$25,abs_t,millisecond))
            var _a75_=string$1(is_v2,cst_us$2,t * 1000000.);
           else
            switch$1 = 1;
           if(switch$1)
            var
             _a75_=
              caml_call2(symbol$25,abs_t,second$0)
               ?string$1(is_v2,cst_ms$2,t * 1000.)
               :caml_call2(symbol$25,abs_t,minute)
                 ?string$1(is_v2,cst_s$5,t)
                 :caml_call2(symbol$25,abs_t,hour)
                   ?string$1(is_v2,cst_m$3,to_min(t))
                   :caml_call2(symbol$25,abs_t,day$0)
                     ?string$1(is_v2,cst_h$0,to_hr(t))
                     :string$1(is_v2,cst_d$2,to_day(t))}
         break;
        default:var _a75_=cst_0s}
      return [0,_a75_]}
    function t_of_sexp$76(sexp){return t_of_sexp_v1_v2(sexp,0)}
    function sexp_of_t$89(t){return sexp_of_t_v1_v2(t,0)}
    function t_of_sexp$77(sexp){return t_of_sexp_v1_v2(sexp,1)}
    function sexp_of_t$90(t){return sexp_of_t_v1_v2(t,1)}
    function to_unit_of_time(t)
     {var abs_t=caml_call1(abs,t);
      return caml_call2(symbol$21,abs_t,day$0)
              ?6
              :caml_call2(symbol$21,abs_t,hour)
                ?5
                :caml_call2(symbol$21,abs_t,minute)
                  ?4
                  :caml_call2(symbol$21,abs_t,second$0)
                    ?3
                    :caml_call2(symbol$21,abs_t,millisecond)
                      ?2
                      :caml_call2(symbol$21,abs_t,microsecond)?1:0}
    function of_unit_of_time(param)
     {switch(param)
       {case 0:return nanosecond;
        case 1:return microsecond;
        case 2:return millisecond;
        case 3:return second$0;
        case 4:return minute;
        case 5:return hour;
        default:return day$0}}
    function suffix_of_unit_of_time(unit_of_time)
     {switch(unit_of_time)
       {case 0:return cst_ns$2;
        case 1:return cst_us$3;
        case 2:return cst_ms$3;
        case 3:return cst_s$6;
        case 4:return cst_m$4;
        case 5:return cst_h$1;
        default:return cst_d$3}}
    function invalid_string$0(string,reason)
     {var
       message=caml_call2(_Gp_,cst_Time_Span_of_string,reason),
       _a74_=[0,caml_call1(Sexplib0_Sexp_conv[7],string),0];
      return caml_call1
              (_od_,[1,[0,caml_call1(Sexplib0_Sexp_conv[7],message),_a74_]])}
    function parse_suffix(string,index)
     {var unit_of_time_list$0=unit_of_time_list;
      for(;;)
       {if(unit_of_time_list$0)
         {var
           rest=unit_of_time_list$0[2],
           unit_of_time=unit_of_time_list$0[1],
           suffix=suffix_of_unit_of_time(unit_of_time);
          if(caml_call3(_Cz_,string,index,suffix))return unit_of_time;
          var unit_of_time_list$0=rest;
          continue}
        return invalid_string$0(string,cst_invalid_span_part_suffix)}}
    function state_is_final(param)
     {switch(param){case 1:case 3:case 6:return 1;default:return 0}}
    function invalid_string$1(string)
     {return invalid_string$0(string,cst_invalid_span_part_magnitud)}
    function of_string$19(string)
     {if(caml_string_notequal(string,cst_INFs))
       {if(caml_string_notequal(string,cst_INFs$0))
         {if(caml_string_notequal(string,cst_NANs))
           {var len=caml_ml_string_length(string);
            if(caml_call2(O$0[9],len,0))
             invalid_string$0(string,cst_empty_input);
            var
             match$0=caml_string_get(string,0),
             switcher$0=match$0 - 43 | 0,
             switch$0=0;
            if(2 < switcher$0 >>> 0)
             switch$0 = 1;
            else
             switch(switcher$0)
              {case 0:var index$3=1,negative=0;break;
               case 1:switch$0 = 1;break;
               default:var index$3=1,negative=1}
            if(switch$0)var index$3=0,negative=0;
            if(caml_call2(O$0[7],index$3,len))
             invalid_string$0(string,cst_empty_input$0);
            var magnitude=zero,index$1=index$3;
            a:
            for(;;)
             {if(caml_call2(equal$21,index$1,len))
               return negative?caml_call1(neg,magnitude):magnitude;
              var index=index$1,state=0;
              for(;;)
               {if(caml_call2(O$0[9],index,len))
                 var
                  suffix_index=
                   state_is_final(state)?index:invalid_string$1(string);
                else
                 {var param=caml_string_get(string,index),switch$1=0;
                  if(70 <= param)
                   if(95 === param)
                    var match=_aa0_;
                   else
                    if(101 === param)switch$1 = 2;else switch$1 = 1;
                  else
                   if(58 <= param)
                    if(69 <= param)switch$1 = 2;else switch$1 = 1;
                   else
                    if(43 <= param)
                     {var switcher=param - 43 | 0;
                      switch(switcher)
                       {case 3:var match=_aa3_;break;
                        case 0:
                        case 2:var match=_aa2_;break;
                        case 1:
                        case 4:switch$1 = 1;break;
                        default:var match=_aa4_}}
                    else
                     switch$1 = 1;
                  switch(switch$1)
                   {case 1:var match=0;break;case 2:var match=_aa1_;break}
                  if(match)
                   {var token=match[1];
                    switch(state)
                     {case 0:
                       var state$0=1 === token?2:token?invalid_string$1(string):1;
                       break;
                      case 1:
                       switch(token)
                        {case 1:var state$0=3;break;
                         case 3:var state$0=invalid_string$1(string);break;
                         case 4:var state$0=4;break;
                         default:var state$0=1}
                       break;
                      case 2:var state$0=token?invalid_string$1(string):3;break;
                      case 3:
                       switch(token)
                        {case 4:var state$0=4;break;
                         case 0:
                         case 2:var state$0=3;break;
                         default:var state$0=invalid_string$1(string)}
                       break;
                      case 4:
                       var state$0=3 === token?5:token?invalid_string$1(string):6;
                       break;
                      case 5:var state$0=token?invalid_string$1(string):6;break;
                      default:
                       var switch$2=0;
                       if(1 === token || 3 <= token)
                        switch$2 = 1;
                       else
                        var state$0=6;
                       if(switch$2)var state$0=invalid_string$1(string)}
                    var
                     index$0=caml_call2(O$0[1],index,1),
                     index=index$0,
                     state=state$0;
                    continue}
                  var
                   suffix_index=
                    state_is_final(state)?index:invalid_string$1(string)}
                var
                 unit_of_time=parse_suffix(string,suffix_index),
                 index$2=
                  caml_call2
                   (symbol$60,
                    suffix_index,
                    caml_ml_string_length(suffix_of_unit_of_time(unit_of_time))),
                 float_string=
                  caml_call3
                   (_BR_,
                    string,
                    index$1,
                    caml_call2(symbol$61,suffix_index,index$1)),
                 float$0=caml_call1(_Ix_,float_string),
                 magnitude$0=
                  caml_call2
                   (symbol$27,
                    magnitude,
                    scale_by_unit_of_time(float$0,unit_of_time)),
                 magnitude=magnitude$0,
                 index$1=index$2;
                continue a}}}
          return to_span_since_epoch(none)}
        return to_span_since_epoch(_IC_)}
      return to_span_since_epoch(_ID_)}
    function string_of_float_without_traili(float$0)
     {var string=caml_call1(_Jt_,float$0);
      return caml_call2(_CC_,string,suffix)
              ?caml_call2(_CX_,string,suffix)
              :string}
    function sum$5(sum_t,unit_of_time,magnitude)
     {return caml_call2
              (symbol$27,sum_t,scale_by_unit_of_time(magnitude,unit_of_time))}
    function to_float_string(abs_t,unit_of_time,fixup_unit_of_time)
     {var
       magnitude=divide_by_unit_of_time(abs_t,unit_of_time),
       sum_t=sum$5(zero,unit_of_time,magnitude);
      if(caml_call2(symbol$23,sum_t,abs_t))
       {var _a70_=suffix_of_unit_of_time(unit_of_time);
        return caml_call2
                (_Gp_,string_of_float_without_traili(magnitude),_a70_)}
      var
       magnitude$0=
        caml_call2(symbol$25,sum_t,abs_t)
         ?magnitude
         :divide_by_unit_of_time(prev$2(abs_t),unit_of_time),
       sum_t$0=sum$5(zero,unit_of_time,magnitude$0),
       rem_t=caml_call2(symbol$28,abs_t,sum_t$0),
       fixup_magnitude=divide_by_unit_of_time(rem_t,fixup_unit_of_time),
       _a71_=suffix_of_unit_of_time(fixup_unit_of_time),
       _a72_=caml_call2(_Gp_,caml_call2(_fw_,_aa5_,fixup_magnitude),_a71_),
       _a73_=caml_call2(_Gp_,suffix_of_unit_of_time(unit_of_time),_a72_);
      return caml_call2
              (_Gp_,string_of_float_without_traili(magnitude$0),_a73_)}
    function to_int_string_and_sum(unit_of_time,abs_t,sum_t)
     {var
       unit_span=of_unit_of_time(unit_of_time),
       rem_t=caml_call2(symbol$28,abs_t,sum_t),
       magnitude=caml_call1(_I3_,rem_t / unit_span),
       new_sum_t=sum$5(sum_t,unit_of_time,magnitude),
       new_rem_t=caml_call2(symbol$28,abs_t,new_sum_t);
      if(caml_call2(symbol$23,new_rem_t,zero))
       var magnitude$0=magnitude;
      else
       if(caml_call2(symbol$25,new_rem_t,zero))
        var magnitude$0=magnitude - 1.;
       else
        var
         next_magnitude=magnitude + 1.,
         next_sum_t=sum$5(sum_t,unit_of_time,next_magnitude),
         next_rem_t=caml_call2(symbol$28,abs_t,next_sum_t),
         magnitude$1=
          caml_call2(symbol$25,next_rem_t,zero)?magnitude:next_magnitude,
         magnitude$0=magnitude$1;
      if(caml_call2(symbol$22,magnitude$0,0.))return [0,cst$134,sum_t];
      var
       new_sum_t$0=sum$5(sum_t,unit_of_time,magnitude$0),
       _a7Z_=suffix_of_unit_of_time(unit_of_time),
       string=
        caml_call2
         (_Gp_,caml_call1(_KR_,caml_call1(of_float$4,magnitude$0)),_a7Z_);
      return [0,string,new_sum_t$0]}
    function symbol$193(x,y)
     {return caml_call1(_BU_,x)?y:caml_call1(_BU_,y)?x:caml_call2(_Gp_,x,y)}
    function to_string$22(t)
     {var float$0=caml_call1(to_float,t);
      if(caml_call1(_JC_,float$0))
       {if(caml_call2(symbol$23,t,zero))return cst_0s$0;
        var
         unit_of_time$0=to_unit_of_time(t),
         abs_t=caml_call1(abs,t),
         sign=caml_call2(symbol$25,t,zero)?cst$137:cst$138;
        if(4 <= unit_of_time$0)
         {var switch$0=0;
          if
           (6
            <=
            unit_of_time$0
            &&
            caml_call2
             (symbol$21,caml_call2(symbol$28,next$1(abs_t),abs_t),day$0))
           var magnitude_string=to_float_string(abs_t,unit_of_time$0,6);
          else
           switch$0 = 1;
          if(switch$0)
           {var
             match=to_int_string_and_sum(6,abs_t,zero),
             sum_t=match[2],
             day_string=match[1],
             match$0=to_int_string_and_sum(5,abs_t,sum_t),
             sum_t$0=match$0[2],
             hour_string=match$0[1],
             match$1=to_int_string_and_sum(4,abs_t,sum_t$0),
             sum_t$1=match$1[2],
             minute_string=match$1[1];
            if(caml_call2(symbol$21,sum_t$1,abs_t))
             var float_string=cst$135;
            else
             {var
               rem_t=caml_call2(symbol$28,abs_t,sum_t$1),
               unit_of_time=to_unit_of_time(rem_t),
               unit_span=of_unit_of_time(unit_of_time),
               magnitude=rem_t / unit_span,
               new_sum_t=sum$5(sum_t$1,unit_of_time,magnitude),
               new_rem_t=caml_call2(symbol$28,abs_t,new_sum_t),
               _a7X_=caml_call1(abs,new_rem_t);
              if(caml_call2(symbol$22,caml_call1(abs,rem_t),_a7X_))
               var float_string=cst$136;
              else
               var
                order_of_magnitude_of_first_di=
                 caml_call1(_Ja_,caml_log10_float(rem_t)),
                half_ulp=
                 symbol$190(caml_call2(symbol$28,abs_t,prev$2(abs_t)),2.),
                order_of_magnitude_of_final_di=
                 caml_call1
                  (prev$1,caml_call1(_Jb_,caml_log10_float(half_ulp))),
                _a7Y_=caml_call2(O$0[1],1,order_of_magnitude_of_first_di),
                number_of_digits=
                 caml_call2(O$0[2],_a7Y_,order_of_magnitude_of_final_di),
                suffix=suffix_of_unit_of_time(unit_of_time),
                float_string=
                 caml_call2
                  (_Gp_,
                   caml_call3(_fw_,_aa6_,number_of_digits,magnitude),
                   suffix)}
            var
             magnitude_string=
              symbol$193
               (day_string,
                symbol$193(hour_string,symbol$193(minute_string,float_string)))}}
        else
         var magnitude_string=to_float_string(abs_t,unit_of_time$0,0);
        return symbol$193(sign,magnitude_string)}
      return caml_call1(is_nan,float$0)
              ?cst_NANs$0
              :caml_call1(is_negative,float$0)?cst_INFs$1:cst_INFs$2}
    function sexp_of_t$91(t){return [0,to_string$22(t)]}
    function t_of_sexp$78(s)
     {if(0 === s[0])
       {var x=s[1];
        try
         {var _a7W_=of_string$19(x);return _a7W_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          return caml_call2(_Od_,caml_call1(Base_Exn[9],exn),s)}}
      return caml_call2(_Od_,cst_Time_Span_Stable_V3_t_of_s,s)}
    function to_string_hum$9(opt,_a7V_,_a7U_,unit_of_time,t)
     {if(opt)var sth=opt[1],delimiter=sth;else var delimiter=95;
      if(_a7V_)var sth$0=_a7V_[1],decimals=sth$0;else var decimals=3;
      if(_a7U_)
       var sth$1=_a7U_[1],align_decimal=sth$1;
      else
       var align_decimal=0;
      var match=caml_call2(_x6_,unit_of_time,to_unit_of_time(t));
      switch(match)
       {case 0:var suffix=suffix$0,float$0=t * 1000000000.;break;
        case 1:var suffix=suffix$1,float$0=t * 1000000.;break;
        case 2:var suffix=suffix$2,float$0=t * 1000.;break;
        case 3:var suffix=suffix$3,float$0=t;break;
        case 4:var suffix=suffix$4,float$0=to_min(t);break;
        case 5:var suffix=suffix$5,float$0=to_hr(t);break;
        default:var float$1=to_day(t),suffix=suffix$6,float$0=float$1}
      var
       prefix=
        caml_call4
         (_Ju_,[0,delimiter],[0,decimals],[0,1 - align_decimal],float$0),
       switch$0=0;
      if
       (align_decimal
        &&
        caml_call2(symbol$56,caml_ml_string_length(suffix),1))
       {var suffix$7=caml_call2(_Gp_,suffix,cst$139);switch$0 = 1}
      if(! switch$0)var suffix$7=suffix;
      return caml_call2(_Gp_,prefix,suffix$7)}
    function gen_incl$0(lo,hi)
     {var _a7T_=caml_call2(_JT_,lo,hi);
      return caml_call2(_uW_[10],_a7T_,to_span_since_epoch)}
    function gen_uniform_incl$0(lo,hi)
     {var _a7S_=caml_call2(_JS_,lo,hi);
      return caml_call2(_uW_[10],_a7S_,to_span_since_epoch)}
    var
     include$108=
      caml_call1(Base_Pretty_printer[2],[0,module_name$8,to_string$22]),
     _aa7_=include$108[1],
     _aa8_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$181),0,bin_shape_t$51],0],
     _aa9_=caml_call1(Bin_prot_Shape[4][1],cst_src_span_float_ml_748_4),
     group$111=caml_call2(Bin_prot_Shape[6],_aa9_,_aa8_),
     _aa__=caml_call1(Bin_prot_Shape[2][1],cst_t$182),
     bin_shape_t$94=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$111,_aa__),0),
     bin_writer_t$82=[0,bin_size_t$5,bin_write_t$5],
     bin_reader_t$82=[0,bin_read_t$11,bin_read_t$12],
     bin_t$82=[0,bin_shape_t$94,bin_writer_t$82,bin_reader_t$82];
    function hash$43(x){return caml_call1(hash$14,x)}
    function t_of_sexp$79(sexp)
     {try
       {var float$0=caml_call1(_Iw_,sexp)}
      catch(_a7R_){return t_of_sexp$78(sexp)}
      return caml_call1(of_float,float$0)}
    var
     include$109=
      Make_binable
       ([0,
         hash_fold_t$17,
         bin_size_t$5,
         bin_write_t$5,
         bin_read_t$11,
         bin_read_t$12,
         bin_shape_t$94,
         bin_writer_t$82,
         bin_reader_t$82,
         bin_t$82,
         t_of_sexp$79,
         compare$40,
         sexp_of_t$91,
         hash$43]),
     _aa$_=include$109[1],
     _aba_=include$109[2],
     _abb_=include$109[3],
     _abc_=include$109[4],
     _abd_=include$109[5],
     _abe_=include$109[6],
     _abf_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$183),0,bin_shape_t$51],0],
     _abg_=caml_call1(Bin_prot_Shape[4][1],cst_src_span_float_ml_761_2),
     group$112=caml_call2(Bin_prot_Shape[6],_abg_,_abf_),
     _abh_=caml_call1(Bin_prot_Shape[2][1],cst_t$184),
     bin_shape_t$95=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$112,_abh_),0),
     bin_writer_t$83=[0,bin_size_t$5,bin_write_t$5],
     bin_reader_t$83=[0,bin_read_t$11,bin_read_t$12],
     bin_t$83=[0,bin_shape_t$95,bin_writer_t$83,bin_reader_t$83];
    function t_of_sexp$80(sexp)
     {var
       match=
        caml_call1
         (_yc_,
          function(param){return caml_call1(of_float,caml_call1(_Iw_,sexp))});
      if(match){var t=match[1];return t}
      return t_of_sexp$78(sexp)}
    var
     Map$21=
      _we_
       ([0,
         bin_size_t$5,
         bin_write_t$5,
         bin_read_t$11,
         bin_read_t$12,
         bin_shape_t$95,
         bin_writer_t$83,
         bin_reader_t$83,
         bin_t$83,
         t_of_sexp$80,
         sexp_of_t$91,
         comparator$5]),
     Set$21=
      _w5_
       ([0,
         bin_size_t$5,
         bin_write_t$5,
         bin_read_t$11,
         bin_read_t$12,
         bin_shape_t$95,
         bin_writer_t$83,
         bin_reader_t$83,
         bin_t$83,
         t_of_sexp$80,
         sexp_of_t$91,
         comparator$5]);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$349);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Span_float$0);
    var
     Core_kernel_Span_float=
      [0,
       bin_size_t$5,
       bin_write_t$5,
       bin_read_t$11,
       bin_read_t$12,
       bin_shape_t$51,
       bin_writer_t$44,
       bin_reader_t$44,
       bin_t$44,
       t_of_sexp$78,
       sexp_of_t$91,
       typerep_of_t$8,
       typename_of_t$8,
       Parts,
       symbol$21,
       symbol$22,
       symbol$23,
       symbol$24,
       symbol$25,
       symbol$26,
       equal$20,
       compare$40,
       min$2,
       max$2,
       ascending$2,
       descending$2,
       between$2,
       clamp_exn$2,
       clamp$2,
       validate_lbound$2,
       validate_ubound$2,
       validate_bound$2,
       Replace_polymorphic_compare$2,
       comparator$5,
       Map$21,
       Set$21,
       validate_positive,
       validate_non_negative,
       validate_negative,
       validate_non_positive,
       is_positive,
       is_non_negative,
       is_negative,
       is_non_positive,
       sign,
       _aa$_,
       _aba_,
       _abb_,
       _abc_,
       _abd_,
       _abe_,
       _aa7_,
       symbol$184,
       symbol$185,
       symbol$186,
       symbol$187,
       symbol$188,
       symbol$189,
       robustly_compare$1,
       quickcheck_generator$7,
       quickcheck_observer$6,
       quickcheck_shrinker$6,
       gen_incl$0,
       gen_uniform_incl$0,
       to_string$22,
       of_string$19,
       nanosecond,
       microsecond,
       millisecond,
       second$0,
       minute,
       hour,
       day$0,
       robust_comparison_tolerance,
       zero,
       create$22,
       to_parts,
       of_ns,
       of_us,
       of_ms,
       to_span_since_epoch,
       of_int_sec,
       of_int32_seconds,
       of_int63_seconds,
       of_min,
       of_hr,
       of_day,
       to_ns,
       to_us,
       to_ms,
       of_span_since_epoch,
       to_min,
       to_hr,
       to_day,
       to_int63_seconds_round_down_ex,
       to_float,
       symbol$27,
       symbol$28,
       abs,
       neg,
       scale,
       symbol$190,
       symbol$191,
       next$1,
       prev$2,
       to_short_string,
       to_unit_of_time,
       of_unit_of_time,
       to_string_hum$9,
       randomize$0,
       [0,
        [0,
         t_of_sexp$76,
         sexp_of_t$89,
         bin_size_t$5,
         bin_write_t$5,
         bin_read_t$11,
         bin_read_t$12,
         bin_shape_t$51,
         bin_writer_t$44,
         bin_reader_t$44,
         bin_t$44,
         compare$40,
         hash_fold_t$17,
         hash$14],
        [0,
         t_of_sexp$77,
         sexp_of_t$90,
         bin_size_t$5,
         bin_write_t$5,
         bin_read_t$11,
         bin_read_t$12,
         bin_shape_t$51,
         bin_writer_t$44,
         bin_reader_t$44,
         bin_t$44,
         compare$40,
         hash_fold_t$17,
         hash$14],
        [0,
         t_of_sexp$78,
         sexp_of_t$91,
         bin_size_t$5,
         bin_write_t$5,
         bin_read_t$11,
         bin_read_t$12,
         bin_shape_t$51,
         bin_writer_t$44,
         bin_reader_t$44,
         bin_t$44,
         compare$40,
         hash_fold_t$17,
         hash$14]],
       [0,parse_suffix,suffix_of_unit_of_time]];
    caml_register_global
     (5112,Core_kernel_Span_float,"Core_kernel__Span_float");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Span_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$350);
    caml_call1(Expect_test_collector[4][1],cst_src_span_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$351,cst$140);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$352);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Span_intf$0);
    var Core_kernel_Span_intf=[0];
    caml_register_global(5113,Core_kernel_Span_intf,"Core_kernel__Span_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Ofday_float);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$353);
    caml_call1(Expect_test_collector[4][1],cst_src_ofday_float_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$354,cst$141);
    var
     include$110=caml_call1(Robust_compare[1],[0,1e-06]),
     symbol$194=include$110[2],
     symbol$195=include$110[3],
     symbol$196=include$110[4],
     symbol$197=include$110[5],
     symbol$198=include$110[6],
     symbol$199=include$110[7],
     robustly_compare$2=include$110[8];
    function to_span_since_start_of_day(t){return to_span_since_epoch(t)}
    function is_valid(t)
     {var
       t$0=to_span_since_start_of_day(t),
       _a7Q_=caml_call2(symbol$22,zero,t$0);
      return _a7Q_?caml_call2(symbol$22,t$0,day$0):_a7Q_}
    function of_span_since_start_of_day_unc(span){return span}
    function span_since_start_of_day_is_val(span){return is_valid(span)}
    function of_span_since_start_of_day(span)
     {var match=caml_call1(_JB_,span);
      if(1 === match)return caml_call1(_Ga_,cst_Ofday_of_span_since_start_);
      if(match)
       {if(is_valid(span))return span;
        var _a7O_=0,_a7P_=0;
        return caml_call3
                (_Pf_,
                 [0,
                  [11,
                   cst_Ofday_out_of_range,
                   [24,
                    _abi_,
                    function(param,custom_printf_001)
                     {return to_string$22(custom_printf_001)},
                    _a7P_]],
                  cst_Ofday_out_of_range_Span],
                 span,
                 _a7O_)}
      return caml_call1(_Ga_,cst_Ofday_of_span_since_start_$0)}
    var start_of_next_day=of_span_since_start_of_day(day$0),start_of_day=0.;
    function add$12(t,span){var t$0=t + span;return is_valid(t$0)?[0,t$0]:0}
    function sub$3(t,span){var t$0=t - span;return is_valid(t$0)?[0,t$0]:0}
    function next$2(t)
     {var candidate=caml_call2(_IT_,19067,t);
      return is_valid(candidate)?[0,candidate]:0}
    function prev$3(t)
     {var candidate=caml_call2(_IT_,759637122,t);
      return is_valid(candidate)?[0,candidate]:0}
    function diff$6(t1,t2)
     {var _a7N_=to_span_since_start_of_day(t2);
      return caml_call2(symbol$28,to_span_since_start_of_day(t1),_a7N_)}
    var
     approximate_end_of_day=
      caml_call4(_x7_,0,0,0,sub$3(start_of_next_day,microsecond));
    function create$23(hr,min,sec,ms,us,ns,param)
     {var switch$0=0;
      if(sec && 60 === sec[1])
       {var ns$0=_abj_,us$0=_abk_,ms$0=_abl_;switch$0 = 1}
      if(! switch$0)var ns$0=ns,us$0=us,ms$0=ms;
      return of_span_since_start_of_day
              (create$22(0,0,hr,min,sec,ms$0,us$0,ns$0,0))}
    function to_parts$0(t){return to_parts(to_span_since_start_of_day(t))}
    function to_string_gen(drop_ms,drop_us,trim,t)
     {var drop_us$0=drop_ms?drop_us:1;
      if(drop_us$0)
       {var
         float_sec=to_span_since_start_of_day(t),
         us=caml_call1(_Jf_,float_sec * 1000000.),
         us$0=
          caml_call1
           (to_int_exn$2,caml_call2(rem$2,us,caml_call1(of_int$3,1000))),
         ms=caml_call2(symbol$112,us,caml_call1(of_int$3,1000)),
         ms$0=
          caml_call1
           (to_int_exn$2,caml_call2(rem$2,ms,caml_call1(of_int$3,1000))),
         sec=caml_call2(symbol$112,ms,caml_call1(of_int$3,1000)),
         sec$0=
          caml_call1
           (to_int_exn$2,caml_call2(rem$2,sec,caml_call1(of_int$3,60))),
         min=caml_call2(symbol$112,sec,caml_call1(of_int$3,60)),
         min$0=
          caml_call1
           (to_int_exn$2,caml_call2(rem$2,min,caml_call1(of_int$3,60))),
         hr=caml_call2(symbol$112,min,caml_call1(of_int$3,60)),
         hr$0=caml_call1(to_int_exn$2,hr),
         dont_print_us=
          drop_us
          ||
          (trim?caml_call2(Replace_polymorphic_compare$3[3],us$0,0):trim);
        if(drop_ms)
         var dont_print_ms=drop_ms;
        else
         if(trim)
          var
           _a7M_=caml_call2(Replace_polymorphic_compare$3[3],ms$0,0),
           dont_print_ms=_a7M_?dont_print_us:_a7M_;
         else
          var dont_print_ms=trim;
        if(trim)
         var
          _a7L_=caml_call2(Replace_polymorphic_compare$3[3],sec$0,0),
          dont_print_s=_a7L_?dont_print_ms:_a7L_;
        else
         var dont_print_s=trim;
        var
         len=dont_print_s?5:dont_print_ms?8:dont_print_us?12:15,
         buf=caml_call1(_Eq_,len);
        write_2_digit_int$0(buf,0,hr$0);
        caml_call3(_Ez_,buf,2,58);
        write_2_digit_int$0(buf,3,min$0);
        if(! dont_print_s)
         {caml_call3(_Ez_,buf,5,58);
          write_2_digit_int$0(buf,6,sec$0);
          if(! dont_print_ms)
           {caml_call3(_Ez_,buf,8,46);
            write_3_digit_int$0(buf,9,ms$0);
            if(! dont_print_us)write_3_digit_int$0(buf,12,us$0)}}
        return caml_call1(_EJ_,buf)}
      throw [0,Assert_failure,_abm_]}
    function to_string_trimmed(t){return to_string_gen(0,0,1,t)}
    function to_sec_string(t){return to_string_gen(1,1,0,t)}
    function to_millisec_string(t){return to_string_gen(0,1,0,t)}
    var hour$0=3600.;
    function small_diff(ofday1,ofday2)
     {var
       ofday1$0=to_span_since_start_of_day(ofday1),
       ofday2$0=to_span_since_start_of_day(ofday2),
       diff=ofday1$0 - ofday2$0,
       d1=caml_call2(_Jq_,diff,hour$0),
       d2=caml_call2(_Jq_,d1 + 3600.,hour$0),
       d=caml_call2(symbol$24,d2,1800.)?d2 - 3600.:d2;
      return to_span_since_epoch(d)}
    function to_string$23(t){return to_string_gen(0,0,0,t)}
    var
     include$111=
      caml_call1(Base_Pretty_printer[2],[0,module_name$9,to_string$23]),
     pp$7=include$111[1];
    function create_from_parsed(string,hr,min,sec,subsec_pos,subsec_len)
     {var
       subsec=
        caml_call2(equal$21,subsec_len,0)
         ?0.
         :caml_call1(_Ix_,caml_call3(_BR_,string,subsec_pos,subsec_len));
      return of_span_since_start_of_day
              (to_span_since_epoch
                (caml_call1
                  (_IU_,((hr * 3600 | 0) + (min * 60 | 0) | 0) + sec | 0)
                 +
                 subsec))}
    function of_string$20(s){return parse$0(s,create_from_parsed)}
    function t_of_sexp$81(sexp)
     {if(0 === sexp[0])
       {var s=sexp[1];
        try
         {var _a7K_=of_string$20(s);return _a7K_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          if(exn[1] === Stdlib[6])
           {var s$0=exn[2];
            return caml_call2
                    (_Od_,caml_call2(_Gp_,cst_Ofday_t_of_sexp,s$0),sexp)}
          throw exn}}
      return caml_call2(_Od_,cst_Ofday_t_of_sexp$0,sexp)}
    function sexp_of_t$92(span){return [0,to_string$23(span)]}
    function of_string_iso8601_extended(pos,len,str)
     {try
       {var _a7J_=parse_iso8601_extended(pos,len,str,create_from_parsed);
        return _a7J_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        var _a7I_=caml_call1(Base_Exn[9],exn);
        return caml_call4(_Pf_,_abn_,caml_call3(_BS_,pos,len,str),_a7I_,0)}}
    function gen_incl$1(lo,hi)
     {var
       _a7G_=to_span_since_start_of_day(hi),
       _a7H_=gen_incl$0(to_span_since_start_of_day(lo),_a7G_);
      return caml_call2(_uW_[10],_a7H_,of_span_since_start_of_day)}
    function gen_uniform_incl$1(lo,hi)
     {var
       _a7E_=to_span_since_start_of_day(hi),
       _a7F_=gen_uniform_incl$0(to_span_since_start_of_day(lo),_a7E_);
      return caml_call2(_uW_[10],_a7F_,of_span_since_start_of_day)}
    var
     quickcheck_generator$13=gen_incl$1(start_of_day,start_of_next_day),
     quickcheck_observer$12=
      caml_call2(_uV_[18],quickcheck_observer$6,to_span_since_start_of_day),
     quickcheck_shrinker$12=caml_call1(_uU_[3],0),
     _abo_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$185),0,bin_shape_t$51],0],
     _abp_=caml_call1(Bin_prot_Shape[4][1],cst_src_ofday_float_ml_278_4),
     group$113=caml_call2(Bin_prot_Shape[6],_abp_,_abo_),
     _abq_=caml_call1(Bin_prot_Shape[2][1],cst_t$186),
     bin_shape_t$96=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$113,_abq_),0),
     bin_writer_t$84=[0,bin_size_t$5,bin_write_t$5],
     bin_reader_t$84=[0,bin_read_t$11,bin_read_t$12],
     bin_t$84=[0,bin_shape_t$96,bin_writer_t$84,bin_reader_t$84];
    function hash$44(x){return caml_call1(hash$14,x)}
    function t_of_sexp$82(sexp)
     {try
       {var float$0=caml_call1(_Iw_,sexp)}
      catch(_a7D_){return t_of_sexp$81(sexp)}
      return caml_call1(of_float,float$0)}
    var
     include$112=
      Make_binable
       ([0,
         hash_fold_t$17,
         bin_size_t$5,
         bin_write_t$5,
         bin_read_t$11,
         bin_read_t$12,
         bin_shape_t$96,
         bin_writer_t$84,
         bin_reader_t$84,
         bin_t$84,
         t_of_sexp$82,
         compare$40,
         sexp_of_t$92,
         hash$44]),
     _abr_=include$112[1],
     _abs_=include$112[2],
     _abt_=include$112[3],
     _abu_=include$112[4],
     _abv_=include$112[5],
     _abw_=include$112[6],
     _abx_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$187),0,bin_shape_t$51],0],
     _aby_=caml_call1(Bin_prot_Shape[4][1],cst_src_ofday_float_ml_291_2),
     group$114=caml_call2(Bin_prot_Shape[6],_aby_,_abx_),
     _abz_=caml_call1(Bin_prot_Shape[2][1],cst_t$188),
     bin_shape_t$97=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$114,_abz_),0),
     bin_writer_t$85=[0,bin_size_t$5,bin_write_t$5],
     bin_reader_t$85=[0,bin_read_t$11,bin_read_t$12],
     bin_t$85=[0,bin_shape_t$97,bin_writer_t$85,bin_reader_t$85];
    function t_of_sexp$83(sexp)
     {var
       match=
        caml_call1
         (_yc_,
          function(param){return caml_call1(of_float,caml_call1(_Iw_,sexp))});
      if(match){var t=match[1];return t}
      return t_of_sexp$81(sexp)}
    var
     Map$22=
      _we_
       ([0,
         bin_size_t$5,
         bin_write_t$5,
         bin_read_t$11,
         bin_read_t$12,
         bin_shape_t$97,
         bin_writer_t$85,
         bin_reader_t$85,
         bin_t$85,
         t_of_sexp$83,
         sexp_of_t$92,
         comparator$5]),
     Set$22=
      _w5_
       ([0,
         bin_size_t$5,
         bin_write_t$5,
         bin_read_t$11,
         bin_read_t$12,
         bin_shape_t$97,
         bin_writer_t$85,
         bin_reader_t$85,
         bin_t$85,
         t_of_sexp$83,
         sexp_of_t$92,
         comparator$5]);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$355);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Ofday_float$0);
    var
     Core_kernel_Ofday_float=
      [0,
       bin_size_t$5,
       bin_write_t$5,
       bin_read_t$11,
       bin_read_t$12,
       bin_shape_t$51,
       bin_writer_t$44,
       bin_reader_t$44,
       bin_t$44,
       t_of_sexp$81,
       sexp_of_t$92,
       typerep_of_t$8,
       typename_of_t$8,
       symbol$21,
       symbol$22,
       symbol$23,
       symbol$24,
       symbol$25,
       symbol$26,
       equal$20,
       compare$40,
       min$2,
       max$2,
       ascending$2,
       descending$2,
       between$2,
       clamp_exn$2,
       clamp$2,
       validate_lbound$2,
       validate_ubound$2,
       validate_bound$2,
       Replace_polymorphic_compare$2,
       comparator$5,
       Map$22,
       Set$22,
       _abr_,
       _abs_,
       _abt_,
       _abu_,
       _abv_,
       _abw_,
       pp$7,
       symbol$194,
       symbol$195,
       symbol$196,
       symbol$197,
       symbol$198,
       symbol$199,
       robustly_compare$2,
       quickcheck_generator$13,
       quickcheck_observer$12,
       quickcheck_shrinker$12,
       gen_incl$1,
       gen_uniform_incl$1,
       of_string$20,
       to_string$23,
       create$23,
       to_parts$0,
       start_of_day,
       start_of_next_day,
       approximate_end_of_day,
       to_span_since_start_of_day,
       of_span_since_start_of_day,
       of_span_since_start_of_day,
       span_since_start_of_day_is_val,
       of_span_since_start_of_day_unc,
       add$12,
       sub$3,
       next$2,
       prev$3,
       diff$6,
       small_diff,
       to_string_trimmed,
       to_sec_string,
       of_string_iso8601_extended,
       to_millisec_string,
       to_millisec_string,
       [0,
        [0,
         bin_size_t$5,
         bin_write_t$5,
         bin_read_t$11,
         bin_read_t$12,
         bin_shape_t$51,
         bin_writer_t$44,
         bin_reader_t$44,
         bin_t$44,
         compare$40,
         hash_fold_t$17,
         hash$14,
         t_of_sexp$81,
         sexp_of_t$92]]];
    caml_register_global
     (5114,Core_kernel_Ofday_float,"Core_kernel__Ofday_float");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Ofday_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$356);
    caml_call1(Expect_test_collector[4][1],cst_src_ofday_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$357,cst$142);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$358);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Ofday_intf$0);
    var Core_kernel_Ofday_intf=[0];
    caml_register_global
     (5115,Core_kernel_Ofday_intf,"Core_kernel__Ofday_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Time0_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$359);
    caml_call1(Expect_test_collector[4][1],cst_src_time0_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$360,cst$143);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$361);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Time0_intf$0);
    var Core_kernel_Time0_intf=[0];
    caml_register_global
     (5116,Core_kernel_Time0_intf,"Core_kernel__Time0_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Time_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$362);
    caml_call1(Expect_test_collector[4][1],cst_src_time_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$363,cst$144);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$364);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Time_intf$0);
    var Core_kernel_Time_intf=[0];
    caml_register_global(5117,Core_kernel_Time_intf,"Core_kernel__Time_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Time);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$365);
    caml_call1(Expect_test_collector[4][1],cst_src_time_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$366,cst$145);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$367);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Time$0);
    function _abO_(Time0)
     {var
       _a54_=Time0[13],
       _a55_=Time0[14],
       _a58_=Time0[17],
       _a5__=Time0[19],
       _a5$_=Time0[20],
       _a6c_=Time0[23],
       _a6d_=Time0[24],
       _a6e_=Time0[25],
       _a6h_=Time0[28],
       _a6i_=Time0[29],
       _a6j_=Time0[30],
       _a6k_=Time0[31],
       _a6n_=Time0[34],
       _a6C_=Time0[49],
       _a5S_=Time0[1],
       _a5T_=Time0[2],
       _a5U_=Time0[3],
       _a5V_=Time0[4],
       _a5W_=Time0[5],
       _a5X_=Time0[6],
       _a5Y_=Time0[7],
       _a5Z_=Time0[8],
       _a50_=Time0[9],
       _a51_=Time0[10],
       _a52_=Time0[11],
       _a53_=Time0[12],
       _a56_=Time0[15],
       _a57_=Time0[16],
       _a59_=Time0[18],
       _a6a_=Time0[21],
       _a6b_=Time0[22],
       _a6f_=Time0[26],
       _a6g_=Time0[27],
       _a6l_=Time0[32],
       _a6m_=Time0[33],
       _a6o_=Time0[35],
       _a6p_=Time0[36],
       _a6q_=Time0[37],
       _a6r_=Time0[38],
       _a6s_=Time0[39],
       _a6t_=Time0[40],
       _a6u_=Time0[41],
       _a6v_=Time0[42],
       _a6w_=Time0[43],
       _a6x_=Time0[44],
       _a6y_=Time0[45],
       _a6z_=Time0[46],
       _a6A_=Time0[47],
       _a6B_=Time0[48],
       _a6D_=Time0[50],
       _a6E_=Time0[51],
       _a6F_=Time0[52],
       epoch=caml_call1(_a6i_,_a54_[74]);
      function is_earlier(t1,t2){return caml_call2(_a5$_,t1,t2)}
      function is_later(t1,t2){return caml_call2(_a5__,t1,t2)}
      function of_span_in_seconds(span_in_seconds)
       {var _a7C_=caml_call1(Time_in_seconds[1][2],span_in_seconds);
        return caml_call1(Time0[13][83],_a7C_)}
      function of_time_in_seconds(time_in_seconds)
       {var
         _a7z_=caml_call1(Time_in_seconds[4],time_in_seconds),
         _a7A_=caml_call1(Time_in_seconds[1][2],_a7z_),
         _a7B_=caml_call1(Time0[13][83],_a7A_);
        return caml_call1(Time0[29],_a7B_)}
      function index$0(t,time)
       {var
         _a7w_=caml_call1(Time0[28],time),
         _a7x_=caml_call1(Time0[13][94],_a7w_),
         _a7y_=caml_call1(Time_in_seconds[1][1],_a7x_);
        return index(t,caml_call1(Time_in_seconds[3],_a7y_))}
      function index_of_date_and_ofday$0(t,relative)
       {var
         _a7t_=caml_call1(Time0[49][8],relative),
         _a7u_=caml_call1(Time0[13][94],_a7t_),
         _a7v_=caml_call1(Time_in_seconds[1][1],_a7u_);
        return index_of_date_and_ofday
                (t,caml_call1(Time_in_seconds[2][1],_a7v_))}
      function index_offset_from_utc_exn$0(t,index)
       {return of_span_in_seconds(index_offset_from_utc_exn(t,index))}
      function index_prev_clock_shift_time_ex$0(t,index)
       {return of_time_in_seconds(index_prev_clock_shift_time_ex(t,index))}
      function index_next_clock_shift_time_ex$0(t,index)
       {return of_time_in_seconds(index_next_clock_shift_time_ex(t,index))}
      function index_prev_clock_shift_amount_$0(t,index)
       {return of_span_in_seconds(index_prev_clock_shift_amount_(t,index))}
      function index_next_clock_shift_amount_$0(t,index)
       {return of_span_in_seconds(index_next_clock_shift_amount_(t,index))}
      function abbreviation(t,time)
       {return index_abbreviation_exn(t,index$0(t,time))}
      function index_prev_clock_shift(t,index)
       {var match=index_has_prev_clock_shift(t,index);
        if(match)
         {var _a7s_=index_prev_clock_shift_amount_$0(t,index);
          return [0,[0,index_prev_clock_shift_time_ex$0(t,index),_a7s_]]}
        return 0}
      function prev_clock_shift(t,time)
       {return index_prev_clock_shift(t,index$0(t,time))}
      function next_clock_shift(t,time)
       {var index=index$0(t,time);
        return index_prev_clock_shift(t,caml_call1(Index[1],index))}
      function date_and_ofday_of_absolute_tim(t,time)
       {var
         index=index$0(t,time),
         offset_from_utc=index_offset_from_utc_exn$0(t,index);
        return caml_call2(Time0[49][5],time,offset_from_utc)}
      function absolute_time_of_date_and_ofda(t,relative)
       {var
         index=index_of_date_and_ofday$0(t,relative),
         offset_from_utc=index_offset_from_utc_exn$0(t,index);
        return caml_call2(Time0[49][6],relative,offset_from_utc)}
      var
       Zone=
        [0,
         sexp_of_t$70,
         compare$59,
         input_tz_file,
         likely_machine_zones,
         of_utc_offset,
         utc,
         name$51,
         original_filename,
         digest,
         reset_transition_cache,
         Index,
         index$0,
         index_of_date_and_ofday$0,
         index_offset_from_utc_exn$0,
         index_abbreviation_exn,
         index_has_prev_clock_shift,
         index_prev_clock_shift_time_ex$0,
         index_prev_clock_shift_amount_$0,
         index_has_next_clock_shift,
         index_next_clock_shift_time_ex$0,
         index_next_clock_shift_amount_$0,
         abbreviation,
         absolute_time_of_date_and_ofda,
         date_and_ofday_of_absolute_tim,
         next_clock_shift,
         prev_clock_shift];
      function abs_diff(t1,t2)
       {var _a7r_=caml_call2(_a6e_,t1,t2);return caml_call1(_a54_[98],_a7r_)}
      function of_date_ofday(zone,date,ofday)
       {var relative=caml_call2(_a6C_[1],date,ofday);
        return caml_call2(Zone[23],zone,relative)}
      function of_date_ofday_precise(date,ofday,zone)
       {var
         start_of_day=of_date_ofday(zone,date,_a55_[58]),
         proposed_time=
          caml_call2(_a6c_,start_of_day,caml_call1(_a55_[61],ofday)),
         match=caml_call2(Zone[25],zone,start_of_day);
        if(match)
         {var
           match$0=match[1],
           shift_amount=match$0[2],
           shift_start=match$0[1],
           shift_backwards=caml_call2(_a54_[18],shift_amount,_a54_[74]);
          if(shift_backwards)
           var e=shift_start,s=caml_call2(_a6c_,shift_start,shift_amount);
          else
           var
            e$0=caml_call2(_a6c_,shift_start,shift_amount),
            e=e$0,
            s=shift_start;
          if(caml_call2(_a6n_,proposed_time,s))
           return [0,881568161,proposed_time];
          if
           (caml_call2(_a6k_,s,proposed_time)
            &&
            caml_call2(_a6n_,proposed_time,e))
           return shift_backwards
                   ?[0,
                     748757384,
                     [0,
                      proposed_time,
                      caml_call2(_a6d_,proposed_time,shift_amount)]]
                   :[0,744337004,shift_start];
          return [0,881568161,caml_call2(_a6d_,proposed_time,shift_amount)]}
        return [0,881568161,proposed_time]}
      var date_cache=[0,Zone[6],epoch,epoch,epoch,unix_epoch];
      function reset_date_cache(param)
       {date_cache[1] = Zone[6];
        date_cache[2] = epoch;
        date_cache[3] = epoch;
        date_cache[4] = epoch;
        date_cache[5] = unix_epoch;
        return 0}
      function set_date_cache(time,zone)
       {var _a7k_=caml_call2(_Pg_,zone,date_cache[1]),switch$0=0;
        if(_a7k_)
         {var _a7l_=caml_call2(Time0[30],time,date_cache[2]);
          if(_a7l_)
           {var match=caml_call2(Time0[34],time,date_cache[3]);switch$0 = 1}
          else
           var _a7m_=_a7l_}
        else
         var _a7m_=_a7k_;
        if(! switch$0)var match=_a7m_;
        if(match)return 0;
        var
         index=caml_call2(Zone[12],zone,time),
         offset_from_utc=caml_call2(Zone[14],zone,index),
         rel=caml_call2(_a6C_[5],time,offset_from_utc),
         date=caml_call1(_a6C_[3],rel),
         _a7n_=caml_call1(_a6C_[4],rel),
         span=caml_call1(_a55_[61],_a7n_),
         _a7o_=caml_call2(_a6C_[6],rel,offset_from_utc),
         effective_day_start=caml_call2(Time0[24],_a7o_,span),
         effective_day_until=
          caml_call2(Time0[23],effective_day_start,_a54_[72]),
         match$0=caml_call2(Zone[16],zone,index);
        if(match$0)
         var
          _a7p_=caml_call2(Zone[17],zone,index),
          cache_start_incl=caml_call2(Time0[39],_a7p_,effective_day_start);
        else
         var cache_start_incl=effective_day_start;
        var match$1=caml_call2(Zone[19],zone,index);
        if(match$1)
         var
          _a7q_=caml_call2(Zone[20],zone,index),
          cache_until_excl=caml_call2(Time0[38],_a7q_,effective_day_until);
        else
         var cache_until_excl=effective_day_until;
        date_cache[1] = zone;
        date_cache[2] = cache_start_incl;
        date_cache[3] = cache_until_excl;
        date_cache[4] = effective_day_start;
        date_cache[5] = date;
        return 0}
      function to_date(time,zone)
       {set_date_cache(time,zone);return date_cache[5]}
      function to_ofday(time,zone)
       {set_date_cache(time,zone);
        var _a7j_=caml_call2(Time0[25],time,date_cache[4]);
        return caml_call1(_a55_[62],_a7j_)}
      function to_date_ofday(time,zone)
       {var _a7i_=to_ofday(time,zone);return [0,to_date(time,zone),_a7i_]}
      function to_date_ofday_precise(time,zone)
       {var
         match=to_date_ofday(time,zone),
         ofday=match[2],
         date=match[1],
         match$0=caml_call2(Zone[25],zone,time),
         clock_shift_before_or_at=caml_call2(Zone[26],zone,time),
         switch$0=0;
        if(clock_shift_before_or_at)
         {var
           match$2=clock_shift_before_or_at[1],
           amount=match$2[2],
           start=match$2[1];
          if
           (caml_call2
             (_a5__,caml_call2(_a6c_,start,caml_call1(_a54_[98],amount)),time))
           {if(caml_call2(_a54_[17],amount,_a54_[74]))
             {var match$1=caml_call2(_a55_[67],ofday,amount);
              if(match$1)
               var ofday$0=match$1[1],_a7f_=[0,-687020392,[0,date,ofday$0]];
              else
               var
                _a7c_=[0,[1,[0,_abA_,[0,caml_call1(Zone[1],zone),0]]],0],
                _a7d_=caml_call1(_a6h_,time),
                _a7e_=
                 [0,[1,[0,_abB_,[0,caml_call1(_a54_[10],_a7d_),0]]],_a7c_],
                _a7f_=
                 caml_call1
                  (_od_,
                   [1,
                    [0,
                     caml_call1
                      (Sexplib0_Sexp_conv[7],cst_Time_to_date_ofday_precise),
                     _a7e_]]);
              var _a7g_=_a7f_}
            else
             {if(! caml_call2(_a54_[18],amount,_a54_[74]))
               throw [0,Assert_failure,_abC_];
              var
               _a7g_=
                [0,
                 1043984139,
                 caml_call2(_a6d_,time,caml_call1(_a54_[98],amount))]}
            var ambiguity=_a7g_}
          else
           switch$0 = 1}
        else
         switch$0 = 1;
        if(switch$0)
         {var switch$1=0;
          if(match$0)
           {var match$3=match$0[1],amount$0=match$3[2],start$0=match$3[1];
            if
             (caml_call2
               (_a58_,
                caml_call2(_a6d_,start$0,caml_call1(_a54_[98],amount$0)),
                time))
             {if(caml_call2(_a54_[17],amount$0,_a54_[74]))
               var _a7h_=881570188;
              else
               {if(! caml_call2(_a54_[18],amount$0,_a54_[74]))
                 throw [0,Assert_failure,_abD_];
                var
                 _a7h_=
                  [0,
                   1043984139,
                   caml_call2(_a6c_,time,caml_call1(_a54_[98],amount$0))]}
              var ambiguity=_a7h_}
            else
             switch$1 = 1}
          else
           switch$1 = 1;
          if(switch$1)var ambiguity=881570188}
        return [0,date,ofday,ambiguity]}
      function convert(from_tz,to_tz,date,ofday)
       {var start_time=of_date_ofday(from_tz,date,ofday);
        return to_date_ofday(start_time,to_tz)}
      function utc_offset$0(t,zone)
       {var
         utc_epoch=caml_call2(Zone[24],zone,t),
         _a7a_=caml_call1(_a6h_,t),
         _a7b_=caml_call1(_a6C_[8],utc_epoch);
        return caml_call2(_a54_[97],_a7b_,_a7a_)}
      function offset_string(time,zone)
       {var
         utc_offset=utc_offset$0(time,zone),
         is_utc=caml_call2(_a54_[16],utc_offset,_a54_[74]);
        if(is_utc)return cst_Z;
        var
         _a68_=caml_call1(_a54_[98],utc_offset),
         _a69_=caml_call1(_a55_[62],_a68_),
         _a6__=[0,caml_call1(_a55_[72],_a69_),0],
         _a6$_=caml_call2(_a54_[18],utc_offset,_a54_[74])?cst$146:cst$147;
        return caml_call2(_Cd_,0,[0,_a6$_,_a6__])}
      function to_string_abs_parts(time,zone)
       {var
         match=to_date_ofday(time,zone),
         ofday=match[2],
         date=match[1],
         offset_string$0=offset_string(time,zone),
         _a67_=
          [0,
           caml_call2
            (_Cd_,_abE_,[0,caml_call1(_a55_[55],ofday),[0,offset_string$0,0]]),
           0];
        return [0,to_string$20(date),_a67_]}
      function to_string_abs_trimmed(time,zone)
       {var
         match=to_date_ofday(time,zone),
         ofday=match[2],
         date=match[1],
         offset_string$0=offset_string(time,zone),
         _a66_=
          [0,caml_call2(_Gp_,caml_call1(_a55_[72],ofday),offset_string$0),0];
        return caml_call2(_Cd_,_abF_,[0,to_string$20(date),_a66_])}
      function to_string_abs(time,zone)
       {return caml_call2(_Cd_,_abG_,to_string_abs_parts(time,zone))}
      function to_string(t){return to_string_abs(t,Zone[6])}
      function to_string_iso8601_basic(time,zone)
       {return caml_call2(_Cd_,_abH_,to_string_abs_parts(time,zone))}
      function to_string_trimmed(t,zone)
       {var
         match=to_date_ofday(t,zone),
         sec=match[2],
         date=match[1],
         _a65_=caml_call2(_Gp_,cst$148,caml_call1(_a55_[72],sec));
        return caml_call2(_Gp_,to_string$20(date),_a65_)}
      function to_sec_string(t,zone)
       {var
         match=to_date_ofday(t,zone),
         sec=match[2],
         date=match[1],
         _a64_=caml_call2(_Gp_,cst$149,caml_call1(_a55_[73],sec));
        return caml_call2(_Gp_,to_string$20(date),_a64_)}
      function to_filename_string(t,zone)
       {var
         match=to_date_ofday(t,zone),
         ofday=match[2],
         date=match[1],
         _a63_=
          caml_call2
           (_Gp_,cst$150,caml_call3(_CV_,58,45,caml_call1(_a55_[55],ofday)));
        return caml_call2(_Gp_,to_string$20(date),_a63_)}
      function of_filename_string(s,zone)
       {try
         {var match=caml_call2(_CG_,s,95);
          if(match)
           var
            match$0=match[1],
            ofday=match$0[2],
            date=match$0[1],
            date$0=of_string$17(date),
            ofday$0=caml_call3(_CV_,45,58,ofday),
            ofday$1=caml_call1(_a55_[54],ofday$0),
            _a62_=of_date_ofday(zone,date$0,ofday$1);
          else
           var _a62_=caml_call1(_Gb_,cst_no_space_in_filename_strin);
          return _a62_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          return caml_call4(_Pf_,_abI_,s,caml_call1(Base_Exn[9],exn),0)}}
      function of_localized_string(zone,str)
       {try
         {var match=caml_call2(_CG_,str,32);
          if(match)
           var
            match$0=match[1],
            time=match$0[2],
            date=match$0[1],
            date$0=of_string$17(date),
            ofday=caml_call1(_a55_[54],time),
            _a61_=of_date_ofday(zone,date$0,ofday);
          else
           var _a61_=caml_call1(_Ga_,caml_call2(_fw_,_abJ_,str));
          return _a61_}
        catch(e)
         {e = caml_wrap_exception(e);
          return caml_call2(Base_Exn[7],e,cst_Time_of_localized_string)}}
      function occurrence(before_or_after,t,ofday,zone)
       {var
         first_guess_date=to_date(t,zone),
         first_guess=of_date_ofday(zone,first_guess_date,ofday);
        if(476625469 <= before_or_after)
         var increment=1,cmp=_a6j_;
        else
         var increment=-1,cmp=_a6k_;
        return caml_call2(cmp,first_guess,t)
                ?first_guess
                :of_date_ofday
                  (zone,add_days$0(first_guess_date,increment),ofday)}
      function ensure_colon_in_offset(offset)
       {var offset_length=caml_ml_string_length(offset);
        if
         (caml_call2(symbol$55,offset_length,2)
          &&
          caml_call1(_Fh_,caml_string_get(offset,0))
          &&
          caml_call1(_Fh_,caml_string_get(offset,offset_length - 1 | 0)))
         return caml_call2(_Gp_,offset,cst_00);
        if
         (!
          caml_call2(_FH_,caml_string_get(offset,1),58)
          &&
          !
          caml_call2(_FH_,caml_string_get(offset,2),58))
         {if
           (!
            caml_call2(symbol$58,offset_length,3)
            &&
            !
            caml_call2(symbol$57,offset_length,4))
           {var
             _a60_=
              [0,
               cst$151,
               [0,slice$2(offset,offset_length - 2 | 0,offset_length),0]];
            return caml_call2
                    (_Cd_,0,[0,slice$2(offset,0,offset_length - 2 | 0),_a60_])}
          return caml_call3(_Pe_,_abK_,offset,0)}
        return offset}
      var
       Time_of_string=
        [248,cst_Core_kernel_Time_Make_Time,caml_fresh_oo_id(0)];
      function _a6G_(param)
       {if(param[1] === Time_of_string)
         {var
           v1=param[3],
           v0=param[2],
           v0$0=caml_call1(sexp_of_t$43,v0),
           v1$0=caml_call1(Base_Exn[1],v1);
          return [1,[0,_abL_,[0,v0$0,[0,v1$0,0]]]]}
        throw [0,Assert_failure,_abM_]}
      caml_call3(Sexplib0_Sexp_conv[51][2],0,Time_of_string,_a6G_);
      function of_string_gen(default_zone,find_zone,s)
       {try
         {var match=caml_call2(_CI_,s,32),switch$0=0;
          if(match)
           {var _a6O_=match[2],_a6P_=match[1];
            if(_a6O_)
             {var _a6Q_=_a6O_[2],_a6R_=_a6O_[1];
              if(_a6Q_)
               {var _a6S_=_a6Q_[2],_a6T_=_a6Q_[1];
                if(_a6S_)
                 if(_a6S_[2])
                  switch$0 = 1;
                 else
                  var
                   ofday$2=_a6S_[1],
                   tz=0,
                   ofday=ofday$2,
                   date=
                    caml_call2
                     (_Cd_,
                      0,
                      [0,_a6P_,[0,cst$153,[0,_a6R_,[0,cst$152,[0,_a6T_,0]]]]]);
                else
                 var tz=[0,_a6T_],ofday=_a6R_,date=_a6P_}
              else
               var tz=0,ofday=_a6R_,date=_a6P_}
            else
             {var match$4=caml_call2(_CH_,_a6P_,84);
              if(match$4)
               var
                match$5=match$4[1],
                ofday$3=match$5[2],
                date$1=match$5[1],
                tz=0,
                ofday=ofday$3,
                date=date$1;
              else
               var
                _a6Y_=caml_call1(_Gb_,cst_no_spaces_or_T_found),
                tz=_a6Y_[3],
                ofday=_a6Y_[2],
                date=_a6Y_[1]}}
          else
           switch$0 = 1;
          if(switch$0)
           var
            _a6U_=caml_call1(_Gb_,cst_too_many_spaces),
            tz=_a6U_[3],
            ofday=_a6U_[2],
            date=_a6U_[1];
          var
           ofday_to_sec=
            function(od)
             {var _a6Z_=caml_call1(_a55_[61],od);
              return caml_call1(_a54_[90],_a6Z_)};
          if(tz)
           var utc_offset$0=0,ofday$0=ofday;
          else
           if
            (caml_call2
              (_FH_,
               caml_string_get(ofday,caml_ml_string_length(ofday) - 1 | 0),
               90))
            var
             utc_offset$0=utc_offset,
             ofday$0=
              caml_call3(_BR_,ofday,0,caml_ml_string_length(ofday) - 1 | 0);
           else
            {var match$0=caml_call2(_CG_,ofday,43);
             if(match$0)
              var
               match$1=match$0[1],
               r=match$1[2],
               l=match$1[1],
               _a6W_=ensure_colon_in_offset(r),
               utc_offset$0=[0,ofday_to_sec(caml_call1(_a55_[54],_a6W_))],
               ofday$0=l;
             else
              {var match$2=caml_call2(_CG_,ofday,45);
               if(match$2)
                var
                 match$3=match$2[1],
                 r$0=match$3[2],
                 l$0=match$3[1],
                 _a6X_=ensure_colon_in_offset(r$0),
                 utc_offset$0=
                  [0,-1. * ofday_to_sec(caml_call1(_a55_[54],_a6X_))],
                 ofday$0=l$0;
               else
                var utc_offset$0=0,ofday$0=ofday}}
          var date$0=of_string$17(date),ofday$1=caml_call1(_a55_[54],ofday$0);
          if(tz)
           var
            tz$0=tz[1],
            _a6V_=of_date_ofday(caml_call1(find_zone,tz$0),date$0,ofday$1);
          else
           if(utc_offset$0)
            var
             utc_offset$1=utc_offset$0[1],
             utc_t=of_date_ofday(Zone[6],date$0,ofday$1),
             _a6V_=caml_call2(_a6d_,utc_t,caml_call1(_a54_[80],utc_offset$1));
           else
            var
             zone=caml_call1(default_zone,0),
             _a6V_=of_date_ofday(zone,date$0,ofday$1);
          return _a6V_}
        catch(e){e = caml_wrap_exception(e);throw [0,Time_of_string,s,e]}}
      function of_string(s)
       {function default_zone(param)
         {var _a6N_=[0,caml_call1(Sexplib0_Sexp_conv[7],s),0];
          return caml_call1
                  (_od_,
                   [1,
                    [0,
                     caml_call1
                      (Sexplib0_Sexp_conv[7],cst_time_has_no_time_zone_or_U),
                     _a6N_]])}
        function find_zone(zone_name)
         {return caml_call3(_Pe_,_abN_,zone_name,0)}
        return of_string_gen(default_zone,find_zone,s)}
      var
       quickcheck_shrinker=caml_call3(_uU_[6],_a54_[61],_a6i_,_a6h_),
       quickcheck_observer=caml_call2(_uV_[18],_a54_[60],_a6h_),
       quickcheck_generator=caml_call2(_uW_[10],_a54_[59],_a6i_);
      function gen_incl(lo,hi)
       {var
         _a6K_=caml_call1(_a6h_,hi),
         _a6L_=caml_call1(_a6h_,lo),
         _a6M_=caml_call2(_a54_[62],_a6L_,_a6K_);
        return caml_call2(_uW_[10],_a6M_,_a6i_)}
      function gen_uniform_incl(lo,hi)
       {var
         _a6H_=caml_call1(_a6h_,hi),
         _a6I_=caml_call1(_a6h_,lo),
         _a6J_=caml_call2(_a54_[63],_a6I_,_a6H_);
        return caml_call2(_uW_[10],_a6J_,_a6i_)}
      return [0,
              _a5S_,
              _a5T_,
              _a5U_,
              _a5V_,
              _a5W_,
              _a5X_,
              _a5Y_,
              _a5Z_,
              _a50_,
              _a51_,
              _a52_,
              _a53_,
              _a54_,
              _a55_,
              _a56_,
              _a57_,
              _a58_,
              _a59_,
              _a5__,
              _a5$_,
              _a6a_,
              _a6b_,
              _a6f_,
              _a6g_,
              _a6h_,
              _a6i_,
              _a6j_,
              _a6k_,
              _a6l_,
              _a6m_,
              _a6n_,
              _a6o_,
              _a6p_,
              _a6q_,
              _a6r_,
              _a6s_,
              _a6t_,
              _a6u_,
              _a6v_,
              _a6w_,
              _a6x_,
              _a6y_,
              _a6z_,
              _a6A_,
              _a6B_,
              _a6C_,
              _a6D_,
              _a6E_,
              _a6F_,
              Zone,
              _a6c_,
              _a6d_,
              _a6e_,
              abs_diff,
              quickcheck_generator,
              quickcheck_observer,
              quickcheck_shrinker,
              gen_incl,
              gen_uniform_incl,
              is_earlier,
              is_later,
              of_date_ofday,
              of_date_ofday_precise,
              to_date_ofday,
              to_date_ofday_precise,
              to_date,
              to_ofday,
              reset_date_cache,
              epoch,
              convert,
              utc_offset$0,
              of_string,
              to_string,
              to_filename_string,
              of_filename_string,
              to_string_abs,
              to_string_abs_trimmed,
              to_string_abs_parts,
              to_string_trimmed,
              to_sec_string,
              of_localized_string,
              of_string_gen,
              to_string_iso8601_basic,
              occurrence]}
    var Core_kernel_Time=[0,_abO_];
    caml_register_global(5118,Core_kernel_Time,"Core_kernel__Time");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Time_float0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$368);
    caml_call1(Expect_test_collector[4][1],cst_src_time_float0_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$369,cst$154);
    var
     include$113=caml_call1(Robust_compare[1],[0,1e-06]),
     symbol$200=include$113[2],
     symbol$201=include$113[3],
     symbol$202=include$113[4],
     symbol$203=include$113[5],
     symbol$204=include$113[6],
     symbol$205=include$113[7],
     robustly_compare$3=include$113[8];
    function diff$7(t1,t2)
     {return to_span_since_epoch(caml_call2(symbol$28,t1,t2))}
    function add$13(t,span){return t + span}
    function sub$4(t,span){return t - span}
    function prev$4(t){return caml_call2(_IT_,759637122,t)}
    function next$3(t){return caml_call2(_IT_,19067,t)}
    function of_synthetic_span_since_epoch(span){return span}
    function to_synthetic_span_since_epoch(t){return to_span_since_epoch(t)}
    function of_date_ofday(date,ofday)
     {var
       _a5Q_=Days[5],
       _a5R_=caml_call1(Days[1],date),
       days=caml_call1(_IU_,caml_call2(Days[3],_a5R_,_a5Q_));
      return days * 86400. + to_span_since_start_of_day(ofday)}
    function to_absolute(relative,offset_from_utc)
     {return relative - offset_from_utc}
    function of_absolute(absolute,offset_from_utc)
     {return absolute + offset_from_utc}
    var sec_per_day=caml_call1(of_int$3,86400);
    function to_days_from_epoch(t)
     {var
       _a5N_=caml_call2(symbol$21,t,253402300800.),
       gmtime_lower_bound=-62167219200.,
       _a5O_=_a5N_ || caml_call2(symbol$25,t,gmtime_lower_bound);
      if(_a5O_)caml_call3(_Pe_,_abP_,t,0);
      var
       _a5P_=caml_call1(of_float$4,t),
       days_from_epoch_approx=caml_call2(include$62[100][4],_a5P_,sec_per_day);
      return caml_call2
               (symbol$25,
                t,
                caml_call1
                 (to_float$3,
                  caml_call2
                   (include$62[100][3],days_from_epoch_approx,sec_per_day)))
              ?caml_call1(pred$1,days_from_epoch_approx)
              :days_from_epoch_approx}
    function ofday_of_days_from_epoch(t,days_from_epoch)
     {var
       days_from_epoch_in_sec=
        caml_call1
         (to_float$3,
          caml_call2(include$62[100][3],days_from_epoch,sec_per_day)),
       remainder=t - days_from_epoch_in_sec;
      return of_span_since_start_of_day(to_span_since_epoch(remainder))}
    function date_of_days_from_epoch(days_from_epoch)
     {var
       _a5L_=caml_call1(to_int_exn$2,days_from_epoch),
       _a5M_=caml_call2(Days[4],Days[5],_a5L_);
      return caml_call1(Days[2],_a5M_)}
    function to_date$0(t)
     {var days_from_epoch=to_days_from_epoch(t);
      return date_of_days_from_epoch(days_from_epoch)}
    function to_ofday(t)
     {var days_from_epoch=to_days_from_epoch(t);
      return ofday_of_days_from_epoch(t,days_from_epoch)}
    function to_date_ofday(t)
     {var
       days_from_epoch=to_days_from_epoch(t),
       date=date_of_days_from_epoch(days_from_epoch),
       ofday=ofday_of_days_from_epoch(t,days_from_epoch);
      return [0,date,ofday]}
    function next_multiple_internal(can_equal_after,base,after,interval)
     {if(caml_call2(symbol$22,interval,zero))
       failwiths(0,_abQ_,cst_Time_next_multiple_got_non,interval,sexp_of_t$91);
      var base_to_after=diff$7(after,base);
      if(caml_call2(symbol$25,base_to_after,zero))return base;
      var
       next=
        base
        +
        caml_call2
         (scale,interval,caml_call2(_IZ_,_abR_,base_to_after / interval));
      if(! caml_call2(symbol$24,next,after))
       {var switch$0=0;
        if(! can_equal_after || ! caml_call2(symbol$23,next,after))
         switch$0 = 1;
        if(switch$0)return next + interval}
      return next}
    function next_multiple(opt,base,after,interval,param)
     {if(opt)var sth=opt[1],can_equal_after=sth;else var can_equal_after=0;
      return next_multiple_internal(can_equal_after,base,after,interval)}
    function prev_multiple(opt,base,before,interval,param)
     {if(opt)var sth=opt[1],can_equal_before=sth;else var can_equal_before=0;
      return next_multiple_internal
              (1 - can_equal_before,base,before - interval,interval)}
    function now(param)
     {var float_ns=caml_call1(to_float$3,caml_call1(Time_now[1],0));
      return to_span_since_epoch(float_ns * 1e-09)}
    var Stable$7=[0];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$370);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Time_float0$0);
    var
     Date_and_ofday$0=
      [0,
       of_date_ofday,
       to_date_ofday,
       to_date$0,
       to_ofday,
       of_absolute,
       to_absolute,
       of_synthetic_span_since_epoch,
       to_synthetic_span_since_epoch],
     Ofday=
      [0,
       bin_size_t$5,
       bin_write_t$5,
       bin_read_t$11,
       bin_read_t$12,
       bin_shape_t$51,
       bin_writer_t$44,
       bin_reader_t$44,
       bin_t$44,
       t_of_sexp$81,
       sexp_of_t$92,
       typerep_of_t$8,
       typename_of_t$8,
       symbol$21,
       symbol$22,
       symbol$23,
       symbol$24,
       symbol$25,
       symbol$26,
       equal$20,
       compare$40,
       min$2,
       max$2,
       ascending$2,
       descending$2,
       between$2,
       clamp_exn$2,
       clamp$2,
       validate_lbound$2,
       validate_ubound$2,
       validate_bound$2,
       comparator$5,
       _abr_,
       _abs_,
       _abt_,
       pp$7,
       symbol$194,
       symbol$195,
       symbol$196,
       symbol$197,
       symbol$198,
       symbol$199,
       robustly_compare$2,
       quickcheck_generator$13,
       quickcheck_observer$12,
       quickcheck_shrinker$12,
       gen_incl$1,
       gen_uniform_incl$1,
       of_string$20,
       to_string$23,
       create$23,
       to_parts$0,
       start_of_day,
       start_of_next_day,
       approximate_end_of_day,
       to_span_since_start_of_day,
       of_span_since_start_of_day,
       of_span_since_start_of_day,
       span_since_start_of_day_is_val,
       of_span_since_start_of_day_unc,
       add$12,
       sub$3,
       next$2,
       prev$3,
       diff$6,
       small_diff,
       to_string_trimmed,
       to_sec_string,
       of_string_iso8601_extended,
       to_millisec_string,
       to_millisec_string],
     Span$0=
      [0,
       bin_size_t$5,
       bin_write_t$5,
       bin_read_t$11,
       bin_read_t$12,
       bin_shape_t$51,
       bin_writer_t$44,
       bin_reader_t$44,
       bin_t$44,
       t_of_sexp$78,
       sexp_of_t$91,
       typerep_of_t$8,
       typename_of_t$8,
       symbol$21,
       symbol$22,
       symbol$23,
       symbol$24,
       symbol$25,
       symbol$26,
       equal$20,
       compare$40,
       min$2,
       max$2,
       ascending$2,
       descending$2,
       between$2,
       clamp_exn$2,
       clamp$2,
       validate_lbound$2,
       validate_ubound$2,
       validate_bound$2,
       comparator$5,
       validate_positive,
       validate_non_negative,
       validate_negative,
       validate_non_positive,
       is_positive,
       is_non_negative,
       is_negative,
       is_non_positive,
       sign,
       _aa$_,
       _aba_,
       _abb_,
       _aa7_,
       symbol$184,
       symbol$185,
       symbol$186,
       symbol$187,
       symbol$188,
       symbol$189,
       robustly_compare$1,
       quickcheck_generator$7,
       quickcheck_observer$6,
       quickcheck_shrinker$6,
       gen_incl$0,
       gen_uniform_incl$0,
       to_string$22,
       of_string$19,
       nanosecond,
       microsecond,
       millisecond,
       second$0,
       minute,
       hour,
       day$0,
       robust_comparison_tolerance,
       zero,
       create$22,
       to_parts,
       of_ns,
       of_us,
       of_ms,
       to_span_since_epoch,
       of_int_sec,
       of_int32_seconds,
       of_int63_seconds,
       of_min,
       of_hr,
       of_day,
       to_ns,
       to_us,
       to_ms,
       of_span_since_epoch,
       to_min,
       to_hr,
       to_day,
       to_int63_seconds_round_down_ex,
       to_float,
       symbol$27,
       symbol$28,
       abs,
       neg,
       scale,
       symbol$190,
       symbol$191,
       next$1,
       prev$2,
       to_short_string,
       to_unit_of_time,
       of_unit_of_time,
       to_string_hum$9,
       randomize$0],
     include$114=
      [0,
       Span$0,
       Ofday,
       bin_size_t$5,
       bin_write_t$5,
       bin_read_t$11,
       bin_read_t$12,
       bin_shape_t$51,
       bin_writer_t$44,
       bin_reader_t$44,
       bin_t$44,
       hash_fold_t$17,
       hash$14,
       typerep_of_t$8,
       typename_of_t$8,
       Replace_polymorphic_compare$2,
       symbol$200,
       symbol$201,
       symbol$202,
       symbol$203,
       symbol$204,
       symbol$205,
       robustly_compare$3,
       add$13,
       sub$4,
       diff$7,
       next$3,
       prev$4,
       to_span_since_epoch,
       of_span_since_epoch,
       symbol$21,
       symbol$22,
       symbol$23,
       symbol$24,
       symbol$25,
       symbol$26,
       equal$20,
       compare$40,
       min$2,
       max$2,
       ascending$2,
       descending$2,
       between$2,
       clamp_exn$2,
       clamp$2,
       comparator$5,
       validate_lbound$2,
       validate_ubound$2,
       validate_bound$2,
       Date_and_ofday$0,
       next_multiple,
       prev_multiple,
       now,
       Stable$7];
    caml_register_global(5120,include$114,"Core_kernel__Time_float0");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Time_float);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$371);
    caml_call1(Expect_test_collector[4][1],cst_src_time_float_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$372,cst$155);
    var
     _abS_=
      _abO_
       ([0,
         bin_size_t$5,
         bin_write_t$5,
         bin_read_t$11,
         bin_read_t$12,
         bin_shape_t$51,
         bin_writer_t$44,
         bin_reader_t$44,
         bin_t$44,
         hash_fold_t$17,
         hash$14,
         typerep_of_t$8,
         typename_of_t$8,
         [0,
          Span$0[1],
          Span$0[2],
          Span$0[3],
          Span$0[4],
          Span$0[5],
          Span$0[6],
          Span$0[7],
          Span$0[8],
          Span$0[9],
          Span$0[10],
          Span$0[11],
          Span$0[12],
          Parts,
          Span$0[13],
          Span$0[14],
          Span$0[15],
          Span$0[16],
          Span$0[17],
          Span$0[18],
          Span$0[19],
          Span$0[20],
          Span$0[21],
          Span$0[22],
          Span$0[23],
          Span$0[24],
          Span$0[25],
          Span$0[26],
          Span$0[27],
          Span$0[28],
          Span$0[29],
          Span$0[30],
          Replace_polymorphic_compare$2,
          Span$0[31],
          Map$21,
          Set$21,
          Span$0[32],
          Span$0[33],
          Span$0[34],
          Span$0[35],
          Span$0[36],
          Span$0[37],
          Span$0[38],
          Span$0[39],
          Span$0[40],
          Span$0[41],
          Span$0[42],
          Span$0[43],
          _abc_,
          _abd_,
          _abe_,
          Span$0[44],
          Span$0[45],
          Span$0[46],
          Span$0[47],
          Span$0[48],
          Span$0[49],
          Span$0[50],
          Span$0[51],
          Span$0[52],
          Span$0[53],
          Span$0[54],
          Span$0[55],
          Span$0[56],
          Span$0[57],
          Span$0[58],
          Span$0[59],
          Span$0[60],
          Span$0[61],
          Span$0[62],
          Span$0[63],
          Span$0[64],
          Span$0[65],
          Span$0[66],
          Span$0[67],
          Span$0[68],
          Span$0[69],
          Span$0[70],
          Span$0[71],
          Span$0[72],
          Span$0[73],
          Span$0[74],
          Span$0[75],
          Span$0[76],
          Span$0[77],
          Span$0[78],
          Span$0[79],
          Span$0[80],
          Span$0[81],
          Span$0[82],
          Span$0[83],
          Span$0[84],
          Span$0[85],
          Span$0[86],
          Span$0[87],
          Span$0[88],
          Span$0[89],
          Span$0[90],
          Span$0[91],
          Span$0[92],
          Span$0[93],
          Span$0[94],
          Span$0[95],
          Span$0[96],
          Span$0[97],
          Span$0[98],
          Span$0[99],
          Span$0[100],
          Span$0[101],
          Span$0[102]],
         [0,
          Ofday[1],
          Ofday[2],
          Ofday[3],
          Ofday[4],
          Ofday[5],
          Ofday[6],
          Ofday[7],
          Ofday[8],
          Ofday[9],
          Ofday[10],
          Ofday[11],
          Ofday[12],
          Ofday[13],
          Ofday[14],
          Ofday[15],
          Ofday[16],
          Ofday[17],
          Ofday[18],
          Ofday[19],
          Ofday[20],
          Ofday[21],
          Ofday[22],
          Ofday[23],
          Ofday[24],
          Ofday[25],
          Ofday[26],
          Ofday[27],
          Ofday[28],
          Ofday[29],
          Ofday[30],
          Replace_polymorphic_compare$2,
          Ofday[31],
          Map$22,
          Set$22,
          Ofday[32],
          Ofday[33],
          Ofday[34],
          _abu_,
          _abv_,
          _abw_,
          Ofday[35],
          Ofday[36],
          Ofday[37],
          Ofday[38],
          Ofday[39],
          Ofday[40],
          Ofday[41],
          Ofday[42],
          Ofday[43],
          Ofday[44],
          Ofday[45],
          Ofday[46],
          Ofday[47],
          Ofday[48],
          Ofday[49],
          Ofday[50],
          Ofday[51],
          Ofday[52],
          Ofday[53],
          Ofday[54],
          Ofday[55],
          Ofday[56],
          Ofday[57],
          Ofday[58],
          Ofday[59],
          Ofday[60],
          Ofday[61],
          Ofday[62],
          Ofday[63],
          Ofday[64],
          Ofday[65],
          Ofday[66],
          Ofday[67],
          Ofday[68],
          Ofday[69],
          Ofday[70]],
         Replace_polymorphic_compare$2,
         symbol$200,
         symbol$201,
         symbol$202,
         symbol$203,
         symbol$204,
         symbol$205,
         robustly_compare$3,
         add$13,
         sub$4,
         diff$7,
         next$3,
         prev$4,
         to_span_since_epoch,
         of_span_since_epoch,
         symbol$21,
         symbol$22,
         symbol$23,
         symbol$24,
         symbol$25,
         symbol$26,
         equal$20,
         compare$40,
         min$2,
         max$2,
         ascending$2,
         descending$2,
         between$2,
         clamp_exn$2,
         clamp$2,
         comparator$5,
         validate_lbound$2,
         validate_ubound$2,
         validate_bound$2,
         Date_and_ofday$0,
         next_multiple,
         prev_multiple,
         now]),
     _abT_=_abS_[50],
     _ab6_=_abS_[66],
     _acg_=_abS_[78],
     _ack_=_abS_[82],
     _abU_=_abS_[54],
     _abV_=_abS_[55],
     _abW_=_abS_[56],
     _abX_=_abS_[57],
     _abY_=_abS_[58],
     _abZ_=_abS_[59],
     _ab0_=_abS_[60],
     _ab1_=_abS_[61],
     _ab2_=_abS_[62],
     _ab3_=_abS_[63],
     _ab4_=_abS_[64],
     _ab5_=_abS_[65],
     _ab7_=_abS_[67],
     _ab8_=_abS_[68],
     _ab9_=_abS_[69],
     _ab__=_abS_[70],
     _ab$_=_abS_[71],
     _aca_=_abS_[72],
     _acb_=_abS_[73],
     _acc_=_abS_[74],
     _acd_=_abS_[75],
     _ace_=_abS_[76],
     _acf_=_abS_[77],
     _ach_=_abS_[79],
     _aci_=_abS_[80],
     _acj_=_abS_[81],
     _acl_=_abS_[83],
     _acm_=_abS_[84],
     _acn_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$189),0,bin_shape_t$51],0],
     _aco_=caml_call1(Bin_prot_Shape[4][1],cst_src_time_float_ml_18_6),
     group$115=caml_call2(Bin_prot_Shape[6],_aco_,_acn_),
     _acp_=caml_call1(Bin_prot_Shape[2][1],cst_t$190),
     bin_shape_t$98=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$115,_acp_),0),
     bin_writer_t$86=[0,bin_size_t$5,bin_write_t$5],
     bin_reader_t$86=[0,bin_read_t$11,bin_read_t$12],
     bin_t$86=[0,bin_shape_t$98,bin_writer_t$86,bin_reader_t$86];
    function hash$45(x){return caml_call1(hash$14,x)}
    function sexp_of_t$93(t)
     {return caml_call2
              (sexp_of_t$17,sexp_of_t$43,caml_call2(_acg_,t,_abT_[6]))}
    function t_of_sexp$84(sexp)
     {try
       {var switch$0=0;
        if(1 === sexp[0])
         {var _a5E_=sexp[1];
          if(_a5E_)
           {var _a5F_=_a5E_[1];
            if(0 === _a5F_[0])
             {var _a5G_=_a5E_[2];
              if(_a5G_)
               {var _a5H_=_a5G_[1],_a5I_=_a5F_[1];
                if(0 === _a5H_[0] && ! _a5G_[2])
                 {var
                   ofday_and_possibly_zone=_a5H_[1],
                   _a5J_=
                    caml_call2
                     (_Gp_,
                      _a5I_,
                      caml_call2(_Gp_,cst$156,ofday_and_possibly_zone)),
                   _a5K_=
                    function(param)
                     {return caml_call2
                              (_Od_,cst_Time_Stable_With_utc_V2_t_$0,sexp)},
                   _a5D_=
                    caml_call3
                     (_ack_,function(param){return _abT_[6]},_a5K_,_a5J_);
                  switch$0 = 1}}}}}
        if(! switch$0)
         var _a5D_=caml_call2(_Od_,cst_Time_Stable_With_utc_V2_t_,sexp);
        return _a5D_}
      catch(e)
       {e = caml_wrap_exception(e);
        if(e[1] === _Oc_)throw e;
        return caml_call2
                (_Od_,caml_call2(_fw_,_acq_,caml_call1(Base_Exn[9],e)),sexp)}}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$373);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Time_float$0);
    var
     _acr_=
      [0,
       [0,
        [0,
         hash_fold_t$17,
         hash$45,
         bin_size_t$5,
         bin_write_t$5,
         bin_read_t$11,
         bin_read_t$12,
         bin_shape_t$98,
         bin_writer_t$86,
         bin_reader_t$86,
         bin_t$86,
         compare$40,
         t_of_sexp$84,
         sexp_of_t$93]],
       _Uz_],
     _acs_=
      [0,
       Span$0[1],
       Span$0[2],
       Span$0[3],
       Span$0[4],
       Span$0[5],
       Span$0[6],
       Span$0[7],
       Span$0[8],
       Span$0[9],
       Span$0[10],
       Span$0[11],
       Span$0[12],
       Parts,
       Span$0[13],
       Span$0[14],
       Span$0[15],
       Span$0[16],
       Span$0[17],
       Span$0[18],
       Span$0[19],
       Span$0[20],
       Span$0[21],
       Span$0[22],
       Span$0[23],
       Span$0[24],
       Span$0[25],
       Span$0[26],
       Span$0[27],
       Span$0[28],
       Span$0[29],
       Span$0[30],
       Replace_polymorphic_compare$2,
       Span$0[31],
       Map$21,
       Set$21,
       Span$0[32],
       Span$0[33],
       Span$0[34],
       Span$0[35],
       Span$0[36],
       Span$0[37],
       Span$0[38],
       Span$0[39],
       Span$0[40],
       Span$0[41],
       Span$0[42],
       Span$0[43],
       _abc_,
       _abd_,
       _abe_,
       Span$0[44],
       Span$0[45],
       Span$0[46],
       Span$0[47],
       Span$0[48],
       Span$0[49],
       Span$0[50],
       Span$0[51],
       Span$0[52],
       Span$0[53],
       Span$0[54],
       Span$0[55],
       Span$0[56],
       Span$0[57],
       Span$0[58],
       Span$0[59],
       Span$0[60],
       Span$0[61],
       Span$0[62],
       Span$0[63],
       Span$0[64],
       Span$0[65],
       Span$0[66],
       Span$0[67],
       Span$0[68],
       Span$0[69],
       Span$0[70],
       Span$0[71],
       Span$0[72],
       Span$0[73],
       Span$0[74],
       Span$0[75],
       Span$0[76],
       Span$0[77],
       Span$0[78],
       Span$0[79],
       Span$0[80],
       Span$0[81],
       Span$0[82],
       Span$0[83],
       Span$0[84],
       Span$0[85],
       Span$0[86],
       Span$0[87],
       Span$0[88],
       Span$0[89],
       Span$0[90],
       Span$0[91],
       Span$0[92],
       Span$0[93],
       Span$0[94],
       Span$0[95],
       Span$0[96],
       Span$0[97],
       Span$0[98],
       Span$0[99],
       Span$0[100],
       Span$0[101],
       Span$0[102]],
     Core_kernel_Time_float=
      [0,
       bin_size_t$5,
       bin_write_t$5,
       bin_read_t$11,
       bin_read_t$12,
       bin_shape_t$51,
       bin_writer_t$44,
       bin_reader_t$44,
       bin_t$44,
       hash_fold_t$17,
       hash$14,
       typerep_of_t$8,
       typename_of_t$8,
       _acs_,
       [0,
        Ofday[1],
        Ofday[2],
        Ofday[3],
        Ofday[4],
        Ofday[5],
        Ofday[6],
        Ofday[7],
        Ofday[8],
        Ofday[9],
        Ofday[10],
        Ofday[11],
        Ofday[12],
        Ofday[13],
        Ofday[14],
        Ofday[15],
        Ofday[16],
        Ofday[17],
        Ofday[18],
        Ofday[19],
        Ofday[20],
        Ofday[21],
        Ofday[22],
        Ofday[23],
        Ofday[24],
        Ofday[25],
        Ofday[26],
        Ofday[27],
        Ofday[28],
        Ofday[29],
        Ofday[30],
        Replace_polymorphic_compare$2,
        Ofday[31],
        Map$22,
        Set$22,
        Ofday[32],
        Ofday[33],
        Ofday[34],
        _abu_,
        _abv_,
        _abw_,
        Ofday[35],
        Ofday[36],
        Ofday[37],
        Ofday[38],
        Ofday[39],
        Ofday[40],
        Ofday[41],
        Ofday[42],
        Ofday[43],
        Ofday[44],
        Ofday[45],
        Ofday[46],
        Ofday[47],
        Ofday[48],
        Ofday[49],
        Ofday[50],
        Ofday[51],
        Ofday[52],
        Ofday[53],
        Ofday[54],
        Ofday[55],
        Ofday[56],
        Ofday[57],
        Ofday[58],
        Ofday[59],
        Ofday[60],
        Ofday[61],
        Ofday[62],
        Ofday[63],
        Ofday[64],
        Ofday[65],
        Ofday[66],
        Ofday[67],
        Ofday[68],
        Ofday[69],
        Ofday[70]],
       Replace_polymorphic_compare$2,
       symbol$200,
       symbol$201,
       symbol$202,
       symbol$203,
       symbol$204,
       symbol$205,
       robustly_compare$3,
       next$3,
       prev$4,
       to_span_since_epoch,
       of_span_since_epoch,
       symbol$21,
       symbol$22,
       symbol$23,
       symbol$24,
       symbol$25,
       symbol$26,
       equal$20,
       compare$40,
       min$2,
       max$2,
       ascending$2,
       descending$2,
       between$2,
       clamp_exn$2,
       clamp$2,
       comparator$5,
       validate_lbound$2,
       validate_ubound$2,
       validate_bound$2,
       Date_and_ofday$0,
       next_multiple,
       prev_multiple,
       now,
       _abT_,
       add$13,
       sub$4,
       diff$7,
       _abU_,
       _abV_,
       _abW_,
       _abX_,
       _abY_,
       _abZ_,
       _ab0_,
       _ab1_,
       _ab2_,
       _ab3_,
       _ab4_,
       _ab5_,
       _ab6_,
       _ab7_,
       _ab8_,
       _ab9_,
       _ab__,
       _ab$_,
       _aca_,
       _acb_,
       _acc_,
       _acd_,
       _ace_,
       _acf_,
       _acg_,
       _ach_,
       _aci_,
       _acj_,
       _ack_,
       _acl_,
       _acm_,
       _acr_];
    caml_register_global
     (5121,Core_kernel_Time_float,"Core_kernel__Time_float");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Time_ns_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$374);
    caml_call1(Expect_test_collector[4][1],cst_src_time_ns_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$375,cst$157);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$376);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Time_ns_intf$0);
    var Core_kernel_Time_ns_intf=[0];
    caml_register_global
     (5122,Core_kernel_Time_ns_intf,"Core_kernel__Time_ns_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Date);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$377);
    caml_call1(Expect_test_collector[4][1],cst_src_date_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$378,cst$158);
    function of_time(time,zone){return caml_call2(_ab6_,time,zone)}
    function today(zone){return of_time(now(0),zone)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$379);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Date$0);
    var
     Core_kernel_Date=
      [0,
       bin_size_t$72,
       bin_write_t$73,
       bin_read_t$144,
       bin_read_t$145,
       bin_shape_t$88,
       bin_writer_t$77,
       bin_reader_t$77,
       bin_t$77,
       t_of_sexp$70,
       sexp_of_t$84,
       typerep_of_t$23,
       typename_of_t$23,
       hash_fold_t$39,
       hash$38,
       hashable$13,
       Table$15,
       Hash_set$15,
       Hash_queue$13,
       of_string$17,
       to_string$20,
       symbol$160,
       symbol$161,
       symbol$162,
       symbol$163,
       symbol$164,
       symbol$165,
       equal$35,
       compare$71,
       min$13,
       max$13,
       ascending$13,
       descending$13,
       between$13,
       clamp_exn$13,
       clamp$13,
       validate_lbound$13,
       validate_ubound$13,
       validate_bound$13,
       Replace_polymorphic_compare$12,
       comparator$20,
       Map$18,
       Set$18,
       _Xh_,
       create_exn,
       of_string_iso8601_basic,
       to_string_iso8601_basic,
       to_string_american,
       day,
       month,
       year,
       day_of_week,
       week_number_and_year,
       week_number,
       is_weekend,
       is_weekday,
       is_business_day,
       add_days$0,
       add_months,
       add_years,
       diff$5,
       diff_weekdays,
       diff_weekend_days,
       add_weekdays_rounding_backward,
       add_weekdays_rounding_forward,
       add_business_days_rounding_bac,
       add_business_days_rounding_for,
       add_weekdays_rounding_in_direc,
       add_weekdays_rounding_in_direc,
       add_business_days_rounding_in_,
       add_business_days_rounding_in_,
       add_days_skipping,
       dates_between,
       business_dates_between,
       weekdays_between,
       previous_weekday,
       following_weekday,
       first_strictly_after,
       days_in_month,
       is_leap_year,
       unix_epoch,
       quickcheck_generator$11,
       quickcheck_observer$10,
       quickcheck_shrinker$10,
       gen_incl,
       gen_uniform_incl,
       Days,
       Option,
       Stable$6,
       O$1,
       Private$2,
       of_time,
       today];
    caml_register_global(5123,Core_kernel_Date,"Core_kernel__Date");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Date_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$380);
    caml_call1(Expect_test_collector[4][1],cst_src_date_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$381,cst$159);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$382);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Date_intf$0);
    var Core_kernel_Date_intf=[0];
    caml_register_global(5124,Core_kernel_Date_intf,"Core_kernel__Date_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Span_ns);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$383);
    caml_call1(Expect_test_collector[4][1],cst_src_span_ns_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$384,cst$160);
    var arch_sixtyfour=caml_call2(equal$21,Stdlib_sys[9],64);
    function float$1(x){return caml_call1(to_float$3,x)}
    function hash$46(x){return caml_call1(_KN_,x)}
    var
     _act_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$191),0,bin_shape_t$65],0],
     _acu_=caml_call1(Bin_prot_Shape[4][1],cst_src_span_ns_ml_15_2),
     group$116=caml_call2(Bin_prot_Shape[6],_acu_,_act_),
     _acv_=caml_call1(Bin_prot_Shape[2][1],cst_t$192),
     bin_shape_t$99=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$116,_acv_),0),
     bin_writer_t$87=[0,bin_size_t$55,bin_write_t$55],
     bin_reader_t$87=[0,bin_read_t$112,bin_read_t$113],
     bin_t$87=[0,bin_shape_t$99,bin_writer_t$87,bin_reader_t$87],
     Typename_of_t$27=caml_call1(Typerep_lib_Make_typename[1],[0,name$65]),
     typename_of_t$26=Typename_of_t$27[2],
     name_of_t$19=Typename_of_t$27[1],
     typerep_of_t$27=[9,[0,name_of_t$19,[0,_fd_]]];
    function compare$77(a_001,b_002)
     {if(caml_call2(Ppx_compare_lib[1],a_001,b_002))return 0;
      var n=caml_call2(_H__,a_001[1],b_002[1]);
      if(0 === n)
       {var n$0=caml_call2(compare$42,a_001[2],b_002[2]);
        if(0 === n$0)
         {var n$1=caml_call2(compare$42,a_001[3],b_002[3]);
          if(0 === n$1)
           {var n$2=caml_call2(compare$42,a_001[4],b_002[4]);
            if(0 === n$2)
             {var n$3=caml_call2(compare$42,a_001[5],b_002[5]);
              if(0 === n$3)
               {var n$4=caml_call2(compare$42,a_001[6],b_002[6]);
                return 0 === n$4?caml_call2(compare$42,a_001[7],b_002[7]):n$4}
              return n$3}
            return n$2}
          return n$1}
        return n$0}
      return n}
    function t_of_sexp$85(sexp)
     {if(0 === sexp[0])
       return caml_call2(Sexplib0_Sexp_conv_error[16],tp_loc$29,sexp);
      var
       field_sexps=sexp[1],
       sign_field=[0,0],
       hr_field=[0,0],
       min_field=[0,0],
       sec_field=[0,0],
       ms_field=[0,0],
       us_field=[0,0],
       ns_field=[0,0],
       duplicates=[0,0],
       extra=[0,0],
       param=field_sexps;
      for(;;)
       {if(param)
         {var _a5q_=param[1];
          if(1 === _a5q_[0])
           {var _a5r_=_a5q_[1];
            if(_a5r_)
             {var _a5s_=_a5r_[1];
              if(0 === _a5s_[0])
               {var _a5t_=_a5r_[2],_a5u_=_a5s_[1],switch$0=0;
                if(! _a5t_ || ! _a5t_[2])switch$0 = 1;
                if(switch$0)
                 {var
                   tail=param[2],
                   field_sexp$7=
                    function(_a5C_)
                     {function field_sexp(param)
                       {if(_a5C_)
                         {if(_a5C_[2])throw [0,Assert_failure,_acw_];
                          var x=_a5C_[1];
                          return x}
                        return caml_call2
                                (Sexplib0_Sexp_conv_error[10],tp_loc$29,sexp)}
                      return field_sexp},
                   field_sexp=field_sexp$7(_a5t_);
                  if(caml_string_notequal(_a5u_,cst_hr$1))
                   if(caml_string_notequal(_a5u_,cst_min$1))
                    if(caml_string_notequal(_a5u_,cst_ms$4))
                     if(caml_string_notequal(_a5u_,cst_ns$3))
                      if(caml_string_notequal(_a5u_,cst_sec$1))
                       if(caml_string_notequal(_a5u_,cst_sign$1))
                        if(caml_string_notequal(_a5u_,cst_us$4))
                         {if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_a5u_,extra[1]]}
                        else
                         if(us_field[1])
                          duplicates[1] = [0,_a5u_,duplicates[1]];
                         else
                          {var
                            field_sexp$0=field_sexp(0),
                            fvalue=caml_call1(t_of_sexp$39,field_sexp$0);
                           us_field[1] = [0,fvalue]}
                       else
                        if(sign_field[1])
                         duplicates[1] = [0,_a5u_,duplicates[1]];
                        else
                         {var
                           field_sexp$1=field_sexp(0),
                           fvalue$0=caml_call1(_HY_,field_sexp$1);
                          sign_field[1] = [0,fvalue$0]}
                      else
                       if(sec_field[1])
                        duplicates[1] = [0,_a5u_,duplicates[1]];
                       else
                        {var
                          field_sexp$2=field_sexp(0),
                          fvalue$1=caml_call1(t_of_sexp$39,field_sexp$2);
                         sec_field[1] = [0,fvalue$1]}
                     else
                      if(ns_field[1])
                       duplicates[1] = [0,_a5u_,duplicates[1]];
                      else
                       {var
                         field_sexp$3=field_sexp(0),
                         fvalue$2=caml_call1(t_of_sexp$39,field_sexp$3);
                        ns_field[1] = [0,fvalue$2]}
                    else
                     if(ms_field[1])
                      duplicates[1] = [0,_a5u_,duplicates[1]];
                     else
                      {var
                        field_sexp$4=field_sexp(0),
                        fvalue$3=caml_call1(t_of_sexp$39,field_sexp$4);
                       ms_field[1] = [0,fvalue$3]}
                   else
                    if(min_field[1])
                     duplicates[1] = [0,_a5u_,duplicates[1]];
                    else
                     {var
                       field_sexp$5=field_sexp(0),
                       fvalue$4=caml_call1(t_of_sexp$39,field_sexp$5);
                      min_field[1] = [0,fvalue$4]}
                  else
                   if(hr_field[1])
                    duplicates[1] = [0,_a5u_,duplicates[1]];
                   else
                    {var
                      field_sexp$6=field_sexp(0),
                      fvalue$5=caml_call1(t_of_sexp$39,field_sexp$6);
                     hr_field[1] = [0,fvalue$5]}
                  var param=tail;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[10],tp_loc$29,_a5q_)}
        if(duplicates[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],tp_loc$29,duplicates[1],sexp);
        if(extra[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[13],tp_loc$29,extra[1],sexp);
        var
         _a5v_=sign_field[1],
         _a5w_=hr_field[1],
         _a5x_=min_field[1],
         _a5y_=sec_field[1],
         _a5z_=ms_field[1],
         _a5A_=us_field[1],
         _a5B_=ns_field[1];
        if(_a5v_ && _a5w_ && _a5x_ && _a5y_ && _a5z_ && _a5A_ && _a5B_)
         {var
           ns_value=_a5B_[1],
           us_value=_a5A_[1],
           ms_value=_a5z_[1],
           sec_value=_a5y_[1],
           min_value=_a5x_[1],
           hr_value=_a5w_[1],
           sign_value=_a5v_[1];
          return [0,
                  sign_value,
                  hr_value,
                  min_value,
                  sec_value,
                  ms_value,
                  us_value,
                  ns_value]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[15],
                 tp_loc$29,
                 sexp,
                 [0,
                  [0,0 === sign_field[1]?1:0,cst_sign$2],
                  [0,
                   [0,0 === hr_field[1]?1:0,cst_hr$2],
                   [0,
                    [0,0 === min_field[1]?1:0,cst_min$2],
                    [0,
                     [0,0 === sec_field[1]?1:0,cst_sec$2],
                     [0,
                      [0,0 === ms_field[1]?1:0,cst_ms$5],
                      [0,
                       [0,0 === us_field[1]?1:0,cst_us$5],
                       [0,[0,0 === ns_field[1]?1:0,cst_ns$4],0]]]]]]])}}
    function sexp_of_t$94(param)
     {var
       v_ns=param[7],
       v_us=param[6],
       v_ms=param[5],
       v_sec=param[4],
       v_min=param[3],
       v_hr=param[2],
       v_sign=param[1],
       arg=caml_call1(sexp_of_t$48,v_ns),
       bnds=[0,[1,[0,_acx_,[0,arg,0]]],0],
       arg$0=caml_call1(sexp_of_t$48,v_us),
       bnds$0=[0,[1,[0,_acy_,[0,arg$0,0]]],bnds],
       arg$1=caml_call1(sexp_of_t$48,v_ms),
       bnds$1=[0,[1,[0,_acz_,[0,arg$1,0]]],bnds$0],
       arg$2=caml_call1(sexp_of_t$48,v_sec),
       bnds$2=[0,[1,[0,_acA_,[0,arg$2,0]]],bnds$1],
       arg$3=caml_call1(sexp_of_t$48,v_min),
       bnds$3=[0,[1,[0,_acB_,[0,arg$3,0]]],bnds$2],
       arg$4=caml_call1(sexp_of_t$48,v_hr),
       bnds$4=[0,[1,[0,_acC_,[0,arg$4,0]]],bnds$3],
       arg$5=caml_call1(_HZ_,v_sign),
       bnds$5=[0,[1,[0,_acD_,[0,arg$5,0]]],bnds$4];
      return [1,bnds$5]}
    var Parts$0=[0,compare$77,t_of_sexp$85,sexp_of_t$94];
    function next$4(t){return caml_call1(succ$1,t)}
    function prev$5(t){return caml_call1(pred$1,t)}
    var
     nanosecond$0=caml_call1(of_int$3,1),
     microsecond$0=
      caml_call2(symbol$107,caml_call1(of_int$3,1000),nanosecond$0),
     millisecond$0=
      caml_call2(symbol$107,caml_call1(of_int$3,1000),microsecond$0),
     second$1=caml_call2(symbol$107,caml_call1(of_int$3,1000),millisecond$0),
     minute$0=caml_call2(symbol$107,caml_call1(of_int$3,60),second$1),
     hour$1=caml_call2(symbol$107,caml_call1(of_int$3,60),minute$0),
     ns_per_day=caml_call2(symbol$107,caml_call1(of_int$3,24),hour$1),
     _acE_=caml_call1(of_int$3,365),
     max_value_for_1us_rounding=
      caml_call2
       (symbol$107,
        caml_call2(symbol$107,caml_call1(of_int$3,135),_acE_),
        ns_per_day),
     min_value_for_1us_rounding=caml_call1(neg$4,max_value_for_1us_rounding);
    function create$24(opt,_a5j_,_a5i_,_a5h_,_a5g_,_a5f_,_a5e_,_a5d_,param)
     {if(opt)var sth=opt[1],sign=sth;else var sign=2;
      if(_a5j_)var sth$0=_a5j_[1],days=sth$0;else var days=0;
      if(_a5i_)var sth$1=_a5i_[1],hr=sth$1;else var hr=0;
      if(_a5h_)var sth$2=_a5h_[1],minutes=sth$2;else var minutes=0;
      if(_a5g_)var sth$3=_a5g_[1],sec=sth$3;else var sec=0;
      if(_a5f_)var sth$4=_a5f_[1],ms=sth$4;else var ms=0;
      if(_a5e_)var sth$5=_a5e_[1],us=sth$5;else var us=0;
      if(_a5d_)var sth$6=_a5d_[1],ns=sth$6;else var ns=0;
      var
       _a5k_=caml_call2(symbol$107,caml_call1(of_int$3,ns),nanosecond$0),
       _a5l_=caml_call2(symbol$107,caml_call1(of_int$3,us),microsecond$0),
       _a5m_=caml_call2(symbol$107,caml_call1(of_int$3,ms),millisecond$0),
       _a5n_=caml_call2(symbol$107,caml_call1(of_int$3,sec),second$1),
       _a5o_=caml_call2(symbol$107,caml_call1(of_int$3,minutes),minute$0),
       _a5p_=caml_call2(symbol$107,caml_call1(of_int$3,hr),hour$1),
       t=
        caml_call2
         (symbol$105,
          caml_call2
           (symbol$105,
            caml_call2
             (symbol$105,
              caml_call2
               (symbol$105,
                caml_call2
                 (symbol$105,
                  caml_call2
                   (symbol$105,
                    caml_call2(symbol$107,caml_call1(of_int$3,days),ns_per_day),
                    _a5p_),
                  _a5o_),
                _a5n_),
              _a5m_),
            _a5l_),
          _a5k_);
      return sign?t:caml_call1(neg$4,t)}
    function to_parts$1(t)
     {var
       mag=caml_call1(abs$4,t),
       _a48_=
        caml_call1
         (to_int_exn$2,
          caml_call2
           (symbol$112,caml_call2(rem$2,mag,microsecond$0),nanosecond$0)),
       _a49_=
        caml_call1
         (to_int_exn$2,
          caml_call2
           (symbol$112,caml_call2(rem$2,mag,millisecond$0),microsecond$0)),
       _a4__=
        caml_call1
         (to_int_exn$2,
          caml_call2(symbol$112,caml_call2(rem$2,mag,second$1),millisecond$0)),
       _a4$_=
        caml_call1
         (to_int_exn$2,
          caml_call2(symbol$112,caml_call2(rem$2,mag,minute$0),second$1)),
       _a5a_=
        caml_call1
         (to_int_exn$2,
          caml_call2(symbol$112,caml_call2(rem$2,mag,hour$1),minute$0)),
       _a5b_=caml_call1(to_int_exn$2,caml_call2(symbol$112,mag,hour$1)),
       _a5c_=
        caml_call2(symbol$103,t,zero$4)?0:caml_call2(symbol$102,t,zero$4)?2:1;
      return [0,_a5c_,_a5b_,_a5a_,_a4$_,_a4__,_a49_,_a48_]}
    function of_parts(param)
     {var
       ns=param[7],
       us=param[6],
       ms=param[5],
       sec=param[4],
       min=param[3],
       hr=param[2],
       sign=param[1];
      return create$24
              ([0,sign],0,[0,hr],[0,min],[0,sec],[0,ms],[0,us],[0,ns],0)}
    function of_ns$0(f){return caml_call1(_Jf_,f)}
    function of_int63_ns(i){return i}
    function of_int_us(i)
     {return caml_call2(symbol$107,caml_call1(of_int$3,i),microsecond$0)}
    function of_int_ms(i)
     {return caml_call2(symbol$107,caml_call1(of_int$3,i),millisecond$0)}
    function of_int_sec$0(i)
     {return caml_call2(symbol$107,caml_call1(of_int$3,i),second$1)}
    function of_us$0(f){return caml_call1(_Jf_,f * float$1(microsecond$0))}
    function of_ms$0(f){return caml_call1(_Jf_,f * float$1(millisecond$0))}
    function of_sec(f){return caml_call1(_Jf_,f * float$1(second$1))}
    function of_min$0(f){return caml_call1(_Jf_,f * float$1(minute$0))}
    function of_hr$0(f){return caml_call1(_Jf_,f * float$1(hour$1))}
    function of_day$0(f){return caml_call1(_Jf_,f * float$1(ns_per_day))}
    function of_sec_with_microsecond_precis(sec)
     {var us=caml_call1(_Jf_,sec * 1000000.);
      return caml_call2(symbol$107,us,caml_call1(of_int$3,1000))}
    function of_int63_seconds$0(x)
     {return caml_call2(include$62[100][3],x,second$1)}
    function of_int32_seconds$0(x)
     {return of_int63_seconds$0(caml_call1(of_int32$2,x))}
    function to_ns$0(t){return float$1(t)}
    function to_int63_ns(t){return t}
    function to_us$0(t)
     {var _a47_=float$1(microsecond$0);return float$1(t) / _a47_}
    function to_ms$0(t)
     {var _a46_=float$1(millisecond$0);return float$1(t) / _a46_}
    function to_sec(t){var _a45_=float$1(second$1);return float$1(t) / _a45_}
    function to_min$0(t)
     {var _a44_=float$1(minute$0);return float$1(t) / _a44_}
    function to_hr$0(t){var _a43_=float$1(hour$1);return float$1(t) / _a43_}
    function to_day$0(t)
     {var _a42_=float$1(ns_per_day);return float$1(t) / _a42_}
    function to_int_us(t)
     {return caml_call1(to_int_exn$2,caml_call2(symbol$112,t,microsecond$0))}
    function to_int_ms(t)
     {return caml_call1(to_int_exn$2,caml_call2(symbol$112,t,millisecond$0))}
    function to_int_sec(t)
     {return caml_call1(to_int_exn$2,caml_call2(symbol$112,t,second$1))}
    function to_int63_seconds_round_down_ex$0(t)
     {return caml_call2(include$62[100][17],t,second$1)}
    function of_int_ns(i){return caml_call1(of_int$3,i)}
    var
     _acF_=
      arch_sixtyfour
       ?function(t){return caml_call1(to_int_exn$2,t)}
       :function(param)
         {return caml_call1(_Gb_,cst_Time_ns_Span_to_int_ns_uns)};
    function add$14(t,u){return caml_call2(symbol$105,t,u)}
    function diff$8(t,u){return caml_call2(symbol$106,t,u)}
    function scale$1(t,f){return caml_call1(_Jf_,float$1(t) * f)}
    function scale_int63(t,i){return caml_call2(symbol$107,t,i)}
    function scale_int(t,i){return scale_int63(t,caml_call1(of_int$3,i))}
    function symbol$206(t,f){return caml_call1(_Jf_,float$1(t) / f)}
    function to_proportional_float(t){return caml_call1(to_float$3,t)}
    function of_unit_of_time$0(u)
     {switch(u)
       {case 0:return nanosecond$0;
        case 1:return microsecond$0;
        case 2:return millisecond$0;
        case 3:return second$1;
        case 4:return minute$0;
        case 5:return hour$1;
        default:return ns_per_day}}
    function to_unit_of_time$0(t)
     {var abs_t=caml_call1(abs$4,t);
      return caml_call2(include$64[1],abs_t,ns_per_day)
              ?6
              :caml_call2(include$64[1],abs_t,hour$1)
                ?5
                :caml_call2(include$64[1],abs_t,minute$0)
                  ?4
                  :caml_call2(include$64[1],abs_t,second$1)
                    ?3
                    :caml_call2(include$64[1],abs_t,millisecond$0)
                      ?2
                      :caml_call2(include$64[1],abs_t,microsecond$0)?1:0}
    var
     _acG_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$193),0,bin_shape_t$99],0],
     _acH_=caml_call1(Bin_prot_Shape[4][1],cst_src_span_ns_ml_184_8),
     group$117=caml_call2(Bin_prot_Shape[6],_acH_,_acG_),
     _acI_=caml_call1(Bin_prot_Shape[2][1],cst_t$194),
     bin_shape_t$100=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$117,_acI_),0),
     bin_writer_t$88=[0,bin_size_t$55,bin_write_t$55],
     bin_reader_t$88=[0,bin_read_t$112,bin_read_t$113],
     bin_t$88=[0,bin_shape_t$100,bin_writer_t$88,bin_reader_t$88],
     compare$78=include$64[8];
    function hash$47(x){return hash$46(x)}
    function of_int63_exn(t){return t}
    function to_int63(t){return t}
    function number_of_digits_to_write(span_part_magnitude)
     {if(caml_call2(O$0[9],span_part_magnitude,0))return 0;
      if(caml_call2(O$0[11],span_part_magnitude,10))return 1;
      if(caml_call2(O$0[11],span_part_magnitude,100))return 2;
      if(caml_call2(O$0[11],span_part_magnitude,1000))return 3;
      if(caml_call2(O$0[11],span_part_magnitude,10000))return 4;
      if(caml_call2(O$0[11],span_part_magnitude,100000))return 5;
      throw [0,Assert_failure,_acJ_]}
    function write_char(buf,pos,char$0)
     {caml_bytes_unsafe_set(buf,pos,char$0);return caml_call2(O$0[1],pos,1)}
    function write_2_chars(buf,pos,char1,char2)
     {caml_bytes_unsafe_set(buf,pos,char1);
      caml_bytes_unsafe_set(buf,caml_call2(O$0[1],pos,1),char2);
      return caml_call2(O$0[1],pos,2)}
    function write_digits(buf,pos,digits,int$0)
     {write_int63(buf,pos,digits,caml_call1(of_int$3,int$0));
      return caml_call2(O$0[1],pos,digits)}
    function write_if_non_empty(buf,pos,digits,int$0,suffix)
     {if(caml_call2(O$0[9],digits,0))return pos;
      var
       pos$0=write_digits(buf,pos,digits,int$0),
       pos$1=write_char(buf,pos$0,suffix);
      return pos$1}
    var
     nanos_of_millisecond=caml_call1(to_int_exn$2,millisecond$0),
     nanos_of_microsecond=caml_call1(to_int_exn$2,microsecond$0),
     int63_60=caml_call1(of_int$3,60),
     int63_24=caml_call1(of_int$3,24);
    function to_string$24(t)
     {if(caml_call2(include$64[7],t,zero$4))return cst_0s$1;
      var
       is_negative=caml_call2(include$64[5],t,zero$4),
       seconds=caml_call2(symbol$112,t,second$1),
       ns=caml_call1(to_int_exn$2,caml_call2(rem$2,t,second$1)),
       seconds$0=caml_call1(abs$4,seconds),
       ns$0=caml_call1(abs$1,ns),
       s=caml_call1(to_int_exn$2,caml_call2(rem$2,seconds$0,int63_60)),
       minutes=caml_call2(symbol$112,seconds$0,int63_60),
       m=caml_call1(to_int_exn$2,caml_call2(rem$2,minutes,int63_60)),
       hours=caml_call2(symbol$112,minutes,int63_60),
       h=caml_call1(to_int_exn$2,caml_call2(rem$2,hours,int63_24)),
       d=caml_call1(to_int_exn$2,caml_call2(symbol$112,hours,int63_24)),
       digits_of_d=number_of_digits_to_write(d),
       digits_of_h=number_of_digits_to_write(h),
       digits_of_m=number_of_digits_to_write(m),
       decimal_unit=
        caml_call2(O$0[10],s,0)
         ?0
         :caml_call2(O$0[7],ns$0,nanos_of_millisecond)
           ?1
           :caml_call2(O$0[7],ns$0,nanos_of_microsecond)
             ?2
             :caml_call2(O$0[7],ns$0,1)?3:4;
      switch(decimal_unit)
       {case 0:var decimal_unit_integer=s;break;
        case 1:
         var
          decimal_unit_integer=
           caml_call2(O$0[4],ns$0,nanos_of_millisecond);
         break;
        case 2:
         var
          decimal_unit_integer=
           caml_call2(O$0[4],ns$0,nanos_of_microsecond);
         break;
        case 3:var decimal_unit_integer=ns$0;break;
        default:var decimal_unit_integer=0}
      switch(decimal_unit)
       {case 0:var decimal_unit_billionths=ns$0;break;
        case 1:
         var
          _a4X_=caml_call2(O$0[16],ns$0,nanos_of_millisecond),
          decimal_unit_billionths=caml_call2(O$0[3],_a4X_,1000);
         break;
        case 2:
         var
          _a4Y_=caml_call2(O$0[16],ns$0,nanos_of_microsecond),
          decimal_unit_billionths=caml_call2(O$0[3],_a4Y_,1000000);
         break;
        case 3:var decimal_unit_billionths=0;break;
        default:var decimal_unit_billionths=0}
      var digits=number_of_digits_to_write(decimal_unit_integer);
      if
       (caml_call2(O$0[7],decimal_unit_billionths,0)
        &&
        caml_call2(O$0[8],decimal_unit_billionths,999999999))
       {if(caml_call2(O$0[9],decimal_unit_billionths,0))
         var decimals_of_decimal_unit=0;
        else
         {var _a4O_=caml_call2(O$0[16],decimal_unit_billionths,10);
          if(caml_call2(O$0[12],_a4O_,0))
           var decimals_of_decimal_unit=9;
          else
           {var _a4P_=caml_call2(O$0[16],decimal_unit_billionths,100);
            if(caml_call2(O$0[12],_a4P_,0))
             var decimals_of_decimal_unit=8;
            else
             {var _a4Q_=caml_call2(O$0[16],decimal_unit_billionths,1000);
              if(caml_call2(O$0[12],_a4Q_,0))
               var decimals_of_decimal_unit=7;
              else
               {var _a4R_=caml_call2(O$0[16],decimal_unit_billionths,10000);
                if(caml_call2(O$0[12],_a4R_,0))
                 var decimals_of_decimal_unit=6;
                else
                 {var
                   _a4S_=
                    caml_call2(O$0[16],decimal_unit_billionths,100000);
                  if(caml_call2(O$0[12],_a4S_,0))
                   var decimals_of_decimal_unit=5;
                  else
                   {var
                     _a4T_=
                      caml_call2(O$0[16],decimal_unit_billionths,1000000);
                    if(caml_call2(O$0[12],_a4T_,0))
                     var decimals_of_decimal_unit=4;
                    else
                     {var
                       _a4U_=
                        caml_call2(O$0[16],decimal_unit_billionths,10000000);
                      if(caml_call2(O$0[12],_a4U_,0))
                       var decimals_of_decimal_unit=3;
                      else
                       var
                        _a4V_=caml_call2(O$0[16],decimal_unit_billionths,100000000),
                        decimals_of_decimal_unit=caml_call2(O$0[12],_a4V_,0)?2:1}}}}}}}
        var
         sign_len=is_negative?1:0,
         d_len=
          caml_call2(O$0[10],digits_of_d,0)?caml_call2(O$0[1],digits_of_d,1):0,
         h_len=
          caml_call2(O$0[10],digits_of_h,0)?caml_call2(O$0[1],digits_of_h,1):0,
         m_len=
          caml_call2(O$0[10],digits_of_m,0)?caml_call2(O$0[1],digits_of_m,1):0,
         digits_len=
          decimal_unit
           ?4 <= decimal_unit?0:caml_call2(O$0[1],digits,2)
           :caml_call2(O$0[1],digits,1),
         decimals_len=
          caml_call2(O$0[10],decimals_of_decimal_unit,0)
           ?caml_call2(O$0[1],decimals_of_decimal_unit,1)
           :0,
         decimal_unit_len=caml_call2(O$0[1],digits_len,decimals_len),
         _a4Z_=caml_call2(O$0[1],sign_len,d_len),
         _a40_=caml_call2(O$0[1],_a4Z_,h_len),
         _a41_=caml_call2(O$0[1],_a40_,m_len),
         string_length=caml_call2(O$0[1],_a41_,decimal_unit_len);
        if(caml_call2(O$0[10],string_length,0))
         {var
           buf=caml_call1(_Eq_,string_length),
           pos$2=0,
           pos$3=is_negative?write_char(buf,pos$2,45):pos$2,
           pos$4=write_if_non_empty(buf,pos$3,digits_of_d,d,100),
           pos$5=write_if_non_empty(buf,pos$4,digits_of_h,h,104),
           pos$6=write_if_non_empty(buf,pos$5,digits_of_m,m,109);
          if(caml_call2(O$0[9],digits,0))
           var pos$7=pos$6;
          else
           {var pos=write_digits(buf,pos$6,digits,decimal_unit_integer);
            if(caml_call2(O$0[9],decimals_of_decimal_unit,0))
             var pos$0=pos;
            else
             {var
               pos$1=write_char(buf,pos,46),
               _a4W_=
                caml_call2
                 (pow,10,caml_call2(O$0[2],9,decimals_of_decimal_unit));
              write_int63
               (buf,
                pos$1,
                decimals_of_decimal_unit,
                caml_call1
                 (of_int$3,caml_call2(O$0[4],decimal_unit_billionths,_a4W_)));
              var pos$0=caml_call2(O$0[1],pos$1,decimals_of_decimal_unit)}
            switch(decimal_unit)
             {case 0:var pos$7=write_char(buf,pos$0,115);break;
              case 1:var pos$7=write_2_chars(buf,pos$0,109,115);break;
              case 2:var pos$7=write_2_chars(buf,pos$0,117,115);break;
              case 3:var pos$7=write_2_chars(buf,pos$0,110,115);break;
              default:var pos$7=pos$0}}
          if(caml_call2(O$0[9],pos$7,string_length))
           return caml_call1(_EJ_,buf);
          throw [0,Assert_failure,_acL_]}
        throw [0,Assert_failure,_acM_]}
      throw [0,Assert_failure,_acK_]}
    var
     int63_10=caml_call1(of_int$3,10),
     min_mult10_without_underflow=caml_call2(symbol$112,min_value$2,int63_10);
    function invalid_string$2(string,reason)
     {var
       _a4M_=[0,[1,[0,_acN_,[0,caml_call1(sexp_of_t$43,reason),0]]],0],
       _a4N_=[0,[1,[0,_acO_,[0,caml_call1(sexp_of_t$43,string),0]]],_a4M_];
      return caml_call1
              (_od_,
               [1,
                [0,
                 caml_call1
                  (Sexplib0_Sexp_conv[7],cst_Time_ns_Span_of_string_inv),
                 _a4N_]])}
    function add_without_underflow(string,x,y)
     {var sum=caml_call2(include$62[100][1],x,y);
      if(caml_call2(include$62[100][10],sum,x))
       invalid_string$2(string,cst_span_would_be_outside_of_i);
      return sum}
    function min_factor_of(span)
     {return caml_call2(symbol$112,min_value$2,span)}
    var
     min_days_without_underflow=min_factor_of(ns_per_day),
     min_hours_without_underflow=min_factor_of(hour$1),
     min_minutes_without_underflow=min_factor_of(minute$0),
     min_seconds_without_underflow=min_factor_of(second$1),
     min_milliseconds_without_under=min_factor_of(millisecond$0),
     min_microseconds_without_under=min_factor_of(microsecond$0),
     min_nanoseconds_without_underf=min_factor_of(nanosecond$0);
    function of_string$21(string)
     {var neg_ns=[0,zero$4],pos=[0,0],len=caml_ml_string_length(string);
      if(caml_call2(O$0[9],len,0))invalid_string$2(string,cst_empty_string$0);
      var
       match=caml_string_unsafe_get(string,pos[1]),
       switcher=match - 43 | 0,
       switch$0=0;
      if(! (2 < switcher >>> 0))
       {var switch$1=0;
        switch(switcher)
         {case 0:pos[1]++;var _a4L_=0;break;
          case 1:switch$1 = 1;break;
          default:pos[1]++;var _a4L_=1}
        if(! switch$1){var is_negative=_a4L_;switch$0 = 1}}
      if(! switch$0)var is_negative=0;
      var round_ties_before_negating=is_negative?1:0;
      a:
      for(;;)
       {if(caml_call2(O$0[11],pos[1],len))
         {var has_digit=[0,0],i=[0,zero$4],end_of_digits=[0,0];
          for(;;)
           {if(caml_call2(O$0[11],pos[1],len) && ! end_of_digits[1])
             {var char$0=caml_string_unsafe_get(string,pos[1]),switch$2=0;
              if(58 <= char$0)
               if(95 === char$0)pos[1]++;else switch$2 = 1;
              else
               if(48 <= char$0)
                {var
                  _a4K_=i[1],
                  digit=caml_call1(of_int$3,caml_call1(_E$_,char$0));
                 if
                  (caml_call2
                    (include$62[100][11],_a4K_,min_mult10_without_underflow))
                  invalid_string$2(string,cst_span_would_be_outside_of_i$0);
                 var _a4C_=caml_call1(include$62[100][5],digit);
                 i[1]
                 =
                 add_without_underflow
                  (string,caml_call2(include$62[100][3],_a4K_,int63_10),_a4C_);
                 has_digit[1] = 1;
                 pos[1]++}
               else
                switch$2 = 1;
              if(switch$2)end_of_digits[1] = 1;
              continue}
            var
             neg_integer=i[1],
             decimal_pos=pos[1],
             _a4D_=caml_call2(O$0[11],pos[1],len),
             _a4E_=
              _a4D_
               ?caml_call2(_FD_,46,caml_string_unsafe_get(string,pos[1]))
               :_a4D_;
            if(_a4E_)
             {pos[1]++;
              var end_of_decimals=[0,0];
              for(;;)
               {if(caml_call2(O$0[11],pos[1],len) && ! end_of_decimals[1])
                 {var
                   match$2=caml_string_unsafe_get(string,pos[1]),
                   switch$3=0;
                  if(58 <= match$2)
                   if(95 === match$2)pos[1]++;else switch$3 = 1;
                  else
                   if(48 <= match$2)
                    {has_digit[1] = 1;pos[1]++}
                   else
                    switch$3 = 1;
                  if(switch$3)end_of_decimals[1] = 1;
                  continue}
                break}}
            var end_pos=pos[1];
            if(1 - has_digit[1])
             invalid_string$2(string,cst_no_digits_before_unit_suff);
            var _a4F_=caml_call2(O$0[1],pos[1],1),switch$4=0;
            if
             (caml_call2(O$0[11],_a4F_,len)
              &&
              caml_call2
               (_FD_,
                115,
                caml_string_unsafe_get(string,caml_call2(O$0[1],pos[1],1))))
             {var
               match$0=caml_string_unsafe_get(string,pos[1]),
               switcher$0=match$0 - 109 | 0,
               switch$5=0;
              if(! (8 < switcher$0 >>> 0))
               {var switch$6=0;
                switch(switcher$0)
                 {case 0:
                   pos[1] = caml_call2(O$0[1],pos[1],2);var _a4H_=2;break;
                  case 1:
                   pos[1] = caml_call2(O$0[1],pos[1],2);var _a4H_=0;break;
                  case 8:
                   pos[1] = caml_call2(O$0[1],pos[1],2);var _a4H_=1;break;
                  default:switch$6 = 1}
                if(! switch$6){var _a4G_=_a4H_;switch$5 = 1}}
              if(! switch$5)
               var _a4G_=invalid_string$2(string,cst_unparseable_unit_suffix);
              var unit_of_time=_a4G_}
            else
             switch$4 = 1;
            if(switch$4)
             if(caml_call2(O$0[11],pos[1],len))
              {var
                match$1=caml_string_unsafe_get(string,pos[1]),
                switcher$1=match$1 - 100 | 0,
                switch$7=0;
               if(! (15 < switcher$1 >>> 0))
                {var switch$8=0;
                 switch(switcher$1)
                  {case 0:pos[1]++;var _a4J_=6;break;
                   case 4:pos[1]++;var _a4J_=5;break;
                   case 9:pos[1]++;var _a4J_=4;break;
                   case 15:pos[1]++;var _a4J_=3;break;
                   default:switch$8 = 1}
                 if(! switch$8){var _a4I_=_a4J_;switch$7 = 1}}
               if(! switch$7)
                var
                 _a4I_=
                  invalid_string$2(string,cst_unparseable_unit_suffix$0);
               var unit_of_time=_a4I_}
             else
              var
               unit_of_time=
                invalid_string$2(string,cst_no_unit_suffix_after_digit);
            var scale=of_unit_of_time$0(unit_of_time);
            switch(unit_of_time)
             {case 0:
               var min_without_underflow=min_nanoseconds_without_underf;break;
              case 1:
               var min_without_underflow=min_microseconds_without_under;break;
              case 2:
               var min_without_underflow=min_milliseconds_without_under;break;
              case 3:
               var min_without_underflow=min_seconds_without_underflow;break;
              case 4:
               var min_without_underflow=min_minutes_without_underflow;break;
              case 5:
               var min_without_underflow=min_hours_without_underflow;break;
              default:var min_without_underflow=min_days_without_underflow}
            if(caml_call2(symbol$103,neg_integer,min_without_underflow))
             invalid_string$2(string,cst_span_would_be_outside_of_i$1);
            var
             neg_integer_ns=caml_call2(symbol$107,neg_integer,scale),
             fraction_pos=caml_call2(O$0[1],decimal_pos,1);
            if(caml_call2(O$0[7],fraction_pos,end_pos))
             var neg_nanos_of_part=neg_integer_ns;
            else
             var
              decimal_ns=
               read_int63_decimal
                (string,
                 fraction_pos,
                 caml_call2(O$0[2],end_pos,fraction_pos),
                 scale,
                 round_ties_before_negating,
                 1),
              neg_nanos_of_part=
               add_without_underflow
                (string,neg_integer_ns,caml_call1(symbol$109,decimal_ns));
            neg_ns[1]
            =
            add_without_underflow(string,neg_ns[1],neg_nanos_of_part);
            continue a}}
        var
         ns=
          is_negative
           ?neg_ns[1]
           :caml_call2(symbol$101,neg_ns[1],min_value$2)
             ?invalid_string$2(string,cst_span_would_be_outside_of_i$2)
             :caml_call1(symbol$109,neg_ns[1]);
        return ns}}
    function sexp_of_t$95(t){return [0,to_string$24(t)]}
    function t_of_sexp$86(sexp)
     {if(0 === sexp[0])
       {var x=sexp[1];
        try
         {var _a4B_=of_string$21(x);return _a4B_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          return caml_call2(_Od_,caml_call1(Base_Exn[9],exn),sexp)}}
      return caml_call2(_Od_,cst_Time_ns_Span_Stable_V2_t_o,sexp)}
    var
     include$115=caml_call1(_hc_[1][2],[0,compare$78,sexp_of_t$95]),
     comparator$23=include$115[1],
     include$116=
      caml_call1
       (Stable$2[1][1],
        [0,
         bin_size_t$55,
         bin_write_t$55,
         bin_read_t$112,
         bin_read_t$113,
         bin_shape_t$100,
         bin_writer_t$88,
         bin_reader_t$88,
         bin_t$88,
         compare$78,
         t_of_sexp$86,
         sexp_of_t$95,
         comparator$23]),
     Map$23=include$116[1],
     Set$23=include$116[2],
     Alternate_sexp=[0,t_of_sexp$86,sexp_of_t$95],
     compare$79=include$64[8],
     include$117=
      Validate_with_zero([0,compare$79,t_of_sexp$86,sexp_of_t$95,zero$4]),
     validate_positive$5=include$117[4],
     validate_non_negative$5=include$117[5],
     validate_negative$5=include$117[6],
     validate_non_positive$5=include$117[7],
     is_positive$5=include$117[8],
     is_non_negative$5=include$117[9],
     is_negative$5=include$117[10],
     is_non_positive$5=include$117[11],
     sign$6=include$117[12];
    function symbol$207(t,u)
     {var _a4A_=caml_call2(symbol$106,u,microsecond$0);
      return caml_call2(include$64[1],t,_a4A_)}
    function symbol$208(t,u)
     {var _a4z_=caml_call2(symbol$105,u,microsecond$0);
      return caml_call2(include$64[2],t,_a4z_)}
    function symbol$209(t,u)
     {var _a4y_=caml_call1(abs$4,caml_call2(symbol$106,t,u));
      return caml_call2(include$64[2],_a4y_,microsecond$0)}
    function symbol$210(t,u)
     {var _a4x_=caml_call2(symbol$105,u,microsecond$0);
      return caml_call2(include$64[4],t,_a4x_)}
    function symbol$211(t,u)
     {var _a4w_=caml_call2(symbol$106,u,microsecond$0);
      return caml_call2(include$64[5],t,_a4w_)}
    function symbol$212(t,u)
     {var _a4v_=caml_call1(abs$4,caml_call2(symbol$106,t,u));
      return caml_call2(include$64[4],_a4v_,microsecond$0)}
    function robustly_compare$4(t,u)
     {return symbol$211(t,u)?-1:symbol$210(t,u)?1:0}
    function to_string_hum$10(opt,_a4u_,_a4t_,unit_of_time,t)
     {if(opt)var sth=opt[1],delimiter=sth;else var delimiter=95;
      if(_a4u_)var sth$0=_a4u_[1],decimals=sth$0;else var decimals=3;
      if(_a4t_)
       var sth$1=_a4t_[1],align_decimal=sth$1;
      else
       var align_decimal=0;
      var match=caml_call2(_x6_,unit_of_time,to_unit_of_time$0(t));
      switch(match)
       {case 0:var suffix=suffix$7,float$0=to_ns$0(t);break;
        case 1:var suffix=suffix$8,float$0=to_us$0(t);break;
        case 2:var suffix=suffix$9,float$0=to_ms$0(t);break;
        case 3:var suffix=suffix$10,float$0=to_sec(t);break;
        case 4:var suffix=suffix$11,float$0=to_min$0(t);break;
        case 5:var suffix=suffix$12,float$0=to_hr$0(t);break;
        default:var float$1=to_day$0(t),suffix=suffix$13,float$0=float$1}
      var
       prefix=
        caml_call4
         (_Ju_,[0,delimiter],[0,decimals],[0,1 - align_decimal],float$0),
       switch$0=0;
      if
       (align_decimal
        &&
        caml_call2(symbol$56,caml_ml_string_length(suffix),1))
       {var suffix$0=caml_call2(_Gp_,suffix,cst$161);switch$0 = 1}
      if(! switch$0)var suffix$0=suffix;
      return caml_call2(_Gp_,prefix,suffix$0)}
    function now$0(param){return caml_call1(Time_now[1],0)}
    function random$0(state,param)
     {var
       _a4s_=
        caml_call2
         (random,
          state,
          add$14(caml_call1(neg$4,min_value_for_1us_rounding),one$2));
      return diff$8
              (caml_call2
                (random,state,add$14(max_value_for_1us_rounding,one$2)),
               _a4s_)}
    function randomize$1(t,percent){return randomize(t,percent,scale$1)}
    function to_short_string$0(t)
     {var
       match=to_parts$1(t),
       ns=match[7],
       us=match[6],
       ms=match[5],
       sec=match[4],
       min=match[3],
       hr=match[2],
       sign=match[1];
      return short_string(sign,hr,min,sec,ms,us,ns)}
    var
     include$118=
      caml_call1(Base_Pretty_printer[2],[0,module_name$10,to_string$24]),
     _acP_=include$118[1],
     _acQ_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$195),0,bin_shape_t$99],0],
     _acR_=caml_call1(Bin_prot_Shape[4][1],cst_src_span_ns_ml_732_4),
     group$118=caml_call2(Bin_prot_Shape[6],_acR_,_acQ_),
     _acS_=caml_call1(Bin_prot_Shape[2][1],cst_t$196),
     bin_shape_t$101=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$118,_acS_),0),
     bin_writer_t$89=[0,bin_size_t$55,bin_write_t$55],
     bin_reader_t$89=[0,bin_read_t$112,bin_read_t$113],
     bin_t$89=[0,bin_shape_t$101,bin_writer_t$89,bin_reader_t$89],
     compare$80=include$64[8];
    function hash$48(x){return hash$46(x)}
    var
     include$119=
      Make_binable
       ([0,
         hash_fold_t$24,
         bin_size_t$55,
         bin_write_t$55,
         bin_read_t$112,
         bin_read_t$113,
         bin_shape_t$101,
         bin_writer_t$89,
         bin_reader_t$89,
         bin_t$89,
         t_of_sexp$86,
         compare$80,
         sexp_of_t$95,
         hash$48]),
     hash_fold_t$41=include$119[1],
     _acT_=include$119[2],
     _acU_=include$119[3],
     _acV_=include$119[4],
     _acW_=include$119[5],
     _acX_=include$119[6],
     _acY_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$197),0,bin_shape_t$99],0],
     _acZ_=caml_call1(Bin_prot_Shape[4][1],cst_src_span_ns_ml_738_4),
     group$119=caml_call2(Bin_prot_Shape[6],_acZ_,_acY_),
     _ac0_=caml_call1(Bin_prot_Shape[2][1],cst_t$198),
     bin_shape_t$102=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$119,_ac0_),0),
     bin_writer_t$90=[0,bin_size_t$55,bin_write_t$55],
     bin_reader_t$90=[0,bin_read_t$112,bin_read_t$113],
     bin_t$90=[0,bin_shape_t$102,bin_writer_t$90,bin_reader_t$90],
     _ac1_=
      _xi_
       ([0,
         bin_size_t$55,
         bin_write_t$55,
         bin_read_t$112,
         bin_read_t$113,
         bin_shape_t$102,
         bin_writer_t$90,
         bin_reader_t$90,
         bin_t$90,
         t_of_sexp$86,
         sexp_of_t$95,
         comparator$23]),
     _ac2_=_ac1_[11],
     _ac3_=_ac1_[12],
     _ac4_=_ac1_[13],
     _ac5_=_ac1_[14],
     _ac6_=_ac1_[15],
     _ac7_=_ac1_[16],
     _ac8_=_ac1_[17],
     _ac9_=_ac1_[18],
     _ac__=_ac1_[20],
     _ac$_=_ac1_[21],
     _ada_=_ac1_[22],
     _adb_=include$64[1],
     _adc_=include$64[2],
     _add_=include$64[3],
     _ade_=include$64[4],
     _adf_=include$64[5],
     _adg_=include$64[6],
     _adh_=include$64[7],
     compare$81=include$64[8],
     _adi_=include$64[9],
     _adj_=include$64[10];
    function to_span_float_round_nearest(t)
     {return to_span_since_epoch(to_sec(t))}
    function of_span_float_round_nearest(s){return of_sec(s)}
    var half_microsecond=caml_call1(of_int$3,500);
    function to_span(t)
     {var switch$0=0;
      if
       (!
        caml_call2(_adf_,t,min_value_for_1us_rounding)
        &&
        !
        caml_call2(_ade_,t,max_value_for_1us_rounding))
       {var _a4r_=t;switch$0 = 1}
      if(! switch$0)
       var
        _a4o_=
         [0,[1,[0,_adk_,[0,sexp_of_t$95(max_value_for_1us_rounding),0]]],0],
        _a4p_=
         [0,
          [1,[0,_adl_,[0,sexp_of_t$95(min_value_for_1us_rounding),0]]],
          _a4o_],
        _a4q_=[0,[1,[0,_adm_,[0,sexp_of_t$95(t),0]]],_a4p_],
        _a4r_=
         caml_call1
          (_od_,
           [1,
            [0,
             caml_call1(Sexplib0_Sexp_conv[7],cst_Span_t_exceeds_limits),
             _a4q_]]);
      var _a4n_=caml_call1(of_int$3,1000);
      return of_us
              (caml_call1
                (to_float$3,
                 caml_call2
                  (symbol$110,
                   caml_call2(symbol$105,_a4r_,half_microsecond),
                   _a4n_)))}
    var
     min_span_float_value_for_1us_r=
      to_span_float_round_nearest(min_value_for_1us_rounding),
     max_span_float_value_for_1us_r=
      to_span_float_round_nearest(max_value_for_1us_rounding);
    function of_span(s)
     {var
       _a4l_=caml_call2(symbol$24,s,max_span_float_value_for_1us_r),
       _a4m_=_a4l_ || caml_call2(symbol$25,s,min_span_float_value_for_1us_r);
      if(_a4m_)
       failwiths(0,_adn_,cst_Time_ns_Span_does_not_supp,s,sexp_of_t$91);
      return of_sec_with_microsecond_precis(s)}
    var Private$3=[0,of_parts,to_parts$1];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$385);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Span_ns$0);
    var
     _ado_=
      [0,
       [0,
        hash_fold_t$24,
        hash$47,
        bin_size_t$55,
        bin_write_t$55,
        bin_read_t$112,
        bin_read_t$113,
        bin_shape_t$100,
        bin_writer_t$88,
        bin_reader_t$88,
        bin_t$88,
        compare$78,
        t_of_sexp$86,
        sexp_of_t$95,
        comparator$23,
        to_int63,
        of_int63_exn,
        Map$23,
        Set$23]],
     Core_kernel_Span_ns=
      [0,
       bin_size_t$55,
       bin_write_t$55,
       bin_read_t$112,
       bin_read_t$113,
       bin_shape_t$99,
       bin_writer_t$87,
       bin_reader_t$87,
       bin_t$87,
       t_of_sexp$86,
       sexp_of_t$95,
       typerep_of_t$27,
       typename_of_t$26,
       Parts$0,
       _adb_,
       _adc_,
       _add_,
       _ade_,
       _adf_,
       _adg_,
       _adh_,
       compare$81,
       _adi_,
       _adj_,
       _ac2_,
       _ac3_,
       _ac4_,
       _ac5_,
       _ac6_,
       _ac7_,
       _ac8_,
       _ac9_,
       include$64,
       _ac__,
       _ac$_,
       _ada_,
       validate_positive$5,
       validate_non_negative$5,
       validate_negative$5,
       validate_non_positive$5,
       is_positive$5,
       is_non_negative$5,
       is_negative$5,
       is_non_positive$5,
       sign$6,
       hash_fold_t$41,
       _acT_,
       _acU_,
       _acV_,
       _acW_,
       _acX_,
       _acP_,
       symbol$207,
       symbol$208,
       symbol$209,
       symbol$210,
       symbol$211,
       symbol$212,
       robustly_compare$4,
       quickcheck_generator$9,
       quickcheck_observer$7,
       quickcheck_shrinker$7,
       _KW_,
       _KX_,
       to_string$24,
       of_string$21,
       nanosecond$0,
       microsecond$0,
       millisecond$0,
       second$1,
       minute$0,
       hour$1,
       ns_per_day,
       microsecond$0,
       zero$4,
       create$24,
       to_parts$1,
       of_ns$0,
       of_us$0,
       of_ms$0,
       of_sec,
       of_int_sec$0,
       of_int32_seconds$0,
       of_int63_seconds$0,
       of_min$0,
       of_hr$0,
       of_day$0,
       to_ns$0,
       to_us$0,
       to_ms$0,
       to_sec,
       to_min$0,
       to_hr$0,
       to_day$0,
       to_int63_seconds_round_down_ex$0,
       to_proportional_float,
       add$14,
       diff$8,
       abs$4,
       neg$4,
       scale$1,
       symbol$206,
       symbol$113,
       next$4,
       prev$5,
       to_short_string$0,
       to_unit_of_time$0,
       of_unit_of_time$0,
       to_string_hum$10,
       randomize$1,
       of_sec_with_microsecond_precis,
       of_int_us,
       of_int_ms,
       to_int_us,
       to_int_ms,
       to_int_sec,
       min_value$2,
       max_value$2,
       min_value_for_1us_rounding,
       max_value_for_1us_rounding,
       min_value_for_1us_rounding,
       max_value_for_1us_rounding,
       scale_int,
       scale_int63,
       symbol$110,
       to_int63_ns,
       of_int63_ns,
       _acF_,
       of_int_ns,
       now$0,
       random$0,
       to_span,
       of_span,
       to_span_float_round_nearest,
       to_span,
       of_span_float_round_nearest,
       of_span,
       Alternate_sexp,
       Private$3,
       _ado_];
    caml_register_global(5125,Core_kernel_Span_ns,"Core_kernel__Span_ns");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Ofday_ns);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$386);
    caml_call1(Expect_test_collector[4][1],cst_src_ofday_ns_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$387,cst$162);
    var
     _adp_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$199),0,bin_shape_t$99],0],
     _adq_=caml_call1(Bin_prot_Shape[4][1],cst_src_ofday_ns_ml_6_0),
     group$120=caml_call2(Bin_prot_Shape[6],_adq_,_adp_),
     _adr_=caml_call1(Bin_prot_Shape[2][1],cst_t$200),
     bin_shape_t$103=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$120,_adr_),0),
     Typename_of_t$28=caml_call1(Typerep_lib_Make_typename[1],[0,name$66]),
     typename_of_t$27=Typename_of_t$28[2],
     name_of_t$20=Typename_of_t$28[1],
     typerep_of_t$28=[9,[0,name_of_t$20,[0,typerep_of_t$27]]];
    function to_parts$2(t){return to_parts$1(t)}
    var approximate_end_of_day$0=diff$8(ns_per_day,nanosecond$0);
    function to_span_since_start_of_day$0(t){return t}
    function is_invalid(span)
     {var _a4k_=caml_call2(_adf_,span,zero$4);
      return _a4k_?_a4k_:caml_call2(_ade_,span,ns_per_day)}
    function span_since_start_of_day_is_val$0(span)
     {return 1 - is_invalid(span)}
    function of_span_since_start_of_day_unc$0(span){return span}
    function of_span_since_start_of_day$0(span)
     {if(is_invalid(span))
       {var _a4j_=[0,sexp_of_t$95(span),0];
        return caml_call1
                (_bn_,
                 [1,
                  [0,
                   caml_call1
                    (Sexplib0_Sexp_conv[7],cst_Time_ns_Ofday_of_span_sinc),
                   _a4j_]])}
      return span}
    function of_span_since_start_of_day_opt(span)
     {return is_invalid(span)?0:[0,span]}
    function add_exn$5(t,span)
     {return of_span_since_start_of_day$0(add$14(t,span))}
    function sub_exn(t,span)
     {return of_span_since_start_of_day$0(diff$8(t,span))}
    function add$15(t,span)
     {return of_span_since_start_of_day_opt(add$14(t,span))}
    function sub$5(t,span)
     {return of_span_since_start_of_day_opt(diff$8(t,span))}
    function next$5(t){return of_span_since_start_of_day_opt(next$4(t))}
    function prev$6(t){return of_span_since_start_of_day_opt(prev$5(t))}
    function diff$9(t,u){return diff$8(t,u)}
    function create$25(hr,min,sec,ms,us,ns,param)
     {var switch$0=0;
      if(sec && 60 === sec[1])
       {var ns$0=_ads_,us$0=_adt_,ms$0=_adu_;switch$0 = 1}
      if(! switch$0)var ns$0=ns,us$0=us,ms$0=ms;
      return of_span_since_start_of_day$0
              (create$24(0,0,hr,min,sec,ms$0,us$0,ns$0,0))}
    var
     _adv_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$201),0,bin_shape_t$103],0],
     _adw_=caml_call1(Bin_prot_Shape[4][1],cst_src_ofday_ns_ml_65_6),
     group$121=caml_call2(Bin_prot_Shape[6],_adw_,_adv_),
     _adx_=caml_call1(Bin_prot_Shape[2][1],cst_t$202),
     bin_shape_t$104=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$121,_adx_),0),
     bin_writer_t$91=[0,bin_size_t$55,bin_write_t$55],
     bin_reader_t$91=[0,bin_read_t$112,bin_read_t$113],
     bin_t$91=[0,bin_shape_t$104,bin_writer_t$91,bin_reader_t$91];
    function to_string_with_unit(ns,unit)
     {if(! caml_call2(_adf_,ns,zero$4) && ! caml_call2(_adf_,ns_per_day,ns))
       {var
         sixty=caml_call1(of_int$3,60),
         thousand=caml_call1(of_int$3,1000),
         us=caml_call2(symbol$112,ns,thousand),
         ns$0=caml_call1(to_int_exn$2,caml_call2(rem$2,ns,thousand)),
         ms=caml_call2(symbol$112,us,thousand),
         us$0=caml_call1(to_int_exn$2,caml_call2(rem$2,us,thousand)),
         s=caml_call2(symbol$112,ms,thousand),
         ms$0=caml_call1(to_int_exn$2,caml_call2(rem$2,ms,thousand)),
         m=caml_call2(symbol$112,s,sixty),
         s$0=caml_call1(to_int_exn$2,caml_call2(rem$2,s,sixty)),
         h=caml_call1(to_int_exn$2,caml_call2(symbol$112,m,sixty)),
         m$0=caml_call1(to_int_exn$2,caml_call2(rem$2,m,sixty)),
         unit$0=
          65840584 <= unit
           ?unit
           :caml_call2(_a4_,ns$0,0)
             ?65840584
             :caml_call2(_a4_,us$0,0)
               ?425338712
               :caml_call2(_a4_,ms$0,0)
                 ?858219297
                 :caml_call2(_a4_,s$0,0)?417088404:127686388,
         len=
          127686388 === unit$0
           ?5
           :425338712 <= unit$0
             ?858219297 <= unit$0?12:15
             :417088404 <= unit$0?8:18,
         str=caml_call1(_Eq_,len);
        write_2_digit_int$0(str,0,h);
        caml_call3(_Ez_,str,2,58);
        write_2_digit_int$0(str,3,m$0);
        if(127686388 !== unit$0)
         {caml_call3(_Ez_,str,5,58);
          write_2_digit_int$0(str,6,s$0);
          if(417088404 !== unit$0)
           {caml_call3(_Ez_,str,8,46);
            write_3_digit_int$0(str,9,ms$0);
            if(! (858219297 <= unit$0))
             {write_3_digit_int$0(str,12,us$0);
              if(! (425338712 <= unit$0))write_3_digit_int$0(str,15,ns$0)}}}
        return caml_call1(_EJ_,str)}
      return cst_Incorrect_day}
    function create_from_parsed$0(string,hr,min,sec,subsec_pos,subsec_len)
     {if(caml_call2(equal$21,subsec_len,0))
       var nanoseconds=0;
      else
       {var
         until=caml_call2(_aJ_,subsec_pos,subsec_len),
         pos$0=caml_call2(_aJ_,subsec_pos,1),
         digits=[0,0],
         num_digits=[0,0],
         pos=[0,pos$0];
        for(;;)
         {if
           (caml_call2(O$0[11],pos[1],until)
            &&
            caml_call2(O$0[11],num_digits[1],10))
           {var c=caml_string_get(string,pos[1]);
            if(caml_call1(_Fh_,c))
             {num_digits[1]++;
              if(caml_call2(O$0[11],num_digits[1],10))
               {var
                 _a4c_=caml_call1(_E$_,c),
                 _a4d_=caml_call2(O$0[3],digits[1],10);
                digits[1] = caml_call2(O$0[1],_a4d_,_a4c_)}
              else
               {var _a4e_=caml_call1(_E$_,c);
                if(caml_call2(O$0[7],_a4e_,5))digits[1]++}}
            pos[1]++;
            continue}
          if(caml_call2(O$0[11],num_digits[1],9))
           {var _a4f_=caml_call2(pow,10,caml_call2(O$0[2],9,num_digits[1]));
            digits[1] = caml_call2(O$0[3],digits[1],_a4f_)}
          var nanoseconds=digits[1];
          break}}
      var
       _a4g_=caml_call1(of_int$3,nanoseconds),
       _a4h_=add$14(scale_int(second$1,sec),_a4g_),
       _a4i_=add$14(scale_int(minute$0,min),_a4h_);
      return of_span_since_start_of_day$0(add$14(scale_int(hour$1,hr),_a4i_))}
    function of_string$22(string){return parse$0(string,create_from_parsed$0)}
    function t_of_sexp$87(sexp)
     {if(0 === sexp[0])
       {var s=sexp[1];
        try
         {var _a4b_=of_string$22(s);return _a4b_}
        catch(exn)
         {exn = caml_wrap_exception(exn);return caml_call2(_et_,exn,sexp)}}
      return caml_call2(_es_,cst_expected_an_atom,sexp)}
    function to_string$25(t){return to_string_with_unit(t,65840584)}
    function sexp_of_t$96(t){return [0,to_string$25(t)]}
    function to_int63$0(t){return caml_call1(_ado_[1][15],t)}
    function of_int63_exn$0(t)
     {return of_span_since_start_of_day$0(caml_call1(_ado_[1][16],t))}
    var
     include$120=caml_call1(_hc_[1][2],[0,compare$81,sexp_of_t$96]),
     comparator$24=include$120[1];
    function to_millisec_string$0(t){return to_string_with_unit(t,858219297)}
    function to_sec_string$0(t){return to_string_with_unit(t,417088404)}
    function to_string_trimmed$0(t){return to_string_with_unit(t,-68054102)}
    function of_string_iso8601_extended$0(pos,len,str)
     {try
       {var _a4a_=parse_iso8601_extended(pos,len,str,create_from_parsed$0);
        return _a4a_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        var
         _a3__=[0,caml_call1(sexp_of_t,exn),0],
         _a3$_=[0,caml_call1(_au_,caml_call3(_BS_,pos,len,str)),_a3__];
        return caml_call1
                (_bn_,
                 [1,
                  [0,
                   caml_call1
                    (Sexplib0_Sexp_conv[7],cst_Time_ns_Ofday_of_string_is),
                   _a3$_]])}}
    function every(span,start$1,stop)
     {if(caml_call2(_ade_,start$1,stop))
       {var
         _a37_=[0,[1,[0,_ady_,[0,sexp_of_t$96(stop),0]]],0],
         _a38_=[0,[1,[0,_adz_,[0,sexp_of_t$96(start$1),0]]],_a37_];
        return caml_call1
                (_tW_,
                 [1,
                  [0,
                   caml_call1
                    (Sexplib0_Sexp_conv[7],cst_Time_ns_Ofday_every_called),
                   _a38_]])}
      if(caml_call2(_adc_,span,zero$4))
       {var _a39_=[0,sexp_of_t$95(span),0];
        return caml_call1
                (_tW_,
                 [1,
                  [0,
                   caml_call1
                    (Sexplib0_Sexp_conv[7],cst_Time_ns_Ofday_every_called$0),
                   _a39_]])}
      if(is_invalid(span))return [0,[0,start$1,0]];
      var start=start$1,acc=0;
      for(;;)
       {var acc$0=[0,start,acc],start$0=add$14(start,span);
        if(caml_call2(_ade_,start$0,stop))return [0,caml_call1(parts,acc$0)];
        var start=start$0,acc=acc$0;
        continue}}
    function small_diff$0(ofday1,ofday2)
     {var
       diff=caml_call2(include$62[100][2],ofday1,ofday2),
       d1=caml_call2(rem$2,diff,hour$1),
       d2=caml_call2(rem$2,caml_call2(include$62[100][1],d1,hour$1),hour$1),
       _a35_=caml_call1(of_int$3,2),
       _a36_=caml_call2(include$62[100][4],hour$1,_a35_),
       d=
        caml_call2(include$62[100][10],d2,_a36_)
         ?caml_call2(include$62[100][2],d2,hour$1)
         :d2;
      return d}
    var
     Expect_test_collector$2=
      caml_call1(Expect_test_collector[2],Expect_test_config);
    function _adA_(param)
     {function test(x,y)
       {var
         diff=small_diff$0(x,y),
         _a33_=to_string$24(diff),
         _a34_=to_string$25(y);
        return caml_call4(_bs_,_adB_,to_string$25(x),_a34_,_a33_)}
      var
       examples=
        caml_call2
         (_p9_,
          _adC_,
          function(param)
           {var y=param[2],x=param[1],_a32_=of_string$22(y);
            return [0,of_string$22(x),_a32_]});
      caml_call2
       (_o9_,
        examples,
        function(param){var y=param[2],x=param[1];test(x,y);return test(y,x)});
      var
       _a31_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_ofday_ns_ml$0),
         275,
         9567,
         9571,
         9577];
      return caml_call1(Expect_test_collector$2[1],_a31_)}
    var
     _adD_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_ofday_ns_ml$1),
       276,
       9578,
       9582,
       10056],
     _adG_=
      [0,
       [0,
        _adF_,
        _adE_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_ofday_ns_ml$2),
         275,
         9567,
         9571,
         9577],
        _adD_],
       0],
     _adI_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_ofday_ns_ml$4),
       262,
       9159,
       9159,
       10057],
     _adJ_=
      caml_call1(Expect_test_common_File[4][3],cst_97508895bf053f9e2e80939071);
    caml_call9
     (Expect_test_collector$2[3],
      _adJ_,
      _adI_,
      cst_src_ofday_ns_ml$3,
      _adH_,
      0,
      _adG_,
      0,
      Inline_test_config,
      _adA_);
    var
     quickcheck_generator$14=caml_call2(_KW_,zero$4,ns_per_day),
     quickcheck_shrinker$13=caml_call1(_uU_[3],0),
     _adK_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$203),0,bin_shape_t$103],0],
     _adL_=caml_call1(Bin_prot_Shape[4][1],cst_src_ofday_ns_ml_294_4),
     group$122=caml_call2(Bin_prot_Shape[6],_adL_,_adK_),
     _adM_=caml_call1(Bin_prot_Shape[2][1],cst_t$204),
     bin_shape_t$105=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$122,_adM_),0),
     bin_writer_t$92=[0,bin_size_t$55,bin_write_t$55],
     bin_reader_t$92=[0,bin_read_t$112,bin_read_t$113],
     bin_t$92=[0,bin_shape_t$105,bin_writer_t$92,bin_reader_t$92],
     _adN_=
      _AP_
       ([0,
         bin_size_t$55,
         bin_write_t$55,
         bin_read_t$112,
         bin_read_t$113,
         bin_shape_t$105,
         bin_writer_t$92,
         bin_reader_t$92,
         bin_t$92,
         compare$81,
         hash_fold_t$41,
         _acT_,
         t_of_sexp$87,
         sexp_of_t$96,
         of_string$22,
         to_string$25,
         module_name$11]),
     _adO_=_adN_[1],
     _adP_=_adN_[2],
     _adQ_=_adN_[3],
     _adR_=_adN_[4],
     _adS_=_adN_[5],
     _adT_=_adN_[6],
     _adU_=_adN_[7],
     _adV_=_adN_[8],
     _adW_=_adN_[9],
     _adX_=_adN_[10],
     _adY_=_adN_[11],
     _adZ_=_adN_[12],
     _ad0_=_adN_[13],
     _ad1_=_adN_[24],
     _ad2_=_adN_[25],
     _ad3_=_adN_[26],
     _ad4_=_adN_[27],
     _ad5_=_adN_[28],
     _ad6_=_adN_[29],
     _ad7_=_adN_[30],
     _ad8_=_adN_[31],
     _ad9_=_adN_[32],
     _ad__=_adN_[33],
     _ad$_=_adN_[34],
     _aea_=_adN_[35],
     _aeb_=_adN_[36],
     _aec_=_adN_[37],
     _aed_=_adN_[38],
     _aee_=_adN_[39],
     _aef_=_adN_[40],
     _aeg_=_adN_[41];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$388);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Ofday_ns$0);
    var
     _aeh_=
      [0,
       [0,
        bin_size_t$55,
        bin_write_t$55,
        bin_read_t$112,
        bin_read_t$113,
        bin_shape_t$104,
        bin_writer_t$91,
        bin_reader_t$91,
        bin_t$91,
        compare$81,
        t_of_sexp$87,
        sexp_of_t$96,
        comparator$24,
        to_int63$0,
        of_int63_exn$0]],
     Core_kernel_Ofday_ns=
      [0,
       _adO_,
       _adP_,
       _adQ_,
       _adR_,
       _adS_,
       _adT_,
       _adU_,
       _adV_,
       _adW_,
       _adX_,
       typerep_of_t$28,
       typename_of_t$27,
       _adb_,
       _adc_,
       _add_,
       _ade_,
       _adf_,
       _adg_,
       _adh_,
       compare$81,
       _adi_,
       _adj_,
       _ad1_,
       _ad2_,
       _ad3_,
       _ad4_,
       _ad5_,
       _ad6_,
       _ad7_,
       _ad8_,
       _ad9_,
       _ad__,
       _ad$_,
       _aea_,
       _aeb_,
       _aec_,
       _aed_,
       _aee_,
       _aef_,
       _aeg_,
       _ad0_,
       symbol$207,
       symbol$208,
       symbol$209,
       symbol$210,
       symbol$211,
       symbol$212,
       robustly_compare$4,
       quickcheck_generator$14,
       quickcheck_observer$7,
       quickcheck_shrinker$13,
       _KW_,
       _KX_,
       _adY_,
       _adZ_,
       create$25,
       to_parts$2,
       zero$4,
       ns_per_day,
       to_span_since_start_of_day$0,
       of_span_since_start_of_day$0,
       of_span_since_start_of_day$0,
       span_since_start_of_day_is_val$0,
       of_span_since_start_of_day_unc$0,
       add$15,
       sub$5,
       next$5,
       prev$6,
       diff$9,
       small_diff$0,
       to_string_trimmed$0,
       to_sec_string$0,
       of_string_iso8601_extended$0,
       to_millisec_string$0,
       to_millisec_string$0,
       approximate_end_of_day$0,
       add_exn$5,
       sub_exn,
       every,
       _aeh_];
    caml_register_global(5126,Core_kernel_Ofday_ns,"Core_kernel__Ofday_ns");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Time_ns);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$389);
    caml_call1(Expect_test_collector[4][1],cst_src_time_ns_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$390,cst$163);
    var
     arch_sixtyfour$0=caml_call2(_Nr_,Stdlib_sys[9],64),
     _aei_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$205),0,bin_shape_t$99],0],
     _aej_=caml_call1(Bin_prot_Shape[4][1],cst_src_time_ns_ml_9_0),
     group$123=caml_call2(Bin_prot_Shape[6],_aej_,_aei_),
     _aek_=caml_call1(Bin_prot_Shape[2][1],cst_t$206),
     bin_shape_t$106=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$123,_aek_),0),
     bin_writer_t$93=[0,bin_size_t$55,bin_write_t$55],
     bin_reader_t$93=[0,bin_read_t$112,bin_read_t$113],
     bin_t$93=[0,bin_shape_t$106,bin_writer_t$93,bin_reader_t$93];
    function hash$49(x){return caml_call1(_acT_,x)}
    var
     Typename_of_t$29=caml_call1(Typerep_lib_Make_typename[1],[0,name$67]),
     typename_of_t$28=Typename_of_t$29[2],
     name_of_t$21=Typename_of_t$29[1],
     typerep_of_t$29=[9,[0,name_of_t$21,[0,typerep_of_t$27]]];
    function abs_diff(t,u){return caml_call1(abs$4,diff$8(t,u))}
    function to_span_since_epoch$0(t){return t}
    function of_span_since_epoch$0(s){return s}
    function to_int63_ns_since_epoch(t){return t}
    function of_int63_ns_since_epoch(i){return i}
    function overflow(param)
     {return caml_call1
              (_od_,caml_call1(Sexplib0_Sexp_conv[7],cst_Time_ns_overflow))}
    function is_earlier(t1,t2){return caml_call2(_adf_,t1,t2)}
    function is_later(t1,t2){return caml_call2(_ade_,t1,t2)}
    function add_overflowed(x,y,sum)
     {return caml_call2(_ade_,y,zero$4)
              ?caml_call2(_adf_,sum,x)
              :caml_call2(_ade_,sum,x)}
    function sub_overflowed(x,y,diff)
     {return caml_call2(_ade_,y,zero$4)
              ?caml_call2(_ade_,diff,x)
              :caml_call2(_adf_,diff,x)}
    function add_saturating(x,y)
     {var sum=add$14(x,y);
      return add_overflowed(x,y,sum)
              ?caml_call2(_ade_,y,zero$4)?max_value$2:min_value$2
              :sum}
    function sub_saturating(x,y)
     {var diff=diff$8(x,y);
      return sub_overflowed(x,y,diff)
              ?caml_call2(_ade_,y,zero$4)?min_value$2:max_value$2
              :diff}
    var
     _ael_=
      arch_sixtyfour$0
       ?function(t){return caml_call1(to_int_exn$2,t)}
       :function(param)
         {return caml_call1(_Gb_,cst_Time_ns_to_int_ns_since_ep)};
    function of_int_ns_since_epoch(i){return caml_call1(of_int$3,i)}
    function to_time_float_round_nearest(t)
     {return to_span_float_round_nearest(t)}
    function to_time_float_round_nearest_mi(t){return to_span(t)}
    var
     min_time_value_for_1us_roundin=
      to_time_float_round_nearest(min_value_for_1us_rounding),
     max_time_value_for_1us_roundin=
      to_time_float_round_nearest(max_value_for_1us_rounding);
    function of_time_float_round_nearest(time)
     {return of_span_float_round_nearest(to_span_since_epoch(time))}
    function of_time_float_round_nearest_mi(time)
     {var
       _a3Z_=caml_call2(symbol$25,time,min_time_value_for_1us_roundin),
       _a30_=
        _a3Z_
        ||
        caml_call2(symbol$24,time,max_time_value_for_1us_roundin);
      if(_a30_)
       failwiths(0,_aem_,cst_Time_ns_does_not_support_t,time,_acr_[1][1][13]);
      return of_span(to_span_since_epoch(time))}
    function next_multiple_internal$0(can_equal_after,base,after,interval)
     {if(caml_call2(_adc_,interval,zero$4))
       failwiths(0,_aen_,cst_Time_ns_next_multiple_got_,interval,sexp_of_t$95);
      var base_to_after=diff$8(after,base);
      if(caml_call2(_adf_,base_to_after,zero$4))return base;
      var
       next=
        add$14
         (base,
          scale_int63(interval,caml_call2(symbol$110,base_to_after,interval)));
      if(! caml_call2(_ade_,next,after))
       {var switch$0=0;
        if(! can_equal_after || ! caml_call2(_add_,next,after))switch$0 = 1;
        if(switch$0)return add$14(next,interval)}
      return next}
    function next_multiple$0(opt,base,after,interval,param)
     {if(opt)var sth=opt[1],can_equal_after=sth;else var can_equal_after=0;
      return next_multiple_internal$0(can_equal_after,base,after,interval)}
    function prev_multiple$0(opt,base,before,interval,param)
     {if(opt)var sth=opt[1],can_equal_before=sth;else var can_equal_before=0;
      return next_multiple_internal$0
              (1 - can_equal_before,base,diff$8(before,interval),interval)}
    function random$1(state,param){return random$0(state,0)}
    function to_date_and_span_since_start_o(ns_since_epoch)
     {function symbol(i){return caml_call1(of_int_exn$2,i)}
      var
       _a3S_=symbol(1000000000),
       _a3T_=symbol(86400),
       ns_per_day=caml_call2(include$62[100][3],_a3T_,_a3S_),
       approx_days_from_epoch=
        caml_call2(include$62[100][4],ns_since_epoch,ns_per_day),
       _a3U_=symbol(0),
       switch$0=0;
      if(caml_call2(include$62[100][11],ns_since_epoch,_a3U_))
       {var
         _a3V_=
          caml_call2(include$62[100][3],approx_days_from_epoch,ns_per_day);
        if(caml_call2(include$62[100][12],_a3V_,ns_since_epoch))
         {var
           _a3W_=symbol(1),
           days_from_epoch=
            caml_call2(include$62[100][2],approx_days_from_epoch,_a3W_);
          switch$0 = 1}}
      if(! switch$0)var days_from_epoch=approx_days_from_epoch;
      var
       _a3X_=caml_call2(include$62[100][3],ns_per_day,days_from_epoch),
       span_since_start_of_day=
        caml_call2(include$62[100][2],ns_since_epoch,_a3X_),
       _a3R_=caml_call1(to_int_exn$2,days_from_epoch),
       _a3Y_=caml_call2(Days[4],Days[5],_a3R_),
       date=caml_call1(Days[2],_a3Y_);
      return [0,date,span_since_start_of_day]}
    function of_date_and_span_since_start_o(date,span_since_start_of_day)
     {if
       (caml_call2(_adb_,span_since_start_of_day,zero$4)
        &&
        caml_call2(_adf_,span_since_start_of_day,ns_per_day))
       {var
         _a3P_=Days[5],
         _a3Q_=caml_call1(Days[1],date),
         days_from_epoch=caml_call2(Days[3],_a3Q_,_a3P_),
         span_in_days_since_epoch=scale_int(ns_per_day,days_from_epoch),
         span_since_epoch=
          add$14(span_in_days_since_epoch,span_since_start_of_day);
        return span_since_epoch}
      throw [0,Assert_failure,_aeo_]}
    var Utc=[0,to_date_and_span_since_start_o,of_date_and_span_since_start_o];
    function two_digit_of_string(string)
     {if
       (caml_call2(O$0[9],caml_ml_string_length(string),2)
        &&
        caml_call2(_B0_,string,_Fh_))
       return caml_call1(of_string$3,string);
      throw [0,Assert_failure,_aeq_]}
    var
     ns_of_100_ms=100000000,
     ns_of_10_ms=10000000,
     ns_of_1_ms=1000000,
     ns_of_100_us=100000,
     ns_of_10_us=10000,
     ns_of_1_us=1000,
     ns_of_100_ns=100,
     ns_of_10_ns=10,
     ns_of_1_ns=1;
    function to_string$26(t)
     {var
       match=caml_call1(Utc[1],t),
       span_since_start_of_day=match[2],
       date=match[1];
      if
       (caml_call2(_adb_,span_since_start_of_day,zero$4)
        &&
        caml_call2(_adf_,span_since_start_of_day,ns_per_day))
       {var
         seconds_span=of_int_sec$0(to_int_sec(span_since_start_of_day)),
         sub_second_span=diff$8(span_since_start_of_day,seconds_span),
         ns=caml_call1(to_int_exn$2,sub_second_span);
        if(caml_call2(O$0[9],ns,0))
         var _a3N_=cst$164;
        else
         {var _a3F_=caml_call2(O$0[16],ns,ns_of_100_ms);
          if(caml_call2(O$0[9],_a3F_,0))
           var
            _a3N_=
             caml_call2(_fw_,_aes_,caml_call2(O$0[4],ns,ns_of_100_ms));
          else
           {var _a3G_=caml_call2(O$0[16],ns,ns_of_10_ms);
            if(caml_call2(O$0[9],_a3G_,0))
             var
              _a3N_=
               caml_call2(_fw_,_aet_,caml_call2(O$0[4],ns,ns_of_10_ms));
            else
             {var _a3H_=caml_call2(O$0[16],ns,ns_of_1_ms);
              if(caml_call2(O$0[9],_a3H_,0))
               var
                _a3N_=
                 caml_call2(_fw_,_aeu_,caml_call2(O$0[4],ns,ns_of_1_ms));
              else
               {var _a3I_=caml_call2(O$0[16],ns,ns_of_100_us);
                if(caml_call2(O$0[9],_a3I_,0))
                 var
                  _a3N_=
                   caml_call2(_fw_,_aev_,caml_call2(O$0[4],ns,ns_of_100_us));
                else
                 {var _a3J_=caml_call2(O$0[16],ns,ns_of_10_us);
                  if(caml_call2(O$0[9],_a3J_,0))
                   var
                    _a3N_=
                     caml_call2(_fw_,_aew_,caml_call2(O$0[4],ns,ns_of_10_us));
                  else
                   {var _a3K_=caml_call2(O$0[16],ns,ns_of_1_us);
                    if(caml_call2(O$0[9],_a3K_,0))
                     var
                      _a3N_=
                       caml_call2(_fw_,_aex_,caml_call2(O$0[4],ns,ns_of_1_us));
                    else
                     {var _a3L_=caml_call2(O$0[16],ns,ns_of_100_ns);
                      if(caml_call2(O$0[9],_a3L_,0))
                       var
                        _a3N_=
                         caml_call2(_fw_,_aey_,caml_call2(O$0[4],ns,ns_of_100_ns));
                      else
                       var
                        _a3M_=caml_call2(O$0[16],ns,ns_of_10_ns),
                        _a3N_=
                         caml_call2(O$0[9],_a3M_,0)
                          ?caml_call2(_fw_,_aez_,caml_call2(O$0[4],ns,ns_of_10_ns))
                          :caml_call2(_fw_,_aeA_,ns)}}}}}}}
        var
         seconds=to_int_sec(seconds_span),
         h=caml_call2(O$0[4],seconds,3600),
         _a3E_=caml_call2(O$0[4],seconds,60),
         m=caml_call2(O$0[16],_a3E_,60),
         s=caml_call2(O$0[16],seconds,60),
         _a3O_=
          caml_call2
           (_Gp_,
            cst$166,
            caml_call2
             (_Gp_,
              caml_call2(_Gp_,caml_call4(_fw_,_aep_,h,m,s),_a3N_),
              cst_Z$0));
        return caml_call2(_Gp_,to_string$20(date),_a3O_)}
      throw [0,Assert_failure,_aeD_]}
    function of_string$23(string$0)
     {var
       match$1=caml_call2(_CE_,string$0,32),
       ofday_string_with_zone=match$1[2],
       date_string=match$1[1],
       string$1=caml_call2(_CX_,ofday_string_with_zone,cst_Z$1),
       date=of_string$17(date_string),
       len=caml_ml_string_length(string$1),
       suffix_len=caml_call2(O$0[2],len,8),
       seconds_string=caml_call3(_BR_,string$1,0,8),
       string=caml_call3(_BR_,string$1,8,suffix_len),
       match=caml_call2(_CI_,seconds_string,58);
      if(match)
       {var _a3y_=match[2];
        if(_a3y_)
         {var _a3z_=_a3y_[2];
          if(_a3z_ && ! _a3z_[2])
           {var
             s_string=_a3z_[1],
             m_string=_a3y_[1],
             h_string=match[1],
             h=two_digit_of_string(h_string),
             m=two_digit_of_string(m_string),
             s=two_digit_of_string(s_string),
             _a3A_=caml_call2(O$0[3],h,60),
             _a3B_=caml_call2(O$0[1],_a3A_,m),
             _a3C_=caml_call2(O$0[3],_a3B_,60),
             seconds_span=of_int_sec$0(caml_call2(O$0[1],_a3C_,s));
            if(caml_call1(_BU_,string))
             var sub_second_span=zero$4;
            else
             {var digits=caml_call2(_CY_,string,cst$165);
              if(! caml_call2(_B0_,digits,_Fh_))
               throw [0,Assert_failure,_aeC_];
              var
               match$0=caml_ml_string_length(digits),
               switcher=match$0 - 1 | 0;
              if(8 < switcher >>> 0)throw [0,Assert_failure,_aeB_];
              switch(switcher)
               {case 0:var multiplier=ns_of_100_ms;break;
                case 1:var multiplier=ns_of_10_ms;break;
                case 2:var multiplier=ns_of_1_ms;break;
                case 3:var multiplier=ns_of_100_us;break;
                case 4:var multiplier=ns_of_10_us;break;
                case 5:var multiplier=ns_of_1_us;break;
                case 6:var multiplier=ns_of_100_ns;break;
                case 7:var multiplier=ns_of_10_ns;break;
                default:var multiplier=ns_of_1_ns}
              var
               _a3D_=caml_call1(of_string$3,digits),
               sub_second_span=
                caml_call1(of_int$3,caml_call2(O$0[3],_a3D_,multiplier))}
            var ofday=add$14(seconds_span,sub_second_span);
            return caml_call2(Utc[2],date,ofday)}}}
      throw [0,Assert_failure,_aer_]}
    var
     include$121=caml_call1(Base_Sexpable[5],[0,of_string$23,to_string$26]),
     t_of_sexp$88=include$121[1],
     sexp_of_t$97=include$121[2],
     _aeE_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$207),0,bin_shape_t$106],0],
     _aeF_=caml_call1(Bin_prot_Shape[4][1],cst_src_time_ns_ml_323_6),
     group$124=caml_call2(Bin_prot_Shape[6],_aeF_,_aeE_),
     _aeG_=caml_call1(Bin_prot_Shape[2][1],cst_t$208),
     bin_shape_t$107=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$124,_aeG_),0),
     bin_writer_t$94=[0,bin_size_t$55,bin_write_t$55],
     bin_reader_t$94=[0,bin_read_t$112,bin_read_t$113],
     bin_t$94=[0,bin_shape_t$107,bin_writer_t$94,bin_reader_t$94];
    function to_absolute$0(relative,offset_from_utc)
     {var diff=diff$8(relative,offset_from_utc);
      return sub_overflowed(relative,offset_from_utc,diff)?overflow(0):diff}
    function of_absolute$0(absolute,offset_from_utc)
     {var sum=add$14(absolute,offset_from_utc);
      return add_overflowed(absolute,offset_from_utc,sum)?overflow(0):sum}
    function to_days_from_epoch$0(t)
     {var
       days_from_epoch_approx=caml_call2(include$62[100][4],t,ns_per_day),
       _a3x_=caml_call2(include$62[100][3],days_from_epoch_approx,ns_per_day);
      return caml_call2(include$62[100][11],t,_a3x_)
              ?caml_call1(pred$1,days_from_epoch_approx)
              :days_from_epoch_approx}
    function of_span_in_seconds(span_in_seconds)
     {return of_int63_seconds$0
              (caml_call1(Time_in_seconds[1][2],span_in_seconds))}
    function of_time_in_seconds(time_in_seconds)
     {var _a3w_=caml_call1(Time_in_seconds[4],time_in_seconds);
      return of_int63_seconds$0(caml_call1(Time_in_seconds[1][2],_a3w_))}
    function index$0(t,time)
     {var
       _a3u_=to_int63_seconds_round_down_ex$0(time),
       _a3v_=caml_call1(Time_in_seconds[1][1],_a3u_);
      return index(t,caml_call1(Time_in_seconds[3],_a3v_))}
    function index_offset_from_utc_exn$0(t,index)
     {return of_span_in_seconds(index_offset_from_utc_exn(t,index))}
    function index_prev_clock_shift_time_ex$0(t,index)
     {return of_time_in_seconds(index_prev_clock_shift_time_ex(t,index))}
    function index_prev_clock_shift(t,index)
     {var match=index_has_prev_clock_shift(t,index);
      if(match)
       {var _a3t_=of_span_in_seconds(index_prev_clock_shift_amount_(t,index));
        return [0,[0,index_prev_clock_shift_time_ex$0(t,index),_a3t_]]}
      return 0}
    function next_clock_shift(t,time)
     {var index=index$0(t,time);
      return index_prev_clock_shift(t,caml_call1(Index[1],index))}
    function of_date_ofday$0(zone,date,ofday)
     {var
       _a3o_=Days[5],
       _a3p_=caml_call1(Days[1],date),
       days=caml_call1(of_int$3,caml_call2(Days[3],_a3p_,_a3o_)),
       _a3q_=caml_call2(include$62[100][3],days,ns_per_day),
       relative=caml_call2(include$62[100][1],_a3q_,ofday),
       _a3r_=to_int63_seconds_round_down_ex$0(relative),
       _a3s_=caml_call1(Time_in_seconds[1][1],_a3r_),
       index=
        index_of_date_and_ofday(zone,caml_call1(Time_in_seconds[2][1],_a3s_)),
       offset_from_utc=index_offset_from_utc_exn$0(zone,index);
      return to_absolute$0(relative,offset_from_utc)}
    function of_date_ofday_precise(date,ofday,zone)
     {var
       start_of_day=of_date_ofday$0(zone,date,zero$4),
       proposed_time=add$14(start_of_day,ofday),
       match=next_clock_shift(zone,start_of_day);
      if(match)
       {var
         match$0=match[1],
         shift_amount=match$0[2],
         shift_start=match$0[1],
         shift_backwards=caml_call2(_adf_,shift_amount,zero$4);
        if(shift_backwards)
         var e=shift_start,s=add$14(shift_start,shift_amount);
        else
         var e$0=add$14(shift_start,shift_amount),e=e$0,s=shift_start;
        if(caml_call2(_adf_,proposed_time,s))
         return [0,881568161,proposed_time];
        if
         (caml_call2(_adc_,s,proposed_time)
          &&
          caml_call2(_adf_,proposed_time,e))
         return shift_backwards
                 ?[0,
                   748757384,
                   [0,proposed_time,diff$8(proposed_time,shift_amount)]]
                 :[0,744337004,shift_start];
        return [0,881568161,diff$8(proposed_time,shift_amount)]}
      return [0,881568161,proposed_time]}
    var date_cache=[0,utc,zero$4,zero$4,zero$4,unix_epoch];
    function reset_date_cache(param)
     {date_cache[1] = utc;
      date_cache[2] = zero$4;
      date_cache[3] = zero$4;
      date_cache[4] = zero$4;
      date_cache[5] = unix_epoch;
      return 0}
    function set_date_cache(time,zone)
     {var _a3l_=caml_call2(_Pg_,zone,date_cache[1]),switch$0=0;
      if(_a3l_)
       {var _a3m_=caml_call2(_adb_,time,date_cache[2]);
        if(_a3m_)
         {var match=caml_call2(_adf_,time,date_cache[3]);switch$0 = 1}
        else
         var _a3n_=_a3m_}
      else
       var _a3n_=_a3l_;
      if(! switch$0)var match=_a3n_;
      if(match)return 0;
      var
       index=index$0(zone,time),
       offset_from_utc=index_offset_from_utc_exn$0(zone,index),
       t=of_absolute$0(time,offset_from_utc),
       days_from_epoch=to_days_from_epoch$0(t),
       _a3j_=caml_call1(to_int_exn$2,days_from_epoch),
       _a3k_=caml_call2(Days[4],Days[5],_a3j_),
       date=caml_call1(Days[2],_a3k_),
       days_from_epoch$0=to_days_from_epoch$0(t),
       days_from_epoch_in_ns=
        caml_call2(include$62[100][3],days_from_epoch$0,ns_per_day),
       remainder=caml_call2(include$62[100][2],t,days_from_epoch_in_ns),
       span=of_span_since_start_of_day$0(remainder),
       effective_day_start=diff$8(to_absolute$0(t,offset_from_utc),span),
       effective_day_until=add$14(effective_day_start,ns_per_day),
       match$0=index_has_prev_clock_shift(zone,index),
       cache_start_incl=
        match$0
         ?caml_call2
           (_adj_,
            index_prev_clock_shift_time_ex$0(zone,index),
            effective_day_start)
         :effective_day_start,
       match$1=index_has_next_clock_shift(zone,index),
       cache_until_excl=
        match$1
         ?caml_call2
           (_adi_,
            of_time_in_seconds(index_next_clock_shift_time_ex(zone,index)),
            effective_day_until)
         :effective_day_until;
      date_cache[1] = zone;
      date_cache[2] = cache_start_incl;
      date_cache[3] = cache_until_excl;
      date_cache[4] = effective_day_start;
      date_cache[5] = date;
      return 0}
    function to_date$1(time,zone)
     {set_date_cache(time,zone);return date_cache[5]}
    function to_ofday$0(time,zone)
     {set_date_cache(time,zone);
      return of_span_since_start_of_day$0(diff$8(time,date_cache[4]))}
    function to_date_ofday$0(time,zone)
     {var _a3i_=to_ofday$0(time,zone);return [0,to_date$1(time,zone),_a3i_]}
    function to_date_ofday_precise(time,zone)
     {var
       match=to_date_ofday$0(time,zone),
       ofday=match[2],
       date=match[1],
       match$0=next_clock_shift(zone,time),
       clock_shift_before_or_at=
        index_prev_clock_shift(zone,index$0(zone,time)),
       switch$0=0;
      if(clock_shift_before_or_at)
       {var
         match$2=clock_shift_before_or_at[1],
         amount=match$2[2],
         start=match$2[1];
        if(caml_call2(_ade_,add$14(start,caml_call1(abs$4,amount)),time))
         {if(caml_call2(_ade_,amount,zero$4))
           {var match$1=sub$5(ofday,amount);
            if(match$1)
             var ofday$0=match$1[1],_a3f_=[0,-687020392,[0,date,ofday$0]];
            else
             var
              _a3d_=[0,[1,[0,_aeH_,[0,sexp_of_t$70(zone),0]]],0],
              _a3e_=[0,[1,[0,_aeI_,[0,sexp_of_t$95(time),0]]],_a3d_],
              _a3f_=
               caml_call1
                (_od_,
                 [1,
                  [0,
                   caml_call1
                    (Sexplib0_Sexp_conv[7],cst_Time_to_date_ofday_precise$0),
                   _a3e_]]);
            var _a3g_=_a3f_}
          else
           {if(! caml_call2(_adf_,amount,zero$4))
             throw [0,Assert_failure,_aeJ_];
            var _a3g_=[0,1043984139,diff$8(time,caml_call1(abs$4,amount))]}
          var ambiguity=_a3g_}
        else
         switch$0 = 1}
      else
       switch$0 = 1;
      if(switch$0)
       {var switch$1=0;
        if(match$0)
         {var match$3=match$0[1],amount$0=match$3[2],start$0=match$3[1];
          if
           (caml_call2(_adc_,diff$8(start$0,caml_call1(abs$4,amount$0)),time))
           {if(caml_call2(_ade_,amount$0,zero$4))
             var _a3h_=881570188;
            else
             {if(! caml_call2(_adf_,amount$0,zero$4))
               throw [0,Assert_failure,_aeK_];
              var _a3h_=[0,1043984139,add$14(time,caml_call1(abs$4,amount$0))]}
            var ambiguity=_a3h_}
          else
           switch$1 = 1}
        else
         switch$1 = 1;
        if(switch$1)var ambiguity=881570188}
      return [0,date,ofday,ambiguity]}
    function convert(from_tz,to_tz,date,ofday)
     {var start_time=of_date_ofday$0(from_tz,date,ofday);
      return to_date_ofday$0(start_time,to_tz)}
    function utc_offset$0(t,zone)
     {var
       index=index$0(zone,t),
       offset_from_utc=index_offset_from_utc_exn$0(zone,index),
       utc_epoch=of_absolute$0(t,offset_from_utc);
      return diff$8(utc_epoch,t)}
    function offset_string(time,zone)
     {var
       utc_offset=utc_offset$0(time,zone),
       is_utc=caml_call2(_add_,utc_offset,zero$4);
      if(is_utc)return cst_Z$2;
      var
       _a3b_=
        [0,
         to_string_trimmed$0
          (of_span_since_start_of_day$0(caml_call1(abs$4,utc_offset))),
         0],
       _a3c_=caml_call2(_adf_,utc_offset,zero$4)?cst$167:cst$168;
      return caml_call2(_Cd_,0,[0,_a3c_,_a3b_])}
    function attempt(time,zone)
     {var
       match=to_date_ofday$0(time,zone),
       ofday=match[2],
       date=match[1],
       offset_string$0=offset_string(time,zone),
       _a3a_=
        [0,
         caml_call2
          (_Cd_,_aeL_,[0,caml_call1(_adZ_,ofday),[0,offset_string$0,0]]),
         0];
      return [0,to_string$20(date),_a3a_]}
    function to_string_abs_parts(time,zone)
     {try
       {var _a2__=attempt(time,zone);return _a2__}
      catch(_a2$_){return attempt(time,utc)}}
    function to_string_abs_trimmed(time,zone)
     {var
       match=to_date_ofday$0(time,zone),
       ofday=match[2],
       date=match[1],
       offset_string$0=offset_string(time,zone),
       _a29_=[0,caml_call2(_Gp_,to_string_trimmed$0(ofday),offset_string$0),0];
      return caml_call2(_Cd_,_aeM_,[0,to_string$20(date),_a29_])}
    function to_string_abs(time,zone)
     {return caml_call2(_Cd_,_aeN_,to_string_abs_parts(time,zone))}
    function to_string$27(t){return to_string_abs(t,utc)}
    function to_string_iso8601_basic$0(time,zone)
     {return caml_call2(_Cd_,_aeO_,to_string_abs_parts(time,zone))}
    function to_string_trimmed$1(t,zone)
     {var
       match=to_date_ofday$0(t,zone),
       sec=match[2],
       date=match[1],
       _a28_=caml_call2(_Gp_,cst$169,to_string_trimmed$0(sec));
      return caml_call2(_Gp_,to_string$20(date),_a28_)}
    function to_sec_string$1(t,zone)
     {var
       match=to_date_ofday$0(t,zone),
       sec=match[2],
       date=match[1],
       _a27_=caml_call2(_Gp_,cst$170,to_sec_string$0(sec));
      return caml_call2(_Gp_,to_string$20(date),_a27_)}
    function to_filename_string(t,zone)
     {var
       match=to_date_ofday$0(t,zone),
       ofday=match[2],
       date=match[1],
       _a26_=
        caml_call2
         (_Gp_,
          cst$171,
          caml_call3(_CV_,58,45,caml_call2(_C5_,caml_call1(_adZ_,ofday),3)));
      return caml_call2(_Gp_,to_string$20(date),_a26_)}
    function of_filename_string(s,zone)
     {try
       {var match=caml_call2(_CG_,s,95);
        if(match)
         var
          match$0=match[1],
          ofday=match$0[2],
          date=match$0[1],
          date$0=of_string$17(date),
          ofday$0=caml_call3(_CV_,45,58,ofday),
          ofday$1=caml_call1(_adY_,ofday$0),
          _a25_=of_date_ofday$0(zone,date$0,ofday$1);
        else
         var _a25_=caml_call1(_Gb_,cst_no_space_in_filename_strin$0);
        return _a25_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        return caml_call4(_Pf_,_aeP_,s,caml_call1(Base_Exn[9],exn),0)}}
    function of_localized_string(zone,str)
     {try
       {var match=caml_call2(_CG_,str,32);
        if(match)
         var
          match$0=match[1],
          time=match$0[2],
          date=match$0[1],
          date$0=of_string$17(date),
          ofday=caml_call1(_adY_,time),
          _a24_=of_date_ofday$0(zone,date$0,ofday);
        else
         var _a24_=caml_call1(_Ga_,caml_call2(_fw_,_aeQ_,str));
        return _a24_}
      catch(e)
       {e = caml_wrap_exception(e);
        return caml_call2(Base_Exn[7],e,cst_Time_of_localized_string$0)}}
    function occurrence(before_or_after,t,ofday,zone)
     {var
       first_guess_date=to_date$1(t,zone),
       first_guess=of_date_ofday$0(zone,first_guess_date,ofday);
      if(476625469 <= before_or_after)
       var increment=1,cmp=_adb_;
      else
       var increment=-1,cmp=_adc_;
      return caml_call2(cmp,first_guess,t)
              ?first_guess
              :of_date_ofday$0
                (zone,add_days$0(first_guess_date,increment),ofday)}
    function ensure_colon_in_offset(offset)
     {var offset_length=caml_ml_string_length(offset);
      if
       (caml_call2(symbol$55,offset_length,2)
        &&
        caml_call1(_Fh_,caml_string_get(offset,0))
        &&
        caml_call1(_Fh_,caml_string_get(offset,offset_length - 1 | 0)))
       return caml_call2(_Gp_,offset,cst_00$0);
      if
       (!
        caml_call2(_FH_,caml_string_get(offset,1),58)
        &&
        !
        caml_call2(_FH_,caml_string_get(offset,2),58))
       {if
         (!
          caml_call2(symbol$58,offset_length,3)
          &&
          !
          caml_call2(symbol$57,offset_length,4))
         {var
           _a23_=
            [0,
             cst$172,
             [0,slice$2(offset,offset_length - 2 | 0,offset_length),0]];
          return caml_call2
                  (_Cd_,0,[0,slice$2(offset,0,offset_length - 2 | 0),_a23_])}
        return caml_call3(_Pe_,_aeR_,offset,0)}
      return offset}
    var
     Time_ns_of_string=
      [248,cst_Core_kernel_Time_ns_To_and,caml_fresh_oo_id(0)];
    function _aeS_(param)
     {if(param[1] === Time_ns_of_string)
       {var
         v1=param[3],
         v0=param[2],
         v0$0=caml_call1(sexp_of_t$43,v0),
         v1$0=caml_call1(Base_Exn[1],v1);
        return [1,[0,_aeT_,[0,v0$0,[0,v1$0,0]]]]}
      throw [0,Assert_failure,_aeU_]}
    caml_call3(Sexplib0_Sexp_conv[51][2],0,Time_ns_of_string,_aeS_);
    function of_string_gen(default_zone,find_zone,s)
     {try
       {var match=caml_call2(_CI_,s,32),switch$0=0;
        if(match)
         {var _a2U_=match[2],_a2V_=match[1];
          if(_a2U_)
           {var _a2W_=_a2U_[2],_a2X_=_a2U_[1];
            if(_a2W_)
             {var _a2Y_=_a2W_[2],_a2Z_=_a2W_[1];
              if(_a2Y_)
               if(_a2Y_[2])
                switch$0 = 1;
               else
                var
                 ofday$2=_a2Y_[1],
                 tz=0,
                 ofday=ofday$2,
                 date=
                  caml_call2
                   (_Cd_,
                    0,
                    [0,_a2V_,[0,cst$174,[0,_a2X_,[0,cst$173,[0,_a2Z_,0]]]]]);
              else
               var tz=[0,_a2Z_],ofday=_a2X_,date=_a2V_}
            else
             var tz=0,ofday=_a2X_,date=_a2V_}
          else
           {var match$4=caml_call2(_CH_,_a2V_,84);
            if(match$4)
             var
              match$5=match$4[1],
              ofday$3=match$5[2],
              date$1=match$5[1],
              tz=0,
              ofday=ofday$3,
              date=date$1;
            else
             var
              _a22_=caml_call1(_Gb_,cst_no_spaces_or_T_found$0),
              tz=_a22_[3],
              ofday=_a22_[2],
              date=_a22_[1]}}
        else
         switch$0 = 1;
        if(switch$0)
         var
          _a20_=caml_call1(_Gb_,cst_too_many_spaces$0),
          tz=_a20_[3],
          ofday=_a20_[2],
          date=_a20_[1];
        var ofday_to_sec=function(od){return to_sec(od)};
        if(tz)
         var utc_offset=0,ofday$0=ofday;
        else
         if
          (caml_call2
            (_FH_,
             caml_string_get(ofday,caml_ml_string_length(ofday) - 1 | 0),
             90))
          var
           utc_offset=utc_offset$1,
           ofday$0=
            caml_call3(_BR_,ofday,0,caml_ml_string_length(ofday) - 1 | 0);
         else
          {var match$0=caml_call2(_CG_,ofday,43);
           if(match$0)
            var
             match$1=match$0[1],
             r=match$1[2],
             l=match$1[1],
             utc_offset=
              [0,ofday_to_sec(caml_call1(_adY_,ensure_colon_in_offset(r)))],
             ofday$0=l;
           else
            {var match$2=caml_call2(_CG_,ofday,45);
             if(match$2)
              var
               match$3=match$2[1],
               r$0=match$3[2],
               l$0=match$3[1],
               utc_offset=
                [0,
                 -1.
                 *
                 ofday_to_sec(caml_call1(_adY_,ensure_colon_in_offset(r$0)))],
               ofday$0=l$0;
             else
              var utc_offset=0,ofday$0=ofday}}
        var date$0=of_string$17(date),ofday$1=caml_call1(_adY_,ofday$0);
        if(tz)
         var
          tz$0=tz[1],
          _a21_=of_date_ofday$0(caml_call1(find_zone,tz$0),date$0,ofday$1);
        else
         if(utc_offset)
          var
           utc_offset$0=utc_offset[1],
           utc_t=of_date_ofday$0(utc,date$0,ofday$1),
           _a21_=diff$8(utc_t,of_sec(utc_offset$0));
         else
          var
           zone=caml_call1(default_zone,0),
           _a21_=of_date_ofday$0(zone,date$0,ofday$1);
        return _a21_}
      catch(e){e = caml_wrap_exception(e);throw [0,Time_ns_of_string,s,e]}}
    function of_string$24(s)
     {function default_zone(param)
       {var _a2T_=[0,caml_call1(Sexplib0_Sexp_conv[7],s),0];
        return caml_call1
                (_od_,
                 [1,
                  [0,
                   caml_call1
                    (Sexplib0_Sexp_conv[7],cst_time_has_no_time_zone_or_U$0),
                   _a2T_]])}
      function find_zone(zone_name){return caml_call3(_Pe_,_aeV_,zone_name,0)}
      return of_string_gen(default_zone,find_zone,s)}
    function span_of_duration(d)
     {return caml_call1(Ppx_module_timer_runtime[3][1],d)}
    function of_string$25(string)
     {var s=of_string$21(string);
      return caml_call1(Ppx_module_timer_runtime[3][2],s)}
    function to_string_with_same_unit(durations)
     {var
       spans=caml_call2(_p9_,durations,span_of_duration),
       unit_of_time=
        caml_call3(_x3_,caml_call2(_pj_,spans,compare$81),0,to_unit_of_time$0),
       _a2S_=[0,unit_of_time];
      return caml_call2
              (_p9_,
               spans,
               function(eta){return to_string_hum$10(0,0,_aeW_,_a2S_,eta)})}
    Ppx_module_timer_runtime[3][3][1]
    =
    [0,of_string$25,to_string_with_same_unit];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$391);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Time_ns$0);
    var
     Stable$8=
      [0,
       [0,
        [0,
         bin_size_t$55,
         bin_write_t$55,
         bin_read_t$112,
         bin_read_t$113,
         bin_shape_t$107,
         bin_writer_t$94,
         bin_reader_t$94,
         bin_t$94,
         compare$81,
         t_of_sexp$88,
         sexp_of_t$97]],
       _ado_,
       _aeh_],
     include$122=[0,t_of_sexp$88,sexp_of_t$97],
     Ofday$0=
      [0,
       _adO_,
       _adP_,
       _adQ_,
       _adR_,
       _adS_,
       _adT_,
       _adU_,
       _adV_,
       _adW_,
       _adX_,
       typerep_of_t$28,
       typename_of_t$27,
       _adb_,
       _adc_,
       _add_,
       _ade_,
       _adf_,
       _adg_,
       _adh_,
       compare$81,
       _adi_,
       _adj_,
       _ad1_,
       _ad2_,
       _ad3_,
       _ad4_,
       _ad5_,
       _ad6_,
       _ad7_,
       _ad8_,
       _ad9_,
       _ad__,
       _ad$_,
       _aea_,
       _aeb_,
       _aec_,
       _aed_,
       _aee_,
       _aef_,
       _aeg_,
       _ad0_,
       symbol$207,
       symbol$208,
       symbol$209,
       symbol$210,
       symbol$211,
       symbol$212,
       robustly_compare$4,
       quickcheck_generator$14,
       quickcheck_observer$7,
       quickcheck_shrinker$13,
       _KW_,
       _KX_,
       _adY_,
       _adZ_,
       create$25,
       to_parts$2,
       zero$4,
       ns_per_day,
       to_span_since_start_of_day$0,
       of_span_since_start_of_day$0,
       of_span_since_start_of_day$0,
       span_since_start_of_day_is_val$0,
       of_span_since_start_of_day_unc$0,
       add$15,
       sub$5,
       next$5,
       prev$6,
       diff$9,
       small_diff$0,
       to_string_trimmed$0,
       to_sec_string$0,
       of_string_iso8601_extended$0,
       to_millisec_string$0,
       to_millisec_string$0,
       approximate_end_of_day$0,
       add_exn$5,
       sub_exn,
       every],
     Span$1=
      [0,
       bin_size_t$55,
       bin_write_t$55,
       bin_read_t$112,
       bin_read_t$113,
       bin_shape_t$99,
       bin_writer_t$87,
       bin_reader_t$87,
       bin_t$87,
       t_of_sexp$86,
       sexp_of_t$95,
       typerep_of_t$27,
       typename_of_t$26,
       Parts$0,
       _adb_,
       _adc_,
       _add_,
       _ade_,
       _adf_,
       _adg_,
       _adh_,
       compare$81,
       _adi_,
       _adj_,
       _ac2_,
       _ac3_,
       _ac4_,
       _ac5_,
       _ac6_,
       _ac7_,
       _ac8_,
       _ac9_,
       include$64,
       _ac__,
       _ac$_,
       _ada_,
       validate_positive$5,
       validate_non_negative$5,
       validate_negative$5,
       validate_non_positive$5,
       is_positive$5,
       is_non_negative$5,
       is_negative$5,
       is_non_positive$5,
       sign$6,
       hash_fold_t$41,
       _acT_,
       _acU_,
       _acV_,
       _acW_,
       _acX_,
       _acP_,
       symbol$207,
       symbol$208,
       symbol$209,
       symbol$210,
       symbol$211,
       symbol$212,
       robustly_compare$4,
       quickcheck_generator$9,
       quickcheck_observer$7,
       quickcheck_shrinker$7,
       _KW_,
       _KX_,
       to_string$24,
       of_string$21,
       nanosecond$0,
       microsecond$0,
       millisecond$0,
       second$1,
       minute$0,
       hour$1,
       ns_per_day,
       microsecond$0,
       zero$4,
       create$24,
       to_parts$1,
       of_ns$0,
       of_us$0,
       of_ms$0,
       of_sec,
       of_int_sec$0,
       of_int32_seconds$0,
       of_int63_seconds$0,
       of_min$0,
       of_hr$0,
       of_day$0,
       to_ns$0,
       to_us$0,
       to_ms$0,
       to_sec,
       to_min$0,
       to_hr$0,
       to_day$0,
       to_int63_seconds_round_down_ex$0,
       to_proportional_float,
       add$14,
       diff$8,
       abs$4,
       neg$4,
       scale$1,
       symbol$206,
       symbol$113,
       next$4,
       prev$5,
       to_short_string$0,
       to_unit_of_time$0,
       of_unit_of_time$0,
       to_string_hum$10,
       randomize$1,
       of_sec_with_microsecond_precis,
       of_int_us,
       of_int_ms,
       to_int_us,
       to_int_ms,
       to_int_sec,
       min_value$2,
       max_value$2,
       min_value_for_1us_rounding,
       max_value_for_1us_rounding,
       min_value_for_1us_rounding,
       max_value_for_1us_rounding,
       scale_int,
       scale_int63,
       symbol$110,
       to_int63_ns,
       of_int63_ns,
       _acF_,
       of_int_ns,
       now$0,
       random$0,
       to_span,
       of_span,
       to_span_float_round_nearest,
       to_span,
       of_span_float_round_nearest,
       of_span,
       Alternate_sexp,
       Private$3],
     Core_kernel_Time_ns=
      [0,
       Span$1,
       Ofday$0,
       hash_fold_t$41,
       hash$49,
       typerep_of_t$29,
       typename_of_t$28,
       bin_size_t$55,
       bin_write_t$55,
       bin_read_t$112,
       bin_read_t$113,
       bin_shape_t$106,
       bin_writer_t$93,
       bin_reader_t$93,
       bin_t$93,
       _adb_,
       _adc_,
       _add_,
       _ade_,
       _adf_,
       _adg_,
       _adh_,
       compare$81,
       _adi_,
       _adj_,
       include$122,
       quickcheck_generator$9,
       quickcheck_observer$7,
       quickcheck_shrinker$7,
       _KW_,
       _KX_,
       is_earlier,
       is_later,
       of_date_ofday$0,
       of_date_ofday_precise,
       to_date_ofday$0,
       to_date_ofday_precise,
       to_date$1,
       to_ofday$0,
       reset_date_cache,
       convert,
       utc_offset$0,
       of_string$24,
       to_string$27,
       to_filename_string,
       of_filename_string,
       to_string_abs,
       to_string_abs_trimmed,
       to_string_abs_parts,
       to_string_trimmed$1,
       to_sec_string$1,
       of_localized_string,
       of_string_gen,
       to_string_iso8601_basic$0,
       occurrence,
       zero$4,
       min_value$2,
       max_value$2,
       min_value_for_1us_rounding,
       max_value_for_1us_rounding,
       min_value_for_1us_rounding,
       max_value_for_1us_rounding,
       now$0,
       add$14,
       add_saturating,
       sub_saturating,
       diff$8,
       next$4,
       prev$5,
       diff$8,
       abs_diff,
       to_span_since_epoch$0,
       of_span_since_epoch$0,
       to_int63_ns_since_epoch,
       of_int63_ns_since_epoch,
       _ael_,
       of_int_ns_since_epoch,
       next_multiple$0,
       prev_multiple$0,
       random$1,
       of_time_float_round_nearest_mi,
       to_time_float_round_nearest_mi,
       to_time_float_round_nearest,
       to_time_float_round_nearest_mi,
       of_time_float_round_nearest,
       of_time_float_round_nearest_mi,
       Utc,
       Stable$8];
    caml_register_global(5127,Core_kernel_Time_ns,"Core_kernel__Time_ns");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Time_ns_altern);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$392);
    caml_call1(Expect_test_collector[4][1],cst_src_time_ns_alternate_sexp);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$393,cst$175);
    var _aeX_=include$122[1],_aeY_=include$122[2];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$394);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Time_ns_altern$0);
    var
     Core_kernel_Time_ns_alternate_=
      [0,
       Span$1,
       Ofday$0,
       hash_fold_t$41,
       hash$49,
       typerep_of_t$29,
       typename_of_t$28,
       bin_size_t$55,
       bin_write_t$55,
       bin_read_t$112,
       bin_read_t$113,
       bin_shape_t$106,
       bin_writer_t$93,
       bin_reader_t$93,
       bin_t$93,
       _adb_,
       _adc_,
       _add_,
       _ade_,
       _adf_,
       _adg_,
       _adh_,
       compare$81,
       _adi_,
       _adj_,
       include$122,
       quickcheck_generator$9,
       quickcheck_observer$7,
       quickcheck_shrinker$7,
       _KW_,
       _KX_,
       is_earlier,
       is_later,
       of_date_ofday$0,
       of_date_ofday_precise,
       to_date_ofday$0,
       to_date_ofday_precise,
       to_date$1,
       to_ofday$0,
       reset_date_cache,
       convert,
       utc_offset$0,
       of_string$24,
       to_string$27,
       to_filename_string,
       of_filename_string,
       to_string_abs,
       to_string_abs_trimmed,
       to_string_abs_parts,
       to_string_trimmed$1,
       to_sec_string$1,
       of_localized_string,
       of_string_gen,
       to_string_iso8601_basic$0,
       occurrence,
       zero$4,
       min_value$2,
       max_value$2,
       min_value_for_1us_rounding,
       max_value_for_1us_rounding,
       min_value_for_1us_rounding,
       max_value_for_1us_rounding,
       now$0,
       add$14,
       add_saturating,
       sub_saturating,
       diff$8,
       next$4,
       prev$5,
       diff$8,
       abs_diff,
       to_span_since_epoch$0,
       of_span_since_epoch$0,
       to_int63_ns_since_epoch,
       of_int63_ns_since_epoch,
       _ael_,
       of_int_ns_since_epoch,
       next_multiple$0,
       prev_multiple$0,
       random$1,
       of_time_float_round_nearest_mi,
       to_time_float_round_nearest_mi,
       to_time_float_round_nearest,
       to_time_float_round_nearest_mi,
       of_time_float_round_nearest,
       of_time_float_round_nearest_mi,
       Utc,
       Stable$8,
       _aeX_,
       _aeY_];
    caml_register_global
     (5128,
      Core_kernel_Time_ns_alternate_,
      "Core_kernel__Time_ns_alternate_sexp");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Substring_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$395);
    caml_call1(Expect_test_collector[4][1],cst_src_substring_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$396,cst$176);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$397);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Substring_intf$0);
    var Core_kernel_Substring_intf=[0];
    caml_register_global
     (5129,Core_kernel_Substring_intf,"Core_kernel__Substring_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Make_substring);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$398);
    caml_call1(Expect_test_collector[4][1],cst_src_make_substring_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$399,cst$177);
    function string_bytes(src,src_pos,src_len,dst,opt,param)
     {if(opt)var sth=opt[1],dst_pos=sth;else var dst_pos=0;
      var
       match=caml_call4(_it_,src_pos,src_len,0,caml_ml_string_length(src)),
       len=match[2],
       src_pos$0=match[1];
      return caml_call5(include$48[33][1],src,src_pos$0,dst,dst_pos,len)}
    var
     string_bigstring=_RB_[2],
     bytes_bigstring=_RD_[2],
     bigstring_string=_RC_[2],
     bigstring_bytes=_RC_[2],
     Blit=
      [0,
       string_bytes,
       bigstring_string,
       string_bytes,
       _D1_,
       bigstring_bytes,
       string_bigstring,
       bytes_bigstring,
       _Rv_];
    function F(Base)
     {function base(t){return t[1]}
      function pos(t){return t[2]}
      function length(t){return t[3]}
      function is_empty(t){return caml_call2(equal$21,t[3],0)}
      function create(pos,len,base)
       {var
         match=caml_call4(_it_,pos,len,0,caml_call1(Base[2],base)),
         len$0=match[2],
         pos$0=match[1];
        return [0,base,pos$0,len$0]}
      function get(t,i)
       {if(caml_call2(_Np_,i,0) && caml_call2(_Nt_,i,t[3]))
         return caml_call2(Base[9],t[1],t[2] + i | 0);
        throw [0,Stdlib[6],cst_index_out_of_bounds]}
      function sub(pos,len,t)
       {var
         match=caml_call4(_it_,pos,len,0,t[3]),
         len$0=match[2],
         pos$0=match[1];
        return [0,t[1],t[2] + pos$0 | 0,len$0]}
      function fold(t,acc,f)
       {var acc$0=acc,i=0;
        for(;;)
         {if(caml_call2(_Np_,i,t[3]))return acc$0;
          var
           i$0=i + 1 | 0,
           acc$1=caml_call2(f,acc$0,get(t,i)),
           acc$0=acc$1,
           i=i$0;
          continue}}
      var
       iter=
        [0,
         -198771759,
         function(t,f)
          {var _a2Q_=t[3] - 1 | 0,_a2P_=0;
           if(! (_a2Q_ < 0))
            {var i=_a2P_;
             for(;;)
              {caml_call1(f,get(t,i));
               var _a2R_=i + 1 | 0;
               if(_a2Q_ !== i){var i=_a2R_;continue}
               break}}
           return 0}],
       length$0=[0,-198771759,length],
       C=caml_call1(include$7[17],[0,[0,_FD_],fold,iter,length$0]),
       _a18_=C[5],
       _a19_=C[4],
       _a1__=C[6],
       _a1$_=C[7];
      function to_list(t)
       {function _a2N_(_a2O_){return get(t,_a2O_)}
        return caml_call2(_qQ_,t[3],_a2N_)}
      var
       _a2a_=C[15],
       _a2b_=C[13],
       _a2c_=C[12],
       _a2d_=C[8],
       _a2e_=C[9],
       _a2f_=C[1],
       _a2g_=C[10],
       _a2h_=C[11],
       _a2i_=C[16],
       _a2j_=C[17];
      function drop_prefix(t,n)
       {return caml_call2(_Ns_,n,t[3])
                ?caml_call1(_Gb_,cst_Substring_drop_prefix)
                :[0,t[1],t[2] + n | 0,t[3] - n | 0]}
      function drop_suffix(t,n)
       {return caml_call2(_Ns_,n,t[3])
                ?caml_call1(_Gb_,cst_Substring_drop_suffix)
                :[0,t[1],t[2],t[3] - n | 0]}
      function prefix(t,n)
       {return caml_call2(_Ns_,n,t[3])
                ?caml_call1(_Gb_,cst_Substring_prefix)
                :[0,t[1],t[2],n]}
      function suffix(t,n)
       {return caml_call2(_Ns_,n,t[3])
                ?caml_call1(_Gb_,cst_Substring_suffix)
                :[0,t[1],(t[2] + t[3] | 0) - n | 0,n]}
      function blit_to(blit,t,dst,dst_pos)
       {return caml_call6(blit,t[1],[0,t[2]],[0,t[3]],dst,[0,dst_pos],0)}
      var _a2k_=Base[4];
      function blit_to_string(_a2K_,_a2L_,_a2M_)
       {return blit_to(_a2k_,_a2K_,_a2L_,_a2M_)}
      var _a2l_=Base[4];
      function blit_to_bytes(_a2H_,_a2I_,_a2J_)
       {return blit_to(_a2l_,_a2H_,_a2I_,_a2J_)}
      var _a2m_=Base[5];
      function blit_to_bigstring(_a2E_,_a2F_,_a2G_)
       {return blit_to(_a2m_,_a2E_,_a2F_,_a2G_)}
      var _a2n_=Base[3];
      function blit_base(_a2B_,_a2C_,_a2D_)
       {return blit_to(_a2n_,_a2B_,_a2C_,_a2D_)}
      function blit_from(name,blit,t,src,src_pos,len)
       {if(caml_call2(_Ns_,len,t[3]))caml_call5(_Pe_,_aeZ_,name,len,t[3],0);
        return caml_call6(blit,src,[0,src_pos],[0,len],t[1],[0,t[2]],0)}
      var _a2o_=Base[6];
      function blit_from_string(_a2x_,_a2y_,_a2z_,_a2A_)
       {return blit_from(cst_string$2,_a2o_,_a2x_,_a2y_,_a2z_,_a2A_)}
      var _a2p_=Base[7];
      function blit_from_bigstring(_a2t_,_a2u_,_a2v_,_a2w_)
       {return blit_from(cst_bigstring,_a2p_,_a2t_,_a2u_,_a2v_,_a2w_)}
      function of_base(base){return [0,base,0,caml_call1(Base[2],base)]}
      function of_string(x)
       {var len=caml_ml_string_length(x),buf=caml_call1(Base[1],len);
        caml_call6(Base[6],x,0,0,buf,0,0);
        return of_base(buf)}
      function of_bigstring(x)
       {var len=caml_call1(_Rt_,x),buf=caml_call1(Base[1],len);
        caml_call6(Base[7],x,0,0,buf,0,0);
        return of_base(buf)}
      function make(create,blit,t)
       {var dst=caml_call1(create,t[3]);
        caml_call6(blit,t[1],[0,t[2]],[0,t[3]],dst,_ae0_,0);
        return dst}
      function to_string(x){return caml_call1(_EJ_,make(_Eq_,Base[4],x))}
      var _a2q_=Base[5];
      function _a2r_(eta){return arg(0,eta)}
      function to_bigstring(_a2s_){return make(_a2r_,_a2q_,_a2s_)}
      function concat_gen(create_dst,blit_dst,ts)
       {var
         len=caml_call3(_o__,ts,0,function(len,t){return len + t[3] | 0}),
         dst=caml_call1(create_dst,len);
        caml_call3
         (_o__,
          ts,
          0,
          function(dst_pos,t)
           {caml_call3(blit_dst,t,dst,dst_pos);return dst_pos + t[3] | 0});
        return dst}
      function concat(ts){return of_base(concat_gen(Base[1],blit_base,ts))}
      function concat_string(ts)
       {return caml_call1(_EJ_,concat_gen(_Eq_,blit_to_string,ts))}
      function concat_bigstring(ts)
       {return concat_gen
                (function(eta){return arg(0,eta)},blit_to_bigstring,ts)}
      return [0,
              _a2f_,
              length,
              is_empty,
              _a19_,
              _a18_,
              _a1__,
              _a1$_,
              _a2d_,
              _a2e_,
              _a2g_,
              _a2h_,
              _a2c_,
              _a2b_,
              to_list,
              _a2a_,
              _a2i_,
              _a2j_,
              base,
              pos,
              get,
              create,
              sub,
              blit_to_string,
              blit_to_bytes,
              blit_to_bigstring,
              blit_from_string,
              blit_from_bigstring,
              concat,
              concat_string,
              concat_bigstring,
              to_string,
              to_bigstring,
              of_string,
              of_bigstring,
              drop_prefix,
              drop_suffix,
              prefix,
              suffix]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$400);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Make_substring$0);
    var Core_kernel_Make_substring=[0,Blit,F];
    caml_register_global
     (5130,Core_kernel_Make_substring,"Core_kernel__Make_substring");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Substring);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$401);
    caml_call1(Expect_test_collector[4][1],cst_src_substring_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$402,cst$178);
    var
     blit$3=Blit[4],
     blit_to_string=Blit[4],
     blit_to_bytes=Blit[4],
     blit_to_bigstring=Blit[7],
     blit_from_string=Blit[3],
     blit_from_bigstring=Blit[5],
     include$123=
      F
       ([0,
         _Eq_,
         _Ex_,
         blit$3,
         blit_to_bytes,
         blit_to_bigstring,
         blit_from_string,
         blit_from_bigstring,
         blit_to_string,
         _Ey_]),
     _ae1_=include$123[1],
     _ae2_=include$123[2],
     _ae3_=include$123[3],
     _ae4_=include$123[4],
     _ae5_=include$123[5],
     _ae6_=include$123[6],
     _ae7_=include$123[7],
     _ae8_=include$123[8],
     _ae9_=include$123[9],
     _ae__=include$123[10],
     _ae$_=include$123[11],
     _afa_=include$123[12],
     _afb_=include$123[13],
     _afc_=include$123[14],
     _afd_=include$123[15],
     _afe_=include$123[16],
     _aff_=include$123[17],
     _afg_=include$123[18],
     _afh_=include$123[19],
     _afi_=include$123[20],
     _afj_=include$123[21],
     _afk_=include$123[22],
     _afl_=include$123[23],
     _afm_=include$123[24],
     _afn_=include$123[25],
     _afo_=include$123[26],
     _afp_=include$123[27],
     _afq_=include$123[28],
     _afr_=include$123[29],
     _afs_=include$123[30],
     _aft_=include$123[31],
     _afu_=include$123[32],
     _afv_=include$123[33],
     _afw_=include$123[34],
     _afx_=include$123[35],
     _afy_=include$123[36],
     _afz_=include$123[37],
     _afA_=include$123[38];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$403);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Substring$0);
    var
     Core_kernel_Substring=
      [0,
       _ae1_,
       _ae2_,
       _ae3_,
       _ae4_,
       _ae5_,
       _ae6_,
       _ae7_,
       _ae8_,
       _ae9_,
       _ae__,
       _ae$_,
       _afa_,
       _afb_,
       _afc_,
       _afd_,
       _afe_,
       _aff_,
       _afg_,
       _afh_,
       _afi_,
       _afj_,
       _afk_,
       _afl_,
       _afm_,
       _afn_,
       _afo_,
       _afp_,
       _afq_,
       _afr_,
       _afs_,
       _aft_,
       _afu_,
       _afv_,
       _afw_,
       _afx_,
       _afy_,
       _afz_,
       _afA_];
    caml_register_global(5131,Core_kernel_Substring,"Core_kernel__Substring");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_String_id_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$404);
    caml_call1(Expect_test_collector[4][1],cst_src_string_id_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$405,cst$179);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$406);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_String_id_intf$0);
    var Core_kernel_String_id_intf=[0];
    caml_register_global
     (5132,Core_kernel_String_id_intf,"Core_kernel__String_id_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_String_id);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$407);
    caml_call1(Expect_test_collector[4][1],cst_src_string_id_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$408,cst$180);
    function Make_with_validate_without_pre(M,symbol)
     {function hash(x){return hash_string(x)}
      function invalid(s,reason)
       {return [1,caml_call4(_fw_,_afB_,s,M[1],reason)]}
      function check_for_whitespace(s)
       {var len=caml_ml_string_length(s);
        if(caml_call2(symbol$56,len,0))return invalid(s,cst_it_is_empty);
        if
         (!
          caml_call1(_Fb_,caml_string_get(s,0))
          &&
          !
          caml_call1(_Fb_,caml_string_get(s,len - 1 | 0)))
         return _afC_;
        return invalid(s,cst_it_has_whitespace_on_the_e)}
      function validate(s){return caml_call2(_hY_,caml_call1(M[2],s),_nY_)}
      function check(s)
       {var match=check_for_whitespace(s);
        if(0 === match[0])return validate(s);
        var error=match[1];
        return [1,error]}
      function to_string(_a17_){return _a17_}
      function of_string(s)
       {var match=check(s);
        if(0 === match[0])return s;
        var err=match[1];
        return caml_call1(_Ga_,err)}
      function t_of_sexp(sexp)
       {var s=caml_call1(_DW_[1][15],sexp),match=check(s);
        if(0 === match[0])return s;
        var err=match[1];
        return caml_call2(_Od_,err,sexp)}
      function to_binable(_a16_){return _a16_}
      var
       include=
        caml_call1
         (caml_call1
           (_TP_,
            [0,
             bin_shape_t$46,
             bin_size_t$48,
             bin_write_t$48,
             bin_read_t$98,
             bin_read_t$99]),
          [0,to_binable,of_string]),
       bin_size_t=include[1],
       bin_write_t=include[2],
       bin_read_t=include[3],
       bin_read_t$0=include[4],
       bin_shape_t=include[5],
       bin_writer_t=include[6],
       bin_reader_t=include[7],
       bin_t=include[8],
       T=
        [0,
         sexp_of_t$43,
         compare$37,
         equal$18,
         hash_fold_t$14,
         hash,
         check_for_whitespace,
         validate,
         check,
         to_string,
         pp$0,
         of_string,
         t_of_sexp,
         bin_size_t,
         bin_write_t,
         bin_read_t,
         bin_read_t$0,
         bin_shape_t,
         bin_writer_t,
         bin_reader_t,
         bin_t],
       sexp_of_t=T[1],
       compare=T[2],
       equal=T[3],
       hash_fold_t=T[4],
       hash$0=T[5],
       check_for_whitespace$0=T[6],
       validate$0=T[7],
       check$0=T[8],
       to_string$0=T[9],
       pp=T[10],
       of_string$0=T[11],
       t_of_sexp$0=T[12],
       bin_size_t$0=T[13],
       bin_write_t$0=T[14],
       bin_read_t$1=T[15],
       bin_read_t$2=T[16],
       bin_shape_t$0=T[17],
       bin_writer_t$0=T[18],
       bin_reader_t$0=T[19],
       bin_t$0=T[20],
       include$0=caml_call1(_hc_[1][2],[0,T[2],T[1]]),
       comparator=include$0[1],
       T_with_comparator=
        [0,
         sexp_of_t,
         compare,
         equal,
         hash_fold_t,
         hash$0,
         check_for_whitespace$0,
         validate$0,
         check$0,
         to_string$0,
         pp,
         of_string$0,
         t_of_sexp$0,
         bin_size_t$0,
         bin_write_t$0,
         bin_read_t$1,
         bin_read_t$2,
         bin_shape_t$0,
         bin_writer_t$0,
         bin_reader_t$0,
         bin_t$0,
         comparator],
       sexp_of_t$0=T_with_comparator[1],
       compare$0=T_with_comparator[2],
       equal$0=T_with_comparator[3],
       hash_fold_t$0=T_with_comparator[4],
       hash$1=T_with_comparator[5],
       check_for_whitespace$1=T_with_comparator[6],
       validate$1=T_with_comparator[7],
       check$1=T_with_comparator[8],
       to_string$1=T_with_comparator[9],
       pp$1=T_with_comparator[10],
       of_string$1=T_with_comparator[11],
       t_of_sexp$1=T_with_comparator[12],
       bin_size_t$1=T_with_comparator[13],
       bin_write_t$1=T_with_comparator[14],
       bin_read_t$3=T_with_comparator[15],
       bin_read_t$4=T_with_comparator[16],
       bin_shape_t$1=T_with_comparator[17],
       bin_writer_t$1=T_with_comparator[18],
       bin_reader_t$1=T_with_comparator[19],
       bin_t$1=T_with_comparator[20],
       comparator$0=T_with_comparator[21],
       _a1h_=
        caml_call1
         (Stable$2[1][1],
          [0,
           T_with_comparator[13],
           T_with_comparator[14],
           T_with_comparator[15],
           T_with_comparator[16],
           T_with_comparator[17],
           T_with_comparator[18],
           T_with_comparator[19],
           T_with_comparator[20],
           T_with_comparator[2],
           T_with_comparator[12],
           T_with_comparator[1],
           T_with_comparator[21]]),
       Map=_a1h_[1],
       Set=_a1h_[2],
       include$1=
        caml_call1
         (Stable$3[1][1],
          [0,
           T_with_comparator[13],
           T_with_comparator[14],
           T_with_comparator[15],
           T_with_comparator[16],
           T_with_comparator[17],
           T_with_comparator[18],
           T_with_comparator[19],
           T_with_comparator[20],
           T_with_comparator[12],
           T_with_comparator[2],
           T_with_comparator[1],
           T_with_comparator[5]]),
       Table=include$1[1],
       Hash_set=include$1[2],
       V1=
        [0,
         T,
         T_with_comparator,
         sexp_of_t$0,
         compare$0,
         equal$0,
         hash_fold_t$0,
         hash$1,
         check_for_whitespace$1,
         validate$1,
         check$1,
         to_string$1,
         pp$1,
         of_string$1,
         t_of_sexp$1,
         bin_size_t$1,
         bin_write_t$1,
         bin_read_t$3,
         bin_read_t$4,
         bin_shape_t$1,
         bin_writer_t$1,
         bin_reader_t$1,
         bin_t$1,
         comparator$0,
         Map,
         Set,
         Table,
         Hash_set],
       Stable=[0,V1],
       _a1i_=Stable[1][2],
       _a1m_=_a1i_[8],
       _a1z_=Stable[1][2],
       _a1j_=_a1i_[1],
       _a1k_=_a1i_[6],
       _a1l_=_a1i_[7],
       _a1n_=_a1i_[9],
       _a1o_=_a1i_[10],
       _a1p_=_a1i_[11],
       _a1q_=_a1i_[12],
       _a1r_=_a1i_[13],
       _a1s_=_a1i_[14],
       _a1t_=_a1i_[15],
       _a1u_=_a1i_[16],
       _a1v_=_a1i_[17],
       _a1w_=_a1i_[18],
       _a1x_=_a1i_[19],
       _a1y_=_a1i_[20],
       _a1A_=
        _xi_
         ([0,
           _a1z_[13],
           _a1z_[14],
           _a1z_[15],
           _a1z_[16],
           _a1z_[17],
           _a1z_[18],
           _a1z_[19],
           _a1z_[20],
           _a1z_[12],
           _a1z_[1],
           _a1z_[21]]),
       _a1X_=Stable[1][2],
       _a1B_=_a1A_[1],
       _a1C_=_a1A_[2],
       _a1D_=_a1A_[3],
       _a1E_=_a1A_[4],
       _a1F_=_a1A_[5],
       _a1G_=_a1A_[6],
       _a1H_=_a1A_[7],
       _a1I_=_a1A_[8],
       _a1J_=_a1A_[9],
       _a1K_=_a1A_[10],
       _a1L_=_a1A_[11],
       _a1M_=_a1A_[12],
       _a1N_=_a1A_[13],
       _a1O_=_a1A_[14],
       _a1P_=_a1A_[15],
       _a1Q_=_a1A_[16],
       _a1R_=_a1A_[17],
       _a1S_=_a1A_[18],
       _a1T_=_a1A_[19],
       _a1U_=_a1A_[20],
       _a1V_=_a1A_[21],
       _a1W_=_a1A_[22],
       include$2=
        Make_binable
         ([0,
           _a1X_[4],
           _a1X_[13],
           _a1X_[14],
           _a1X_[15],
           _a1X_[16],
           _a1X_[17],
           _a1X_[18],
           _a1X_[19],
           _a1X_[20],
           _a1X_[12],
           _a1X_[2],
           _a1X_[1],
           _a1X_[5]]),
       _a1Y_=include$2[1],
       _a1Z_=include$2[2],
       _a10_=include$2[3],
       _a11_=include$2[4],
       _a12_=include$2[5],
       _a13_=include$2[6],
       quickcheck_shrinker=caml_call1(_uU_[3],0);
      function _a14_(string){return caml_call1(_hO_,caml_call1(_a1m_,string))}
      var
       _a15_=caml_call1(_DV_,_F9_),
       quickcheck_generator=caml_call2(_uW_[60],_a15_,_a14_);
      return [0,
              Stable,
              _a1j_,
              _a1k_,
              _a1l_,
              _a1m_,
              _a1n_,
              _a1o_,
              _a1p_,
              _a1q_,
              _a1r_,
              _a1s_,
              _a1t_,
              _a1u_,
              _a1v_,
              _a1w_,
              _a1x_,
              _a1y_,
              _a1B_,
              _a1C_,
              _a1D_,
              _a1E_,
              _a1F_,
              _a1G_,
              _a1H_,
              _a1I_,
              _a1J_,
              _a1K_,
              _a1L_,
              _a1M_,
              _a1N_,
              _a1O_,
              _a1P_,
              _a1Q_,
              _a1R_,
              _a1S_,
              _a1T_,
              _a1U_,
              _a1V_,
              _a1W_,
              _a1Y_,
              _a1Z_,
              _a10_,
              _a11_,
              _a12_,
              _a13_,
              quickcheck_shrinker,
              _DR_,
              quickcheck_generator]}
    function Make_without_pretty_printer(M,symbol)
     {var
       _a1g_=M[1],
       validate=caml_call1(_im_,_afD_),
       include=Make_with_validate_without_pre([0,_a1g_,validate],[0]),
       Stable=include[1],
       sexp_of_t=include[2],
       check_for_whitespace=include[3],
       validate$0=include[4],
       check=include[5],
       to_string=include[6],
       pp=include[7],
       of_string=include[8],
       t_of_sexp=include[9],
       bin_size_t=include[10],
       bin_write_t=include[11],
       bin_read_t=include[12],
       bin_read_t$0=include[13],
       bin_shape_t=include[14],
       bin_writer_t=include[15],
       bin_reader_t=include[16],
       bin_t=include[17],
       symbol$0=include[18],
       symbol$1=include[19],
       symbol$2=include[20],
       symbol$3=include[21],
       symbol$4=include[22],
       symbol$5=include[23],
       equal=include[24],
       compare=include[25],
       min=include[26],
       max=include[27],
       ascending=include[28],
       descending=include[29],
       between=include[30],
       clamp_exn=include[31],
       clamp=include[32],
       validate_lbound=include[33],
       validate_ubound=include[34],
       validate_bound=include[35],
       Replace_polymorphic_compare=include[36],
       comparator=include[37],
       Map=include[38],
       Set=include[39],
       hash_fold_t=include[40],
       hash=include[41],
       hashable=include[42],
       Table=include[43],
       Hash_set=include[44],
       Hash_queue=include[45],
       quickcheck_shrinker=include[46],
       quickcheck_observer=include[47],
       quickcheck_generator=include[48];
      return [0,
              Stable,
              sexp_of_t,
              check_for_whitespace,
              validate$0,
              check,
              to_string,
              pp,
              of_string,
              t_of_sexp,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t,
              symbol$0,
              symbol$1,
              symbol$2,
              symbol$3,
              symbol$4,
              symbol$5,
              equal,
              compare,
              min,
              max,
              ascending,
              descending,
              between,
              clamp_exn,
              clamp,
              validate_lbound,
              validate_ubound,
              validate_bound,
              Replace_polymorphic_compare,
              comparator,
              Map,
              Set,
              hash_fold_t,
              hash,
              hashable,
              Table,
              Hash_set,
              Hash_queue,
              quickcheck_shrinker,
              quickcheck_observer,
              quickcheck_generator]}
    function Make$12(M,symbol)
     {var
       include$0=Make_without_pretty_printer(M,[0]),
       Stable=include$0[1],
       sexp_of_t=include$0[2],
       check_for_whitespace=include$0[3],
       validate=include$0[4],
       check=include$0[5],
       to_string=include$0[6],
       of_string=include$0[8],
       t_of_sexp=include$0[9],
       bin_size_t=include$0[10],
       bin_write_t=include$0[11],
       bin_read_t=include$0[12],
       bin_read_t$0=include$0[13],
       bin_shape_t=include$0[14],
       bin_writer_t=include$0[15],
       bin_reader_t=include$0[16],
       bin_t=include$0[17],
       symbol$0=include$0[18],
       symbol$1=include$0[19],
       symbol$2=include$0[20],
       symbol$3=include$0[21],
       symbol$4=include$0[22],
       symbol$5=include$0[23],
       equal=include$0[24],
       compare=include$0[25],
       min=include$0[26],
       max=include$0[27],
       ascending=include$0[28],
       descending=include$0[29],
       between=include$0[30],
       clamp_exn=include$0[31],
       clamp=include$0[32],
       validate_lbound=include$0[33],
       validate_ubound=include$0[34],
       validate_bound=include$0[35],
       Replace_polymorphic_compare=include$0[36],
       comparator=include$0[37],
       Map=include$0[38],
       Set=include$0[39],
       hash_fold_t=include$0[40],
       hash=include$0[41],
       hashable=include$0[42],
       Table=include$0[43],
       Hash_set=include$0[44],
       Hash_queue=include$0[45],
       quickcheck_shrinker=include$0[46],
       quickcheck_observer=include$0[47],
       quickcheck_generator=include$0[48],
       module_name=M[1],
       include=caml_call1(Base_Pretty_printer[2],[0,module_name,to_string]),
       pp=include[1];
      return [0,
              Stable,
              sexp_of_t,
              check_for_whitespace,
              validate,
              check,
              to_string,
              of_string,
              t_of_sexp,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t,
              symbol$0,
              symbol$1,
              symbol$2,
              symbol$3,
              symbol$4,
              symbol$5,
              equal,
              compare,
              min,
              max,
              ascending,
              descending,
              between,
              clamp_exn,
              clamp,
              validate_lbound,
              validate_ubound,
              validate_bound,
              Replace_polymorphic_compare,
              comparator,
              Map,
              Set,
              hash_fold_t,
              hash,
              hashable,
              Table,
              Hash_set,
              Hash_queue,
              quickcheck_shrinker,
              quickcheck_observer,
              quickcheck_generator,
              pp]}
    var
     _afE_=[0],
     _afF_=[0,module_name$12],
     include$124=function(_a1f_){return Make$12(_afF_,_a1f_)}(_afE_),
     _afG_=include$124[1],
     _afH_=include$124[2],
     _afI_=include$124[6],
     _afJ_=include$124[7],
     _afK_=include$124[8],
     _afL_=include$124[9],
     _afM_=include$124[10],
     _afN_=include$124[11],
     _afO_=include$124[12],
     _afP_=include$124[13],
     _afQ_=include$124[14],
     _afR_=include$124[15],
     _afS_=include$124[16],
     _afT_=include$124[17],
     _afU_=include$124[18],
     _afV_=include$124[19],
     _afW_=include$124[20],
     _afX_=include$124[21],
     _afY_=include$124[22],
     _afZ_=include$124[23],
     _af0_=include$124[24],
     _af1_=include$124[25],
     _af2_=include$124[26],
     _af3_=include$124[27],
     _af4_=include$124[28],
     _af5_=include$124[29],
     _af6_=include$124[30],
     _af7_=include$124[31],
     _af8_=include$124[32],
     _af9_=include$124[33],
     _af__=include$124[34],
     _af$_=include$124[35],
     _aga_=include$124[36],
     _agb_=include$124[37],
     _agc_=include$124[38],
     _agd_=include$124[39],
     _age_=include$124[40],
     _agf_=include$124[41],
     _agg_=include$124[42],
     _agh_=include$124[43],
     _agi_=include$124[44],
     _agj_=include$124[45],
     _agk_=include$124[46],
     _agl_=include$124[47],
     _agm_=include$124[48];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$409);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_String_id$0);
    function _agn_(_a1c_,_a1b_)
     {var _a1d_=Make_with_validate_without_pre(_a1c_,_a1b_),_a1e_=_a1d_[1][1];
      return [0,
              _a1d_[10],
              _a1d_[11],
              _a1d_[12],
              _a1d_[13],
              _a1d_[14],
              _a1d_[15],
              _a1d_[16],
              _a1d_[17],
              _a1d_[9],
              _a1d_[2],
              _a1d_[8],
              _a1d_[6],
              _a1d_[7],
              _a1d_[18],
              _a1d_[19],
              _a1d_[20],
              _a1d_[21],
              _a1d_[22],
              _a1d_[23],
              _a1d_[24],
              _a1d_[25],
              _a1d_[26],
              _a1d_[27],
              _a1d_[28],
              _a1d_[29],
              _a1d_[30],
              _a1d_[31],
              _a1d_[32],
              _a1d_[33],
              _a1d_[34],
              _a1d_[35],
              _a1d_[36],
              _a1d_[37],
              _a1d_[38],
              _a1d_[39],
              _a1d_[40],
              _a1d_[41],
              _a1d_[42],
              _a1d_[43],
              _a1d_[44],
              _a1d_[45],
              _a1d_[48],
              _a1d_[47],
              _a1d_[46],
              [0,
               [0,
                _a1e_[5],
                _a1e_[6],
                _a1e_[7],
                _a1e_[13],
                _a1e_[11],
                _a1e_[15],
                _a1e_[16],
                _a1e_[17],
                _a1e_[18],
                _a1e_[19],
                _a1e_[20],
                _a1e_[21],
                _a1e_[22],
                _a1e_[4],
                _a1e_[14],
                _a1e_[3],
                _a1e_[23],
                _a1e_[24],
                _a1e_[25],
                _a1e_[26],
                _a1e_[27]]]]}
    function _ago_(_a0__,_a09_)
     {var _a0$_=Make_without_pretty_printer(_a0__,_a09_),_a1a_=_a0$_[1][1];
      return [0,
              _a0$_[10],
              _a0$_[11],
              _a0$_[12],
              _a0$_[13],
              _a0$_[14],
              _a0$_[15],
              _a0$_[16],
              _a0$_[17],
              _a0$_[9],
              _a0$_[2],
              _a0$_[8],
              _a0$_[6],
              _a0$_[7],
              _a0$_[18],
              _a0$_[19],
              _a0$_[20],
              _a0$_[21],
              _a0$_[22],
              _a0$_[23],
              _a0$_[24],
              _a0$_[25],
              _a0$_[26],
              _a0$_[27],
              _a0$_[28],
              _a0$_[29],
              _a0$_[30],
              _a0$_[31],
              _a0$_[32],
              _a0$_[33],
              _a0$_[34],
              _a0$_[35],
              _a0$_[36],
              _a0$_[37],
              _a0$_[38],
              _a0$_[39],
              _a0$_[40],
              _a0$_[41],
              _a0$_[42],
              _a0$_[43],
              _a0$_[44],
              _a0$_[45],
              _a0$_[48],
              _a0$_[47],
              _a0$_[46],
              [0,
               [0,
                _a1a_[5],
                _a1a_[6],
                _a1a_[7],
                _a1a_[13],
                _a1a_[11],
                _a1a_[15],
                _a1a_[16],
                _a1a_[17],
                _a1a_[18],
                _a1a_[19],
                _a1a_[20],
                _a1a_[21],
                _a1a_[22],
                _a1a_[4],
                _a1a_[14],
                _a1a_[3],
                _a1a_[23],
                _a1a_[24],
                _a1a_[25],
                _a1a_[26],
                _a1a_[27]]]]}
    function _agp_(M,_a07_)
     {var
       include$0=Make_with_validate_without_pre(M,[0]),
       Stable=include$0[1],
       sexp_of_t=include$0[2],
       to_string=include$0[6],
       of_string=include$0[8],
       t_of_sexp=include$0[9],
       bin_size_t=include$0[10],
       bin_write_t=include$0[11],
       bin_read_t=include$0[12],
       bin_read_t$0=include$0[13],
       bin_shape_t=include$0[14],
       bin_writer_t=include$0[15],
       bin_reader_t=include$0[16],
       bin_t=include$0[17],
       symbol=include$0[18],
       symbol$0=include$0[19],
       symbol$1=include$0[20],
       symbol$2=include$0[21],
       symbol$3=include$0[22],
       symbol$4=include$0[23],
       equal=include$0[24],
       compare=include$0[25],
       min=include$0[26],
       max=include$0[27],
       ascending=include$0[28],
       descending=include$0[29],
       between=include$0[30],
       clamp_exn=include$0[31],
       clamp=include$0[32],
       validate_lbound=include$0[33],
       validate_ubound=include$0[34],
       validate_bound=include$0[35],
       Replace_polymorphic_compare=include$0[36],
       comparator=include$0[37],
       Map=include$0[38],
       Set=include$0[39],
       hash_fold_t=include$0[40],
       hash=include$0[41],
       hashable=include$0[42],
       Table=include$0[43],
       Hash_set=include$0[44],
       Hash_queue=include$0[45],
       quickcheck_shrinker=include$0[46],
       quickcheck_observer=include$0[47],
       quickcheck_generator=include$0[48],
       module_name=M[1],
       include=caml_call1(Base_Pretty_printer[2],[0,module_name,to_string]),
       pp=include[1],
       _a08_=Stable[1];
      return [0,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t,
              t_of_sexp,
              sexp_of_t,
              of_string,
              to_string,
              pp,
              symbol,
              symbol$0,
              symbol$1,
              symbol$2,
              symbol$3,
              symbol$4,
              equal,
              compare,
              min,
              max,
              ascending,
              descending,
              between,
              clamp_exn,
              clamp,
              validate_lbound,
              validate_ubound,
              validate_bound,
              Replace_polymorphic_compare,
              comparator,
              Map,
              Set,
              hash_fold_t,
              hash,
              hashable,
              Table,
              Hash_set,
              Hash_queue,
              quickcheck_generator,
              quickcheck_observer,
              quickcheck_shrinker,
              [0,
               [0,
                _a08_[5],
                _a08_[6],
                _a08_[7],
                _a08_[13],
                _a08_[11],
                _a08_[15],
                _a08_[16],
                _a08_[17],
                _a08_[18],
                _a08_[19],
                _a08_[20],
                _a08_[21],
                _a08_[22],
                _a08_[4],
                _a08_[14],
                _a08_[3],
                _a08_[23],
                _a08_[24],
                _a08_[25],
                _a08_[26],
                _a08_[27]]]]}
    function _agq_(_a04_,_a03_)
     {var _a05_=Make$12(_a04_,_a03_),_a06_=_a05_[1][1];
      return [0,
              _a05_[9],
              _a05_[10],
              _a05_[11],
              _a05_[12],
              _a05_[13],
              _a05_[14],
              _a05_[15],
              _a05_[16],
              _a05_[8],
              _a05_[2],
              _a05_[7],
              _a05_[6],
              _a05_[48],
              _a05_[17],
              _a05_[18],
              _a05_[19],
              _a05_[20],
              _a05_[21],
              _a05_[22],
              _a05_[23],
              _a05_[24],
              _a05_[25],
              _a05_[26],
              _a05_[27],
              _a05_[28],
              _a05_[29],
              _a05_[30],
              _a05_[31],
              _a05_[32],
              _a05_[33],
              _a05_[34],
              _a05_[35],
              _a05_[36],
              _a05_[37],
              _a05_[38],
              _a05_[39],
              _a05_[40],
              _a05_[41],
              _a05_[42],
              _a05_[43],
              _a05_[44],
              _a05_[47],
              _a05_[46],
              _a05_[45],
              [0,
               [0,
                _a06_[5],
                _a06_[6],
                _a06_[7],
                _a06_[13],
                _a06_[11],
                _a06_[15],
                _a06_[16],
                _a06_[17],
                _a06_[18],
                _a06_[19],
                _a06_[20],
                _a06_[21],
                _a06_[22],
                _a06_[4],
                _a06_[14],
                _a06_[3],
                _a06_[23],
                _a06_[24],
                _a06_[25],
                _a06_[26],
                _a06_[27]]]]}
    var
     _agr_=_afG_[1],
     Core_kernel_String_id=
      [0,
       _afL_,
       _afM_,
       _afN_,
       _afO_,
       _afP_,
       _afQ_,
       _afR_,
       _afS_,
       _afK_,
       _afH_,
       _afJ_,
       _afI_,
       _agm_,
       _afT_,
       _afU_,
       _afV_,
       _afW_,
       _afX_,
       _afY_,
       _afZ_,
       _af0_,
       _af1_,
       _af2_,
       _af3_,
       _af4_,
       _af5_,
       _af6_,
       _af7_,
       _af8_,
       _af9_,
       _af__,
       _af$_,
       _aga_,
       _agb_,
       _agc_,
       _agd_,
       _age_,
       _agf_,
       _agg_,
       _agh_,
       _agi_,
       _agl_,
       _agk_,
       _agj_,
       [0,
        [0,
         _agr_[5],
         _agr_[6],
         _agr_[7],
         _agr_[13],
         _agr_[11],
         _agr_[15],
         _agr_[16],
         _agr_[17],
         _agr_[18],
         _agr_[19],
         _agr_[20],
         _agr_[21],
         _agr_[22],
         _agr_[4],
         _agr_[14],
         _agr_[3],
         _agr_[23],
         _agr_[24],
         _agr_[25],
         _agr_[26],
         _agr_[27]]],
       _agq_,
       _agp_,
       _ago_,
       _agn_];
    caml_register_global(5133,Core_kernel_String_id,"Core_kernel__String_id");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Stack);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$410);
    caml_call1(Expect_test_collector[4][1],cst_src_stack_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$411,cst$181);
    var
     t_of_sexp$89=include$125[1],
     sexp_of_t$98=include$125[2],
     invariant$12=include$125[3],
     mem$11=include$125[4],
     length$17=include$125[5],
     is_empty$13=include$125[6],
     iter$18=include$125[7],
     fold$12=include$125[8],
     fold_result$5=include$125[9],
     fold_until$5=include$125[10],
     exists$11=include$125[11],
     for_all$10=include$125[12],
     count$10=include$125[13],
     sum$6=include$125[14],
     find$13=include$125[15],
     find_map$5=include$125[16],
     to_list$7=include$125[17],
     to_array$6=include$125[18],
     min_elt$10=include$125[19],
     max_elt$10=include$125[20],
     of_list$9=include$125[21],
     create$26=include$125[22],
     singleton$10=include$125[23],
     push=include$125[24],
     pop=include$125[25],
     pop_exn=include$125[26],
     top=include$125[27],
     top_exn=include$125[28],
     clear$2=include$125[29],
     copy$4=include$125[30],
     until_empty=include$125[31],
     capacity=include$125[32],
     set_capacity=include$125[33],
     include$126=
      caml_call1
       (Bin_prot_Utils[12],
        [0,
         [0,
          bin_shape_t$24,
          bin_size_t$31,
          bin_write_t$31,
          bin_read_t$65,
          bin_read_t$64],
         to_list$7,
         of_list$9]),
     _ags_=include$126[1],
     _agt_=include$126[2],
     _agu_=include$126[3],
     _agv_=include$126[4],
     _agw_=include$126[5],
     _agx_=include$126[6],
     _agy_=include$126[7],
     _agz_=include$126[8];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$412);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Stack$0);
    var
     Core_kernel_Stack=
      [0,
       t_of_sexp$89,
       sexp_of_t$98,
       invariant$12,
       mem$11,
       length$17,
       is_empty$13,
       iter$18,
       fold$12,
       fold_result$5,
       fold_until$5,
       exists$11,
       for_all$10,
       count$10,
       sum$6,
       find$13,
       find_map$5,
       to_list$7,
       to_array$6,
       min_elt$10,
       max_elt$10,
       of_list$9,
       create$26,
       singleton$10,
       push,
       pop,
       pop_exn,
       top,
       top_exn,
       clear$2,
       copy$4,
       until_empty,
       capacity,
       set_capacity,
       _ags_,
       _agt_,
       _agu_,
       _agv_,
       _agw_,
       _agx_,
       _agy_,
       _agz_];
    caml_register_global(5135,Core_kernel_Stack,"Core_kernel__Stack");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Stable_unit_te$1);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$413);
    caml_call1(Expect_test_collector[4][1],cst_src_stable_unit_test_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$414,cst$182);
    function Make_sexp_deserialization_test(_a00_)
     {function _a01_(param)
       {function _a02_(param)
         {var
           sexp_as_string=param[2],
           t=param[1],
           error=
            caml_call2
             (_tP_,
              0,
              function(param)
               {var sexp=caml_call1(of_string,sexp_as_string);
                return caml_call1(_a00_[1],sexp)});
          if(0 === error[0])
           {var t$0=error[1];
            return caml_call2(_a00_[11],t,t$0)
                    ?_agA_
                    :caml_call4
                      (_tV_,
                       0,
                       cst_sexp_deserialization_misma,
                       [0,[0,434236056,t],[0,165604846,t$0]],
                       function(param)
                        {var
                          v1=param[2],
                          v0=param[1],
                          v0$0=v0[2],
                          v0$1=[1,[0,_agB_,[0,caml_call1(_a00_[2],v0$0),0]]],
                          v0$2=v1[2],
                          v1$0=[1,[0,_agC_,[0,caml_call1(_a00_[2],v0$2),0]]];
                         return [1,[0,v0$1,[0,v1$0,0]]]})}
          return caml_call4
                  (_t1_,
                   error,
                   cst_could_not_deserialize_sexp,
                   [0,sexp_as_string,[0,434236056,t]],
                   function(param)
                    {var
                      v1=param[2],
                      v0=param[1],
                      v0$0=caml_call1(sexp_of_t$43,v0),
                      v0$1=v1[2],
                      v1$0=[1,[0,_agD_,[0,caml_call1(_a00_[2],v0$1),0]]];
                     return [1,[0,v0$0,[0,v1$0,0]]]})}
        return caml_call1
                (_tS_,caml_call1(_t7_,caml_call2(_p9_,_a00_[12],_a02_)))}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_sexp_deserialization,
        0,
        cst_src_stable_unit_test_ml$0,
        6,
        2,
        772,
        _a01_);
      return [0]}
    function Make_sexp_serialization_test(_a0W_)
     {function _a0X_(param)
       {function _a0Y_(param)
         {var sexp_as_string=param[2],t=param[1];
          return caml_call2
                  (_tP_,
                   0,
                   function(param)
                    {var
                      sexp=caml_call1(of_string,sexp_as_string),
                      serialized_sexp=caml_call1(_a0W_[2],t),
                      _a0Z_=caml_call2(_zs_,serialized_sexp,sexp);
                     return _a0Z_
                             ?failwiths
                               (0,
                                _agG_,
                                cst_sexp_serialization_mismatc,
                                [0,[0,434236056,sexp],[0,165604846,serialized_sexp]],
                                function(param)
                                 {var
                                   v1=param[2],
                                   v0=param[1],
                                   v0$0=v0[2],
                                   v0$1=[1,[0,_agE_,[0,caml_call1(sexp_of_t$37,v0$0),0]]],
                                   v0$2=v1[2],
                                   v1$0=[1,[0,_agF_,[0,caml_call1(sexp_of_t$37,v0$2),0]]];
                                  return [1,[0,v0$1,[0,v1$0,0]]]})
                             :_a0Z_})}
        return caml_call1
                (_tS_,caml_call1(_t7_,caml_call2(_p9_,_a0W_[12],_a0Y_)))}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_sexp_serialization,
        0,
        cst_src_stable_unit_test_ml$1,
        32,
        2,
        583,
        _a0X_);
      return [0]}
    function Make_bin_io_test(_a0S_)
     {function _a0T_(param)
       {function _a0U_(param)
         {var
           expected_bin_io=param[3],
           t=param[1],
           binable_m=
            [0,
             _a0S_[3],
             _a0S_[4],
             _a0S_[5],
             _a0S_[6],
             _a0S_[7],
             _a0S_[8],
             _a0S_[9],
             _a0S_[10]],
           serialized_bin_io=to_string$16(binable_m,t);
          if(caml_call2(symbol$14,serialized_bin_io,expected_bin_io))
           failwiths
            (0,
             _agJ_,
             cst_bin_io_serialization_misma,
             [0,
              t,
              [0,434236056,expected_bin_io],
              [0,165604846,serialized_bin_io]],
             function(param)
              {var
                v2=param[3],
                v1=param[2],
                v0=param[1],
                v0$0=caml_call1(_a0S_[2],v0),
                v0$1=v1[2],
                v1$0=[1,[0,_agH_,[0,caml_call1(sexp_of_t$43,v0$1),0]]],
                v0$2=v2[2],
                v2$0=[1,[0,_agI_,[0,caml_call1(sexp_of_t$43,v0$2),0]]];
               return [1,[0,v0$0,[0,v1$0,[0,v2$0,0]]]]});
          var
           t$0=of_string$14(binable_m,serialized_bin_io),
           _a0V_=1 - caml_call2(_a0S_[11],t,t$0);
          return _a0V_
                  ?failwiths
                    (0,
                     _agM_,
                     cst_bin_io_deserialization_mis,
                     [0,[0,434236056,t],[0,165604846,t$0]],
                     function(param)
                      {var
                        v1=param[2],
                        v0=param[1],
                        v0$0=v0[2],
                        v0$1=[1,[0,_agK_,[0,caml_call1(_a0S_[2],v0$0),0]]],
                        v0$2=v1[2],
                        v1$0=[1,[0,_agL_,[0,caml_call1(_a0S_[2],v0$2),0]]];
                       return [1,[0,v0$1,[0,v1$0,0]]]})
                  :_a0V_}
        return caml_call2(_o9_,_a0S_[12],_a0U_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_bin_io,
        0,
        cst_src_stable_unit_test_ml$2,
        50,
        2,
        850,
        _a0T_);
      return [0]}
    function Make$13(T)
     {Make_sexp_deserialization_test(T);
      Make_sexp_serialization_test(T);
      Make_bin_io_test(T);
      return [0]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$415);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Stable_unit_te$2);
    var
     Core_kernel_Stable_unit_test=
      [0,
       Make_sexp_deserialization_test,
       Make_sexp_serialization_test,
       Make_bin_io_test,
       Make$13,
       function(T)
        {function _a0L_(param)
          {function _a0Q_(param)
            {var
              match=param[2],
              sexps=match[1],
              t=param[1],
              sexps$0=caml_call2(_p9_,sexps,of_string),
              match$0=caml_call1(T[2],t);
             if(0 === match$0[0])
              var
               serialized_elements=
                failwiths(0,_agN_,cst_expected_list_when_seriali,t,T[2]);
             else
              var sexps$1=match$0[1],serialized_elements=sexps$1;
             var
              sorted_sexps=caml_call2(_pW_,sexps$0,_zu_),
              sorted_serialized=caml_call2(_pW_,serialized_elements,_zu_);
             if(1 - caml_call3(_rc_,_zp_,sorted_sexps,sorted_serialized))
              failwiths
               (0,
                _agQ_,
                cst_sexp_serialization_mismatc$0,
                [0,[0,434236056,sexps$0],[0,165604846,serialized_elements]],
                function(param)
                 {var
                   v1=param[2],
                   v0=param[1],
                   v0$0=v0[2],
                   v0$1=
                    [1,
                     [0,_agO_,[0,caml_call2(sexp_of_t$17,sexp_of_t$37,v0$0),0]]],
                   v0$2=v1[2],
                   v1$0=
                    [1,
                     [0,_agP_,[0,caml_call2(sexp_of_t$17,sexp_of_t$37,v0$2),0]]];
                  return [1,[0,v0$1,[0,v1$0,0]]]});
             var
              sexp_permutations=
               caml_call2
                (_qQ_,10,function(param){return caml_call2(_q9_,0,sexps$0)});
             return caml_call2
                     (_o9_,
                      sexp_permutations,
                      function(sexps)
                       {var
                         t$0=caml_call1(T[1],[1,sexps]),
                         _a0R_=1 - caml_call2(T[11],t,t$0);
                        return _a0R_
                                ?failwiths
                                  (0,
                                   _agT_,
                                   cst_sexp_deserialization_msima,
                                   [0,[0,434236056,t],[0,165604846,t$0]],
                                   function(param)
                                    {var
                                      v1=param[2],
                                      v0=param[1],
                                      v0$0=v0[2],
                                      v0$1=[1,[0,_agR_,[0,caml_call1(T[2],v0$0),0]]],
                                      v0$2=v1[2],
                                      v1$0=[1,[0,_agS_,[0,caml_call1(T[2],v0$2),0]]];
                                     return [1,[0,v0$1,[0,v1$0,0]]]})
                                :_a0R_})}
           return caml_call2(_o9_,T[12],_a0Q_)}
         caml_call8
          (Ppx_inline_test_lib_Runtime[5],
           Inline_test_config,
           cst_sexp,
           0,
           cst_src_stable_unit_test_ml$3,
           83,
           2,
           1290,
           _a0L_);
         function is_concatenation(string,strings)
          {if(caml_call1(_BU_,string))return caml_call2(_pc_,strings,_BU_);
           function loop(rev_skipped,strings)
            {if(strings)
              {var
                strings$0=strings[2],
                prefix=strings[1],
                continue$0=
                 function(param)
                  {return loop([0,prefix,rev_skipped],strings$0)},
                match=caml_call2(_C0_,string,prefix);
               if(match)
                {var
                  string$0=match[1],
                  _a0P_=
                   is_concatenation
                    (string$0,caml_call2(_pz_,rev_skipped,strings$0));
                 return _a0P_?_a0P_:continue$0(0)}
               return continue$0(0)}
             return 0}
           return loop(0,strings)}
         function _a0M_(param)
          {function _a0N_(param)
            {var
              match=param[2],
              bin_io_elements=match[3],
              bin_io_header=match[2],
              t=param[1],
              binable_m=[0,T[3],T[4],T[5],T[6],T[7],T[8],T[9],T[10]],
              serialized=to_string$16(binable_m,t),
              match$0=caml_call2(_C0_,serialized,bin_io_header);
             if(match$0)
              var
               elements_string=match$0[1],
               serialization_matches=
                is_concatenation(elements_string,bin_io_elements);
             else
              var serialization_matches=0;
             if(1 - serialization_matches)
              failwiths
               (0,
                _agW_,
                cst_serialization_mismatch,
                [0,
                 [0,434236056,[0,bin_io_header,bin_io_elements]],
                 [0,165604846,serialized]],
                function(param)
                 {var
                   v1=param[2],
                   v0=param[1],
                   v0$0=v0[2],
                   v1$0=v0$0[2],
                   v0$1=v0$0[1],
                   v0$2=caml_call1(sexp_of_t$43,v0$1),
                   v1$1=caml_call2(sexp_of_t$17,sexp_of_t$43,v1$0),
                   v0$3=[1,[0,_agU_,[0,[1,[0,v0$2,[0,v1$1,0]]],0]]],
                   v0$4=v1[2],
                   v1$2=[1,[0,_agV_,[0,caml_call1(sexp_of_t$43,v0$4),0]]];
                  return [1,[0,v0$3,[0,v1$2,0]]]});
             var
              permutatations=
               caml_call2
                (_qQ_,
                 10,
                 function(param){return caml_call2(_q9_,0,bin_io_elements)});
             return caml_call2
                     (_o9_,
                      permutatations,
                      function(elements)
                       {var
                         t$0=
                          of_string$14
                           (binable_m,
                            caml_call2(_Gp_,bin_io_header,caml_call2(_Cd_,0,elements))),
                         _a0O_=1 - caml_call2(T[11],t,t$0);
                        return _a0O_
                                ?failwiths
                                  (0,
                                   _agZ_,
                                   cst_bin_io_deserialization_mis$0,
                                   [0,[0,434236056,t],[0,165604846,t$0]],
                                   function(param)
                                    {var
                                      v1=param[2],
                                      v0=param[1],
                                      v0$0=v0[2],
                                      v0$1=[1,[0,_agX_,[0,caml_call1(T[2],v0$0),0]]],
                                      v0$2=v1[2],
                                      v1$0=[1,[0,_agY_,[0,caml_call1(T[2],v0$2),0]]];
                                     return [1,[0,v0$1,[0,v1$0,0]]]})
                                :_a0O_})}
           return caml_call2(_o9_,T[12],_a0N_)}
         caml_call8
          (Ppx_inline_test_lib_Runtime[5],
           Inline_test_config,
           cst_bin_io$0,
           0,
           cst_src_stable_unit_test_ml$4,
           134,
           2,
           1294,
           _a0M_);
         return [0]}];
    caml_register_global
     (5136,Core_kernel_Stable_unit_test,"Core_kernel__Stable_unit_test");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Arg);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$416);
    caml_call1(Expect_test_collector[4][1],cst_src_arg_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$417,cst$183);
    var
     _ag__=include$127[11],
     _ag0_=include$127[1],
     _ag1_=include$127[2],
     _ag2_=include$127[3],
     _ag3_=include$127[4],
     _ag4_=include$127[5],
     _ag5_=include$127[6],
     _ag6_=include$127[7],
     _ag7_=include$127[8],
     _ag8_=include$127[9],
     _ag9_=include$127[10],
     _ag$_=include$127[12],
     _aha_=include$127[13],
     _ahb_=include$127[14],
     _ahc_=include$127[15],
     _ahd_=include$127[16];
    function sort_and_align(lst)
     {function _a0J_(param,_a0K_)
       {var b=_a0K_[1],a=param[1];return caml_call2(compare$37,a,b)}
      return caml_call2(_ag__,0,caml_call2(include$23[61],lst,_a0J_))}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$418);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Arg$0);
    var
     Core_kernel_Arg=
      [0,
       _ag0_,
       _ag1_,
       _ag2_,
       _ag3_,
       _ag4_,
       _ag5_,
       _ag6_,
       _ag7_,
       _ag8_,
       _ag9_,
       _ag__,
       _ag$_,
       _aha_,
       _ahb_,
       _ahc_,
       _ahd_,
       sort_and_align];
    caml_register_global(5138,Core_kernel_Arg,"Core_kernel__Arg");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Blang);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$419);
    caml_call1(Expect_test_collector[4][1],cst_src_blang_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$420,cst$184);
    var
     _ahe_=caml_call1(Bin_prot_Shape[3][1],cst_a$83),
     _ahf_=caml_call1(Bin_prot_Shape[4][1],cst_src_blang_ml_48_14),
     _ahg_=[0,[0,cst_Base,[0,caml_call2(Bin_prot_Shape[15],_ahf_,_ahe_),0]],0],
     _ahh_=caml_call1(Bin_prot_Shape[3][1],cst_a$84),
     _ahi_=caml_call1(Bin_prot_Shape[4][1],cst_src_blang_ml_47_26),
     _ahj_=[0,caml_call2(Bin_prot_Shape[15],_ahi_,_ahh_),0],
     _ahk_=caml_call1(Bin_prot_Shape[2][1],cst_t$209),
     _ahl_=[0,caml_call1(caml_call1(Bin_prot_Shape[13],_ahk_),_ahj_),0],
     _ahm_=caml_call1(Bin_prot_Shape[3][1],cst_a$85),
     _ahn_=caml_call1(Bin_prot_Shape[4][1],cst_src_blang_ml_47_19),
     _aho_=[0,caml_call2(Bin_prot_Shape[15],_ahn_,_ahm_),0],
     _ahp_=caml_call1(Bin_prot_Shape[2][1],cst_t$210),
     _ahq_=[0,caml_call1(caml_call1(Bin_prot_Shape[13],_ahp_),_aho_),_ahl_],
     _ahr_=caml_call1(Bin_prot_Shape[3][1],cst_a$86),
     _ahs_=caml_call1(Bin_prot_Shape[4][1],cst_src_blang_ml_47_12),
     _aht_=[0,caml_call2(Bin_prot_Shape[15],_ahs_,_ahr_),0],
     _ahu_=caml_call1(Bin_prot_Shape[2][1],cst_t$211),
     _ahv_=
      [0,
       [0,
        cst_If,
        [0,caml_call1(caml_call1(Bin_prot_Shape[13],_ahu_),_aht_),_ahq_]],
       _ahg_],
     _ahw_=caml_call1(Bin_prot_Shape[3][1],cst_a$87),
     _ahx_=caml_call1(Bin_prot_Shape[4][1],cst_src_blang_ml_46_13),
     _ahy_=[0,caml_call2(Bin_prot_Shape[15],_ahx_,_ahw_),0],
     _ahz_=caml_call1(Bin_prot_Shape[2][1],cst_t$212),
     _ahA_=
      [0,
       [0,
        cst_Not,
        [0,caml_call1(caml_call1(Bin_prot_Shape[13],_ahz_),_ahy_),0]],
       _ahv_],
     _ahB_=caml_call1(Bin_prot_Shape[3][1],cst_a$88),
     _ahC_=caml_call1(Bin_prot_Shape[4][1],cst_src_blang_ml_45_19),
     _ahD_=[0,caml_call2(Bin_prot_Shape[15],_ahC_,_ahB_),0],
     _ahE_=caml_call1(Bin_prot_Shape[2][1],cst_t$213),
     _ahF_=[0,caml_call1(caml_call1(Bin_prot_Shape[13],_ahE_),_ahD_),0],
     _ahG_=caml_call1(Bin_prot_Shape[3][1],cst_a$89),
     _ahH_=caml_call1(Bin_prot_Shape[4][1],cst_src_blang_ml_45_12),
     _ahI_=[0,caml_call2(Bin_prot_Shape[15],_ahH_,_ahG_),0],
     _ahJ_=caml_call1(Bin_prot_Shape[2][1],cst_t$214),
     _ahK_=
      [0,
       [0,
        cst_Or,
        [0,caml_call1(caml_call1(Bin_prot_Shape[13],_ahJ_),_ahI_),_ahF_]],
       _ahA_],
     _ahL_=caml_call1(Bin_prot_Shape[3][1],cst_a$90),
     _ahM_=caml_call1(Bin_prot_Shape[4][1],cst_src_blang_ml_44_20),
     _ahN_=[0,caml_call2(Bin_prot_Shape[15],_ahM_,_ahL_),0],
     _ahO_=caml_call1(Bin_prot_Shape[2][1],cst_t$215),
     _ahP_=[0,caml_call1(caml_call1(Bin_prot_Shape[13],_ahO_),_ahN_),0],
     _ahQ_=caml_call1(Bin_prot_Shape[3][1],cst_a$91),
     _ahR_=caml_call1(Bin_prot_Shape[4][1],cst_src_blang_ml_44_13),
     _ahS_=[0,caml_call2(Bin_prot_Shape[15],_ahR_,_ahQ_),0],
     _ahT_=caml_call1(Bin_prot_Shape[2][1],cst_t$216),
     _ahW_=
      [0,
       _ahV_,
       [0,
        _ahU_,
        [0,
         [0,
          cst_And,
          [0,caml_call1(caml_call1(Bin_prot_Shape[13],_ahT_),_ahS_),_ahP_]],
         _ahK_]]],
     _ahX_=caml_call1(Bin_prot_Shape[9],_ahW_),
     _ahY_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$92),0],
     _ahZ_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$217),_ahY_,_ahX_],0],
     _ah0_=caml_call1(Bin_prot_Shape[4][1],cst_src_blang_ml_41_2),
     group$125=caml_call2(Bin_prot_Shape[6],_ah0_,_ahZ_);
    function bin_shape_t$108(a)
     {var _a0I_=caml_call1(Bin_prot_Shape[2][1],cst_t$218);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$125,_a0I_),[0,a,0])}
    function bin_size_t$74(size_of_a,param)
     {if(typeof param === "number")
       return 1;
      else
       switch(param[0])
        {case 0:
          var
           v2=param[2],
           v1=param[1],
           _a0z_=bin_size_t$74(size_of_a,v1),
           size=caml_call2(Bin_prot_Common[23],1,_a0z_),
           _a0A_=bin_size_t$74(size_of_a,v2);
          return caml_call2(Bin_prot_Common[23],size,_a0A_);
         case 1:
          var
           v2$0=param[2],
           v1$0=param[1],
           _a0B_=bin_size_t$74(size_of_a,v1$0),
           size$0=caml_call2(Bin_prot_Common[23],1,_a0B_),
           _a0C_=bin_size_t$74(size_of_a,v2$0);
          return caml_call2(Bin_prot_Common[23],size$0,_a0C_);
         case 2:
          var v1$1=param[1],_a0D_=bin_size_t$74(size_of_a,v1$1);
          return caml_call2(Bin_prot_Common[23],1,_a0D_);
         case 3:
          var
           v3=param[3],
           v2$1=param[2],
           v1$2=param[1],
           _a0E_=bin_size_t$74(size_of_a,v1$2),
           size$1=caml_call2(Bin_prot_Common[23],1,_a0E_),
           _a0F_=bin_size_t$74(size_of_a,v2$1),
           size$2=caml_call2(Bin_prot_Common[23],size$1,_a0F_),
           _a0G_=bin_size_t$74(size_of_a,v3);
          return caml_call2(Bin_prot_Common[23],size$2,_a0G_);
         default:
          var v1$3=param[1],_a0H_=caml_call1(size_of_a,v1$3);
          return caml_call2(Bin_prot_Common[23],1,_a0H_)}}
    function bin_write_t$75(write_a,buf,pos,param)
     {var pos$0=pos,param$0=param;
      for(;;)
       if(typeof param$0 === "number")
        return 0 === param$0
                ?caml_call3(Bin_prot_Write[30],buf,pos$0,0)
                :caml_call3(Bin_prot_Write[30],buf,pos$0,1);
       else
        switch(param$0[0])
         {case 0:
           var
            v2=param$0[2],
            v1=param$0[1],
            pos$1=caml_call3(Bin_prot_Write[30],buf,pos$0,2),
            pos$6=bin_write_t$75(write_a,buf,pos$1,v1),
            pos$0=pos$6,
            param$0=v2;
           continue;
          case 1:
           var
            v2$0=param$0[2],
            v1$0=param$0[1],
            pos$2=caml_call3(Bin_prot_Write[30],buf,pos$0,3),
            pos$7=bin_write_t$75(write_a,buf,pos$2,v1$0),
            pos$0=pos$7,
            param$0=v2$0;
           continue;
          case 2:
           var
            v1$1=param$0[1],
            pos$3=caml_call3(Bin_prot_Write[30],buf,pos$0,4),
            pos$0=pos$3,
            param$0=v1$1;
           continue;
          case 3:
           var
            v3=param$0[3],
            v2$1=param$0[2],
            v1$2=param$0[1],
            pos$4=caml_call3(Bin_prot_Write[30],buf,pos$0,5),
            pos$8=bin_write_t$75(write_a,buf,pos$4,v1$2),
            pos$9=bin_write_t$75(write_a,buf,pos$8,v2$1),
            pos$0=pos$9,
            param$0=v3;
           continue;
          default:
           var
            v1$3=param$0[1],
            pos$5=caml_call3(Bin_prot_Write[30],buf,pos$0,6);
           return caml_call3(write_a,buf,pos$5,v1$3)}}
    function bin_writer_t$95(bin_writer_a)
     {function _a0v_(v)
       {var _a0w_=bin_writer_a[2];
        return function(_a0x_,_a0y_)
         {return bin_write_t$75(_a0w_,v,_a0x_,_a0y_)}}
      return [0,function(v){return bin_size_t$74(bin_writer_a[1],v)},_a0v_]}
    function bin_read_t$148(of_a,buf,pos_ref,vint)
     {return caml_call2(Bin_prot_Common[19],cst_src_blang_ml_T_t,pos_ref[1])}
    function bin_read_t$149(of_a,buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[29],buf,pos_ref);
      if(6 < match >>> 0)
       return caml_call2(Bin_prot_Common[18],_ah1_,pos_ref[1]);
      switch(match)
       {case 0:return 0;
        case 1:return 1;
        case 2:
         var
          arg_1$0=bin_read_t$149(of_a,buf,pos_ref),
          arg_2=bin_read_t$149(of_a,buf,pos_ref);
         return [0,arg_1$0,arg_2];
        case 3:
         var
          arg_1$1=bin_read_t$149(of_a,buf,pos_ref),
          arg_2$0=bin_read_t$149(of_a,buf,pos_ref);
         return [1,arg_1$1,arg_2$0];
        case 4:
         var arg_1$2=bin_read_t$149(of_a,buf,pos_ref);return [2,arg_1$2];
        case 5:
         var
          arg_1$3=bin_read_t$149(of_a,buf,pos_ref),
          arg_2$1=bin_read_t$149(of_a,buf,pos_ref),
          arg_3=bin_read_t$149(of_a,buf,pos_ref);
         return [3,arg_1$3,arg_2$1,arg_3];
        default:var arg_1=caml_call2(of_a,buf,pos_ref);return [4,arg_1]}}
    function bin_reader_t$95(bin_reader_a)
     {function _a0u_(buf,pos_ref,vtag)
       {return bin_read_t$148(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$149(bin_reader_a[1],buf,pos_ref)},
              _a0u_]}
    function bin_t$95(bin_a)
     {var _a0s_=bin_reader_t$95(bin_a[3]),_a0t_=bin_writer_t$95(bin_a[2]);
      return [0,bin_shape_t$108(bin_a[1]),_a0t_,_a0s_]}
    function compare$82(cmp_a,a_001,b_002)
     {var cmp_a$0=cmp_a,a_001$0=a_001,b_002$0=b_002;
      for(;;)
       {if(caml_call2(Ppx_compare_lib[1],a_001$0,b_002$0))return 0;
        var switch$0=0;
        if(typeof a_001$0 === "number")
         {if(0 === a_001$0)
           {if(typeof b_002$0 === "number" && ! b_002$0)return 0;return -1}
          if(typeof b_002$0 !== "number")return -1;
          if(b_002$0)return 0}
        else
         switch(a_001$0[0])
          {case 0:
            var _a0j_=a_001$0[2],_a0k_=a_001$0[1];
            if(typeof b_002$0 === "number")
             {if(0 !== b_002$0)switch$0 = 1}
            else
             {if(0 === b_002$0[0])
               {var
                 b_006=b_002$0[2],
                 b_004=b_002$0[1],
                 n=
                  compare$82
                   (function(cmp_a)
                      {return function(a_007,b_008)
                        {return caml_call2(cmp_a,a_007,b_008)}}
                     (cmp_a$0),
                    _a0k_,
                    b_004);
                if(0 === n)
                 {var
                   cmp_a$5=
                    function(cmp_a)
                     {function cmp_a$0(a_009,b_010)
                       {return caml_call2(cmp_a,a_009,b_010)}
                      return cmp_a$0},
                   cmp_a$1=cmp_a$5(cmp_a$0),
                   cmp_a$0=cmp_a$1,
                   a_001$0=_a0j_,
                   b_002$0=b_006;
                  continue}
                return n}
              return -1}
            break;
           case 1:
            var _a0l_=a_001$0[2],_a0m_=a_001$0[1];
            if(typeof b_002$0 === "number")
             {if(0 !== b_002$0)switch$0 = 1}
            else
             switch(b_002$0[0])
              {case 0:switch$0 = 2;break;
               case 1:
                var
                 b_014=b_002$0[2],
                 b_012=b_002$0[1],
                 n$0=
                  compare$82
                   (function(cmp_a)
                      {return function(a_015,b_016)
                        {return caml_call2(cmp_a,a_015,b_016)}}
                     (cmp_a$0),
                    _a0m_,
                    b_012);
                if(0 === n$0)
                 {var
                   cmp_a$6=
                    function(cmp_a)
                     {function cmp_a$0(a_017,b_018)
                       {return caml_call2(cmp_a,a_017,b_018)}
                      return cmp_a$0},
                   cmp_a$2=cmp_a$6(cmp_a$0),
                   cmp_a$0=cmp_a$2,
                   a_001$0=_a0l_,
                   b_002$0=b_014;
                  continue}
                return n$0;
               default:return -1}
            break;
           case 2:
            var _a0n_=a_001$0[1];
            if(typeof b_002$0 === "number")
             {if(0 !== b_002$0)switch$0 = 1}
            else
             switch(b_002$0[0])
              {case 0:switch$0 = 2;break;
               case 1:switch$0 = 3;break;
               case 2:
                var
                 b_002$1=b_002$0[1],
                 cmp_a$7=
                  function(cmp_a)
                   {function cmp_a$0(a_021,b_022)
                     {return caml_call2(cmp_a,a_021,b_022)}
                    return cmp_a$0},
                 cmp_a$3=cmp_a$7(cmp_a$0),
                 cmp_a$0=cmp_a$3,
                 a_001$0=_a0n_,
                 b_002$0=b_002$1;
                continue;
               default:return -1}
            break;
           case 3:
            var _a0o_=a_001$0[3],_a0p_=a_001$0[2],_a0q_=a_001$0[1];
            if(typeof b_002$0 === "number")
             {if(0 !== b_002$0)switch$0 = 1}
            else
             switch(b_002$0[0])
              {case 0:switch$0 = 2;break;
               case 1:switch$0 = 3;break;
               case 2:switch$0 = 4;break;
               case 3:
                var
                 b_028=b_002$0[3],
                 b_026=b_002$0[2],
                 b_024=b_002$0[1],
                 n$1=
                  compare$82
                   (function(cmp_a)
                      {return function(a_029,b_030)
                        {return caml_call2(cmp_a,a_029,b_030)}}
                     (cmp_a$0),
                    _a0q_,
                    b_024);
                if(0 === n$1)
                 {var
                   n$2=
                    compare$82
                     (function(cmp_a)
                        {return function(a_031,b_032)
                          {return caml_call2(cmp_a,a_031,b_032)}}
                       (cmp_a$0),
                      _a0p_,
                      b_026);
                  if(0 === n$2)
                   {var
                     cmp_a$8=
                      function(cmp_a)
                       {function cmp_a$0(a_033,b_034)
                         {return caml_call2(cmp_a,a_033,b_034)}
                        return cmp_a$0},
                     cmp_a$4=cmp_a$8(cmp_a$0),
                     cmp_a$0=cmp_a$4,
                     a_001$0=_a0o_,
                     b_002$0=b_028;
                    continue}
                  return n$2}
                return n$1;
               default:return -1}
            break;
           default:
            var _a0r_=a_001$0[1];
            if(typeof b_002$0 === "number")
             {if(0 !== b_002$0)switch$0 = 1}
            else
             switch(b_002$0[0])
              {case 0:switch$0 = 2;break;
               case 1:switch$0 = 3;break;
               case 2:switch$0 = 4;break;
               case 3:return 1;
               default:
                var b_036=b_002$0[1];return caml_call2(cmp_a$0,_a0r_,b_036)}}
        switch(switch$0)
         {case 0:return 1;
          case 1:return 1;
          case 2:return 1;
          case 3:return 1;
          default:return 1}}}
    function hash_fold_t$42(hash_fold_a,hsv,arg)
     {var hsv$0=hsv,arg$0=arg;
      for(;;)
       if(typeof arg$0 === "number")
        return 0 === arg$0
                ?caml_call2(Base_Hash[3],hsv$0,0)
                :caml_call2(Base_Hash[3],hsv$0,1);
       else
        switch(arg$0[0])
         {case 0:
           var
            a1=arg$0[2],
            a0=arg$0[1],
            hsv$1=caml_call2(Base_Hash[3],hsv$0,2),
            hsv$2=hash_fold_t$42(hash_fold_a,hsv$1,a0),
            hsv$0=hsv$2,
            arg$0=a1;
           continue;
          case 1:
           var
            a1$0=arg$0[2],
            a0$0=arg$0[1],
            hsv$3=caml_call2(Base_Hash[3],hsv$0,3),
            hsv$4=hash_fold_t$42(hash_fold_a,hsv$3,a0$0),
            hsv$0=hsv$4,
            arg$0=a1$0;
           continue;
          case 2:
           var
            a0$1=arg$0[1],
            hsv$5=caml_call2(Base_Hash[3],hsv$0,4),
            hsv$0=hsv$5,
            arg$0=a0$1;
           continue;
          case 3:
           var
            a2=arg$0[3],
            a1$1=arg$0[2],
            a0$2=arg$0[1],
            hsv$6=caml_call2(Base_Hash[3],hsv$0,5),
            hsv$7=hash_fold_t$42(hash_fold_a,hsv$6,a0$2),
            hsv$8=hash_fold_t$42(hash_fold_a,hsv$7,a1$1),
            hsv$0=hsv$8,
            arg$0=a2;
           continue;
          default:
           var a0$3=arg$0[1],hsv$9=caml_call2(Base_Hash[3],hsv$0,6);
           return caml_call2(hash_fold_a,hsv$9,a0$3)}}
    function subterms(param)
     {if(typeof param !== "number")
       switch(param[0])
        {case 2:var t1$0=param[1];return [0,t1$0,0];
         case 3:
          var t3=param[3],t2$0=param[2],t1$1=param[1];
          return [0,t1$1,[0,t2$0,[0,t3,0]]];
         case 4:break;
         default:var t2=param[2],t1=param[1];return [0,t1,[0,t2,0]]}
      return 0}
    function contains_no_constants(t)
     {if(typeof t === "number")throw [0,Assert_failure,_ah2_];
      return caml_call2(_o9_,subterms(t),contains_no_constants)}
    function invariant$13(t)
     {return caml_call2(_o9_,subterms(t),contains_no_constants)}
    var true$0=0,false$0=1;
    function base(v){return [4,v]}
    function not(t)
     {if(typeof t === "number")
       return 0 === t?1:0;
      else
       {if(2 === t[0]){var t$0=t[1];return t$0}return [2,t]}}
    function andalso(t1,t2)
     {var switch$0=0;
      if(typeof t2 === "number" && t2)switch$0 = 1;
      if(! switch$0)
       {var switch$1=0;
        if(typeof t1 === "number" && t1)switch$1 = 1;
        if(! switch$1)
         {if(typeof t2 === "number")
           var other=t1;
          else
           {var switch$2=0;
            if(typeof t1 === "number")
             {if(0 === t1){var other=t2;switch$2 = 1}}
            else
             if(0 === t1[0])
              {var t1b=t1[2],t1a=t1[1];return [0,t1a,andalso(t1b,t2)]}
            if(! switch$2)return [0,t1,t2]}
          return other}}
      return 1}
    function orelse(t1,t2)
     {var switch$0=0;
      if(typeof t2 === "number" && ! t2)switch$0 = 1;
      if(! switch$0)
       {var switch$1=0;
        if(typeof t1 === "number" && ! t1)switch$1 = 1;
        if(! switch$1)
         {if(typeof t2 === "number")
           var other=t1;
          else
           {var switch$2=0;
            if(typeof t1 === "number")
             {if(1 === t1){var other=t2;switch$2 = 1}}
            else
             if(1 === t1[0])
              {var t1b=t1[2],t1a=t1[1];return [1,t1a,orelse(t1b,t2)]}
            if(! switch$2)return [1,t1,t2]}
          return other}}
      return 0}
    function if$0(a,b,c)
     {if(typeof a === "number")return a?c:b;
      if(typeof b === "number" && ! b)return orelse(a,c);
      return typeof c === "number"
              ?c?andalso(a,b):orelse(not(a),b)
              :typeof b === "number"?andalso(not(a),c):[3,a,b,c]}
    function sexp_of_t$99(of_a,param)
     {if(typeof param === "number")
       return 0 === param?_ah3_:_ah4_;
      else
       switch(param[0])
        {case 0:
          var
           v1=param[2],
           v0=param[1],
           v0$0=sexp_of_t$99(of_a,v0),
           v1$0=sexp_of_t$99(of_a,v1);
          return [1,[0,_ah5_,[0,v0$0,[0,v1$0,0]]]];
         case 1:
          var
           v1$1=param[2],
           v0$1=param[1],
           v0$2=sexp_of_t$99(of_a,v0$1),
           v1$2=sexp_of_t$99(of_a,v1$1);
          return [1,[0,_ah6_,[0,v0$2,[0,v1$2,0]]]];
         case 2:
          var v0$3=param[1],v0$4=sexp_of_t$99(of_a,v0$3);
          return [1,[0,_ah7_,[0,v0$4,0]]];
         case 3:
          var
           v2=param[3],
           v1$3=param[2],
           v0$5=param[1],
           v0$6=sexp_of_t$99(of_a,v0$5),
           v1$4=sexp_of_t$99(of_a,v1$3),
           v2$0=sexp_of_t$99(of_a,v2);
          return [1,[0,_ah8_,[0,v0$6,[0,v1$4,[0,v2$0,0]]]]];
         default:
          var v0$7=param[1],v0$8=caml_call1(of_a,v0$7);
          return [1,[0,_ah9_,[0,v0$8,0]]]}}
    var Raw=[0,sexp_of_t$99];
    function gather_conjuncts(t)
     {var param$3=[0,t,0],acc=0,param=param$3;
      for(;;)
       {if(param)
         {var _a0i_=param[1];
          if(typeof _a0i_ === "number")
           {if(0 === _a0i_){var param$0=param[2],param=param$0;continue}}
          else
           if(0 === _a0i_[0])
            {var
              ts=param[2],
              t2=_a0i_[2],
              t1=_a0i_[1],
              param$2=[0,t1,[0,t2,ts]],
              param=param$2;
             continue}
          var param$1=param[2],acc$0=[0,_a0i_,acc],acc=acc$0,param=param$1;
          continue}
        return caml_call1(parts,acc)}}
    function gather_disjuncts(t)
     {var param$3=[0,t,0],acc=0,param=param$3;
      for(;;)
       {if(param)
         {var _a0h_=param[1];
          if(typeof _a0h_ === "number")
           {if(1 === _a0h_){var param$1=param[2],param=param$1;continue}}
          else
           if(1 === _a0h_[0])
            {var
              ts=param[2],
              t2=_a0h_[2],
              t1=_a0h_[1],
              param$2=[0,t1,[0,t2,ts]],
              param=param$2;
             continue}
          var param$0=param[2],acc$0=[0,_a0h_,acc],acc=acc$0,param=param$0;
          continue}
        return caml_call1(parts,acc)}}
    function and(ts){return caml_call3(_ql_,ts,andalso,true$0)}
    function or(ts){return caml_call3(_ql_,ts,orelse,false$0)}
    function sexp_of_t$100(sexp_of_value,t)
     {function aux(t)
       {if(typeof t === "number")
         return 0 === t?_aia_:_aib_;
        else
         switch(t[0])
          {case 0:
            var ts=gather_conjuncts(t);
            return [1,[0,_aic_,caml_call2(_p9_,ts,aux)]];
           case 1:
            var ts$0=gather_disjuncts(t);
            return [1,[0,_aid_,caml_call2(_p9_,ts$0,aux)]];
           case 2:var t$0=t[1];return [1,[0,_aie_,[0,aux(t$0),0]]];
           case 3:
            var
             t3=t[3],
             t2=t[2],
             t1=t[1],
             _a0f_=[0,aux(t3),0],
             _a0g_=[0,aux(t2),_a0f_];
            return [1,[0,_aif_,[0,aux(t1),_a0g_]]];
           default:var x=t[1];return caml_call1(sexp_of_value,x)}}
      return aux(t)}
    function t_of_sexp$90(base_of_sexp,sexp)
     {function base(sexp){return [4,caml_call1(base_of_sexp,sexp)]}
      function aux(sexp)
       {if(0 === sexp[0])
         {var kw=sexp[1],match=caml_call1(_Ch_,kw);
          return caml_string_notequal(match,cst_false)
                  ?caml_string_notequal(match,cst_true)?base(sexp):true$0
                  :false$0}
        var _a0a_=sexp[1];
        if(_a0a_)
         {var _a0b_=_a0a_[1];
          if(0 === _a0b_[0])
           {var args=_a0a_[2],kw$0=_a0b_[1],match$0=caml_call1(_Ch_,kw$0);
            if(caml_string_notequal(match$0,cst_and))
             {if(caml_string_notequal(match$0,cst_if))
               {if(caml_string_notequal(match$0,cst_not))
                 return caml_string_notequal(match$0,cst_or)
                         ?base(sexp)
                         :or(caml_call2(_p9_,args,aux));
                var switch$0=0;
                if(args && ! args[2]){var x=args[1],_a0c_=x;switch$0 = 1}
                if(! switch$0)
                 var
                  n=caml_call1(length$1,args),
                  _a0c_=caml_call2(_Od_,caml_call3(_fw_,_ah__,name$68,n),sexp);
                return not(aux(_a0c_))}
              var switch$1=0;
              if(args)
               {var _aZ__=args[2];
                if(_aZ__)
                 {var _aZ$_=_aZ__[2];
                  if(_aZ$_ && ! _aZ$_[2])
                   {var z=_aZ$_[1],y=_aZ__[1],x$0=args[1],match$1=[0,x$0,y,z];
                    switch$1 = 1}}}
              if(! switch$1)
               var
                n$0=caml_call1(length$1,args),
                match$1=
                 caml_call2(_Od_,caml_call3(_fw_,_ah$_,name$69,n$0),sexp);
              var
               z$0=match$1[3],
               y$0=match$1[2],
               x$1=match$1[1],
               _a0d_=aux(z$0),
               _a0e_=aux(y$0);
              return if$0(aux(x$1),_a0e_,_a0d_)}
            return and(caml_call2(_p9_,args,aux))}}
        return base(sexp)}
      return aux(sexp)}
    function constant(b){return b?true$0:false$0}
    function symbol$213(a,b){return orelse(not(a),b)}
    function constant_value(param)
     {return typeof param === "number"?param?_aig_:_aih_:0}
    function values(t)
     {var param$7=[0,t,0],acc=0,param=param$7;
      for(;;)
       {if(param)
         {var _aZ9_=param[1];
          if(typeof _aZ9_ === "number")
           {if(0 === _aZ9_){var param$0=param[2],param=param$0;continue}
            var param$1=param[2],param=param$1;
            continue}
          else
           switch(_aZ9_[0])
            {case 0:
              var
               ts=param[2],
               t2=_aZ9_[2],
               t1=_aZ9_[1],
               param$2=[0,t1,[0,t2,ts]],
               param=param$2;
              continue;
             case 1:
              var
               ts$0=param[2],
               t2$0=_aZ9_[2],
               t1$0=_aZ9_[1],
               param$3=[0,t1$0,[0,t2$0,ts$0]],
               param=param$3;
              continue;
             case 2:
              var
               ts$1=param[2],
               t1$1=_aZ9_[1],
               param$4=[0,t1$1,ts$1],
               param=param$4;
              continue;
             case 3:
              var
               ts$2=param[2],
               t3=_aZ9_[3],
               t2$1=_aZ9_[2],
               t1$2=_aZ9_[1],
               param$5=[0,t1$2,[0,t2$1,[0,t3,ts$2]]],
               param=param$5;
              continue;
             default:
              var
               param$6=param[2],
               v=_aZ9_[1],
               acc$0=[0,v,acc],
               acc=acc$0,
               param=param$6;
              continue}}
        return caml_call1(parts,acc)}}
    function fold$13(t,init,f)
     {function loop$0(counter,acc,t,pending)
       {var t$0=t,pending$0=pending;
        for(;;)
         if(typeof t$0 === "number")
          {if(counter < 50)
            {var counter$1=counter + 1 | 0;
             return next(counter$1,acc,pending$0)}
           return caml_trampoline_return(next,[0,acc,pending$0])}
         else
          switch(t$0[0])
           {case 2:var t$2=t$0[1],t$0=t$2;continue;
            case 3:
             var
              t3=t$0[3],
              t2$0=t$0[2],
              t$3=t$0[1],
              pending$2=[0,t2$0,[0,t3,pending$0]],
              t$0=t$3,
              pending$0=pending$2;
             continue;
            case 4:
             var a=t$0[1],_aZ8_=caml_call2(f,acc,a);
             if(counter < 50)
              {var counter$0=counter + 1 | 0;
               return next(counter$0,_aZ8_,pending$0)}
             return caml_trampoline_return(next,[0,_aZ8_,pending$0]);
            default:
             var
              t2=t$0[2],
              t$1=t$0[1],
              pending$1=[0,t2,pending$0],
              t$0=t$1,
              pending$0=pending$1;
             continue}}
      function next(counter,acc,param)
       {if(param)
         {var ts=param[2],t=param[1];
          if(counter < 50)
           {var counter$0=counter + 1 | 0;return loop$0(counter$0,acc,t,ts)}
          return caml_trampoline_return(loop$0,[0,acc,t,ts])}
        return acc}
      function loop(acc,t,pending)
       {return caml_trampoline(loop$0(0,acc,t,pending))}
      return loop(init,t,0)}
    var
     C$1=caml_call1(include$7[16],[0,fold$13,-304398144,-304398144]),
     count$11=C$1[10],
     sum$7=C$1[11],
     exists$12=C$1[8],
     find$14=C$1[12],
     find_map$6=C$1[13],
     fold$14=C$1[5],
     for_all$11=C$1[9],
     is_empty$14=C$1[3],
     iter$19=C$1[4],
     length$18=C$1[2],
     mem$12=C$1[1],
     to_array$7=C$1[15],
     to_list$8=C$1[14],
     min_elt$11=C$1[16],
     max_elt$11=C$1[17],
     fold_result$6=C$1[6],
     fold_until$6=C$1[7];
    function bind$1(t,k)
     {var t$0=t;
      for(;;)
       if(typeof t$0 === "number")
        return 0 === t$0?true$0:false$0;
       else
        switch(t$0[0])
         {case 0:
           var t2=t$0[2],t1=t$0[1],other=bind$1(t1,k);
           if(typeof other === "number" && other)return false$0;
           return andalso(other,bind$1(t2,k));
          case 1:
           var t2$0=t$0[2],t1$0=t$0[1],other$0=bind$1(t1$0,k);
           if(typeof other$0 === "number" && ! other$0)return true$0;
           return orelse(other$0,bind$1(t2$0,k));
          case 2:var t1$1=t$0[1];return not(bind$1(t1$1,k));
          case 3:
           var t3=t$0[3],t2$1=t$0[2],t1$2=t$0[1],other$1=bind$1(t1$2,k);
           if(typeof other$1 === "number")
            {if(other$1){var t$0=t3;continue}var t$0=t2$1;continue}
           var _aZ7_=bind$1(t3,k);
           return if$0(other$1,bind$1(t2$1,k),_aZ7_);
          default:var v=t$0[1];return caml_call1(k,v)}}
    var
     include$128=caml_call1(Base_Monad[1],[0,bind$1,base,-349054340]),
     _ail_=include$128[4],
     _aii_=include$128[1],
     _aij_=include$128[2],
     _aik_=include$128[3],
     _aim_=include$128[5],
     _ain_=include$128[6],
     _aio_=include$128[7],
     _aip_=include$128[8],
     _aiq_=include$128[9],
     _air_=include$128[10],
     _ais_=include$128[11];
    function eval$0(t,base_eval)
     {var t$0=t;
      for(;;)
       if(typeof t$0 === "number")
        return 0 === t$0?1:0;
       else
        switch(t$0[0])
         {case 0:
           var t2=t$0[2],t1=t$0[1],_aZ5_=eval$0(t1,base_eval);
           if(_aZ5_){var t$0=t2;continue}
           return _aZ5_;
          case 1:
           var t2$0=t$0[2],t1$0=t$0[1],_aZ6_=eval$0(t1$0,base_eval);
           if(_aZ6_)return _aZ6_;
           var t$0=t2$0;
           continue;
          case 2:var t$1=t$0[1];return 1 - eval$0(t$1,base_eval);
          case 3:
           var t3=t$0[3],t2$1=t$0[2],t1$1=t$0[1];
           if(eval$0(t1$1,base_eval)){var t$0=t2$1;continue}
           var t$0=t3;
           continue;
          default:var x=t$0[1];return caml_call1(base_eval,x)}}
    function specialize(t,f)
     {return caml_call2
              (_ail_,
               t,
               function(v)
                {var match=caml_call1(f,v);
                 if(typeof match === "number")return [4,v];
                 var c=match[2];
                 return constant(c)})}
    function eval_set(all,set_of_base)
     {function aux(b)
       {if(typeof b === "number")
         {if(0 === b)return force(all);
          var _aZZ_=caml_call1(comparator$0,force(all));
          return caml_call1(_xa_[1],_aZZ_)}
        else
         switch(b[0])
          {case 0:
            var b$0=b[2],a=b[1],_aZ0_=aux(b$0);
            return caml_call2(inter$2,aux(a),_aZ0_);
           case 1:
            var b$1=b[2],a$0=b[1],_aZ1_=aux(b$1);
            return caml_call2(union$3,aux(a$0),_aZ1_);
           case 2:
            var a$1=b[1],_aZ2_=aux(a$1);
            return caml_call2(diff$2,force(all),_aZ2_);
           case 3:
            var
             b$2=b[3],
             a$2=b[2],
             cond=b[1],
             cond$0=aux(cond),
             _aZ3_=aux(b$2),
             _aZ4_=
              caml_call2(inter$2,caml_call2(diff$2,force(all),cond$0),_aZ3_);
            return caml_call2
                    (union$3,caml_call2(inter$2,cond$0,aux(a$2)),_aZ4_);
           default:var a$3=b[1];return caml_call1(set_of_base,a$3)}}
      return aux}
    function quickcheck_generator$15(a_generator)
     {function _aZS_(self)
       {var
         _aZW_=[0,caml_call4(_uW_[18],self,self,self,if$0),0],
         _aZX_=[0,caml_call3(_uW_[17],self,self,andalso),_aZW_],
         _aZY_=[0,caml_call3(_uW_[17],self,self,orelse),_aZX_];
        return [0,caml_call2(_uW_[10],self,not),_aZY_]}
      var
       _aZT_=[0,caml_call1(_uW_[33],false$0),0],
       _aZU_=[0,caml_call1(_uW_[33],true$0),_aZT_],
       _aZV_=[0,caml_call2(_uW_[10],a_generator,base),_aZU_];
      return caml_call2(_uW_[61],_aZV_,_aZS_)}
    function quickcheck_shrinker$14(a_shrinker)
     {function _aZA_(self)
       {function binop(operator,left,right)
         {var _aZM_=0;
          function _aZN_(right){return caml_call2(operator,left,right)}
          var
           _aZO_=
            [0,caml_call2(_iZ_,caml_call2(_uU_[1],self,right),_aZN_),_aZM_];
          function _aZP_(left){return caml_call2(operator,left,right)}
          var
           _aZQ_=
            [0,caml_call2(_iZ_,caml_call2(_uU_[1],self,left),_aZP_),_aZO_],
           _aZR_=[0,caml_call1(_jY_,right),_aZQ_];
          return caml_call1(_ju_,[0,caml_call1(_jY_,left),_aZR_])}
        function _aZB_(t)
         {if(typeof t === "number")
           return _i4_;
          else
           switch(t[0])
            {case 0:var right=t[2],left=t[1];return binop(andalso,left,right);
             case 1:
              var right$0=t[2],left$0=t[1];
              return binop(orelse,left$0,right$0);
             case 2:
              var
               t$0=t[1],
               _aZC_=caml_call2(_iZ_,caml_call2(_uU_[1],self,t$0),not);
              return caml_call2(_jp_,caml_call1(_jY_,t$0),_aZC_);
             case 3:
              var
               else$0=t[3],
               then=t[2],
               if$1=t[1],
               _aZD_=0,
               _aZE_=function(else$0){return if$0(if$1,then,else$0)},
               _aZF_=
                [0,
                 caml_call2(_iZ_,caml_call2(_uU_[1],self,else$0),_aZE_),
                 _aZD_],
               _aZG_=function(then){return if$0(if$1,then,else$0)},
               _aZH_=
                [0,caml_call2(_iZ_,caml_call2(_uU_[1],self,then),_aZG_),_aZF_],
               _aZI_=function(if$1){return if$0(if$1,then,else$0)},
               _aZJ_=
                [0,caml_call2(_iZ_,caml_call2(_uU_[1],self,if$1),_aZI_),_aZH_],
               _aZK_=[0,caml_call1(_jY_,else$0),_aZJ_],
               _aZL_=[0,caml_call1(_jY_,then),_aZK_];
              return caml_call1(_ju_,[0,caml_call1(_jY_,if$1),_aZL_]);
             default:
              var a=t[1];
              return caml_call2(_iZ_,caml_call2(_uU_[1],a_shrinker,a),base)}}
        return caml_call1(_uU_[2],_aZB_)}
      return caml_call1(_uU_[19],_aZA_)}
    function quickcheck_observer$13(a_observer)
     {function _aZz_(t,size,hash)
       {return hash_fold_t$42
                (function(hash,a)
                  {return caml_call4(_uV_[2],a_observer,a,size,hash)},
                 hash,
                 t)}
      return caml_call1(Base_quickcheck_Observer[32],_aZz_)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$421);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Blang$0);
    var
     Core_kernel_Blang=
      [0,
       bin_shape_t$108,
       bin_size_t$74,
       bin_write_t$75,
       bin_read_t$149,
       bin_read_t$148,
       bin_writer_t$95,
       bin_reader_t$95,
       bin_t$95,
       compare$82,
       hash_fold_t$42,
       t_of_sexp$90,
       sexp_of_t$100,
       Raw,
       base,
       true$0,
       false$0,
       constant,
       not,
       and,
       or,
       if$0,
       [0,
        base,
        true$0,
        false$0,
        constant,
        not,
        and,
        or,
        if$0,
        andalso,
        orelse,
        symbol$213,
        not],
       constant_value,
       gather_conjuncts,
       gather_disjuncts,
       mem$12,
       length$18,
       is_empty$14,
       iter$19,
       fold$14,
       fold_result$6,
       fold_until$6,
       exists$12,
       for_all$11,
       count$11,
       sum$7,
       find$14,
       find_map$6,
       to_list$8,
       to_array$7,
       min_elt$11,
       max_elt$11,
       quickcheck_generator$15,
       quickcheck_observer$13,
       quickcheck_shrinker$14,
       _aii_,
       _aij_,
       _aik_,
       _ail_,
       _aim_,
       _ain_,
       _aio_,
       _aip_,
       _aiq_,
       _air_,
       _ais_,
       values,
       eval$0,
       eval_set,
       specialize,
       invariant$13,
       [0,
        [0,
         t_of_sexp$90,
         sexp_of_t$100,
         bin_shape_t$108,
         bin_size_t$74,
         bin_write_t$75,
         bin_read_t$149,
         bin_read_t$148,
         bin_writer_t$95,
         bin_reader_t$95,
         bin_t$95,
         compare$82,
         hash_fold_t$42]]];
    caml_register_global(5140,Core_kernel_Blang,"Core_kernel__Blang");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Filename);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$422);
    caml_call1(Expect_test_collector[4][1],cst_src_filename_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$423,cst$185);
    var
     Hash_set$16=
      [0,
       Hash_set$1[6],
       Hash_set$1[1],
       Hash_set$1[7],
       Hash_set$1[8],
       Hash_set$1[9],
       Hash_set$1[10],
       Hash_set$1[11],
       Hash_set$1[12],
       Hash_set$1[13],
       Hash_set$1[14]],
     Table$16=
      [0,
       Table$1[83],
       Table$1[1],
       Table$1[84],
       Table$1[85],
       Table$1[86],
       Table$1[87],
       Table$1[88],
       Table$1[89],
       Table$1[90],
       Table$1[91]],
     Set$24=
      [0,
       Set$1[76],
       Set$1[77],
       Set$1[78],
       Set$1[79],
       Set$1[80],
       Set$1[81],
       Set$1[82],
       Set$1[83],
       Set$1[3],
       Set$1[74],
       Set$1[75]],
     Map$24=
      [0,
       Map$1[103],
       Map$1[104],
       Map$1[105],
       Map$1[106],
       Map$1[107],
       Map$1[108],
       Map$1[109],
       Map$1[110],
       Map$1[3],
       Map$1[101],
       Map$1[102],
       Map$1[47]],
     Hash_set$17=
      [0,
       Hash_set$1[1],
       Hash_set$1[2],
       Hash_set$1[3],
       Hash_set$1[4],
       Hash_set$1[5],
       Hash_set$1[6]],
     Table$17=
      [0,
       Table$1[1],
       Table$1[2],
       Table$1[3],
       Table$1[4],
       Table$1[5],
       Table$1[6],
       Table$1[7],
       Table$1[8],
       Table$1[9],
       Table$1[10],
       Table$1[11],
       Table$1[12],
       Table$1[13],
       Table$1[14],
       Table$1[15],
       Table$1[16],
       Table$1[17],
       Table$1[18],
       Table$1[19],
       Table$1[20],
       Table$1[21],
       Table$1[22],
       Table$1[23],
       Table$1[24],
       Table$1[25],
       Table$1[26],
       Table$1[27],
       Table$1[28],
       Table$1[29],
       Table$1[30],
       Table$1[31],
       Table$1[32],
       Table$1[33],
       Table$1[34],
       Table$1[35],
       Table$1[36],
       Table$1[37],
       Table$1[38],
       Table$1[39],
       Table$1[40],
       Table$1[41],
       Table$1[42],
       Table$1[43],
       Table$1[44],
       Table$1[45],
       Table$1[46],
       Table$1[47],
       Table$1[48],
       Table$1[49],
       Table$1[50],
       Table$1[51],
       Table$1[52],
       Table$1[53],
       Table$1[54],
       Table$1[55],
       Table$1[56],
       Table$1[57],
       Table$1[58],
       Table$1[59],
       Table$1[60],
       Table$1[61],
       Table$1[62],
       Table$1[63],
       Table$1[64],
       Table$1[65],
       Table$1[66],
       Table$1[67],
       Table$1[68],
       Table$1[69],
       Table$1[70],
       Table$1[71],
       Table$1[72],
       Table$1[73],
       Table$1[74],
       Table$1[75],
       Table$1[76],
       Table$1[77],
       Table$1[78],
       Table$1[79],
       Table$1[80],
       Table$1[81],
       Table$1[82],
       Table$1[83]],
     _ait_=Set$1[1],
     Set$25=
      [0,
       [0,_ait_[1],_ait_[2],_ait_[11]],
       Set$1[2],
       Set$1[3],
       Set$1[4],
       Set$1[5],
       Set$1[6],
       Set$1[7],
       Set$1[8],
       Set$1[9],
       Set$1[10],
       Set$1[11],
       Set$1[12],
       Set$1[13],
       Set$1[14],
       Set$1[15],
       Set$1[16],
       Set$1[17],
       Set$1[18],
       Set$1[19],
       Set$1[20],
       Set$1[21],
       Set$1[22],
       Set$1[23],
       Set$1[24],
       Set$1[25],
       Set$1[26],
       Set$1[27],
       Set$1[28],
       Set$1[29],
       Set$1[30],
       Set$1[31],
       Set$1[32],
       Set$1[33],
       Set$1[34],
       Set$1[35],
       Set$1[36],
       Set$1[37],
       Set$1[38],
       Set$1[39],
       Set$1[40],
       Set$1[41],
       Set$1[42],
       Set$1[43],
       Set$1[44],
       Set$1[45],
       Set$1[46],
       Set$1[47],
       Set$1[48],
       Set$1[49],
       Set$1[50],
       Set$1[51],
       Set$1[52],
       Set$1[53],
       Set$1[54],
       Set$1[55],
       Set$1[56],
       Set$1[57],
       Set$1[58],
       Set$1[59],
       Set$1[60],
       Set$1[61],
       Set$1[62],
       Set$1[63],
       Set$1[64],
       Set$1[65],
       Set$1[66],
       Set$1[67],
       Set$1[68],
       Set$1[69],
       Set$1[70],
       Set$1[71],
       Set$1[72],
       Set$1[73],
       Set$1[74],
       Set$1[75]],
     _aiu_=Map$1[1],
     Map$25=
      [0,
       [0,_aiu_[9],_aiu_[10],_aiu_[11]],
       Map$1[2],
       Map$1[3],
       Map$1[4],
       Map$1[5],
       Map$1[6],
       Map$1[7],
       Map$1[8],
       Map$1[9],
       Map$1[10],
       Map$1[11],
       Map$1[12],
       Map$1[13],
       Map$1[14],
       Map$1[15],
       Map$1[16],
       Map$1[17],
       Map$1[18],
       Map$1[19],
       Map$1[20],
       Map$1[21],
       Map$1[22],
       Map$1[23],
       Map$1[24],
       Map$1[25],
       Map$1[26],
       Map$1[27],
       Map$1[28],
       Map$1[29],
       Map$1[30],
       Map$1[31],
       Map$1[32],
       Map$1[33],
       Map$1[34],
       Map$1[35],
       Map$1[36],
       Map$1[37],
       Map$1[38],
       Map$1[39],
       Map$1[40],
       Map$1[41],
       Map$1[42],
       Map$1[43],
       Map$1[44],
       Map$1[45],
       Map$1[46],
       Map$1[47],
       Map$1[48],
       Map$1[49],
       Map$1[50],
       Map$1[51],
       Map$1[52],
       Map$1[53],
       Map$1[54],
       Map$1[55],
       Map$1[56],
       Map$1[57],
       Map$1[58],
       Map$1[59],
       Map$1[60],
       Map$1[61],
       Map$1[62],
       Map$1[63],
       Map$1[64],
       Map$1[65],
       Map$1[66],
       Map$1[67],
       Map$1[68],
       Map$1[69],
       Map$1[70],
       Map$1[71],
       Map$1[72],
       Map$1[73],
       Map$1[74],
       Map$1[75],
       Map$1[76],
       Map$1[77],
       Map$1[78],
       Map$1[79],
       Map$1[80],
       Map$1[81],
       Map$1[82],
       Map$1[83],
       Map$1[84],
       Map$1[85],
       Map$1[86],
       Map$1[87],
       Map$1[88],
       Map$1[89],
       Map$1[90],
       Map$1[91],
       Map$1[92],
       Map$1[93],
       Map$1[94],
       Map$1[95],
       Map$1[96],
       Map$1[97],
       Map$1[98],
       Map$1[99],
       Map$1[100],
       Map$1[101],
       Map$1[102]],
     _aiA_=Stdlib_filename[5],
     _aiv_=Stdlib_filename[7],
     _aiw_=Stdlib_filename[12],
     _aix_=Stdlib_filename[8],
     _aiy_=Stdlib_filename[1],
     _aiz_=Stdlib_filename[6],
     _aiB_=Stdlib_filename[2],
     _aiC_=Stdlib_filename[3],
     _aiD_=Stdlib_filename[21],
     temp_dir_name=caml_call1(Stdlib_filename[18],0),
     dirname=Stdlib_filename[14],
     basename=Stdlib_filename[13];
    function is_absolute(p){return 1 - caml_call1(_aiA_,p)}
    function concat$0(p1,p2)
     {if(caml_call1(_BU_,p1))caml_call3(_Pe_,_aiE_,p2,0);
      var s$0=p2;
      for(;;)
       {var match$0=caml_call2(_CG_,s$0,47);
        if(match$0)
         {var _aZv_=match$0[1],_aZw_=_aZv_[1],switch$0=0;
          if
           (caml_string_notequal(_aZw_,cst$192)
            &&
            caml_string_notequal(_aZw_,cst$193))
           switch$0 = 1;
          if(! switch$0){var s$1=_aZv_[2],s$0=s$1;continue}}
        var s=p1,_aZx_=caml_call2(_Gp_,cst$194,s$0);
        for(;;)
         {var match=caml_call2(_CH_,s,47),switch$1=0;
          if(match)
           {var _aZr_=match[1],_aZs_=_aZr_[1],switch$2=0;
            if(! caml_string_notequal(_aZs_,cst$186))
             {var _aZu_=_aZr_[2],switch$3=0;
              if
               (caml_string_notequal(_aZu_,cst$189)
                &&
                caml_string_notequal(_aZu_,cst$190))
               switch$3 = 1;
              if(! switch$3){var _aZy_=cst$191;switch$1 = 1;switch$2 = 1}}
            if(! switch$2)
             {var _aZt_=_aZr_[2],switch$4=0;
              if
               (caml_string_notequal(_aZt_,cst$187)
                &&
                caml_string_notequal(_aZt_,cst$188))
               switch$4 = 1;
              if(! switch$4){var s=_aZs_;continue}}}
          if(! switch$1)var _aZy_=s;
          return caml_call2(_Gp_,_aZy_,_aZx_)}}}
    function to_absolute_exn(p,relative_to)
     {return caml_call1(_aiA_,relative_to)
              ?caml_call3(_Pe_,_aiF_,relative_to,0)
              :is_absolute(p)?p:concat$0(relative_to,p)}
    function split$7(s)
     {var _aZq_=caml_call1(basename,s);return [0,caml_call1(dirname,s),_aZq_]}
    var max_pathname_component_size=255;
    function is_posix_pathname_component(s)
     {var _aZk_=caml_call2(symbol$14,s,cst$195);
      if(_aZk_)
       {var _aZl_=caml_call2(symbol$14,s,cst$196);
        if(_aZl_)
         {var _aZm_=caml_call2(symbol$58,0,caml_ml_string_length(s));
          if(_aZm_)
           {var
             _aZn_=
              caml_call2
               (symbol$55,
                caml_ml_string_length(s),
                max_pathname_component_size);
            if(_aZn_)
             var
              _aZo_=1 - caml_call4(_Cf_,0,0,s,47),
              _aZp_=_aZo_?1 - caml_call4(_Cf_,0,0,s,0):_aZo_;
            else
             var _aZp_=_aZn_}
          else
           var _aZp_=_aZm_}
        else
         var _aZp_=_aZl_}
      else
       var _aZp_=_aZk_;
      return _aZp_}
    function split_extension(fn)
     {var match=caml_call2(_CH_,fn,47);
      if(match)
       var
        match$0=match[1],
        fn$0=match$0[2],
        path=match$0[1],
        fn$1=fn$0,
        dir=[0,path];
      else
       var fn$1=fn,dir=0;
      var match$1=caml_call2(_CH_,fn$1,46);
      if(match$1)
       var
        match$2=match$1[1],
        ext=match$2[2],
        base_fn=match$2[1],
        ext$0=[0,ext],
        fn$2=base_fn;
      else
       var ext$0=0,fn$2=fn$1;
      if(dir)
       var
        dir$0=dir[1],
        fn$3=caml_call2(_Gp_,dir$0,caml_call2(_Gp_,cst$197,fn$2));
      else
       var fn$3=fn$2;
      return [0,fn$3,ext$0]}
    function parts$0(filename)
     {var acc=0,filename$0=filename;
      for(;;)
       {var match=split$7(filename$0),_aZj_=match[1];
        if(caml_string_notequal(_aZj_,cst$198))
         {if
           (!
            caml_string_notequal(_aZj_,cst$199)
            &&
            !
            caml_string_notequal(match[2],cst$200))
           return [0,_aZj_,acc]}
        else
         if(! caml_string_notequal(match[2],cst$201))return [0,_aZj_,acc];
        var dir=match[2],acc$0=[0,dir,acc],acc=acc$0,filename$0=_aZj_;
        continue}}
    function of_parts$0(param)
     {if(param)
       {var rest=param[2],root=param[1];
        return caml_call3(_o__,rest,root,Stdlib_filename[4])}
      return caml_call1(_Gb_,cst_Filename_of_parts_empty_pa)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$424);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Filename$0);
    var
     Core_kernel_Filename=
      [0,
       bin_size_t$48,
       bin_write_t$48,
       bin_read_t$98,
       bin_read_t$99,
       bin_shape_t$46,
       bin_writer_t$39,
       bin_reader_t$39,
       bin_t$39,
       t_of_sexp$35,
       sexp_of_t$43,
       symbol$9,
       symbol$10,
       symbol$11,
       symbol$12,
       symbol$13,
       symbol$14,
       equal$18,
       min$0,
       max$0,
       ascending$0,
       descending$0,
       between$0,
       clamp_exn$0,
       clamp$0,
       comparator$3,
       validate_lbound$0,
       validate_ubound$0,
       validate_bound$0,
       Replace_polymorphic_compare$0,
       Map$25,
       Set$25,
       compare$37,
       hash_fold_t$14,
       hash$11,
       hashable$0,
       Table$17,
       Hash_set$17,
       Hash_queue$0,
       root$0,
       is_posix_pathname_component,
       temp_dir_name,
       _aiy_,
       _aiB_,
       _aiC_,
       concat$0,
       _aiA_,
       is_absolute,
       _aiz_,
       _aiv_,
       _aix_,
       _aiw_,
       split_extension,
       basename,
       dirname,
       to_absolute_exn,
       split$7,
       parts$0,
       of_parts$0,
       _aiD_,
       [0,
        [0,
         bin_size_t$48,
         bin_write_t$48,
         bin_read_t$98,
         bin_read_t$99,
         bin_shape_t$46,
         bin_writer_t$39,
         bin_reader_t$39,
         bin_t$39,
         compare$37,
         t_of_sexp$35,
         sexp_of_t$43,
         comparator$3,
         Map$24,
         Set$24,
         Table$16,
         Hash_set$16]]];
    caml_register_global(5142,Core_kernel_Filename,"Core_kernel__Filename");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Command_shape);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$425);
    caml_call1(Expect_test_collector[4][1],cst_src_command_shape_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$426,cst$202);
    var
     _aiG_=caml_call1(Bin_prot_Shape[2][1],cst_t$219),
     _aiH_=
      [0,
       [0,
        cst_Concat,
        [0,
         caml_call1(_ZU_,caml_call1(caml_call1(Bin_prot_Shape[13],_aiG_),0)),
         0]],
       [0,[0,cst_Ad_hoc,[0,_Yt_,0]],0]],
     _aiI_=caml_call1(Bin_prot_Shape[2][1],cst_t$220),
     _aiJ_=
      [0,
       [0,cst_Maybe,[0,caml_call1(caml_call1(Bin_prot_Shape[13],_aiI_),0),0]],
       _aiH_],
     _aiK_=caml_call1(Bin_prot_Shape[2][1],cst_t$221),
     _aiM_=
      [0,
       _aiL_,
       [0,
        [0,cst_One,[0,_Yt_,0]],
        [0,
         [0,cst_Many,[0,caml_call1(caml_call1(Bin_prot_Shape[13],_aiK_),0),0]],
         _aiJ_]]],
     _aiN_=caml_call1(Bin_prot_Shape[9],_aiM_),
     _aiO_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$222),0,_aiN_],0],
     _aiP_=caml_call1(Bin_prot_Shape[4][1],cst_src_command_shape_ml_8_8),
     group$126=caml_call2(Bin_prot_Shape[6],_aiP_,_aiO_),
     _aiQ_=caml_call1(Bin_prot_Shape[2][1],cst_t$223),
     bin_shape_t$109=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$126,_aiQ_),0);
    function bin_size_t$75(param)
     {if(typeof param === "number")
       return 1;
      else
       switch(param[0])
        {case 0:
          var v1=param[1],_aZe_=caml_call1(_XB_,v1);
          return caml_call2(Bin_prot_Common[23],1,_aZe_);
         case 1:
          var v1$0=param[1],_aZf_=bin_size_t$75(v1$0);
          return caml_call2(Bin_prot_Common[23],1,_aZf_);
         case 2:
          var v1$1=param[1],_aZg_=bin_size_t$75(v1$1);
          return caml_call2(Bin_prot_Common[23],1,_aZg_);
         case 3:
          var v1$2=param[1],_aZh_=caml_call2(_XQ_,bin_size_t$75,v1$2);
          return caml_call2(Bin_prot_Common[23],1,_aZh_);
         default:
          var v1$3=param[1],_aZi_=caml_call1(_XB_,v1$3);
          return caml_call2(Bin_prot_Common[23],1,_aZi_)}}
    function bin_write_t$76(buf,pos,param)
     {var pos$0=pos,param$0=param;
      for(;;)
       if(typeof param$0 === "number")
        return caml_call3(Bin_prot_Write[30],buf,pos$0,0);
       else
        switch(param$0[0])
         {case 0:
           var v1=param$0[1],pos$1=caml_call3(Bin_prot_Write[30],buf,pos$0,1);
           return caml_call3(_Yv_,buf,pos$1,v1);
          case 1:
           var
            v1$0=param$0[1],
            pos$2=caml_call3(Bin_prot_Write[30],buf,pos$0,2),
            pos$0=pos$2,
            param$0=v1$0;
           continue;
          case 2:
           var
            v1$1=param$0[1],
            pos$3=caml_call3(Bin_prot_Write[30],buf,pos$0,3),
            pos$0=pos$3,
            param$0=v1$1;
           continue;
          case 3:
           var
            v1$2=param$0[1],
            pos$4=caml_call3(Bin_prot_Write[30],buf,pos$0,4);
           return caml_call3(caml_call1(_ZW_,bin_write_t$76),buf,pos$4,v1$2);
          default:
           var
            v1$3=param$0[1],
            pos$5=caml_call3(Bin_prot_Write[30],buf,pos$0,5);
           return caml_call3(_Yv_,buf,pos$5,v1$3)}}
    var bin_writer_t$96=[0,bin_size_t$75,bin_write_t$76];
    function bin_read_t$150(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_src_command_shape_ml_Stabl,pos_ref[1])}
    function bin_read_t$151(buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[29],buf,pos_ref);
      if(5 < match >>> 0)
       return caml_call2(Bin_prot_Common[18],_aiR_,pos_ref[1]);
      switch(match)
       {case 0:return 0;
        case 1:var arg_1=caml_call2(_Yx_,buf,pos_ref);return [0,arg_1];
        case 2:var arg_1$0=bin_read_t$151(buf,pos_ref);return [1,arg_1$0];
        case 3:var arg_1$1=bin_read_t$151(buf,pos_ref);return [2,arg_1$1];
        case 4:
         var arg_1$2=caml_call2(caml_call1(_ZY_,bin_read_t$151),buf,pos_ref);
         return [3,arg_1$2];
        default:var arg_1$3=caml_call2(_Yx_,buf,pos_ref);return [4,arg_1$3]}}
    var
     bin_reader_t$96=[0,bin_read_t$151,bin_read_t$150],
     bin_t$96=[0,bin_shape_t$109,bin_writer_t$96,bin_reader_t$96];
    function compare$83(a_001,b_002)
     {var a_001$0=a_001,b_002$0=b_002;
      for(;;)
       {if(caml_call2(Ppx_compare_lib[1],a_001$0,b_002$0))return 0;
        var switch$0=0;
        if(typeof a_001$0 === "number")
         return typeof b_002$0 === "number"?0:-1;
        else
         switch(a_001$0[0])
          {case 0:
            var _aY__=a_001$0[1];
            if(typeof b_002$0 !== "number")
             {if(0 === b_002$0[0])
               {var b_004=b_002$0[1];
                return caml_call2(Ppx_compare_lib[4][8],_aY__,b_004)}
              return -1}
            break;
           case 1:
            var _aY$_=a_001$0[1];
            if(typeof b_002$0 !== "number")
             switch(b_002$0[0])
              {case 0:switch$0 = 1;break;
               case 1:
                var b_002$1=b_002$0[1],a_001$0=_aY$_,b_002$0=b_002$1;continue;
               default:return -1}
            break;
           case 2:
            var _aZa_=a_001$0[1];
            if(typeof b_002$0 !== "number")
             switch(b_002$0[0])
              {case 0:switch$0 = 1;break;
               case 1:switch$0 = 2;break;
               case 2:
                var b_002$2=b_002$0[1],a_001$0=_aZa_,b_002$0=b_002$2;continue;
               default:return -1}
            break;
           case 3:
            var _aZb_=a_001$0[1];
            if(typeof b_002$0 !== "number")
             switch(b_002$0[0])
              {case 0:switch$0 = 1;break;
               case 1:switch$0 = 2;break;
               case 2:switch$0 = 3;break;
               case 3:
                var
                 b_010=b_002$0[1],
                 _aZc_=function(a_011,b_012){return compare$83(a_011,b_012)};
                return caml_call3(Ppx_compare_lib[4][11],_aZc_,_aZb_,b_010);
               default:return -1}
            break;
           default:
            var _aZd_=a_001$0[1];
            if(typeof b_002$0 !== "number")
             switch(b_002$0[0])
              {case 0:switch$0 = 1;break;
               case 1:switch$0 = 2;break;
               case 2:switch$0 = 3;break;
               case 3:return 1;
               default:
                var b_014=b_002$0[1];
                return caml_call2(Ppx_compare_lib[4][8],_aZd_,b_014)}}
        switch(switch$0)
         {case 0:return 1;case 1:return 1;case 2:return 1;default:return 1}}}
    var t_of_sexp$91=function _aY9_(_aY8_){return _aY9_.fun(_aY8_)};
    caml_update_dummy
     (t_of_sexp$91,
      function(sexp)
       {if(0 === sexp[0])
         {var
           _aY2_=sexp[1],
           _aY3_=caml_string_compare(_aY2_,cst_ad_hoc),
           switch$0=0;
          if(0 <= _aY3_)
           if(0 < _aY3_)
            if(caml_string_notequal(_aY2_,cst_concat))
             if(caml_string_notequal(_aY2_,cst_many))
              if(caml_string_notequal(_aY2_,cst_maybe))
               if(caml_string_notequal(_aY2_,cst_one))
                {if(! caml_string_notequal(_aY2_,cst_zero$1))switch$0 = 1}
               else
                switch$0 = 2;
              else
               switch$0 = 4;
             else
              switch$0 = 3;
            else
             switch$0 = 5;
           else
            switch$0 = 6;
          else
           if(caml_string_notequal(_aY2_,cst_Ad_hoc$0))
            if(caml_string_notequal(_aY2_,cst_Concat$0))
             if(caml_string_notequal(_aY2_,cst_Many$0))
              if(caml_string_notequal(_aY2_,cst_Maybe$0))
               if(caml_string_notequal(_aY2_,cst_One$0))
                {if(! caml_string_notequal(_aY2_,cst_Zero$2))switch$0 = 1}
               else
                switch$0 = 2;
              else
               switch$0 = 4;
             else
              switch$0 = 3;
            else
             switch$0 = 5;
           else
            switch$0 = 6;
          switch(switch$0)
           {case 1:return 0;
            case 2:
             return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$30,sexp);
            case 3:
             return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$30,sexp);
            case 4:
             return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$30,sexp);
            case 5:
             return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$30,sexp);
            case 6:
             return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$30,sexp)
            }}
        else
         {var _aY4_=sexp[1];
          if(! _aY4_)
           return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$30,sexp);
          var _aY5_=_aY4_[1];
          if(0 !== _aY5_[0])
           return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$30,sexp);
          var
           _aY6_=_aY5_[1],
           _aY7_=caml_string_compare(_aY6_,cst_ad_hoc$0),
           switch$1=0;
          if(0 <= _aY7_)
           if(0 < _aY7_)
            if(caml_string_notequal(_aY6_,cst_concat$0))
             if(caml_string_notequal(_aY6_,cst_many$0))
              if(caml_string_notequal(_aY6_,cst_maybe$0))
               if(caml_string_notequal(_aY6_,cst_one$0))
                {if(! caml_string_notequal(_aY6_,cst_zero$2))switch$1 = 6}
               else
                switch$1 = 1;
              else
               switch$1 = 3;
             else
              switch$1 = 2;
            else
             switch$1 = 4;
           else
            switch$1 = 5;
          else
           if(caml_string_notequal(_aY6_,cst_Ad_hoc$1))
            if(caml_string_notequal(_aY6_,cst_Concat$1))
             if(caml_string_notequal(_aY6_,cst_Many$1))
              if(caml_string_notequal(_aY6_,cst_Maybe$1))
               if(caml_string_notequal(_aY6_,cst_One$1))
                {if(! caml_string_notequal(_aY6_,cst_Zero$3))switch$1 = 6}
               else
                switch$1 = 1;
              else
               switch$1 = 3;
             else
              switch$1 = 2;
            else
             switch$1 = 4;
           else
            switch$1 = 5;
          switch(switch$1)
           {case 1:
             var sexp_args=_aY4_[2];
             if(sexp_args && ! sexp_args[2])
              {var v0=sexp_args[1],v0$0=caml_call1(_$r_,v0);return [0,v0$0]}
             return caml_call3
                     (Sexplib0_Sexp_conv_error[4],tp_loc$30,_aY6_,sexp);
            case 2:
             var sexp_args$1=_aY4_[2];
             if(sexp_args$1 && ! sexp_args$1[2])
              {var v0$3=sexp_args$1[1],v0$4=caml_call1(t_of_sexp$91,v0$3);
               return [1,v0$4]}
             return caml_call3
                     (Sexplib0_Sexp_conv_error[4],tp_loc$30,_aY6_,sexp);
            case 3:
             var sexp_args$0=_aY4_[2];
             if(sexp_args$0 && ! sexp_args$0[2])
              {var v0$1=sexp_args$0[1],v0$2=caml_call1(t_of_sexp$91,v0$1);
               return [2,v0$2]}
             return caml_call3
                     (Sexplib0_Sexp_conv_error[4],tp_loc$30,_aY6_,sexp);
            case 4:
             var sexp_args$2=_aY4_[2];
             if(sexp_args$2 && ! sexp_args$2[2])
              {var
                v0$5=sexp_args$2[1],
                v0$6=caml_call2(_$D_,t_of_sexp$91,v0$5);
               return [3,v0$6]}
             return caml_call3
                     (Sexplib0_Sexp_conv_error[4],tp_loc$30,_aY6_,sexp);
            case 5:
             var sexp_args$3=_aY4_[2];
             if(sexp_args$3 && ! sexp_args$3[2])
              {var v0$7=sexp_args$3[1],v0$8=caml_call1(_$r_,v0$7);
               return [4,v0$8]}
             return caml_call3
                     (Sexplib0_Sexp_conv_error[4],tp_loc$30,_aY6_,sexp);
            case 6:
             return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$30,sexp)
            }}
        return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$30,sexp)});
    function sexp_of_t$101(param)
     {if(typeof param === "number")
       return _aiS_;
      else
       switch(param[0])
        {case 0:
          var v0=param[1],v0$0=caml_call1(_$s_,v0);
          return [1,[0,_aiT_,[0,v0$0,0]]];
         case 1:
          var v0$1=param[1],v0$2=sexp_of_t$101(v0$1);
          return [1,[0,_aiU_,[0,v0$2,0]]];
         case 2:
          var v0$3=param[1],v0$4=sexp_of_t$101(v0$3);
          return [1,[0,_aiV_,[0,v0$4,0]]];
         case 3:
          var v0$5=param[1],v0$6=caml_call2(_$E_,sexp_of_t$101,v0$5);
          return [1,[0,_aiW_,[0,v0$6,0]]];
         default:
          var v0$7=param[1],v0$8=caml_call1(_$s_,v0$7);
          return [1,[0,_aiX_,[0,v0$8,0]]]}}
    var
     Expect_test_collector$3=
      caml_call1(Expect_test_collector[2],Expect_test_config);
    function _aiY_(param)
     {var
       _aYZ_=caml_call1(Bin_prot_Shape[21],bin_shape_t$109),
       _aY0_=caml_call1(Bin_prot_Shape[18][4],_aYZ_);
      caml_call1(Stdlib[46],_aY0_);
      var
       _aY1_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_command_shape_ml$0),
         19,
         434,
         446,
         452];
      return caml_call1(Expect_test_collector$3[1],_aY1_)}
    var
     _aiZ_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_command_shape_ml$1),
       19,
       434,
       453,
       491],
     _ai2_=
      [0,
       [0,
        _ai1_,
        _ai0_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_command_shape_ml$2),
         19,
         434,
         446,
         452],
        _aiZ_],
       0],
     _ai3_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_command_shape_ml$4),
       17,
       364,
       372,
       492],
     _ai4_=
      caml_call1(Expect_test_common_File[4][3],cst_f1755de6c27d9367cb640e60f8);
    caml_call9
     (Expect_test_collector$3[3],
      _ai4_,
      _ai3_,
      cst_src_command_shape_ml$3,
      0,
      0,
      _ai2_,
      0,
      Inline_test_config,
      _aiY_);
    function invariant$14(t)
     {function _aYV_(param)
       {if(typeof t === "number")
         return 0;
        else
         switch(t[0])
          {case 0:return 0;
           case 1:
            var _aYW_=t[1];
            return typeof _aYW_ === "number"
                    ?caml_call1(Stdlib[2],cst_Many_Zero_should_be_just_Z)
                    :invariant$14(_aYW_);
           case 2:
            var _aYX_=t[1];
            return typeof _aYX_ === "number"
                    ?caml_call1(Stdlib[2],cst_Maybe_Zero_should_be_just_)
                    :invariant$14(_aYX_);
           case 3:
            var _aYY_=t[1];
            if(_aYY_ && _aYY_[2])
             return caml_call2(include$23[9],_aYY_,invariant$14);
            return caml_call1(Stdlib[2],cst_Flatten_zero_and_one_eleme);
           default:return 0}}
      return caml_call4(Base_Invariant[1],_ai5_,t,sexp_of_t$101,_aYV_)}
    function t_of_sexp$92(sexp)
     {var t=caml_call1(t_of_sexp$91,sexp);invariant$14(t);return t}
    function usage(param)
     {if(typeof param === "number")
       return cst$203;
      else
       switch(param[0])
        {case 0:var usage$0=param[1];return usage$0;
         case 1:
          var _aYP_=param[1];
          if(typeof _aYP_ === "number")
           return caml_call1(Stdlib[2],cst_bug_in_command_ml);
          else
           {if(0 === _aYP_[0])
             {var _aYQ_=usage(_aYP_);
              return caml_call2(include$4[2],_ai6_,_aYQ_)}
            var _aYR_=usage(_aYP_);
            return caml_call2(include$4[2],_ai7_,_aYR_)}
         case 2:
          var _aYS_=param[1];
          if(typeof _aYS_ === "number")
           return caml_call1(Stdlib[2],cst_bug_in_command_ml$0);
          var _aYT_=usage(_aYS_);
          return caml_call2(include$4[2],_ai8_,_aYT_);
         case 3:
          var ts=param[1],_aYU_=caml_call2(include$23[74],ts,usage);
          return caml_call2(include$39[50],_ai9_,_aYU_);
         default:var usage$1=param[1];return usage$1}}
    var
     _ai__=
      caml_call1
       (Bin_prot_Shape[9],
        [0,
         [0,cst_Usage,[0,_Yt_,0]],
         [0,[0,cst_Grammar,[0,bin_shape_t$109,0]],0]]),
     _ai$_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$224),0,_ai__],0],
     _aja_=caml_call1(Bin_prot_Shape[4][1],cst_src_command_shape_ml_60_6),
     group$127=caml_call2(Bin_prot_Shape[6],_aja_,_ai$_),
     _ajb_=caml_call1(Bin_prot_Shape[2][1],cst_t$225),
     bin_shape_t$110=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$127,_ajb_),0);
    function bin_size_t$76(param)
     {if(0 === param[0])
       {var v1=param[1],_aYN_=caml_call1(_XB_,v1);
        return caml_call2(Bin_prot_Common[23],1,_aYN_)}
      var v1$0=param[1],_aYO_=bin_size_t$75(v1$0);
      return caml_call2(Bin_prot_Common[23],1,_aYO_)}
    function bin_write_t$77(buf,pos,param)
     {if(0 === param[0])
       {var v1=param[1],pos$0=caml_call3(Bin_prot_Write[30],buf,pos,0);
        return caml_call3(_Yv_,buf,pos$0,v1)}
      var v1$0=param[1],pos$1=caml_call3(Bin_prot_Write[30],buf,pos,1);
      return bin_write_t$76(buf,pos$1,v1$0)}
    var bin_writer_t$97=[0,bin_size_t$76,bin_write_t$77];
    function bin_read_t$152(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],
               cst_src_command_shape_ml_Stabl$0,
               pos_ref[1])}
    function bin_read_t$153(buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[29],buf,pos_ref);
      if(0 === match){var arg_1=caml_call2(_Yx_,buf,pos_ref);return [0,arg_1]}
      if(1 === match)
       {var arg_1$0=bin_read_t$151(buf,pos_ref);return [1,arg_1$0]}
      return caml_call2(Bin_prot_Common[18],_ajc_,pos_ref[1])}
    var
     bin_reader_t$97=[0,bin_read_t$153,bin_read_t$152],
     bin_t$97=[0,bin_shape_t$110,bin_writer_t$97,bin_reader_t$97];
    function compare$84(a_015,match)
     {if(caml_call2(Ppx_compare_lib[1],a_015,match))return 0;
      if(0 === a_015[0])
       {var _aYL_=a_015[1];
        if(0 === match[0])
         {var b_018=match[1];
          return caml_call2(Ppx_compare_lib[4][8],_aYL_,b_018)}
        return -1}
      var _aYM_=a_015[1];
      if(0 === match[0])return 1;
      var b_020=match[1];
      return compare$83(_aYM_,b_020)}
    function t_of_sexp$93(sexp)
     {if(0 === sexp[0])
       {var _aYH_=sexp[1],switch$0=0;
        if(caml_string_notequal(_aYH_,cst_Grammar$0))
         {var switch$1=0;
          if(caml_string_notequal(_aYH_,cst_Usage$0))
           if(caml_string_notequal(_aYH_,cst_grammar))
            {if(caml_string_notequal(_aYH_,cst_usage))
              {switch$0 = 1;switch$1 = 1}}
           else
            switch$1 = 1;
          if(! switch$1)
           return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$31,sexp)}
        if(! switch$0)
         return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$31,sexp)}
      else
       {var _aYI_=sexp[1];
        if(! _aYI_)
         return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$31,sexp);
        var _aYJ_=_aYI_[1];
        if(0 !== _aYJ_[0])
         return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$31,sexp);
        var _aYK_=_aYJ_[1],switch$2=0;
        if(caml_string_notequal(_aYK_,cst_Grammar$1))
         {var switch$3=0;
          if(caml_string_notequal(_aYK_,cst_Usage$1))
           if(caml_string_notequal(_aYK_,cst_grammar$0))
            {if(caml_string_notequal(_aYK_,cst_usage$0))
              {switch$2 = 1;switch$3 = 1}}
           else
            switch$3 = 1;
          if(! switch$3)
           {var sexp_args=_aYI_[2];
            if(sexp_args && ! sexp_args[2])
             {var v0=sexp_args[1],v0$0=caml_call1(_$r_,v0);return [0,v0$0]}
            return caml_call3
                    (Sexplib0_Sexp_conv_error[4],tp_loc$31,_aYK_,sexp)}}
        if(! switch$2)
         {var sexp_args$0=_aYI_[2];
          if(sexp_args$0 && ! sexp_args$0[2])
           {var v0$1=sexp_args$0[1],v0$2=t_of_sexp$92(v0$1);return [1,v0$2]}
          return caml_call3(Sexplib0_Sexp_conv_error[4],tp_loc$31,_aYK_,sexp)}}
      return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$31,sexp)}
    function sexp_of_t$102(param)
     {if(0 === param[0])
       {var v0=param[1],v0$0=caml_call1(_$s_,v0);
        return [1,[0,_ajd_,[0,v0$0,0]]]}
      var v0$1=param[1],v0$2=sexp_of_t$101(v0$1);
      return [1,[0,_aje_,[0,v0$2,0]]]}
    var
     Expect_test_collector$4=
      caml_call1(Expect_test_collector[2],Expect_test_config);
    function _ajf_(param)
     {var
       _aYE_=caml_call1(Bin_prot_Shape[21],bin_shape_t$110),
       _aYF_=caml_call1(Bin_prot_Shape[18][4],_aYE_);
      caml_call1(Stdlib[46],_aYF_);
      var
       _aYG_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_command_shape_ml$5),
         67,
         1982,
         1992,
         1998];
      return caml_call1(Expect_test_collector$4[1],_aYG_)}
    var
     _ajg_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_command_shape_ml$6),
       67,
       1982,
       1999,
       2037],
     _ajj_=
      [0,
       [0,
        _aji_,
        _ajh_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_command_shape_ml$7),
         67,
         1982,
         1992,
         1998],
        _ajg_],
       0],
     _ajk_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_command_shape_ml$9),
       65,
       1916,
       1922,
       2038],
     _ajl_=
      caml_call1
       (Expect_test_common_File[4][3],cst_f1755de6c27d9367cb640e60f8$0);
    caml_call9
     (Expect_test_collector$4[3],
      _ajl_,
      _ajk_,
      cst_src_command_shape_ml$8,
      0,
      0,
      _ajj_,
      0,
      Inline_test_config,
      _ajf_);
    var
     _ajm_=
      [0,
       [0,cst_name$2,_Yt_],
       [0,[0,cst_doc,_Yt_],[0,[0,cst_aliases,caml_call1(_ZU_,_Yt_)],0]]],
     _ajn_=caml_call1(Bin_prot_Shape[8],_ajm_),
     _ajo_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$226),0,_ajn_],0],
     _ajp_=caml_call1(Bin_prot_Shape[4][1],cst_src_command_shape_ml_76_6),
     group$128=caml_call2(Bin_prot_Shape[6],_ajp_,_ajo_),
     _ajq_=caml_call1(Bin_prot_Shape[2][1],cst_t$227),
     bin_shape_t$111=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$128,_ajq_),0);
    function bin_size_t$77(param)
     {var
       v3=param[3],
       v2=param[2],
       v1=param[1],
       _aYB_=caml_call1(_XB_,v1),
       size=caml_call2(Bin_prot_Common[23],0,_aYB_),
       _aYC_=caml_call1(_XB_,v2),
       size$0=caml_call2(Bin_prot_Common[23],size,_aYC_),
       _aYD_=caml_call2(_XQ_,_XB_,v3);
      return caml_call2(Bin_prot_Common[23],size$0,_aYD_)}
    function bin_write_t$78(buf,pos,param)
     {var
       v3=param[3],
       v2=param[2],
       v1=param[1],
       pos$0=caml_call3(_Yv_,buf,pos,v1),
       pos$1=caml_call3(_Yv_,buf,pos$0,v2);
      return caml_call3(caml_call1(_ZW_,_Yv_),buf,pos$1,v3)}
    var bin_writer_t$98=[0,bin_size_t$77,bin_write_t$78];
    function bin_read_t$154(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],
               cst_src_command_shape_ml_Stabl$1,
               pos_ref[1])}
    function bin_read_t$155(buf,pos_ref)
     {var
       v_name=caml_call2(_Yx_,buf,pos_ref),
       v_doc=caml_call2(_Yx_,buf,pos_ref),
       v_aliases=caml_call2(caml_call1(_ZY_,_Yx_),buf,pos_ref);
      return [0,v_name,v_doc,v_aliases]}
    var
     bin_reader_t$98=[0,bin_read_t$155,bin_read_t$154],
     bin_t$98=[0,bin_shape_t$111,bin_writer_t$98,bin_reader_t$98];
    function compare$85(a_021,b_022)
     {if(caml_call2(Ppx_compare_lib[1],a_021,b_022))return 0;
      var n=caml_call2(Ppx_compare_lib[4][8],a_021[1],b_022[1]);
      if(0 === n)
       {var n$0=caml_call2(Ppx_compare_lib[4][8],a_021[2],b_022[2]);
        if(0 === n$0)
         {var
           _aYy_=b_022[3],
           _aYz_=a_021[3],
           _aYA_=
            function(a_023,b_024)
             {return caml_call2(Ppx_compare_lib[4][8],a_023,b_024)};
          return caml_call3(Ppx_compare_lib[4][11],_aYA_,_aYz_,_aYy_)}
        return n$0}
      return n}
    function t_of_sexp$94(sexp)
     {if(0 === sexp[0])
       return caml_call2(Sexplib0_Sexp_conv_error[16],tp_loc$32,sexp);
      var
       field_sexps=sexp[1],
       name_field=[0,0],
       doc_field=[0,0],
       aliases_field=[0,0],
       duplicates=[0,0],
       extra=[0,0],
       param=field_sexps;
      for(;;)
       {if(param)
         {var _aYp_=param[1];
          if(1 === _aYp_[0])
           {var _aYq_=_aYp_[1];
            if(_aYq_)
             {var _aYr_=_aYq_[1];
              if(0 === _aYr_[0])
               {var _aYs_=_aYq_[2],_aYt_=_aYr_[1],switch$0=0;
                if(! _aYs_ || ! _aYs_[2])switch$0 = 1;
                if(switch$0)
                 {var
                   tail=param[2],
                   field_sexp$3=
                    function(_aYx_)
                     {function field_sexp(param)
                       {if(_aYx_)
                         {if(_aYx_[2])throw [0,Assert_failure,_ajr_];
                          var x=_aYx_[1];
                          return x}
                        return caml_call2
                                (Sexplib0_Sexp_conv_error[10],tp_loc$32,sexp)}
                      return field_sexp},
                   field_sexp=field_sexp$3(_aYs_);
                  if(caml_string_notequal(_aYt_,cst_aliases$0))
                   if(caml_string_notequal(_aYt_,cst_doc$0))
                    if(caml_string_notequal(_aYt_,cst_name$3))
                     {if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_aYt_,extra[1]]}
                    else
                     if(name_field[1])
                      duplicates[1] = [0,_aYt_,duplicates[1]];
                     else
                      {var
                        field_sexp$0=field_sexp(0),
                        fvalue=caml_call1(_$r_,field_sexp$0);
                       name_field[1] = [0,fvalue]}
                   else
                    if(doc_field[1])
                     duplicates[1] = [0,_aYt_,duplicates[1]];
                    else
                     {var
                       field_sexp$1=field_sexp(0),
                       fvalue$0=caml_call1(_$r_,field_sexp$1);
                      doc_field[1] = [0,fvalue$0]}
                  else
                   if(aliases_field[1])
                    duplicates[1] = [0,_aYt_,duplicates[1]];
                   else
                    {var
                      field_sexp$2=field_sexp(0),
                      fvalue$1=caml_call2(_$D_,_$r_,field_sexp$2);
                     aliases_field[1] = [0,fvalue$1]}
                  var param=tail;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[10],tp_loc$32,_aYp_)}
        if(duplicates[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],tp_loc$32,duplicates[1],sexp);
        if(extra[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[13],tp_loc$32,extra[1],sexp);
        var _aYu_=name_field[1],_aYv_=doc_field[1],_aYw_=aliases_field[1];
        if(_aYu_ && _aYv_ && _aYw_)
         {var aliases_value=_aYw_[1],doc_value=_aYv_[1],name_value=_aYu_[1];
          return [0,name_value,doc_value,aliases_value]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[15],
                 tp_loc$32,
                 sexp,
                 [0,
                  [0,0 === name_field[1]?1:0,cst_name$4],
                  [0,
                   [0,0 === doc_field[1]?1:0,cst_doc$1],
                   [0,[0,0 === aliases_field[1]?1:0,cst_aliases$1],0]]])}}
    function sexp_of_t$103(param)
     {var
       v_aliases=param[3],
       v_doc=param[2],
       v_name=param[1],
       arg=caml_call2(_$E_,_$s_,v_aliases),
       bnds=[0,[1,[0,_ajs_,[0,arg,0]]],0],
       arg$0=caml_call1(_$s_,v_doc),
       bnds$0=[0,[1,[0,_ajt_,[0,arg$0,0]]],bnds],
       arg$1=caml_call1(_$s_,v_name),
       bnds$1=[0,[1,[0,_aju_,[0,arg$1,0]]],bnds$0];
      return [1,bnds$1]}
    var
     Expect_test_collector$5=
      caml_call1(Expect_test_collector[2],Expect_test_config);
    function _ajv_(param)
     {var
       _aYm_=caml_call1(Bin_prot_Shape[21],bin_shape_t$111),
       _aYn_=caml_call1(Bin_prot_Shape[18][4],_aYm_);
      caml_call1(Stdlib[46],_aYn_);
      var
       _aYo_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_command_shape_ml$10),
         85,
         2349,
         2359,
         2365];
      return caml_call1(Expect_test_collector$5[1],_aYo_)}
    var
     _ajw_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_command_shape_ml$11),
       85,
       2349,
       2366,
       2404],
     _ajz_=
      [0,
       [0,
        _ajy_,
        _ajx_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_command_shape_ml$12),
         85,
         2349,
         2359,
         2365],
        _ajw_],
       0],
     _ajA_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_command_shape_ml$14),
       83,
       2283,
       2289,
       2405],
     _ajB_=
      caml_call1
       (Expect_test_common_File[4][3],cst_f1755de6c27d9367cb640e60f8$1);
    caml_call9
     (Expect_test_collector$5[3],
      _ajB_,
      _ajA_,
      cst_src_command_shape_ml$13,
      0,
      0,
      _ajz_,
      0,
      Inline_test_config,
      _ajv_);
    var
     _ajC_=
      [0,
       [0,cst_anons,bin_shape_t$110],
       [0,[0,cst_flags,caml_call1(_ZU_,bin_shape_t$111)],0]],
     _ajD_=
      [0,[0,cst_summary,_Yt_],[0,[0,cst_readme,caml_call1(_ZN_,_Yt_)],_ajC_]],
     _ajE_=caml_call1(Bin_prot_Shape[8],_ajD_),
     _ajF_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$228),0,_ajE_],0],
     _ajG_=caml_call1(Bin_prot_Shape[4][1],cst_src_command_shape_ml_94_6),
     group$129=caml_call2(Bin_prot_Shape[6],_ajG_,_ajF_),
     _ajH_=caml_call1(Bin_prot_Shape[2][1],cst_t$229),
     bin_shape_t$112=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$129,_ajH_),0);
    function bin_size_t$78(param)
     {var
       v4=param[4],
       v3=param[3],
       v2=param[2],
       v1=param[1],
       _aYi_=caml_call1(_XB_,v1),
       size=caml_call2(Bin_prot_Common[23],0,_aYi_),
       _aYj_=caml_call2(_XN_,_XB_,v2),
       size$0=caml_call2(Bin_prot_Common[23],size,_aYj_),
       _aYk_=bin_size_t$76(v3),
       size$1=caml_call2(Bin_prot_Common[23],size$0,_aYk_),
       _aYl_=caml_call2(_XQ_,bin_size_t$77,v4);
      return caml_call2(Bin_prot_Common[23],size$1,_aYl_)}
    function bin_write_t$79(buf,pos,param)
     {var
       v4=param[4],
       v3=param[3],
       v2=param[2],
       v1=param[1],
       pos$0=caml_call3(_Yv_,buf,pos,v1),
       pos$1=caml_call3(caml_call1(_ZP_,_Yv_),buf,pos$0,v2),
       pos$2=bin_write_t$77(buf,pos$1,v3);
      return caml_call3(caml_call1(_ZW_,bin_write_t$78),buf,pos$2,v4)}
    var bin_writer_t$99=[0,bin_size_t$78,bin_write_t$79];
    function bin_read_t$156(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],
               cst_src_command_shape_ml_Stabl$2,
               pos_ref[1])}
    function bin_read_t$157(buf,pos_ref)
     {var
       v_summary=caml_call2(_Yx_,buf,pos_ref),
       v_readme=caml_call2(caml_call1(_ZR_,_Yx_),buf,pos_ref),
       v_anons=bin_read_t$153(buf,pos_ref),
       v_flags=caml_call2(caml_call1(_ZY_,bin_read_t$155),buf,pos_ref);
      return [0,v_summary,v_readme,v_anons,v_flags]}
    var
     bin_reader_t$99=[0,bin_read_t$157,bin_read_t$156],
     bin_t$99=[0,bin_shape_t$112,bin_writer_t$99,bin_reader_t$99];
    function compare$86(a_025,b_026)
     {if(caml_call2(Ppx_compare_lib[1],a_025,b_026))return 0;
      var n=caml_call2(Ppx_compare_lib[4][8],a_025[1],b_026[1]);
      if(0 === n)
       {var
         _aYc_=b_026[2],
         _aYd_=a_025[2],
         _aYe_=
          function(a_027,b_028)
           {return caml_call2(Ppx_compare_lib[4][8],a_027,b_028)},
         n$0=caml_call3(Ppx_compare_lib[4][12],_aYe_,_aYd_,_aYc_);
        if(0 === n$0)
         {var n$1=compare$84(a_025[3],b_026[3]);
          if(0 === n$1)
           {var
             _aYf_=b_026[4],
             _aYg_=a_025[4],
             _aYh_=function(a_029,b_030){return compare$85(a_029,b_030)};
            return caml_call3(Ppx_compare_lib[4][11],_aYh_,_aYg_,_aYf_)}
          return n$1}
        return n$0}
      return n}
    function t_of_sexp$95(sexp)
     {if(0 === sexp[0])
       return caml_call2(Sexplib0_Sexp_conv_error[16],tp_loc$33,sexp);
      var
       field_sexps=sexp[1],
       summary_field=[0,0],
       readme_field=[0,0],
       anons_field=[0,0],
       flags_field=[0,0],
       duplicates=[0,0],
       extra=[0,0],
       param=field_sexps;
      for(;;)
       {if(param)
         {var _aX4_=param[1];
          if(1 === _aX4_[0])
           {var _aX5_=_aX4_[1];
            if(_aX5_)
             {var _aX6_=_aX5_[1];
              if(0 === _aX6_[0])
               {var _aX7_=_aX5_[2],_aX8_=_aX6_[1],switch$0=0;
                if(! _aX7_ || ! _aX7_[2])switch$0 = 1;
                if(switch$0)
                 {var
                   tail=param[2],
                   field_sexp$4=
                    function(_aYb_)
                     {function field_sexp(param)
                       {if(_aYb_)
                         {if(_aYb_[2])throw [0,Assert_failure,_ajI_];
                          var x=_aYb_[1];
                          return x}
                        return caml_call2
                                (Sexplib0_Sexp_conv_error[10],tp_loc$33,sexp)}
                      return field_sexp},
                   field_sexp=field_sexp$4(_aX7_);
                  if(caml_string_notequal(_aX8_,cst_anons$0))
                   if(caml_string_notequal(_aX8_,cst_flags$0))
                    if(caml_string_notequal(_aX8_,cst_readme$0))
                     if(caml_string_notequal(_aX8_,cst_summary$0))
                      {if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_aX8_,extra[1]]}
                     else
                      if(summary_field[1])
                       duplicates[1] = [0,_aX8_,duplicates[1]];
                      else
                       {var
                         field_sexp$0=field_sexp(0),
                         fvalue=caml_call1(_$r_,field_sexp$0);
                        summary_field[1] = [0,fvalue]}
                    else
                     if(readme_field[1])
                      duplicates[1] = [0,_aX8_,duplicates[1]];
                     else
                      {var
                        field_sexp$1=field_sexp(0),
                        fvalue$0=caml_call1(_$r_,field_sexp$1);
                       readme_field[1] = [0,fvalue$0]}
                   else
                    if(flags_field[1])
                     duplicates[1] = [0,_aX8_,duplicates[1]];
                    else
                     {var
                       field_sexp$2=field_sexp(0),
                       fvalue$1=caml_call2(_$D_,t_of_sexp$94,field_sexp$2);
                      flags_field[1] = [0,fvalue$1]}
                  else
                   if(anons_field[1])
                    duplicates[1] = [0,_aX8_,duplicates[1]];
                   else
                    {var
                      field_sexp$3=field_sexp(0),
                      fvalue$2=t_of_sexp$93(field_sexp$3);
                     anons_field[1] = [0,fvalue$2]}
                  var param=tail;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[10],tp_loc$33,_aX4_)}
        if(duplicates[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],tp_loc$33,duplicates[1],sexp);
        if(extra[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[13],tp_loc$33,extra[1],sexp);
        var
         _aX9_=summary_field[1],
         _aX$_=anons_field[1],
         _aYa_=flags_field[1],
         _aX__=readme_field[1];
        if(_aX9_ && _aX$_ && _aYa_)
         {var
           flags_value=_aYa_[1],
           anons_value=_aX$_[1],
           summary_value=_aX9_[1];
          return [0,summary_value,_aX__,anons_value,flags_value]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[15],
                 tp_loc$33,
                 sexp,
                 [0,
                  [0,0 === summary_field[1]?1:0,cst_summary$1],
                  [0,
                   [0,0 === anons_field[1]?1:0,cst_anons$1],
                   [0,[0,0 === flags_field[1]?1:0,cst_flags$1],0]]])}}
    function sexp_of_t$104(param)
     {var
       v_flags=param[4],
       v_anons=param[3],
       v_readme=param[2],
       v_summary=param[1],
       arg=caml_call2(_$E_,sexp_of_t$103,v_flags),
       bnds=[0,[1,[0,_ajJ_,[0,arg,0]]],0],
       arg$0=sexp_of_t$102(v_anons),
       bnds$0=[0,[1,[0,_ajK_,[0,arg$0,0]]],bnds];
      if(v_readme)
       var
        v=v_readme[1],
        arg$1=caml_call1(_$s_,v),
        bnd=[1,[0,_ajL_,[0,arg$1,0]]],
        bnds$1=[0,bnd,bnds$0];
      else
       var bnds$1=bnds$0;
      var
       arg$2=caml_call1(_$s_,v_summary),
       bnds$2=[0,[1,[0,_ajM_,[0,arg$2,0]]],bnds$1];
      return [1,bnds$2]}
    var
     Expect_test_collector$6=
      caml_call1(Expect_test_collector[2],Expect_test_config);
    function _ajN_(param)
     {var
       _aX1_=caml_call1(Bin_prot_Shape[21],bin_shape_t$112),
       _aX2_=caml_call1(Bin_prot_Shape[18][4],_aX1_);
      caml_call1(Stdlib[46],_aX2_);
      var
       _aX3_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_command_shape_ml$15),
         104,
         2787,
         2797,
         2803];
      return caml_call1(Expect_test_collector$6[1],_aX3_)}
    var
     _ajO_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_command_shape_ml$16),
       104,
       2787,
       2804,
       2842],
     _ajR_=
      [0,
       [0,
        _ajQ_,
        _ajP_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_command_shape_ml$17),
         104,
         2787,
         2797,
         2803],
        _ajO_],
       0],
     _ajS_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_command_shape_ml$19),
       102,
       2721,
       2727,
       2843],
     _ajT_=
      caml_call1
       (Expect_test_common_File[4][3],cst_f1755de6c27d9367cb640e60f8$2);
    caml_call9
     (Expect_test_collector$6[3],
      _ajT_,
      _ajS_,
      cst_src_command_shape_ml$18,
      0,
      0,
      _ajR_,
      0,
      Inline_test_config,
      _ajN_);
    var
     _ajU_=
      [0,
       [0,cst_usage$1,_Yt_],
       [0,[0,cst_flags$2,caml_call1(_ZU_,bin_shape_t$111)],0]],
     _ajV_=
      [0,
       [0,cst_summary$2,_Yt_],
       [0,[0,cst_readme$1,caml_call1(_ZN_,_Yt_)],_ajU_]],
     _ajW_=caml_call1(Bin_prot_Shape[8],_ajV_),
     _ajX_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$230),0,_ajW_],0],
     _ajY_=caml_call1(Bin_prot_Shape[4][1],cst_src_command_shape_ml_109_6),
     group$130=caml_call2(Bin_prot_Shape[6],_ajY_,_ajX_),
     _ajZ_=caml_call1(Bin_prot_Shape[2][1],cst_t$231),
     bin_shape_t$113=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$130,_ajZ_),0),
     _aj6_=caml_call1(Bin_prot_Shape[9],_aj5_),
     _aj7_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_a$93),0,_aj6_],0],
     _aj8_=caml_call1(Bin_prot_Shape[4][1],cst_src_command_shape_ml_137_4),
     group$131=caml_call2(Bin_prot_Shape[6],_aj8_,_aj7_),
     _aj9_=caml_call1(Bin_prot_Shape[2][1],cst_a$94),
     bin_shape_a=caml_call1(caml_call2(Bin_prot_Shape[14],group$131,_aj9_),0),
     _aj__=caml_call1(Bin_prot_Shape[3][1],cst_a$95),
     _aj$_=caml_call1(Bin_prot_Shape[4][1],cst_src_command_shape_ml_144_3),
     _aka_=[0,_Yt_,[0,caml_call2(Bin_prot_Shape[15],_aj$_,_aj__),0]],
     _akb_=caml_call1(Bin_prot_Shape[7],_aka_),
     _akc_=caml_call1(_xv_[1][3],_akb_),
     _akd_=[0,[0,cst_subcommands,caml_call1(_LK_[1][1],_akc_)],0],
     _ake_=
      [0,
       [0,cst_summary$5,_Yt_],
       [0,[0,cst_readme$3,caml_call1(_ZN_,_Yt_)],_akd_]],
     _akf_=caml_call1(Bin_prot_Shape[8],_ake_),
     _akg_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$96),0],
     _akh_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$232),_akg_,_akf_],0],
     _aki_=caml_call1(Bin_prot_Shape[4][1],cst_src_command_shape_ml_141_6),
     group$132=caml_call2(Bin_prot_Shape[6],_aki_,_akh_);
    function bin_shape_t$114(a)
     {var _aX0_=caml_call1(Bin_prot_Shape[2][1],cst_t$233);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$132,_aX0_),[0,a,0])}
    function bin_size_t$79(size_of_a,param)
     {var
       v3=param[3],
       v2=param[2],
       v1=param[1],
       _aXT_=caml_call1(_XB_,v1),
       size=caml_call2(Bin_prot_Common[23],0,_aXT_),
       _aXU_=caml_call2(_XN_,_XB_,v2),
       size$0=caml_call2(Bin_prot_Common[23],size,_aXU_);
      function _aXV_(param)
       {var
         v2=param[2],
         v1=param[1],
         _aXY_=caml_call1(_XB_,v1),
         size=caml_call2(Bin_prot_Common[23],0,_aXY_),
         _aXZ_=caml_call1(size_of_a,v2);
        return caml_call2(Bin_prot_Common[23],size,_aXZ_)}
      var
       _aXW_=caml_call1(_xv_[1][4],_aXV_),
       _aXX_=caml_call2(_LK_[1][2],_aXW_,v3);
      return caml_call2(Bin_prot_Common[23],size$0,_aXX_)}
    function bin_write_t$80(write_a,buf,pos,param)
     {var
       v3=param[3],
       v2=param[2],
       v1=param[1],
       pos$0=caml_call3(_Yv_,buf,pos,v1),
       pos$1=caml_call3(caml_call1(_ZP_,_Yv_),buf,pos$0,v2);
      function _aXR_(buf,pos,param)
       {var v2=param[2],v1=param[1],pos$0=caml_call3(_Yv_,buf,pos,v1);
        return caml_call3(write_a,buf,pos$0,v2)}
      var _aXS_=caml_call1(_xv_[1][5],_aXR_);
      return caml_call3(caml_call1(_LK_[1][3],_aXS_),buf,pos$1,v3)}
    function bin_writer_t$100(bin_writer_a)
     {function _aXN_(v)
       {var _aXO_=bin_writer_a[2];
        return function(_aXP_,_aXQ_)
         {return bin_write_t$80(_aXO_,v,_aXP_,_aXQ_)}}
      return [0,function(v){return bin_size_t$79(bin_writer_a[1],v)},_aXN_]}
    function bin_read_t$158(of_a,buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],
               cst_src_command_shape_ml_Stabl$3,
               pos_ref[1])}
    function bin_read_t$159(of_a,buf,pos_ref)
     {var
       v_summary=caml_call2(_Yx_,buf,pos_ref),
       v_readme=caml_call2(caml_call1(_ZR_,_Yx_),buf,pos_ref);
      function _aXL_(buf,pos_ref)
       {var v1=caml_call2(_Yx_,buf,pos_ref),v2=caml_call2(of_a,buf,pos_ref);
        return [0,v1,v2]}
      var
       _aXM_=caml_call1(_xv_[1][6],_aXL_),
       v_subcommands=caml_call2(caml_call1(_LK_[1][4],_aXM_),buf,pos_ref);
      return [0,v_summary,v_readme,v_subcommands]}
    function bin_reader_t$100(bin_reader_a)
     {function _aXK_(buf,pos_ref,vtag)
       {return bin_read_t$158(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$159(bin_reader_a[1],buf,pos_ref)},
              _aXK_]}
    function bin_t$100(bin_a)
     {var _aXI_=bin_reader_t$100(bin_a[3]),_aXJ_=bin_writer_t$100(bin_a[2]);
      return [0,bin_shape_t$114(bin_a[1]),_aXJ_,_aXI_]}
    function compare$87(cmp_a,a_031,b_032)
     {if(caml_call2(Ppx_compare_lib[1],a_031,b_032))return 0;
      var n=caml_call2(Ppx_compare_lib[4][8],a_031[1],b_032[1]);
      if(0 === n)
       {var
         _aXB_=b_032[2],
         _aXC_=a_031[2],
         _aXD_=
          function(a_033,b_034)
           {return caml_call2(Ppx_compare_lib[4][8],a_033,b_034)},
         n$0=caml_call3(Ppx_compare_lib[4][12],_aXD_,_aXC_,_aXB_);
        if(0 === n$0)
         {var
           _aXE_=b_032[3],
           _aXF_=a_031[3],
           _aXG_=
            function(a_035,b_036)
             {function _aXH_(a_037,b_038)
               {var
                 t_040=a_037[2],
                 t_039=a_037[1],
                 t_042=b_038[2],
                 t_041=b_038[1],
                 n=caml_call2(Ppx_compare_lib[4][8],t_039,t_041);
                return 0 === n?caml_call2(cmp_a,t_040,t_042):n}
              return caml_call3(_xv_[1][11],_aXH_,a_035,b_036)};
          return caml_call3(_LK_[1][9],_aXG_,_aXF_,_aXE_)}
        return n$0}
      return n}
    function t_of_sexp$96(of_a,sexp)
     {if(0 === sexp[0])
       return caml_call2(Sexplib0_Sexp_conv_error[16],tp_loc$35,sexp);
      var
       field_sexps=sexp[1],
       summary_field=[0,0],
       readme_field=[0,0],
       subcommands_field=[0,0],
       duplicates=[0,0],
       extra=[0,0],
       param=field_sexps;
      for(;;)
       {if(param)
         {var _aXo_=param[1];
          if(1 === _aXo_[0])
           {var _aXp_=_aXo_[1];
            if(_aXp_)
             {var _aXq_=_aXp_[1];
              if(0 === _aXq_[0])
               {var _aXr_=_aXp_[2],_aXs_=_aXq_[1],switch$0=0;
                if(! _aXr_ || ! _aXr_[2])switch$0 = 1;
                if(switch$0)
                 {var
                   tail=param[2],
                   field_sexp$3=
                    function(_aXA_)
                     {function field_sexp(param)
                       {if(_aXA_)
                         {if(_aXA_[2])throw [0,Assert_failure,_akj_];
                          var x=_aXA_[1];
                          return x}
                        return caml_call2
                                (Sexplib0_Sexp_conv_error[10],tp_loc$35,sexp)}
                      return field_sexp},
                   field_sexp=field_sexp$3(_aXr_);
                  if(caml_string_notequal(_aXs_,cst_readme$4))
                   if(caml_string_notequal(_aXs_,cst_subcommands$0))
                    if(caml_string_notequal(_aXs_,cst_summary$6))
                     {if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_aXs_,extra[1]]}
                    else
                     if(summary_field[1])
                      duplicates[1] = [0,_aXs_,duplicates[1]];
                     else
                      {var
                        field_sexp$0=field_sexp(0),
                        fvalue=caml_call1(_$r_,field_sexp$0);
                       summary_field[1] = [0,fvalue]}
                   else
                    if(subcommands_field[1])
                     duplicates[1] = [0,_aXs_,duplicates[1]];
                    else
                     {var
                       field_sexp$1=field_sexp(0),
                       _aXt_=
                        function(sexp)
                         {if(1 === sexp[0])
                           {var _aXy_=sexp[1];
                            if(_aXy_)
                             {var _aXz_=_aXy_[2];
                              if(_aXz_ && ! _aXz_[2])
                               {var
                                 v1=_aXz_[1],
                                 v0=_aXy_[1],
                                 v0$0=caml_call1(_$r_,v0),
                                 v1$0=caml_call1(of_a,v1);
                                return [0,v0$0,v1$0]}}}
                          return caml_call3
                                  (Sexplib0_Sexp_conv_error[2],tp_loc$35,2,sexp)},
                       _aXu_=caml_call1(_xv_[1][1],_aXt_),
                       fvalue$0=caml_call2(_LK_[1][10],_aXu_,field_sexp$1);
                      subcommands_field[1] = [0,fvalue$0]}
                  else
                   if(readme_field[1])
                    duplicates[1] = [0,_aXs_,duplicates[1]];
                   else
                    {var
                      field_sexp$2=field_sexp(0),
                      fvalue$1=caml_call1(_$r_,field_sexp$2);
                     readme_field[1] = [0,fvalue$1]}
                  var param=tail;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[10],tp_loc$35,_aXo_)}
        if(duplicates[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],tp_loc$35,duplicates[1],sexp);
        if(extra[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[13],tp_loc$35,extra[1],sexp);
        var
         _aXv_=summary_field[1],
         _aXx_=subcommands_field[1],
         _aXw_=readme_field[1];
        if(_aXv_ && _aXx_)
         {var subcommands_value=_aXx_[1],summary_value=_aXv_[1];
          return [0,summary_value,_aXw_,subcommands_value]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[15],
                 tp_loc$35,
                 sexp,
                 [0,
                  [0,0 === summary_field[1]?1:0,cst_summary$7],
                  [0,[0,0 === subcommands_field[1]?1:0,cst_subcommands$1],0]])}}
    function sexp_of_t$105(of_a,param)
     {var v_subcommands=param[3],v_readme=param[2],v_summary=param[1],bnds=0;
      function _aXm_(param)
       {var
         v1=param[2],
         v0=param[1],
         v0$0=caml_call1(_$s_,v0),
         v1$0=caml_call1(of_a,v1);
        return [1,[0,v0$0,[0,v1$0,0]]]}
      var
       _aXn_=caml_call1(_xv_[1][2],_aXm_),
       arg=caml_call2(_LK_[1][11],_aXn_,v_subcommands),
       bnds$0=[0,[1,[0,_akk_,[0,arg,0]]],bnds];
      if(v_readme)
       var
        v=v_readme[1],
        arg$0=caml_call1(_$s_,v),
        bnd=[1,[0,_akl_,[0,arg$0,0]]],
        bnds$1=[0,bnd,bnds$0];
      else
       var bnds$1=bnds$0;
      var
       arg$1=caml_call1(_$s_,v_summary),
       bnds$2=[0,[1,[0,_akm_,[0,arg$1,0]]],bnds$1];
      return [1,bnds$2]}
    var
     Expect_test_collector$7=
      caml_call1(Expect_test_collector[2],Expect_test_config);
    function _akn_(param)
     {var
       _aXi_=bin_shape_t$114(bin_shape_a),
       _aXj_=caml_call1(Bin_prot_Shape[21],_aXi_),
       _aXk_=caml_call1(Bin_prot_Shape[18][4],_aXj_);
      caml_call1(Stdlib[46],_aXk_);
      var
       _aXl_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_command_shape_ml$20),
         150,
         3975,
         3985,
         3991];
      return caml_call1(Expect_test_collector$7[1],_aXl_)}
    var
     _ako_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_command_shape_ml$21),
       150,
       3975,
       3992,
       4030],
     _akr_=
      [0,
       [0,
        _akq_,
        _akp_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_command_shape_ml$22),
         150,
         3975,
         3985,
         3991],
        _ako_],
       0],
     _aks_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_command_shape_ml$24),
       148,
       3907,
       3913,
       4031],
     _akt_=
      caml_call1
       (Expect_test_common_File[4][3],cst_f1755de6c27d9367cb640e60f8$3);
    caml_call9
     (Expect_test_collector$7[3],
      _akt_,
      _aks_,
      cst_src_command_shape_ml$23,
      0,
      0,
      _akr_,
      0,
      Inline_test_config,
      _akn_);
    function map$25(init,f)
     {var _aXe_=include$23[125][8];
      function _aXf_(_aXh_){return caml_call2(_aXe_,_aXh_,f)}
      var _aXg_=caml_call2(include$68[10],init[3],_aXf_);
      return [0,init[1],init[2],_aXg_]}
    var
     _aku_=caml_call1(Bin_prot_Shape[3][1],cst_a$97),
     _akv_=caml_call1(Bin_prot_Shape[4][1],cst_src_command_shape_ml_166_3),
     _akw_=[0,_Yt_,[0,caml_call2(Bin_prot_Shape[15],_akv_,_aku_),0]],
     _akx_=caml_call1(Bin_prot_Shape[7],_akw_),
     _aky_=[0,[0,cst_subcommands$2,caml_call1(_xv_[1][3],_akx_)],0],
     _akz_=
      [0,
       [0,cst_summary$8,_Yt_],
       [0,[0,cst_readme$5,caml_call1(_ZN_,_Yt_)],_aky_]],
     _akA_=caml_call1(Bin_prot_Shape[8],_akz_),
     _akB_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$98),0],
     _akC_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$234),_akB_,_akA_],0],
     _akD_=caml_call1(Bin_prot_Shape[4][1],cst_src_command_shape_ml_163_6),
     group$133=caml_call2(Bin_prot_Shape[6],_akD_,_akC_);
    function bin_shape_t$115(a)
     {var _aXd_=caml_call1(Bin_prot_Shape[2][1],cst_t$235);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$133,_aXd_),[0,a,0])}
    function t_of_sexp$97(of_a,sexp)
     {if(0 === sexp[0])
       return caml_call2(Sexplib0_Sexp_conv_error[16],tp_loc$36,sexp);
      var
       field_sexps=sexp[1],
       summary_field=[0,0],
       readme_field=[0,0],
       subcommands_field=[0,0],
       duplicates=[0,0],
       extra=[0,0],
       param=field_sexps;
      for(;;)
       {if(param)
         {var _aW3_=param[1];
          if(1 === _aW3_[0])
           {var _aW4_=_aW3_[1];
            if(_aW4_)
             {var _aW5_=_aW4_[1];
              if(0 === _aW5_[0])
               {var _aW6_=_aW4_[2],_aW7_=_aW5_[1],switch$0=0;
                if(! _aW6_ || ! _aW6_[2])switch$0 = 1;
                if(switch$0)
                 {var
                   tail=param[2],
                   field_sexp$3=
                    function(_aXc_)
                     {function field_sexp(param)
                       {if(_aXc_)
                         {if(_aXc_[2])throw [0,Assert_failure,_akE_];
                          var x=_aXc_[1];
                          return x}
                        return caml_call2
                                (Sexplib0_Sexp_conv_error[10],tp_loc$36,sexp)}
                      return field_sexp},
                   field_sexp=field_sexp$3(_aW6_);
                  if(caml_string_notequal(_aW7_,cst_readme$6))
                   if(caml_string_notequal(_aW7_,cst_subcommands$3))
                    if(caml_string_notequal(_aW7_,cst_summary$9))
                     {if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_aW7_,extra[1]]}
                    else
                     if(summary_field[1])
                      duplicates[1] = [0,_aW7_,duplicates[1]];
                     else
                      {var
                        field_sexp$0=field_sexp(0),
                        fvalue=caml_call1(_$r_,field_sexp$0);
                       summary_field[1] = [0,fvalue]}
                   else
                    if(subcommands_field[1])
                     duplicates[1] = [0,_aW7_,duplicates[1]];
                    else
                     {var
                       field_sexp$1=field_sexp(0),
                       _aW8_=
                        function(sexp)
                         {if(1 === sexp[0])
                           {var _aXa_=sexp[1];
                            if(_aXa_)
                             {var _aXb_=_aXa_[2];
                              if(_aXb_ && ! _aXb_[2])
                               {var
                                 v1=_aXb_[1],
                                 v0=_aXa_[1],
                                 v0$0=caml_call1(_$r_,v0),
                                 v1$0=caml_call1(of_a,v1);
                                return [0,v0$0,v1$0]}}}
                          return caml_call3
                                  (Sexplib0_Sexp_conv_error[2],tp_loc$36,2,sexp)},
                       fvalue$0=caml_call2(_xv_[1][1],_aW8_,field_sexp$1);
                      subcommands_field[1] = [0,fvalue$0]}
                  else
                   if(readme_field[1])
                    duplicates[1] = [0,_aW7_,duplicates[1]];
                   else
                    {var
                      field_sexp$2=field_sexp(0),
                      fvalue$1=caml_call1(_$r_,field_sexp$2);
                     readme_field[1] = [0,fvalue$1]}
                  var param=tail;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[10],tp_loc$36,_aW3_)}
        if(duplicates[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],tp_loc$36,duplicates[1],sexp);
        if(extra[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[13],tp_loc$36,extra[1],sexp);
        var
         _aW9_=summary_field[1],
         _aW$_=subcommands_field[1],
         _aW__=readme_field[1];
        if(_aW9_ && _aW$_)
         {var subcommands_value=_aW$_[1],summary_value=_aW9_[1];
          return [0,summary_value,_aW__,subcommands_value]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[15],
                 tp_loc$36,
                 sexp,
                 [0,
                  [0,0 === summary_field[1]?1:0,cst_summary$10],
                  [0,[0,0 === subcommands_field[1]?1:0,cst_subcommands$4],0]])}}
    function sexp_of_t$106(of_a,param)
     {var v_subcommands=param[3],v_readme=param[2],v_summary=param[1],bnds=0;
      function _aW2_(param)
       {var
         v1=param[2],
         v0=param[1],
         v0$0=caml_call1(_$s_,v0),
         v1$0=caml_call1(of_a,v1);
        return [1,[0,v0$0,[0,v1$0,0]]]}
      var
       arg=caml_call2(_xv_[1][2],_aW2_,v_subcommands),
       bnds$0=[0,[1,[0,_akF_,[0,arg,0]]],bnds];
      if(v_readme)
       var
        v=v_readme[1],
        arg$0=caml_call1(_$s_,v),
        bnd=[1,[0,_akG_,[0,arg$0,0]]],
        bnds$1=[0,bnd,bnds$0];
      else
       var bnds$1=bnds$0;
      var
       arg$1=caml_call1(_$s_,v_summary),
       bnds$2=[0,[1,[0,_akH_,[0,arg$1,0]]],bnds$1];
      return [1,bnds$2]}
    var
     Expect_test_collector$8=
      caml_call1(Expect_test_collector[2],Expect_test_config);
    function _akI_(param)
     {var
       _aWY_=bin_shape_t$115(bin_shape_a),
       _aWZ_=caml_call1(Bin_prot_Shape[21],_aWY_),
       _aW0_=caml_call1(Bin_prot_Shape[18][4],_aWZ_);
      caml_call1(Stdlib[46],_aW0_);
      var
       _aW1_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_command_shape_ml$25),
         172,
         4492,
         4502,
         4508];
      return caml_call1(Expect_test_collector$8[1],_aW1_)}
    var
     _akJ_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_command_shape_ml$26),
       172,
       4492,
       4509,
       4547],
     _akM_=
      [0,
       [0,
        _akL_,
        _akK_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_command_shape_ml$27),
         172,
         4492,
         4502,
         4508],
        _akJ_],
       0],
     _akN_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_command_shape_ml$29),
       170,
       4424,
       4430,
       4548],
     _akO_=
      caml_call1
       (Expect_test_common_File[4][3],cst_f1755de6c27d9367cb640e60f8$4);
    caml_call9
     (Expect_test_collector$8[3],
      _akO_,
      _akN_,
      cst_src_command_shape_ml$28,
      0,
      0,
      _akM_,
      0,
      Inline_test_config,
      _akI_);
    function map$26(init,f)
     {var _aWX_=caml_call2(include$23[125][8],init[3],f);
      return [0,init[1],init[2],_aWX_]}
    function to_latest(param)
     {var subcommands=param[3],readme=param[2],summary=param[1];
      return [0,summary,readme,caml_call1(include$68[19],subcommands)]}
    function of_latest(param)
     {var
       subcommands=param[3],
       readme=param[2],
       summary=param[1],
       _aWV_=caml_obj_tag(subcommands),
       _aWW_=
        250 === _aWV_
         ?subcommands[1]
         :246 === _aWV_
           ?caml_call1(CamlinternalLazy[2],subcommands)
           :subcommands;
      return [0,summary,readme,_aWW_]}
    function abs_path(dir,path)
     {return is_absolute(path)?path:concat$0(dir,path)}
    var
     _akP_=
      [0,
       [0,cst_working_dir,_Yt_],
       [0,
        [0,cst_path_to_exe,_Yt_],
        [0,[0,cst_child_subcommand,caml_call1(_ZU_,_Yt_)],0]]],
     _akQ_=
      [0,
       [0,cst_summary$11,_Yt_],
       [0,[0,cst_readme$7,caml_call1(_ZN_,_Yt_)],_akP_]],
     _akR_=caml_call1(Bin_prot_Shape[8],_akQ_),
     _akS_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$236),0,_akR_],0],
     _akT_=caml_call1(Bin_prot_Shape[4][1],cst_src_command_shape_ml_195_6),
     group$134=caml_call2(Bin_prot_Shape[6],_akT_,_akS_),
     _akU_=caml_call1(Bin_prot_Shape[2][1],cst_t$237),
     bin_shape_t$116=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$134,_akU_),0);
    function bin_size_t$80(param)
     {var
       v5=param[5],
       v4=param[4],
       v3=param[3],
       v2=param[2],
       v1=param[1],
       _aWQ_=caml_call1(_XB_,v1),
       size=caml_call2(Bin_prot_Common[23],0,_aWQ_),
       _aWR_=caml_call2(_XN_,_XB_,v2),
       size$0=caml_call2(Bin_prot_Common[23],size,_aWR_),
       _aWS_=caml_call1(_XB_,v3),
       size$1=caml_call2(Bin_prot_Common[23],size$0,_aWS_),
       _aWT_=caml_call1(_XB_,v4),
       size$2=caml_call2(Bin_prot_Common[23],size$1,_aWT_),
       _aWU_=caml_call2(_XQ_,_XB_,v5);
      return caml_call2(Bin_prot_Common[23],size$2,_aWU_)}
    function bin_write_t$81(buf,pos,param)
     {var
       v5=param[5],
       v4=param[4],
       v3=param[3],
       v2=param[2],
       v1=param[1],
       pos$0=caml_call3(_Yv_,buf,pos,v1),
       pos$1=caml_call3(caml_call1(_ZP_,_Yv_),buf,pos$0,v2),
       pos$2=caml_call3(_Yv_,buf,pos$1,v3),
       pos$3=caml_call3(_Yv_,buf,pos$2,v4);
      return caml_call3(caml_call1(_ZW_,_Yv_),buf,pos$3,v5)}
    var bin_writer_t$101=[0,bin_size_t$80,bin_write_t$81];
    function bin_read_t$160(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],
               cst_src_command_shape_ml_Stabl$4,
               pos_ref[1])}
    function bin_read_t$161(buf,pos_ref)
     {var
       v_summary=caml_call2(_Yx_,buf,pos_ref),
       v_readme=caml_call2(caml_call1(_ZR_,_Yx_),buf,pos_ref),
       v_working_dir=caml_call2(_Yx_,buf,pos_ref),
       v_path_to_exe=caml_call2(_Yx_,buf,pos_ref),
       v_child_subcommand=caml_call2(caml_call1(_ZY_,_Yx_),buf,pos_ref);
      return [0,
              v_summary,
              v_readme,
              v_working_dir,
              v_path_to_exe,
              v_child_subcommand]}
    var
     bin_reader_t$101=[0,bin_read_t$161,bin_read_t$160],
     bin_t$101=[0,bin_shape_t$116,bin_writer_t$101,bin_reader_t$101];
    function compare$88(a_053,b_054)
     {if(caml_call2(Ppx_compare_lib[1],a_053,b_054))return 0;
      var n=caml_call2(Ppx_compare_lib[4][8],a_053[1],b_054[1]);
      if(0 === n)
       {var
         _aWK_=b_054[2],
         _aWL_=a_053[2],
         _aWM_=
          function(a_055,b_056)
           {return caml_call2(Ppx_compare_lib[4][8],a_055,b_056)},
         n$0=caml_call3(Ppx_compare_lib[4][12],_aWM_,_aWL_,_aWK_);
        if(0 === n$0)
         {var n$1=caml_call2(Ppx_compare_lib[4][8],a_053[3],b_054[3]);
          if(0 === n$1)
           {var n$2=caml_call2(Ppx_compare_lib[4][8],a_053[4],b_054[4]);
            if(0 === n$2)
             {var
               _aWN_=b_054[5],
               _aWO_=a_053[5],
               _aWP_=
                function(a_057,b_058)
                 {return caml_call2(Ppx_compare_lib[4][8],a_057,b_058)};
              return caml_call3(Ppx_compare_lib[4][11],_aWP_,_aWO_,_aWN_)}
            return n$2}
          return n$1}
        return n$0}
      return n}
    function t_of_sexp$98(sexp)
     {if(0 === sexp[0])
       return caml_call2(Sexplib0_Sexp_conv_error[16],tp_loc$37,sexp);
      var
       field_sexps=sexp[1],
       summary_field=[0,0],
       readme_field=[0,0],
       working_dir_field=[0,0],
       path_to_exe_field=[0,0],
       child_subcommand_field=[0,0],
       duplicates=[0,0],
       extra=[0,0],
       param=field_sexps;
      for(;;)
       {if(param)
         {var _aWz_=param[1];
          if(1 === _aWz_[0])
           {var _aWA_=_aWz_[1];
            if(_aWA_)
             {var _aWB_=_aWA_[1];
              if(0 === _aWB_[0])
               {var _aWC_=_aWA_[2],_aWD_=_aWB_[1],switch$0=0;
                if(! _aWC_ || ! _aWC_[2])switch$0 = 1;
                if(switch$0)
                 {var
                   tail=param[2],
                   field_sexp$5=
                    function(_aWJ_)
                     {function field_sexp(param)
                       {if(_aWJ_)
                         {if(_aWJ_[2])throw [0,Assert_failure,_akV_];
                          var x=_aWJ_[1];
                          return x}
                        return caml_call2
                                (Sexplib0_Sexp_conv_error[10],tp_loc$37,sexp)}
                      return field_sexp},
                   field_sexp=field_sexp$5(_aWC_);
                  if(caml_string_notequal(_aWD_,cst_child_subcommand$0))
                   if(caml_string_notequal(_aWD_,cst_path_to_exe$0))
                    if(caml_string_notequal(_aWD_,cst_readme$8))
                     if(caml_string_notequal(_aWD_,cst_summary$12))
                      if(caml_string_notequal(_aWD_,cst_working_dir$0))
                       {if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_aWD_,extra[1]]}
                      else
                       if(working_dir_field[1])
                        duplicates[1] = [0,_aWD_,duplicates[1]];
                       else
                        {var
                          field_sexp$0=field_sexp(0),
                          fvalue=caml_call1(_$r_,field_sexp$0);
                         working_dir_field[1] = [0,fvalue]}
                     else
                      if(summary_field[1])
                       duplicates[1] = [0,_aWD_,duplicates[1]];
                      else
                       {var
                         field_sexp$1=field_sexp(0),
                         fvalue$0=caml_call1(_$r_,field_sexp$1);
                        summary_field[1] = [0,fvalue$0]}
                    else
                     if(readme_field[1])
                      duplicates[1] = [0,_aWD_,duplicates[1]];
                     else
                      {var
                        field_sexp$2=field_sexp(0),
                        fvalue$1=caml_call1(_$r_,field_sexp$2);
                       readme_field[1] = [0,fvalue$1]}
                   else
                    if(path_to_exe_field[1])
                     duplicates[1] = [0,_aWD_,duplicates[1]];
                    else
                     {var
                       field_sexp$3=field_sexp(0),
                       fvalue$2=caml_call1(_$r_,field_sexp$3);
                      path_to_exe_field[1] = [0,fvalue$2]}
                  else
                   if(child_subcommand_field[1])
                    duplicates[1] = [0,_aWD_,duplicates[1]];
                   else
                    {var
                      field_sexp$4=field_sexp(0),
                      fvalue$3=caml_call2(_$D_,_$r_,field_sexp$4);
                     child_subcommand_field[1] = [0,fvalue$3]}
                  var param=tail;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[10],tp_loc$37,_aWz_)}
        if(duplicates[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],tp_loc$37,duplicates[1],sexp);
        if(extra[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[13],tp_loc$37,extra[1],sexp);
        var
         _aWE_=summary_field[1],
         _aWG_=working_dir_field[1],
         _aWH_=path_to_exe_field[1],
         _aWI_=child_subcommand_field[1],
         _aWF_=readme_field[1];
        if(_aWE_ && _aWG_ && _aWH_ && _aWI_)
         {var
           child_subcommand_value=_aWI_[1],
           path_to_exe_value=_aWH_[1],
           working_dir_value=_aWG_[1],
           summary_value=_aWE_[1];
          return [0,
                  summary_value,
                  _aWF_,
                  working_dir_value,
                  path_to_exe_value,
                  child_subcommand_value]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[15],
                 tp_loc$37,
                 sexp,
                 [0,
                  [0,0 === summary_field[1]?1:0,cst_summary$13],
                  [0,
                   [0,0 === working_dir_field[1]?1:0,cst_working_dir$1],
                   [0,
                    [0,0 === path_to_exe_field[1]?1:0,cst_path_to_exe$1],
                    [0,
                     [0,
                      0 === child_subcommand_field[1]?1:0,
                      cst_child_subcommand$1],
                     0]]]])}}
    function sexp_of_t$107(param)
     {var
       v_child_subcommand=param[5],
       v_path_to_exe=param[4],
       v_working_dir=param[3],
       v_readme=param[2],
       v_summary=param[1],
       arg=caml_call2(_$E_,_$s_,v_child_subcommand),
       bnds=[0,[1,[0,_akW_,[0,arg,0]]],0],
       arg$0=caml_call1(_$s_,v_path_to_exe),
       bnds$0=[0,[1,[0,_akX_,[0,arg$0,0]]],bnds],
       arg$1=caml_call1(_$s_,v_working_dir),
       bnds$1=[0,[1,[0,_akY_,[0,arg$1,0]]],bnds$0];
      if(v_readme)
       var
        v=v_readme[1],
        arg$2=caml_call1(_$s_,v),
        bnd=[1,[0,_akZ_,[0,arg$2,0]]],
        bnds$2=[0,bnd,bnds$1];
      else
       var bnds$2=bnds$1;
      var
       arg$3=caml_call1(_$s_,v_summary),
       bnds$3=[0,[1,[0,_ak0_,[0,arg$3,0]]],bnds$2];
      return [1,bnds$3]}
    var
     Expect_test_collector$9=
      caml_call1(Expect_test_collector[2],Expect_test_config);
    function _ak1_(param)
     {var
       _aWw_=caml_call1(Bin_prot_Shape[21],bin_shape_t$116),
       _aWx_=caml_call1(Bin_prot_Shape[18][4],_aWw_);
      caml_call1(Stdlib[46],_aWx_);
      var
       _aWy_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_command_shape_ml$30),
         206,
         5444,
         5454,
         5460];
      return caml_call1(Expect_test_collector$9[1],_aWy_)}
    var
     _ak2_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_command_shape_ml$31),
       206,
       5444,
       5461,
       5499],
     _ak5_=
      [0,
       [0,
        _ak4_,
        _ak3_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_command_shape_ml$32),
         206,
         5444,
         5454,
         5460],
        _ak2_],
       0],
     _ak6_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_command_shape_ml$34),
       204,
       5378,
       5384,
       5500],
     _ak7_=
      caml_call1
       (Expect_test_common_File[4][3],cst_f1755de6c27d9367cb640e60f8$5);
    caml_call9
     (Expect_test_collector$9[3],
      _ak7_,
      _ak6_,
      cst_src_command_shape_ml$33,
      0,
      0,
      _ak5_,
      0,
      Inline_test_config,
      _ak1_);
    function to_latest$0(_aWv_){return _aWv_}
    function of_latest$0(_aWu_){return _aWu_}
    var
     _ak8_=
      [0,
       [0,cst_summary$14,_Yt_],
       [0,
        [0,cst_readme$9,caml_call1(_ZN_,_Yt_)],
        [0,[0,cst_working_dir$2,_Yt_],[0,[0,cst_path_to_exe$2,_Yt_],0]]]],
     _ak9_=caml_call1(Bin_prot_Shape[8],_ak8_),
     _ak__=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$238),0,_ak9_],0],
     _ak$_=caml_call1(Bin_prot_Shape[4][1],cst_src_command_shape_ml_216_6),
     group$135=caml_call2(Bin_prot_Shape[6],_ak$_,_ak__),
     _ala_=caml_call1(Bin_prot_Shape[2][1],cst_t$239),
     bin_shape_t$117=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$135,_ala_),0);
    function to_v3(t){return [0,t[1],t[2],t[3],t[4],0]}
    function of_v3(t)
     {var _aWt_=abs_path(t[3],t[4]);return [0,t[1],t[2],t[3],_aWt_]}
    var
     to_latest$1=caml_call2(_iq_,to_latest$0,to_v3),
     of_latest$1=caml_call2(_iq_,of_v3,of_latest$0),
     _alg_=
      [0,
       [0,cst_summary$17,_Yt_],
       [0,
        [0,cst_readme$11,caml_call1(_ZN_,_Yt_)],
        [0,[0,cst_path_to_exe$5,_Yt_],0]]],
     _alh_=caml_call1(Bin_prot_Shape[8],_alg_),
     _ali_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$240),0,_alh_],0],
     _alj_=caml_call1(Bin_prot_Shape[4][1],cst_src_command_shape_ml_246_6),
     group$136=caml_call2(Bin_prot_Shape[6],_alj_,_ali_),
     _alk_=caml_call1(Bin_prot_Shape[2][1],cst_t$241),
     bin_shape_t$118=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$136,_alk_),0);
    function to_v2(t){return [0,t[1],t[2],cst$204,t[3]]}
    function of_v2(t)
     {var _aWs_=abs_path(t[3],t[4]);return [0,t[1],t[2],_aWs_]}
    var
     to_latest$2=caml_call2(_iq_,to_latest$1,to_v2),
     of_latest$2=caml_call2(_iq_,of_v2,of_latest$1),
     _alp_=caml_call1(Bin_prot_Shape[2][1],cst_t$242),
     _alq_=
      [0,
       [0,
        cst_Exec,
        [0,
         bin_shape_t$116,
         [0,caml_call1(caml_call1(Bin_prot_Shape[13],_alp_),0),0]]],
       0],
     _alr_=caml_call1(Bin_prot_Shape[2][1],cst_t$243),
     _als_=
      [0,
       [0,cst_Basic,[0,bin_shape_t$112,0]],
       [0,
        [0,
         cst_Group,
         [0,
          bin_shape_t$114(caml_call1(caml_call1(Bin_prot_Shape[13],_alr_),0)),
          0]],
        _alq_]],
     _alt_=caml_call1(Bin_prot_Shape[9],_als_),
     _alu_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$244),0,_alt_],0],
     _alv_=caml_call1(Bin_prot_Shape[4][1],cst_src_command_shape_ml_276_6),
     group$137=caml_call2(Bin_prot_Shape[6],_alv_,_alu_),
     _alw_=caml_call1(Bin_prot_Shape[2][1],cst_t$245),
     bin_shape_t$119=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$137,_alw_),0);
    function bin_size_t$81(param)
     {switch(param[0])
       {case 0:
         var v1=param[1],_aWo_=bin_size_t$78(v1);
         return caml_call2(Bin_prot_Common[23],1,_aWo_);
        case 1:
         var v1$0=param[1],_aWp_=bin_size_t$79(bin_size_t$81,v1$0);
         return caml_call2(Bin_prot_Common[23],1,_aWp_);
        default:
         var
          v2=param[2],
          v1$1=param[1],
          _aWq_=bin_size_t$80(v1$1),
          size=caml_call2(Bin_prot_Common[23],1,_aWq_),
          _aWr_=bin_size_t$81(v2);
         return caml_call2(Bin_prot_Common[23],size,_aWr_)}}
    function bin_write_t$82(buf,pos,param)
     {var pos$0=pos,param$0=param;
      for(;;)
       switch(param$0[0])
        {case 0:
          var v1=param$0[1],pos$1=caml_call3(Bin_prot_Write[30],buf,pos$0,0);
          return bin_write_t$79(buf,pos$1,v1);
         case 1:
          var
           v1$0=param$0[1],
           pos$2=caml_call3(Bin_prot_Write[30],buf,pos$0,1);
          return bin_write_t$80(bin_write_t$82,buf,pos$2,v1$0);
         default:
          var
           v2=param$0[2],
           v1$1=param$0[1],
           pos$3=caml_call3(Bin_prot_Write[30],buf,pos$0,2),
           pos$4=bin_write_t$81(buf,pos$3,v1$1),
           pos$0=pos$4,
           param$0=v2;
          continue}}
    var bin_writer_t$102=[0,bin_size_t$81,bin_write_t$82];
    function bin_read_t$162(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],
               cst_src_command_shape_ml_Stabl$5,
               pos_ref[1])}
    function bin_read_t$163(buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[29],buf,pos_ref);
      if(2 < match >>> 0)
       return caml_call2(Bin_prot_Common[18],_alx_,pos_ref[1]);
      switch(match)
       {case 0:var arg_1=bin_read_t$157(buf,pos_ref);return [0,arg_1];
        case 1:
         var arg_1$1=bin_read_t$159(bin_read_t$163,buf,pos_ref);
         return [1,arg_1$1];
        default:
         var
          arg_1$0=bin_read_t$161(buf,pos_ref),
          arg_2=bin_read_t$163(buf,pos_ref);
         return [2,arg_1$0,arg_2]}}
    var
     bin_reader_t$102=[0,bin_read_t$163,bin_read_t$162],
     bin_t$102=[0,bin_shape_t$119,bin_writer_t$102,bin_reader_t$102];
    function compare$89(a_059,b_060)
     {var a_059$0=a_059,b_060$0=b_060;
      for(;;)
       {if(caml_call2(Ppx_compare_lib[1],a_059$0,b_060$0))return 0;
        switch(a_059$0[0])
         {case 0:
           var _aWk_=a_059$0[1];
           if(0 === b_060$0[0])
            {var b_062=b_060$0[1];return compare$86(_aWk_,b_062)}
           return -1;
          case 1:
           var _aWl_=a_059$0[1];
           switch(b_060$0[0])
            {case 0:break;
             case 1:
              var b_064=b_060$0[1];
              return compare$87
                      (function(a_065,b_066){return compare$89(a_065,b_066)},
                       _aWl_,
                       b_064);
             default:return -1}
           break;
          default:
           var _aWm_=a_059$0[2],_aWn_=a_059$0[1];
           switch(b_060$0[0])
            {case 0:break;
             case 1:return 1;
             default:
              var b_070=b_060$0[2],b_068=b_060$0[1],n=compare$88(_aWn_,b_068);
              if(0 === n){var a_059$0=_aWm_,b_060$0=b_070;continue}
              return n}}
        return 1}}
    var t_of_sexp$99=function _aWj_(_aWi_){return _aWj_.fun(_aWi_)};
    caml_update_dummy
     (t_of_sexp$99,
      function(sexp)
       {if(0 === sexp[0])
         {var _aWd_=sexp[1],switch$0=0;
          if(caml_string_notequal(_aWd_,cst_Basic$0))
           {var switch$1=0;
            if(caml_string_notequal(_aWd_,cst_Exec$0))
             {var switch$2=0;
              if(caml_string_notequal(_aWd_,cst_Group$0))
               if(caml_string_notequal(_aWd_,cst_basic))
                if(caml_string_notequal(_aWd_,cst_exec))
                 {if(caml_string_notequal(_aWd_,cst_group))
                   {switch$0 = 1;switch$1 = 1;switch$2 = 1}}
                else
                 switch$2 = 1;
               else
                {switch$1 = 1;switch$2 = 1}
              if(! switch$2)
               return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$40,sexp)}
            if(! switch$1)
             return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$40,sexp)}
          if(! switch$0)
           return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$40,sexp)}
        else
         {var _aWe_=sexp[1];
          if(! _aWe_)
           return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$40,sexp);
          var _aWf_=_aWe_[1];
          if(0 !== _aWf_[0])
           return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$40,sexp);
          var _aWg_=_aWf_[1],switch$3=0;
          if(caml_string_notequal(_aWg_,cst_Basic$1))
           {var switch$4=0;
            if(caml_string_notequal(_aWg_,cst_Exec$1))
             {var switch$5=0;
              if(caml_string_notequal(_aWg_,cst_Group$1))
               if(caml_string_notequal(_aWg_,cst_basic$0))
                if(caml_string_notequal(_aWg_,cst_exec$0))
                 {if(caml_string_notequal(_aWg_,cst_group$0))
                   {switch$3 = 1;switch$4 = 1;switch$5 = 1}}
                else
                 switch$5 = 1;
               else
                {switch$4 = 1;switch$5 = 1}
              if(! switch$5)
               {var sexp_args=_aWe_[2];
                if(sexp_args && ! sexp_args[2])
                 {var v0=sexp_args[1],v0$0=t_of_sexp$96(t_of_sexp$99,v0);
                  return [1,v0$0]}
                return caml_call3
                        (Sexplib0_Sexp_conv_error[4],tp_loc$40,_aWg_,sexp)}}
            if(! switch$4)
             {var sexp_args$0=_aWe_[2];
              if(sexp_args$0)
               {var _aWh_=sexp_args$0[2];
                if(_aWh_ && ! _aWh_[2])
                 {var
                   v1=_aWh_[1],
                   v0$1=sexp_args$0[1],
                   v0$2=t_of_sexp$98(v0$1),
                   v1$0=caml_call1(t_of_sexp$99,v1);
                  return [2,v0$2,v1$0]}}
              return caml_call3
                      (Sexplib0_Sexp_conv_error[4],tp_loc$40,_aWg_,sexp)}}
          if(! switch$3)
           {var sexp_args$1=_aWe_[2];
            if(sexp_args$1 && ! sexp_args$1[2])
             {var v0$3=sexp_args$1[1],v0$4=t_of_sexp$95(v0$3);return [0,v0$4]}
            return caml_call3
                    (Sexplib0_Sexp_conv_error[4],tp_loc$40,_aWg_,sexp)}}
        return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$40,sexp)});
    function sexp_of_t$108(param)
     {switch(param[0])
       {case 0:
         var v0=param[1],v0$0=sexp_of_t$104(v0);
         return [1,[0,_aly_,[0,v0$0,0]]];
        case 1:
         var v0$1=param[1],v0$2=sexp_of_t$105(sexp_of_t$108,v0$1);
         return [1,[0,_alz_,[0,v0$2,0]]];
        default:
         var
          v1=param[2],
          v0$3=param[1],
          v0$4=sexp_of_t$107(v0$3),
          v1$0=sexp_of_t$108(v1);
         return [1,[0,_alA_,[0,v0$4,[0,v1$0,0]]]]}}
    var
     Expect_test_collector$10=
      caml_call1(Expect_test_collector[2],Expect_test_config);
    function _alB_(param)
     {var
       _aWa_=caml_call1(Bin_prot_Shape[21],bin_shape_t$119),
       _aWb_=caml_call1(Bin_prot_Shape[18][4],_aWa_);
      caml_call1(Stdlib[46],_aWb_);
      var
       _aWc_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_command_shape_ml$35),
         284,
         7343,
         7353,
         7359];
      return caml_call1(Expect_test_collector$10[1],_aWc_)}
    var
     _alC_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_command_shape_ml$36),
       284,
       7343,
       7360,
       7398],
     _alF_=
      [0,
       [0,
        _alE_,
        _alD_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_command_shape_ml$37),
         284,
         7343,
         7353,
         7359],
        _alC_],
       0],
     _alG_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_command_shape_ml$39),
       282,
       7277,
       7283,
       7399],
     _alH_=
      caml_call1
       (Expect_test_common_File[4][3],cst_f1755de6c27d9367cb640e60f8$6);
    caml_call9
     (Expect_test_collector$10[3],
      _alH_,
      _alG_,
      cst_src_command_shape_ml$38,
      0,
      0,
      _alF_,
      0,
      Inline_test_config,
      _alB_);
    var
     _alI_=caml_call1(Bin_prot_Shape[2][1],cst_t$246),
     _alJ_=caml_call1(caml_call1(Bin_prot_Shape[13],_alI_),0),
     _alK_=
      [0,
       [0,cst_Exec$2,[0,bin_shape_t$116,0]],
       [0,[0,cst_Lazy,[0,caml_call1(_LK_[1][1],_alJ_),0]],0]],
     _alL_=caml_call1(Bin_prot_Shape[2][1],cst_t$247),
     _alM_=
      [0,
       [0,cst_Base$0,[0,bin_shape_t$112,0]],
       [0,
        [0,
         cst_Group$2,
         [0,
          bin_shape_t$114(caml_call1(caml_call1(Bin_prot_Shape[13],_alL_),0)),
          0]],
        _alK_]],
     _alN_=caml_call1(Bin_prot_Shape[9],_alM_),
     _alO_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$248),0,_alN_],0],
     _alP_=caml_call1(Bin_prot_Shape[4][1],cst_src_command_shape_ml_293_6),
     group$138=caml_call2(Bin_prot_Shape[6],_alP_,_alO_),
     _alQ_=caml_call1(Bin_prot_Shape[2][1],cst_t$249),
     bin_shape_t$120=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$138,_alQ_),0),
     t_of_sexp$100=function _aV$_(_aV__){return _aV$_.fun(_aV__)};
    caml_update_dummy
     (t_of_sexp$100,
      function(sexp)
       {if(0 === sexp[0])
         {var _aV6_=sexp[1],switch$0=0;
          if(caml_string_notequal(_aV6_,cst_Base$1))
           {var switch$1=0;
            if(caml_string_notequal(_aV6_,cst_Exec$3))
             {var switch$2=0;
              if(caml_string_notequal(_aV6_,cst_Group$3))
               {var switch$3=0;
                if(caml_string_notequal(_aV6_,cst_Lazy$0))
                 if(caml_string_notequal(_aV6_,cst_base))
                  if(caml_string_notequal(_aV6_,cst_exec$1))
                   if(caml_string_notequal(_aV6_,cst_group$1))
                    {if(caml_string_notequal(_aV6_,cst_lazy))
                      {switch$0 = 1;switch$1 = 1;switch$2 = 1;switch$3 = 1}}
                   else
                    switch$3 = 1;
                  else
                   {switch$2 = 1;switch$3 = 1}
                 else
                  {switch$1 = 1;switch$2 = 1;switch$3 = 1}
                if(! switch$3)
                 return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$41,sexp)}
              if(! switch$2)
               return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$41,sexp)}
            if(! switch$1)
             return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$41,sexp)}
          if(! switch$0)
           return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$41,sexp)}
        else
         {var _aV7_=sexp[1];
          if(! _aV7_)
           return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$41,sexp);
          var _aV8_=_aV7_[1];
          if(0 !== _aV8_[0])
           return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$41,sexp);
          var _aV9_=_aV8_[1],switch$4=0;
          if(caml_string_notequal(_aV9_,cst_Base$2))
           {var switch$5=0;
            if(caml_string_notequal(_aV9_,cst_Exec$4))
             {var switch$6=0;
              if(caml_string_notequal(_aV9_,cst_Group$4))
               {var switch$7=0;
                if(caml_string_notequal(_aV9_,cst_Lazy$1))
                 if(caml_string_notequal(_aV9_,cst_base$0))
                  if(caml_string_notequal(_aV9_,cst_exec$2))
                   if(caml_string_notequal(_aV9_,cst_group$2))
                    {if(caml_string_notequal(_aV9_,cst_lazy$0))
                      {switch$4 = 1;switch$5 = 1;switch$6 = 1;switch$7 = 1}}
                   else
                    switch$7 = 1;
                  else
                   {switch$6 = 1;switch$7 = 1}
                 else
                  {switch$5 = 1;switch$6 = 1;switch$7 = 1}
                if(! switch$7)
                 {var sexp_args=_aV7_[2];
                  if(sexp_args && ! sexp_args[2])
                   {var
                     v0=sexp_args[1],
                     v0$0=caml_call2(_LK_[1][10],t_of_sexp$100,v0);
                    return [3,v0$0]}
                  return caml_call3
                          (Sexplib0_Sexp_conv_error[4],tp_loc$41,_aV9_,sexp)}}
              if(! switch$6)
               {var sexp_args$0=_aV7_[2];
                if(sexp_args$0 && ! sexp_args$0[2])
                 {var
                   v0$1=sexp_args$0[1],
                   v0$2=t_of_sexp$96(t_of_sexp$100,v0$1);
                  return [1,v0$2]}
                return caml_call3
                        (Sexplib0_Sexp_conv_error[4],tp_loc$41,_aV9_,sexp)}}
            if(! switch$5)
             {var sexp_args$1=_aV7_[2];
              if(sexp_args$1 && ! sexp_args$1[2])
               {var v0$3=sexp_args$1[1],v0$4=t_of_sexp$98(v0$3);
                return [2,v0$4]}
              return caml_call3
                      (Sexplib0_Sexp_conv_error[4],tp_loc$41,_aV9_,sexp)}}
          if(! switch$4)
           {var sexp_args$2=_aV7_[2];
            if(sexp_args$2 && ! sexp_args$2[2])
             {var v0$5=sexp_args$2[1],v0$6=t_of_sexp$95(v0$5);return [0,v0$6]}
            return caml_call3
                    (Sexplib0_Sexp_conv_error[4],tp_loc$41,_aV9_,sexp)}}
        return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$41,sexp)});
    function sexp_of_t$109(param)
     {switch(param[0])
       {case 0:
         var v0=param[1],v0$0=sexp_of_t$104(v0);
         return [1,[0,_alR_,[0,v0$0,0]]];
        case 1:
         var v0$1=param[1],v0$2=sexp_of_t$105(sexp_of_t$109,v0$1);
         return [1,[0,_alS_,[0,v0$2,0]]];
        case 2:
         var v0$3=param[1],v0$4=sexp_of_t$107(v0$3);
         return [1,[0,_alT_,[0,v0$4,0]]];
        default:
         var v0$5=param[1],v0$6=caml_call2(_LK_[1][11],sexp_of_t$109,v0$5);
         return [1,[0,_alU_,[0,v0$6,0]]]}}
    var
     Expect_test_collector$11=
      caml_call1(Expect_test_collector[2],Expect_test_config);
    function _alV_(param)
     {var
       _aV3_=caml_call1(Bin_prot_Shape[21],bin_shape_t$120),
       _aV4_=caml_call1(Bin_prot_Shape[18][4],_aV3_);
      caml_call1(Stdlib[46],_aV4_);
      var
       _aV5_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_command_shape_ml$40),
         302,
         7754,
         7764,
         7770];
      return caml_call1(Expect_test_collector$11[1],_aV5_)}
    var
     _alW_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_command_shape_ml$41),
       302,
       7754,
       7771,
       7809],
     _alZ_=
      [0,
       [0,
        _alY_,
        _alX_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_command_shape_ml$42),
         302,
         7754,
         7764,
         7770],
        _alW_],
       0],
     _al0_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_command_shape_ml$44),
       300,
       7688,
       7694,
       7810],
     _al1_=
      caml_call1
       (Expect_test_common_File[4][3],cst_f1755de6c27d9367cb640e60f8$7);
    caml_call9
     (Expect_test_collector$11[3],
      _al1_,
      _al0_,
      cst_src_command_shape_ml$43,
      0,
      0,
      _alZ_,
      0,
      Inline_test_config,
      _alV_);
    var
     _al2_=caml_call1(Bin_prot_Shape[2][1],cst_t$250),
     _al3_=
      [0,
       [0,cst_Base$3,[0,bin_shape_t$112,0]],
       [0,
        [0,
         cst_Group$5,
         [0,
          bin_shape_t$115(caml_call1(caml_call1(Bin_prot_Shape[13],_al2_),0)),
          0]],
        [0,[0,cst_Exec$5,[0,bin_shape_t$117,0]],0]]],
     _al4_=caml_call1(Bin_prot_Shape[9],_al3_),
     _al5_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$251),0,_al4_],0],
     _al6_=caml_call1(Bin_prot_Shape[4][1],cst_src_command_shape_ml_312_6),
     group$139=caml_call2(Bin_prot_Shape[6],_al6_,_al5_),
     _al7_=caml_call1(Bin_prot_Shape[2][1],cst_t$252),
     bin_shape_t$121=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$139,_al7_),0),
     t_of_sexp$101=function _aV2_(_aV1_){return _aV2_.fun(_aV1_)};
    caml_update_dummy
     (t_of_sexp$101,
      function(sexp)
       {if(0 === sexp[0])
         {var _aVW_=sexp[1],switch$0=0;
          if(caml_string_notequal(_aVW_,cst_Base$4))
           {var switch$1=0;
            if(caml_string_notequal(_aVW_,cst_Exec$6))
             {var switch$2=0;
              if(caml_string_notequal(_aVW_,cst_Group$6))
               if(caml_string_notequal(_aVW_,cst_base$1))
                if(caml_string_notequal(_aVW_,cst_exec$3))
                 {if(caml_string_notequal(_aVW_,cst_group$3))
                   {switch$0 = 1;switch$1 = 1;switch$2 = 1}}
                else
                 switch$2 = 1;
               else
                {switch$1 = 1;switch$2 = 1}
              if(! switch$2)
               return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$42,sexp)}
            if(! switch$1)
             return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$42,sexp)}
          if(! switch$0)
           return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$42,sexp)}
        else
         {var _aVX_=sexp[1];
          if(! _aVX_)
           return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$42,sexp);
          var _aVY_=_aVX_[1];
          if(0 !== _aVY_[0])
           return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$42,sexp);
          var _aVZ_=_aVY_[1],switch$3=0;
          if(caml_string_notequal(_aVZ_,cst_Base$5))
           {var switch$4=0;
            if(caml_string_notequal(_aVZ_,cst_Exec$7))
             {var switch$5=0;
              if(caml_string_notequal(_aVZ_,cst_Group$7))
               if(caml_string_notequal(_aVZ_,cst_base$2))
                if(caml_string_notequal(_aVZ_,cst_exec$4))
                 {if(caml_string_notequal(_aVZ_,cst_group$4))
                   {switch$3 = 1;switch$4 = 1;switch$5 = 1}}
                else
                 switch$5 = 1;
               else
                {switch$4 = 1;switch$5 = 1}
              if(! switch$5)
               {var sexp_args=_aVX_[2];
                if(sexp_args && ! sexp_args[2])
                 {var v0=sexp_args[1],v0$0=t_of_sexp$97(t_of_sexp$101,v0);
                  return [1,v0$0]}
                return caml_call3
                        (Sexplib0_Sexp_conv_error[4],tp_loc$42,_aVZ_,sexp)}}
            if(! switch$4)
             {var sexp_args$0=_aVX_[2];
              if(sexp_args$0 && ! sexp_args$0[2])
               {var v0$1=sexp_args$0[1];
                if(0 === v0$1[0])
                 var
                  v0$2=
                   caml_call2(Sexplib0_Sexp_conv_error[16],tp_loc$38,v0$1);
                else
                 {var
                   field_sexps=v0$1[1],
                   summary_field=[0,0],
                   readme_field=[0,0],
                   working_dir_field=[0,0],
                   path_to_exe_field=[0,0],
                   duplicates=[0,0],
                   extra=[0,0],
                   param=field_sexps;
                  for(;;)
                   {if(param)
                     {var _aVN_=param[1];
                      if(1 === _aVN_[0])
                       {var _aVO_=_aVN_[1];
                        if(_aVO_)
                         {var _aVP_=_aVO_[1];
                          if(0 === _aVP_[0])
                           {var _aVQ_=_aVO_[2],_aVR_=_aVP_[1],switch$6=0;
                            if(! _aVQ_ || ! _aVQ_[2])switch$6 = 1;
                            if(switch$6)
                             {var
                               tail=param[2],
                               field_sexp$4=
                                function(_aV0_)
                                 {function field_sexp(param)
                                   {if(_aV0_)
                                     {if(_aV0_[2])throw [0,Assert_failure,_alb_];
                                      var x=_aV0_[1];
                                      return x}
                                    return caml_call2
                                            (Sexplib0_Sexp_conv_error[10],tp_loc$38,v0$1)}
                                  return field_sexp},
                               field_sexp=field_sexp$4(_aVQ_);
                              if(caml_string_notequal(_aVR_,cst_path_to_exe$3))
                               if(caml_string_notequal(_aVR_,cst_readme$10))
                                if(caml_string_notequal(_aVR_,cst_summary$15))
                                 if(caml_string_notequal(_aVR_,cst_working_dir$3))
                                  {if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_aVR_,extra[1]]}
                                 else
                                  if(working_dir_field[1])
                                   duplicates[1] = [0,_aVR_,duplicates[1]];
                                  else
                                   {var
                                     field_sexp$0=field_sexp(0),
                                     fvalue=caml_call1(_$r_,field_sexp$0);
                                    working_dir_field[1] = [0,fvalue]}
                                else
                                 if(summary_field[1])
                                  duplicates[1] = [0,_aVR_,duplicates[1]];
                                 else
                                  {var
                                    field_sexp$1=field_sexp(0),
                                    fvalue$0=caml_call1(_$r_,field_sexp$1);
                                   summary_field[1] = [0,fvalue$0]}
                               else
                                if(readme_field[1])
                                 duplicates[1] = [0,_aVR_,duplicates[1]];
                                else
                                 {var
                                   field_sexp$2=field_sexp(0),
                                   fvalue$1=caml_call1(_$r_,field_sexp$2);
                                  readme_field[1] = [0,fvalue$1]}
                              else
                               if(path_to_exe_field[1])
                                duplicates[1] = [0,_aVR_,duplicates[1]];
                               else
                                {var
                                  field_sexp$3=field_sexp(0),
                                  fvalue$2=caml_call1(_$r_,field_sexp$3);
                                 path_to_exe_field[1] = [0,fvalue$2]}
                              var param=tail;
                              continue}}}}
                      caml_call2(Sexplib0_Sexp_conv_error[10],tp_loc$38,_aVN_)}
                    if(duplicates[1])
                     var
                      v0$2=
                       caml_call3
                        (Sexplib0_Sexp_conv_error[12],tp_loc$38,duplicates[1],v0$1);
                    else
                     if(extra[1])
                      var
                       v0$2=
                        caml_call3
                         (Sexplib0_Sexp_conv_error[13],tp_loc$38,extra[1],v0$1);
                     else
                      {var
                        _aVS_=summary_field[1],
                        _aVU_=working_dir_field[1],
                        _aVV_=path_to_exe_field[1],
                        switch$7=0,
                        _aVT_=readme_field[1];
                       if(_aVS_ && _aVU_ && _aVV_)
                        var
                         path_to_exe_value=_aVV_[1],
                         working_dir_value=_aVU_[1],
                         summary_value=_aVS_[1],
                         v0$2=
                          [0,summary_value,_aVT_,working_dir_value,path_to_exe_value];
                       else
                        switch$7 = 1;
                       if(switch$7)
                        var
                         v0$2=
                          caml_call3
                           (Sexplib0_Sexp_conv_error[15],
                            tp_loc$38,
                            v0$1,
                            [0,
                             [0,0 === summary_field[1]?1:0,cst_summary$16],
                             [0,
                              [0,0 === working_dir_field[1]?1:0,cst_working_dir$4],
                              [0,[0,0 === path_to_exe_field[1]?1:0,cst_path_to_exe$4],0]]])}
                    break}}
                return [2,v0$2]}
              return caml_call3
                      (Sexplib0_Sexp_conv_error[4],tp_loc$42,_aVZ_,sexp)}}
          if(! switch$3)
           {var sexp_args$1=_aVX_[2];
            if(sexp_args$1 && ! sexp_args$1[2])
             {var v0$3=sexp_args$1[1],v0$4=t_of_sexp$95(v0$3);return [0,v0$4]}
            return caml_call3
                    (Sexplib0_Sexp_conv_error[4],tp_loc$42,_aVZ_,sexp)}}
        return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$42,sexp)});
    function sexp_of_t$110(param)
     {switch(param[0])
       {case 0:
         var v0$0=param[1],v0$1=sexp_of_t$104(v0$0);
         return [1,[0,_al8_,[0,v0$1,0]]];
        case 1:
         var v0$2=param[1],v0$3=sexp_of_t$106(sexp_of_t$110,v0$2);
         return [1,[0,_al9_,[0,v0$3,0]]];
        default:
         var
          v0$4=param[1],
          v_path_to_exe=v0$4[4],
          v_working_dir=v0$4[3],
          v_readme=v0$4[2],
          v_summary=v0$4[1],
          arg=caml_call1(_$s_,v_path_to_exe),
          bnds=[0,[1,[0,_alc_,[0,arg,0]]],0],
          arg$0=caml_call1(_$s_,v_working_dir),
          bnds$0=[0,[1,[0,_ald_,[0,arg$0,0]]],bnds];
         if(v_readme)
          var
           v=v_readme[1],
           arg$1=caml_call1(_$s_,v),
           bnd=[1,[0,_ale_,[0,arg$1,0]]],
           bnds$1=[0,bnd,bnds$0];
         else
          var bnds$1=bnds$0;
         var
          arg$2=caml_call1(_$s_,v_summary),
          bnds$2=[0,[1,[0,_alf_,[0,arg$2,0]]],bnds$1],
          v0=[1,bnds$2];
         return [1,[0,_al__,[0,v0,0]]]}}
    var
     Expect_test_collector$12=
      caml_call1(Expect_test_collector[2],Expect_test_config);
    function _al$_(param)
     {var
       _aVK_=caml_call1(Bin_prot_Shape[21],bin_shape_t$121),
       _aVL_=caml_call1(Bin_prot_Shape[18][4],_aVK_);
      caml_call1(Stdlib[46],_aVL_);
      var
       _aVM_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_command_shape_ml$45),
         320,
         8152,
         8162,
         8168];
      return caml_call1(Expect_test_collector$12[1],_aVM_)}
    var
     _ama_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_command_shape_ml$46),
       320,
       8152,
       8169,
       8207],
     _amd_=
      [0,
       [0,
        _amc_,
        _amb_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_command_shape_ml$47),
         320,
         8152,
         8162,
         8168],
        _ama_],
       0],
     _ame_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_command_shape_ml$49),
       318,
       8086,
       8092,
       8208],
     _amf_=
      caml_call1
       (Expect_test_common_File[4][3],cst_f1755de6c27d9367cb640e60f8$8);
    caml_call9
     (Expect_test_collector$12[3],
      _amf_,
      _ame_,
      cst_src_command_shape_ml$48,
      0,
      0,
      _amd_,
      0,
      Inline_test_config,
      _al$_);
    function to_latest$3(param)
     {switch(param[0])
       {case 0:var b=param[1];return [0,b];
        case 1:var g=param[1];return [1,to_latest(map$26(g,to_latest$3))];
        default:var e=param[1];return [2,caml_call1(to_latest$1,e)]}}
    function of_latest$3(param)
     {var param$0=param;
      for(;;)
       switch(param$0[0])
        {case 0:var b=param$0[1];return [0,b];
         case 1:var g=param$0[1];return [1,map$26(of_latest(g),of_latest$3)];
         case 2:var e=param$0[1];return [2,caml_call1(of_latest$1,e)];
         default:
          var
           thunk=param$0[1],
           _aVJ_=caml_obj_tag(thunk),
           param$1=
            250 === _aVJ_
             ?thunk[1]
             :246 === _aVJ_?caml_call1(CamlinternalLazy[2],thunk):thunk,
           param$0=param$1;
          continue}}
    var
     _amg_=caml_call1(Bin_prot_Shape[2][1],cst_t$253),
     _amh_=
      [0,
       [0,cst_Base$6,[0,bin_shape_t$113,0]],
       [0,
        [0,
         cst_Group$8,
         [0,
          bin_shape_t$115(caml_call1(caml_call1(Bin_prot_Shape[13],_amg_),0)),
          0]],
        [0,[0,cst_Exec$8,[0,bin_shape_t$118,0]],0]]],
     _ami_=caml_call1(Bin_prot_Shape[9],_amh_),
     _amj_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$254),0,_ami_],0],
     _amk_=caml_call1(Bin_prot_Shape[4][1],cst_src_command_shape_ml_338_6),
     group$140=caml_call2(Bin_prot_Shape[6],_amk_,_amj_),
     _aml_=caml_call1(Bin_prot_Shape[2][1],cst_t$255),
     bin_shape_t$122=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$140,_aml_),0),
     t_of_sexp$102=function _aVI_(_aVH_){return _aVI_.fun(_aVH_)};
    caml_update_dummy
     (t_of_sexp$102,
      function(sexp)
       {if(0 === sexp[0])
         {var _aVB_=sexp[1],switch$0=0;
          if(caml_string_notequal(_aVB_,cst_Base$7))
           {var switch$1=0;
            if(caml_string_notequal(_aVB_,cst_Exec$9))
             {var switch$2=0;
              if(caml_string_notequal(_aVB_,cst_Group$9))
               if(caml_string_notequal(_aVB_,cst_base$3))
                if(caml_string_notequal(_aVB_,cst_exec$5))
                 {if(caml_string_notequal(_aVB_,cst_group$5))
                   {switch$0 = 1;switch$1 = 1;switch$2 = 1}}
                else
                 switch$2 = 1;
               else
                {switch$1 = 1;switch$2 = 1}
              if(! switch$2)
               return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$43,sexp)}
            if(! switch$1)
             return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$43,sexp)}
          if(! switch$0)
           return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$43,sexp)}
        else
         {var _aVC_=sexp[1];
          if(! _aVC_)
           return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$43,sexp);
          var _aVD_=_aVC_[1];
          if(0 !== _aVD_[0])
           return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$43,sexp);
          var _aVE_=_aVD_[1],switch$3=0;
          if(caml_string_notequal(_aVE_,cst_Base$8))
           {var switch$4=0;
            if(caml_string_notequal(_aVE_,cst_Exec$10))
             {var switch$5=0;
              if(caml_string_notequal(_aVE_,cst_Group$10))
               if(caml_string_notequal(_aVE_,cst_base$4))
                if(caml_string_notequal(_aVE_,cst_exec$6))
                 {if(caml_string_notequal(_aVE_,cst_group$6))
                   {switch$3 = 1;switch$4 = 1;switch$5 = 1}}
                else
                 switch$5 = 1;
               else
                {switch$4 = 1;switch$5 = 1}
              if(! switch$5)
               {var sexp_args=_aVC_[2];
                if(sexp_args && ! sexp_args[2])
                 {var v0=sexp_args[1],v0$0=t_of_sexp$97(t_of_sexp$102,v0);
                  return [1,v0$0]}
                return caml_call3
                        (Sexplib0_Sexp_conv_error[4],tp_loc$43,_aVE_,sexp)}}
            if(! switch$4)
             {var sexp_args$0=_aVC_[2];
              if(sexp_args$0 && ! sexp_args$0[2])
               {var v0$1=sexp_args$0[1];
                if(0 === v0$1[0])
                 var
                  v0$2=
                   caml_call2(Sexplib0_Sexp_conv_error[16],tp_loc$39,v0$1);
                else
                 {var
                   field_sexps$0=v0$1[1],
                   summary_field$0=[0,0],
                   readme_field$0=[0,0],
                   path_to_exe_field=[0,0],
                   duplicates$0=[0,0],
                   extra$0=[0,0],
                   param$0=field_sexps$0;
                  for(;;)
                   {if(param$0)
                     {var _aVt_=param$0[1];
                      if(1 === _aVt_[0])
                       {var _aVu_=_aVt_[1];
                        if(_aVu_)
                         {var _aVv_=_aVu_[1];
                          if(0 === _aVv_[0])
                           {var _aVw_=_aVu_[2],_aVx_=_aVv_[1],switch$6=0;
                            if(! _aVw_ || ! _aVw_[2])switch$6 = 1;
                            if(switch$6)
                             {var
                               tail$0=param$0[2],
                               field_sexp$8=
                                function(_aVG_)
                                 {function field_sexp(param)
                                   {if(_aVG_)
                                     {if(_aVG_[2])throw [0,Assert_failure,_all_];
                                      var x=_aVG_[1];
                                      return x}
                                    return caml_call2
                                            (Sexplib0_Sexp_conv_error[10],tp_loc$39,v0$1)}
                                  return field_sexp},
                               field_sexp$4=field_sexp$8(_aVw_);
                              if(caml_string_notequal(_aVx_,cst_path_to_exe$6))
                               if(caml_string_notequal(_aVx_,cst_readme$12))
                                if(caml_string_notequal(_aVx_,cst_summary$18))
                                 {if(Sexplib0_Sexp_conv[26][1])
                                   extra$0[1] = [0,_aVx_,extra$0[1]]}
                                else
                                 if(summary_field$0[1])
                                  duplicates$0[1] = [0,_aVx_,duplicates$0[1]];
                                 else
                                  {var
                                    field_sexp$5=field_sexp$4(0),
                                    fvalue$3=caml_call1(_$r_,field_sexp$5);
                                   summary_field$0[1] = [0,fvalue$3]}
                               else
                                if(readme_field$0[1])
                                 duplicates$0[1] = [0,_aVx_,duplicates$0[1]];
                                else
                                 {var
                                   field_sexp$6=field_sexp$4(0),
                                   fvalue$4=caml_call1(_$r_,field_sexp$6);
                                  readme_field$0[1] = [0,fvalue$4]}
                              else
                               if(path_to_exe_field[1])
                                duplicates$0[1] = [0,_aVx_,duplicates$0[1]];
                               else
                                {var
                                  field_sexp$7=field_sexp$4(0),
                                  fvalue$5=caml_call1(_$r_,field_sexp$7);
                                 path_to_exe_field[1] = [0,fvalue$5]}
                              var param$0=tail$0;
                              continue}}}}
                      caml_call2(Sexplib0_Sexp_conv_error[10],tp_loc$39,_aVt_)}
                    if(duplicates$0[1])
                     var
                      v0$2=
                       caml_call3
                        (Sexplib0_Sexp_conv_error[12],
                         tp_loc$39,
                         duplicates$0[1],
                         v0$1);
                    else
                     if(extra$0[1])
                      var
                       v0$2=
                        caml_call3
                         (Sexplib0_Sexp_conv_error[13],tp_loc$39,extra$0[1],v0$1);
                     else
                      {var
                        _aVy_=summary_field$0[1],
                        _aVA_=path_to_exe_field[1],
                        switch$7=0,
                        _aVz_=readme_field$0[1];
                       if(_aVy_ && _aVA_)
                        var
                         path_to_exe_value=_aVA_[1],
                         summary_value$0=_aVy_[1],
                         v0$2=[0,summary_value$0,_aVz_,path_to_exe_value];
                       else
                        switch$7 = 1;
                       if(switch$7)
                        var
                         v0$2=
                          caml_call3
                           (Sexplib0_Sexp_conv_error[15],
                            tp_loc$39,
                            v0$1,
                            [0,
                             [0,0 === summary_field$0[1]?1:0,cst_summary$19],
                             [0,[0,0 === path_to_exe_field[1]?1:0,cst_path_to_exe$7],0]])}
                    break}}
                return [2,v0$2]}
              return caml_call3
                      (Sexplib0_Sexp_conv_error[4],tp_loc$43,_aVE_,sexp)}}
          if(! switch$3)
           {var sexp_args$1=_aVC_[2];
            if(sexp_args$1 && ! sexp_args$1[2])
             {var v0$3=sexp_args$1[1];
              if(0 === v0$3[0])
               var
                v0$4=
                 caml_call2(Sexplib0_Sexp_conv_error[16],tp_loc$34,v0$3);
              else
               {var
                 field_sexps=v0$3[1],
                 summary_field=[0,0],
                 readme_field=[0,0],
                 usage_field=[0,0],
                 flags_field=[0,0],
                 duplicates=[0,0],
                 extra=[0,0],
                 param=field_sexps;
                for(;;)
                 {if(param)
                   {var _aVk_=param[1];
                    if(1 === _aVk_[0])
                     {var _aVl_=_aVk_[1];
                      if(_aVl_)
                       {var _aVm_=_aVl_[1];
                        if(0 === _aVm_[0])
                         {var _aVn_=_aVl_[2],_aVo_=_aVm_[1],switch$8=0;
                          if(! _aVn_ || ! _aVn_[2])switch$8 = 1;
                          if(switch$8)
                           {var
                             tail=param[2],
                             field_sexp$9=
                              function(_aVF_)
                               {function field_sexp(param)
                                 {if(_aVF_)
                                   {if(_aVF_[2])throw [0,Assert_failure,_aj0_];
                                    var x=_aVF_[1];
                                    return x}
                                  return caml_call2
                                          (Sexplib0_Sexp_conv_error[10],tp_loc$34,v0$3)}
                                return field_sexp},
                             field_sexp=field_sexp$9(_aVn_);
                            if(caml_string_notequal(_aVo_,cst_flags$3))
                             if(caml_string_notequal(_aVo_,cst_readme$2))
                              if(caml_string_notequal(_aVo_,cst_summary$3))
                               if(caml_string_notequal(_aVo_,cst_usage$2))
                                {if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_aVo_,extra[1]]}
                               else
                                if(usage_field[1])
                                 duplicates[1] = [0,_aVo_,duplicates[1]];
                                else
                                 {var
                                   field_sexp$0=field_sexp(0),
                                   fvalue=caml_call1(_$r_,field_sexp$0);
                                  usage_field[1] = [0,fvalue]}
                              else
                               if(summary_field[1])
                                duplicates[1] = [0,_aVo_,duplicates[1]];
                               else
                                {var
                                  field_sexp$1=field_sexp(0),
                                  fvalue$0=caml_call1(_$r_,field_sexp$1);
                                 summary_field[1] = [0,fvalue$0]}
                             else
                              if(readme_field[1])
                               duplicates[1] = [0,_aVo_,duplicates[1]];
                              else
                               {var
                                 field_sexp$2=field_sexp(0),
                                 fvalue$1=caml_call1(_$r_,field_sexp$2);
                                readme_field[1] = [0,fvalue$1]}
                            else
                             if(flags_field[1])
                              duplicates[1] = [0,_aVo_,duplicates[1]];
                             else
                              {var
                                field_sexp$3=field_sexp(0),
                                fvalue$2=caml_call2(_$D_,t_of_sexp$94,field_sexp$3);
                               flags_field[1] = [0,fvalue$2]}
                            var param=tail;
                            continue}}}}
                    caml_call2(Sexplib0_Sexp_conv_error[10],tp_loc$34,_aVk_)}
                  if(duplicates[1])
                   var
                    v0$4=
                     caml_call3
                      (Sexplib0_Sexp_conv_error[12],tp_loc$34,duplicates[1],v0$3);
                  else
                   if(extra[1])
                    var
                     v0$4=
                      caml_call3
                       (Sexplib0_Sexp_conv_error[13],tp_loc$34,extra[1],v0$3);
                   else
                    {var
                      _aVp_=summary_field[1],
                      _aVr_=usage_field[1],
                      _aVs_=flags_field[1],
                      switch$9=0,
                      _aVq_=readme_field[1];
                     if(_aVp_ && _aVr_ && _aVs_)
                      var
                       flags_value=_aVs_[1],
                       usage_value=_aVr_[1],
                       summary_value=_aVp_[1],
                       v0$4=[0,summary_value,_aVq_,usage_value,flags_value];
                     else
                      switch$9 = 1;
                     if(switch$9)
                      var
                       v0$4=
                        caml_call3
                         (Sexplib0_Sexp_conv_error[15],
                          tp_loc$34,
                          v0$3,
                          [0,
                           [0,0 === summary_field[1]?1:0,cst_summary$4],
                           [0,
                            [0,0 === usage_field[1]?1:0,cst_usage$3],
                            [0,[0,0 === flags_field[1]?1:0,cst_flags$4],0]]])}
                  break}}
              return [0,v0$4]}
            return caml_call3
                    (Sexplib0_Sexp_conv_error[4],tp_loc$43,_aVE_,sexp)}}
        return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$43,sexp)});
    function sexp_of_t$111(param)
     {switch(param[0])
       {case 0:
         var
          v0$1=param[1],
          v_flags=v0$1[4],
          v_usage=v0$1[3],
          v_readme=v0$1[2],
          v_summary=v0$1[1],
          arg=caml_call2(_$E_,sexp_of_t$103,v_flags),
          bnds=[0,[1,[0,_aj1_,[0,arg,0]]],0],
          arg$0=caml_call1(_$s_,v_usage),
          bnds$0=[0,[1,[0,_aj2_,[0,arg$0,0]]],bnds];
         if(v_readme)
          var
           v=v_readme[1],
           arg$1=caml_call1(_$s_,v),
           bnd=[1,[0,_aj3_,[0,arg$1,0]]],
           bnds$1=[0,bnd,bnds$0];
         else
          var bnds$1=bnds$0;
         var
          arg$2=caml_call1(_$s_,v_summary),
          bnds$2=[0,[1,[0,_aj4_,[0,arg$2,0]]],bnds$1],
          v0=[1,bnds$2];
         return [1,[0,_amm_,[0,v0,0]]];
        case 1:
         var v0$2=param[1],v0$3=sexp_of_t$106(sexp_of_t$111,v0$2);
         return [1,[0,_amn_,[0,v0$3,0]]];
        default:
         var
          v0$4=param[1],
          v_path_to_exe=v0$4[3],
          v_readme$0=v0$4[2],
          v_summary$0=v0$4[1],
          arg$3=caml_call1(_$s_,v_path_to_exe),
          bnds$3=[0,[1,[0,_alm_,[0,arg$3,0]]],0];
         if(v_readme$0)
          var
           v$0=v_readme$0[1],
           arg$4=caml_call1(_$s_,v$0),
           bnd$0=[1,[0,_aln_,[0,arg$4,0]]],
           bnds$4=[0,bnd$0,bnds$3];
         else
          var bnds$4=bnds$3;
         var
          arg$5=caml_call1(_$s_,v_summary$0),
          bnds$5=[0,[1,[0,_alo_,[0,arg$5,0]]],bnds$4],
          v0$0=[1,bnds$5];
         return [1,[0,_amo_,[0,v0$0,0]]]}}
    var
     Expect_test_collector$13=
      caml_call1(Expect_test_collector[2],Expect_test_config);
    function _amp_(param)
     {var
       _aVh_=caml_call1(Bin_prot_Shape[21],bin_shape_t$122),
       _aVi_=caml_call1(Bin_prot_Shape[18][4],_aVh_);
      caml_call1(Stdlib[46],_aVi_);
      var
       _aVj_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_command_shape_ml$50),
         346,
         8982,
         8992,
         8998];
      return caml_call1(Expect_test_collector$13[1],_aVj_)}
    var
     _amq_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_command_shape_ml$51),
       346,
       8982,
       8999,
       9037],
     _amt_=
      [0,
       [0,
        _ams_,
        _amr_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_command_shape_ml$52),
         346,
         8982,
         8992,
         8998],
        _amq_],
       0],
     _amu_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_command_shape_ml$54),
       344,
       8916,
       8922,
       9038],
     _amv_=
      caml_call1
       (Expect_test_common_File[4][3],cst_f1755de6c27d9367cb640e60f8$9);
    caml_call9
     (Expect_test_collector$13[3],
      _amv_,
      _amu_,
      cst_src_command_shape_ml$53,
      0,
      0,
      _amt_,
      0,
      Inline_test_config,
      _amp_);
    function to_latest$4(param)
     {switch(param[0])
       {case 0:
         var b=param[1],flags=b[4],usage=b[3],readme=b[2],summary=b[1];
         return [0,[0,summary,readme,[0,usage],flags]];
        case 1:var g=param[1];return [1,to_latest(map$26(g,to_latest$4))];
        default:var e=param[1];return [2,caml_call1(to_latest$2,e)]}}
    function of_latest$4(param)
     {var param$0=param;
      for(;;)
       switch(param$0[0])
        {case 0:
          var b=param$0[1],flags=b[4],anons=b[3],readme=b[2],summary=b[1];
          if(0 === anons[0])
           var usage$0=anons[1],usage$1=usage$0;
          else
           var grammar=anons[1],usage$1=usage(grammar);
          return [0,[0,summary,readme,usage$1,flags]];
         case 1:var g=param$0[1];return [1,map$26(of_latest(g),of_latest$4)];
         case 2:var e=param$0[1];return [2,caml_call1(of_latest$2,e)];
         default:
          var
           thunk=param$0[1],
           _aVg_=caml_obj_tag(thunk),
           param$1=
            250 === _aVg_
             ?thunk[1]
             :246 === _aVg_?caml_call1(CamlinternalLazy[2],thunk):thunk,
           param$0=param$1;
          continue}}
    var
     _amw_=
      caml_call1
       (Bin_prot_Shape[9],
        [0,
         [0,cst_V1,[0,bin_shape_t$122,0]],
         [0,
          [0,cst_V2,[0,bin_shape_t$121,0]],
          [0,[0,cst_V3,[0,bin_shape_t$120,0]],0]]]),
     _amx_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$256),0,_amw_],0],
     _amy_=caml_call1(Bin_prot_Shape[4][1],cst_src_command_shape_ml_364_6),
     group$141=caml_call2(Bin_prot_Shape[6],_amy_,_amx_),
     _amz_=caml_call1(Bin_prot_Shape[2][1],cst_t$257),
     bin_shape_t$123=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$141,_amz_),0);
    function t_of_sexp$103(sexp)
     {if(0 === sexp[0])
       {var _aVc_=sexp[1],switch$0=0;
        if(caml_string_notequal(_aVc_,cst_V1$0))
         {var switch$1=0;
          if(caml_string_notequal(_aVc_,cst_V2$0))
           {var switch$2=0;
            if(caml_string_notequal(_aVc_,cst_V3$0))
             if(caml_string_notequal(_aVc_,cst_v1))
              if(caml_string_notequal(_aVc_,cst_v2))
               {if(caml_string_notequal(_aVc_,cst_v3))
                 {switch$0 = 1;switch$1 = 1;switch$2 = 1}}
              else
               switch$2 = 1;
             else
              {switch$1 = 1;switch$2 = 1}
            if(! switch$2)
             return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$44,sexp)}
          if(! switch$1)
           return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$44,sexp)}
        if(! switch$0)
         return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$44,sexp)}
      else
       {var _aVd_=sexp[1];
        if(! _aVd_)
         return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$44,sexp);
        var _aVe_=_aVd_[1];
        if(0 !== _aVe_[0])
         return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$44,sexp);
        var _aVf_=_aVe_[1],switch$3=0;
        if(caml_string_notequal(_aVf_,cst_V1$1))
         {var switch$4=0;
          if(caml_string_notequal(_aVf_,cst_V2$1))
           {var switch$5=0;
            if(caml_string_notequal(_aVf_,cst_V3$1))
             if(caml_string_notequal(_aVf_,cst_v1$0))
              if(caml_string_notequal(_aVf_,cst_v2$0))
               {if(caml_string_notequal(_aVf_,cst_v3$0))
                 {switch$3 = 1;switch$4 = 1;switch$5 = 1}}
              else
               switch$5 = 1;
             else
              {switch$4 = 1;switch$5 = 1}
            if(! switch$5)
             {var sexp_args=_aVd_[2];
              if(sexp_args && ! sexp_args[2])
               {var v0=sexp_args[1],v0$0=caml_call1(t_of_sexp$100,v0);
                return [2,v0$0]}
              return caml_call3
                      (Sexplib0_Sexp_conv_error[4],tp_loc$44,_aVf_,sexp)}}
          if(! switch$4)
           {var sexp_args$0=_aVd_[2];
            if(sexp_args$0 && ! sexp_args$0[2])
             {var v0$1=sexp_args$0[1],v0$2=caml_call1(t_of_sexp$101,v0$1);
              return [1,v0$2]}
            return caml_call3
                    (Sexplib0_Sexp_conv_error[4],tp_loc$44,_aVf_,sexp)}}
        if(! switch$3)
         {var sexp_args$1=_aVd_[2];
          if(sexp_args$1 && ! sexp_args$1[2])
           {var v0$3=sexp_args$1[1],v0$4=caml_call1(t_of_sexp$102,v0$3);
            return [0,v0$4]}
          return caml_call3(Sexplib0_Sexp_conv_error[4],tp_loc$44,_aVf_,sexp)}}
      return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$44,sexp)}
    function sexp_of_t$112(param)
     {switch(param[0])
       {case 0:
         var v0=param[1],v0$0=sexp_of_t$111(v0);
         return [1,[0,_amA_,[0,v0$0,0]]];
        case 1:
         var v0$1=param[1],v0$2=sexp_of_t$110(v0$1);
         return [1,[0,_amB_,[0,v0$2,0]]];
        default:
         var v0$3=param[1],v0$4=sexp_of_t$109(v0$3);
         return [1,[0,_amC_,[0,v0$4,0]]]}}
    function v1(v0){return [0,v0]}
    function v2(v0){return [1,v0]}
    function v3(v0){return [2,v0]}
    var v1$0=[0,cst_V1$2,0,v1],v2$0=[0,cst_V2$2,1,v2],v3$0=[0,cst_V3$2,2,v3];
    function fold$15(init,v1_fun,v2_fun,v3_fun)
     {return caml_call2
              (v3_fun,
               caml_call2(v2_fun,caml_call2(v1_fun,init,v1$0),v2$0),
               v3$0)}
    var
     Expect_test_collector$14=
      caml_call1(Expect_test_collector[2],Expect_test_config);
    function _amD_(param)
     {var
       _aU$_=caml_call1(Bin_prot_Shape[21],bin_shape_t$123),
       _aVa_=caml_call1(Bin_prot_Shape[18][4],_aU$_);
      caml_call1(Stdlib[46],_aVa_);
      var
       _aVb_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_command_shape_ml$55),
         374,
         10011,
         10021,
         10027];
      return caml_call1(Expect_test_collector$14[1],_aVb_)}
    var
     _amE_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_command_shape_ml$56),
       374,
       10011,
       10028,
       10066],
     _amH_=
      [0,
       [0,
        _amG_,
        _amF_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_command_shape_ml$57),
         374,
         10011,
         10021,
         10027],
        _amE_],
       0],
     _amI_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_command_shape_ml$59),
       372,
       9945,
       9951,
       10067],
     _amJ_=
      caml_call1
       (Expect_test_common_File[4][3],cst_f1755de6c27d9367cb640e60f8$10);
    caml_call9
     (Expect_test_collector$14[3],
      _amJ_,
      _amI_,
      cst_src_command_shape_ml$58,
      0,
      0,
      _amH_,
      0,
      Inline_test_config,
      _amD_);
    function of_versioned(param)
     {switch(param[0])
       {case 0:var t=param[1];return to_latest$4(t);
        case 1:var t$0=param[1];return to_latest$3(t$0);
        default:var t$1=param[1];return t$1}}
    var
     _amL_=caml_call1(Bin_prot_Shape[2][1],cst_t$258),
     _amM_=
      [0,
       [0,
        cst_Concat$2,
        [0,
         bin_shape_list(caml_call1(caml_call1(Bin_prot_Shape[13],_amL_),0)),
         0]],
       [0,[0,cst_Ad_hoc$2,[0,bin_shape_string,0]],0]],
     _amN_=caml_call1(Bin_prot_Shape[2][1],cst_t$259),
     _amO_=
      [0,
       [0,
        cst_Maybe$2,
        [0,caml_call1(caml_call1(Bin_prot_Shape[13],_amN_),0),0]],
       _amM_],
     _amP_=caml_call1(Bin_prot_Shape[2][1],cst_t$260),
     _amR_=
      [0,
       _amQ_,
       [0,
        [0,cst_One$2,[0,bin_shape_string,0]],
        [0,
         [0,
          cst_Many$2,
          [0,caml_call1(caml_call1(Bin_prot_Shape[13],_amP_),0),0]],
         _amO_]]],
     _amS_=caml_call1(Bin_prot_Shape[9],_amR_),
     _amT_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$261),0,_amS_],0],
     _amU_=caml_call1(Bin_prot_Shape[4][1],cst_src_command_shape_ml_404_4),
     group$142=caml_call2(Bin_prot_Shape[6],_amU_,_amT_),
     _amV_=caml_call1(Bin_prot_Shape[2][1],cst_t$262),
     bin_shape_t$124=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$142,_amV_),0);
    function bin_size_t$82(param)
     {if(typeof param === "number")
       return 1;
      else
       switch(param[0])
        {case 0:
          var v1=param[1],_aU6_=caml_call1(bin_size_t$48,v1);
          return caml_call2(Bin_prot_Common[23],1,_aU6_);
         case 1:
          var v1$0=param[1],_aU7_=bin_size_t$82(v1$0);
          return caml_call2(Bin_prot_Common[23],1,_aU7_);
         case 2:
          var v1$1=param[1],_aU8_=bin_size_t$82(v1$1);
          return caml_call2(Bin_prot_Common[23],1,_aU8_);
         case 3:
          var v1$2=param[1],_aU9_=bin_size_list(bin_size_t$82,v1$2);
          return caml_call2(Bin_prot_Common[23],1,_aU9_);
         default:
          var v1$3=param[1],_aU__=caml_call1(bin_size_t$48,v1$3);
          return caml_call2(Bin_prot_Common[23],1,_aU__)}}
    function bin_write_t$83(buf,pos,param)
     {var pos$0=pos,param$0=param;
      for(;;)
       if(typeof param$0 === "number")
        return caml_call3(Bin_prot_Write[30],buf,pos$0,0);
       else
        switch(param$0[0])
         {case 0:
           var v1=param$0[1],pos$1=caml_call3(Bin_prot_Write[30],buf,pos$0,1);
           return caml_call3(bin_write_t$48,buf,pos$1,v1);
          case 1:
           var
            v1$0=param$0[1],
            pos$2=caml_call3(Bin_prot_Write[30],buf,pos$0,2),
            pos$0=pos$2,
            param$0=v1$0;
           continue;
          case 2:
           var
            v1$1=param$0[1],
            pos$3=caml_call3(Bin_prot_Write[30],buf,pos$0,3),
            pos$0=pos$3,
            param$0=v1$1;
           continue;
          case 3:
           var
            v1$2=param$0[1],
            pos$4=caml_call3(Bin_prot_Write[30],buf,pos$0,4);
           return bin_write_list(bin_write_t$83,buf,pos$4,v1$2);
          default:
           var
            v1$3=param$0[1],
            pos$5=caml_call3(Bin_prot_Write[30],buf,pos$0,5);
           return caml_call3(bin_write_t$48,buf,pos$5,v1$3)}}
    function bin_read_t$164(buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[29],buf,pos_ref);
      if(5 < match >>> 0)
       return caml_call2(Bin_prot_Common[18],_amW_,pos_ref[1]);
      switch(match)
       {case 0:return 0;
        case 1:
         var arg_1=caml_call2(bin_read_t$98,buf,pos_ref);return [0,arg_1];
        case 2:var arg_1$0=bin_read_t$164(buf,pos_ref);return [1,arg_1$0];
        case 3:var arg_1$1=bin_read_t$164(buf,pos_ref);return [2,arg_1$1];
        case 4:
         var arg_1$3=bin_read_list$0(bin_read_t$164,buf,pos_ref);
         return [3,arg_1$3];
        default:
         var arg_1$2=caml_call2(bin_read_t$98,buf,pos_ref);return [4,arg_1$2]}}
    function compare$90(a_071,b_072)
     {var a_071$0=a_071,b_072$0=b_072;
      for(;;)
       {if(caml_call2(Ppx_compare_lib[1],a_071$0,b_072$0))return 0;
        var switch$0=0;
        if(typeof a_071$0 === "number")
         return typeof b_072$0 === "number"?0:-1;
        else
         switch(a_071$0[0])
          {case 0:
            var _aU1_=a_071$0[1];
            if(typeof b_072$0 !== "number")
             {if(0 === b_072$0[0])
               {var b_074=b_072$0[1];
                return caml_call2(compare$37,_aU1_,b_074)}
              return -1}
            break;
           case 1:
            var _aU2_=a_071$0[1];
            if(typeof b_072$0 !== "number")
             switch(b_072$0[0])
              {case 0:switch$0 = 1;break;
               case 1:
                var b_072$1=b_072$0[1],a_071$0=_aU2_,b_072$0=b_072$1;continue;
               default:return -1}
            break;
           case 2:
            var _aU3_=a_071$0[1];
            if(typeof b_072$0 !== "number")
             switch(b_072$0[0])
              {case 0:switch$0 = 1;break;
               case 1:switch$0 = 2;break;
               case 2:
                var b_072$2=b_072$0[1],a_071$0=_aU3_,b_072$0=b_072$2;continue;
               default:return -1}
            break;
           case 3:
            var _aU4_=a_071$0[1];
            if(typeof b_072$0 !== "number")
             switch(b_072$0[0])
              {case 0:switch$0 = 1;break;
               case 1:switch$0 = 2;break;
               case 2:switch$0 = 3;break;
               case 3:
                var b_080=b_072$0[1];
                return compare_list
                        (function(a_081,b_082){return compare$90(a_081,b_082)},
                         _aU4_,
                         b_080);
               default:return -1}
            break;
           default:
            var _aU5_=a_071$0[1];
            if(typeof b_072$0 !== "number")
             switch(b_072$0[0])
              {case 0:switch$0 = 1;break;
               case 1:switch$0 = 2;break;
               case 2:switch$0 = 3;break;
               case 3:return 1;
               default:
                var b_084=b_072$0[1];return caml_call2(compare$37,_aU5_,b_084)}}
        switch(switch$0)
         {case 0:return 1;case 1:return 1;case 2:return 1;default:return 1}}}
    var t_of_sexp$104=function _aU0_(_aUZ_){return _aU0_.fun(_aUZ_)};
    caml_update_dummy
     (t_of_sexp$104,
      function(sexp)
       {if(0 === sexp[0])
         {var
           _aUT_=sexp[1],
           _aUU_=caml_string_compare(_aUT_,cst_ad_hoc$1),
           switch$0=0;
          if(0 <= _aUU_)
           if(0 < _aUU_)
            if(caml_string_notequal(_aUT_,cst_concat$1))
             if(caml_string_notequal(_aUT_,cst_many$1))
              if(caml_string_notequal(_aUT_,cst_maybe$1))
               if(caml_string_notequal(_aUT_,cst_one$1))
                {if(! caml_string_notequal(_aUT_,cst_zero$3))switch$0 = 1}
               else
                switch$0 = 2;
              else
               switch$0 = 4;
             else
              switch$0 = 3;
            else
             switch$0 = 5;
           else
            switch$0 = 6;
          else
           if(caml_string_notequal(_aUT_,cst_Ad_hoc$3))
            if(caml_string_notequal(_aUT_,cst_Concat$3))
             if(caml_string_notequal(_aUT_,cst_Many$3))
              if(caml_string_notequal(_aUT_,cst_Maybe$3))
               if(caml_string_notequal(_aUT_,cst_One$3))
                {if(! caml_string_notequal(_aUT_,cst_Zero$4))switch$0 = 1}
               else
                switch$0 = 2;
              else
               switch$0 = 4;
             else
              switch$0 = 3;
            else
             switch$0 = 5;
           else
            switch$0 = 6;
          switch(switch$0)
           {case 1:return 0;
            case 2:
             return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$45,sexp);
            case 3:
             return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$45,sexp);
            case 4:
             return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$45,sexp);
            case 5:
             return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$45,sexp);
            case 6:
             return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$45,sexp)
            }}
        else
         {var _aUV_=sexp[1];
          if(! _aUV_)
           return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$45,sexp);
          var _aUW_=_aUV_[1];
          if(0 !== _aUW_[0])
           return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$45,sexp);
          var
           _aUX_=_aUW_[1],
           _aUY_=caml_string_compare(_aUX_,cst_ad_hoc$2),
           switch$1=0;
          if(0 <= _aUY_)
           if(0 < _aUY_)
            if(caml_string_notequal(_aUX_,cst_concat$2))
             if(caml_string_notequal(_aUX_,cst_many$2))
              if(caml_string_notequal(_aUX_,cst_maybe$2))
               if(caml_string_notequal(_aUX_,cst_one$2))
                {if(! caml_string_notequal(_aUX_,cst_zero$4))switch$1 = 6}
               else
                switch$1 = 1;
              else
               switch$1 = 3;
             else
              switch$1 = 2;
            else
             switch$1 = 4;
           else
            switch$1 = 5;
          else
           if(caml_string_notequal(_aUX_,cst_Ad_hoc$4))
            if(caml_string_notequal(_aUX_,cst_Concat$4))
             if(caml_string_notequal(_aUX_,cst_Many$4))
              if(caml_string_notequal(_aUX_,cst_Maybe$4))
               if(caml_string_notequal(_aUX_,cst_One$4))
                {if(! caml_string_notequal(_aUX_,cst_Zero$5))switch$1 = 6}
               else
                switch$1 = 1;
              else
               switch$1 = 3;
             else
              switch$1 = 2;
            else
             switch$1 = 4;
           else
            switch$1 = 5;
          switch(switch$1)
           {case 1:
             var sexp_args=_aUV_[2];
             if(sexp_args && ! sexp_args[2])
              {var v0=sexp_args[1],v0$0=caml_call1(t_of_sexp$35,v0);
               return [0,v0$0]}
             return caml_call3
                     (Sexplib0_Sexp_conv_error[4],tp_loc$45,_aUX_,sexp);
            case 2:
             var sexp_args$1=_aUV_[2];
             if(sexp_args$1 && ! sexp_args$1[2])
              {var v0$3=sexp_args$1[1],v0$4=caml_call1(t_of_sexp$104,v0$3);
               return [1,v0$4]}
             return caml_call3
                     (Sexplib0_Sexp_conv_error[4],tp_loc$45,_aUX_,sexp);
            case 3:
             var sexp_args$0=_aUV_[2];
             if(sexp_args$0 && ! sexp_args$0[2])
              {var v0$1=sexp_args$0[1],v0$2=caml_call1(t_of_sexp$104,v0$1);
               return [2,v0$2]}
             return caml_call3
                     (Sexplib0_Sexp_conv_error[4],tp_loc$45,_aUX_,sexp);
            case 4:
             var sexp_args$2=_aUV_[2];
             if(sexp_args$2 && ! sexp_args$2[2])
              {var
                v0$5=sexp_args$2[1],
                v0$6=caml_call2(t_of_sexp$18,t_of_sexp$104,v0$5);
               return [3,v0$6]}
             return caml_call3
                     (Sexplib0_Sexp_conv_error[4],tp_loc$45,_aUX_,sexp);
            case 5:
             var sexp_args$3=_aUV_[2];
             if(sexp_args$3 && ! sexp_args$3[2])
              {var v0$7=sexp_args$3[1],v0$8=caml_call1(t_of_sexp$35,v0$7);
               return [4,v0$8]}
             return caml_call3
                     (Sexplib0_Sexp_conv_error[4],tp_loc$45,_aUX_,sexp);
            case 6:
             return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$45,sexp)
            }}
        return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$45,sexp)});
    function sexp_of_t$113(param)
     {if(typeof param === "number")
       return _amX_;
      else
       switch(param[0])
        {case 0:
          var v0=param[1],v0$0=caml_call1(sexp_of_t$43,v0);
          return [1,[0,_amY_,[0,v0$0,0]]];
         case 1:
          var v0$1=param[1],v0$2=sexp_of_t$113(v0$1);
          return [1,[0,_amZ_,[0,v0$2,0]]];
         case 2:
          var v0$3=param[1],v0$4=sexp_of_t$113(v0$3);
          return [1,[0,_am0_,[0,v0$4,0]]];
         case 3:
          var v0$5=param[1],v0$6=caml_call2(sexp_of_t$17,sexp_of_t$113,v0$5);
          return [1,[0,_am1_,[0,v0$6,0]]];
         default:
          var v0$7=param[1],v0$8=caml_call1(sexp_of_t$43,v0$7);
          return [1,[0,_am2_,[0,v0$8,0]]]}}
    var
     _am3_=
      caml_call1
       (Bin_prot_Shape[9],
        [0,
         [0,cst_Usage$2,[0,bin_shape_string,0]],
         [0,[0,cst_Grammar$2,[0,bin_shape_t$124,0]],0]]),
     _am4_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$263),0,_am3_],0],
     _am5_=caml_call1(Bin_prot_Shape[4][1],cst_src_command_shape_ml_417_2),
     group$143=caml_call2(Bin_prot_Shape[6],_am5_,_am4_),
     _am6_=caml_call1(Bin_prot_Shape[2][1],cst_t$264),
     bin_shape_t$125=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$143,_am6_),0);
    function compare$91(a_085,match)
     {if(caml_call2(Ppx_compare_lib[1],a_085,match))return 0;
      if(0 === a_085[0])
       {var _aUR_=a_085[1];
        if(0 === match[0])
         {var b_088=match[1];return caml_call2(compare$37,_aUR_,b_088)}
        return -1}
      var _aUS_=a_085[1];
      if(0 === match[0])return 1;
      var b_090=match[1];
      return compare$90(_aUS_,b_090)}
    function sexp_of_t$114(param)
     {if(0 === param[0])
       {var v0=param[1],v0$0=caml_call1(sexp_of_t$43,v0);
        return [1,[0,_am8_,[0,v0$0,0]]]}
      var v0$1=param[1],v0$2=sexp_of_t$113(v0$1);
      return [1,[0,_am9_,[0,v0$2,0]]]}
    function compare$92(a_091,b_092)
     {if(caml_call2(Ppx_compare_lib[1],a_091,b_092))return 0;
      var n=caml_call2(compare$34,a_091[1],b_092[1]);
      return 0 === n?caml_call2(compare$34,a_091[2],b_092[2]):n}
    function loop(acc,enumerate_097,enumerate_098)
     {var
       acc$0=acc,
       enumerate_097$0=enumerate_097,
       enumerate_098$0=enumerate_098;
      for(;;)
       {if(enumerate_098$0)
         {if(enumerate_097$0)
           {var
             enumerate_096=enumerate_098$0[1],
             enumerate_097$1=enumerate_097$0[2],
             enumerate_095=enumerate_097$0[1],
             acc$1=[0,[0,enumerate_095,enumerate_096],acc$0],
             acc$0=acc$1,
             enumerate_097$0=enumerate_097$1;
            continue}
          var
           enumerate_098$1=enumerate_098$0[2],
           enumerate_097$0=enumerate_093,
           enumerate_098$0=enumerate_098$1;
          continue}
        return caml_call1(Stdlib_list[9],acc$0)}}
    var all$5=loop(0,enumerate_093,enumerate_094);
    function at_most_once(r){return r[2]}
    function at_least_once(r){return r[1]}
    function _am__(r,v){return [0,r[1],v]}
    var
     _am$_=0,
     at_most_once$0=
      [0,function(param){return 0},cst_at_most_once,_am$_,at_most_once,_am__];
    function _ana_(r,v){return [0,v,r[2]]}
    var
     _anb_=0,
     at_least_once$0=
      [0,
       function(param){return 0},
       cst_at_least_once,
       _anb_,
       at_least_once,
       _ana_];
    function make_creator(at_least_once_fun,at_most_once_fun,compile_acc)
     {var
       match=caml_call2(at_least_once_fun,at_least_once$0,compile_acc),
       compile_acc$0=match[2],
       at_least_once_gen=match[1],
       match$0=caml_call2(at_most_once_fun,at_most_once$0,compile_acc$0),
       compile_acc$1=match$0[2],
       at_most_once_gen=match$0[1];
      return [0,
              function(acc)
               {var
                 at_least_once=caml_call1(at_least_once_gen,acc),
                 at_most_once=caml_call1(at_most_once_gen,acc);
                return [0,at_least_once,at_most_once]},
              compile_acc$1]}
    function create$27(at_least_once,at_most_once)
     {return [0,at_least_once,at_most_once]}
    function map$27(at_least_once_fun,at_most_once_fun)
     {var _aUQ_=caml_call1(at_most_once_fun,at_most_once$0);
      return [0,caml_call1(at_least_once_fun,at_least_once$0),_aUQ_]}
    function iter$20(at_least_once_fun,at_most_once_fun)
     {caml_call1(at_least_once_fun,at_least_once$0);
      return caml_call1(at_most_once_fun,at_most_once$0)}
    function fold$16(init,at_least_once_fun,at_most_once_fun)
     {return caml_call2
              (at_most_once_fun,
               caml_call2(at_least_once_fun,init,at_least_once$0),
               at_most_once$0)}
    function map_poly(record)
     {var _aUP_=[0,caml_call1(record[1],at_most_once$0),0];
      return [0,caml_call1(record[1],at_least_once$0),_aUP_]}
    function for_all$12(at_least_once_fun,at_most_once_fun)
     {var _aUO_=caml_call1(at_least_once_fun,at_least_once$0);
      return _aUO_?caml_call1(at_most_once_fun,at_most_once$0):_aUO_}
    function exists$13(at_least_once_fun,at_most_once_fun)
     {var _aUN_=caml_call1(at_least_once_fun,at_least_once$0);
      return _aUN_?_aUN_:caml_call1(at_most_once_fun,at_most_once$0)}
    function to_list$9(at_least_once_fun,at_most_once_fun)
     {var _aUM_=[0,caml_call1(at_most_once_fun,at_most_once$0),0];
      return [0,caml_call1(at_least_once_fun,at_least_once$0),_aUM_]}
    function iter$21(record,at_least_once_fun,at_most_once_fun)
     {caml_call3(at_least_once_fun,at_least_once$0,record,record[1]);
      return caml_call3(at_most_once_fun,at_most_once$0,record,record[2])}
    function fold$17(record,init,at_least_once_fun,at_most_once_fun)
     {var _aUL_=record[2];
      return caml_call4
              (at_most_once_fun,
               caml_call4
                (at_least_once_fun,init,at_least_once$0,record,record[1]),
               at_most_once$0,
               record,
               _aUL_)}
    function for_all$13(record,at_least_once_fun,at_most_once_fun)
     {var
       _aUK_=
        caml_call3(at_least_once_fun,at_least_once$0,record,record[1]);
      return _aUK_
              ?caml_call3(at_most_once_fun,at_most_once$0,record,record[2])
              :_aUK_}
    function exists$14(record,at_least_once_fun,at_most_once_fun)
     {var
       _aUJ_=
        caml_call3(at_least_once_fun,at_least_once$0,record,record[1]);
      return _aUJ_
              ?_aUJ_
              :caml_call3(at_most_once_fun,at_most_once$0,record,record[2])}
    function to_list$10(record,at_least_once_fun,at_most_once_fun)
     {var
       _aUI_=
        [0,caml_call3(at_most_once_fun,at_most_once$0,record,record[2]),0];
      return [0,
              caml_call3(at_least_once_fun,at_least_once$0,record,record[1]),
              _aUI_]}
    function map$28(record,at_least_once_fun,at_most_once_fun)
     {var _aUH_=caml_call3(at_most_once_fun,at_most_once$0,record,record[2]);
      return [0,
              caml_call3(at_least_once_fun,at_least_once$0,record,record[1]),
              _aUH_]}
    function set_all_mutable_fields(record)
     {caml_call1(Base_Field[1][1],record);return 0}
    var
     Direct=
      [0,
       iter$21,
       fold$17,
       for_all$13,
       exists$14,
       to_list$10,
       map$28,
       set_all_mutable_fields];
    function sexp_of_t$115(param)
     {var
       v_at_most_once=param[2],
       v_at_least_once=param[1],
       arg=caml_call1(sexp_of_t$40,v_at_most_once),
       bnds=[0,[1,[0,_anc_,[0,arg,0]]],0],
       arg$0=caml_call1(sexp_of_t$40,v_at_least_once),
       bnds$0=[0,[1,[0,_and_,[0,arg$0,0]]],bnds];
      return [1,bnds$0]}
    function to_help_string(t,flag_name)
     {var
       at_most_once=t[2],
       at_least_once=t[1],
       description=
        at_least_once
         ?flag_name
         :caml_call2
           (_Cd_,
            0,
            [0,maybe_missing_prefix,[0,flag_name,[0,maybe_missing_suffix,0]]]);
      return at_most_once
              ?description
              :caml_call2(_Cd_,0,[0,description,[0,maybe_more_suffix,0]])}
    function of_help_string(name)
     {var match=caml_call2(_CZ_,name,maybe_more_suffix);
      if(match)
       var name$0=match[1],name$1=name$0,at_most_once=0;
      else
       var name$1=name,at_most_once=1;
      function _aUF_(_aUG_)
       {return caml_call2(_CZ_,_aUG_,maybe_missing_suffix)}
      var
       match$0=
        caml_call2(_xU_,caml_call2(_C0_,name$1,maybe_missing_prefix),_aUF_);
      if(match$0)
       var name$2=match$0[1],name$3=name$2,at_least_once=0;
      else
       var name$3=name$1,at_least_once=1;
      return [0,[0,at_least_once,at_most_once],name$3]}
    var
     Expect_test_collector$15=
      caml_call1(Expect_test_collector[2],Expect_test_config);
    function _ane_(param)
     {caml_call2
       (_o9_,
        all$5,
        function(t)
         {var
           s=to_help_string(t,x_104),
           _aUC_=[0,caml_call1(Sexplib0_Sexp_conv[7],s),0];
          caml_call2(_Ph_,0,[1,[0,sexp_of_t$115(t),_aUC_]]);
          var
           match=of_help_string(s),
           flag_name=match[2],
           t$0=match[1],
           match$0=compare$92(t,t$0),
           _aUD_=0 === match$0?1:0;
          if(_aUD_)
           {var
             match$1=caml_call2(compare$37,x_104,flag_name),
             _aUE_=0 === match$1?1:0;
            if(_aUE_)return 0;
            throw [0,Assert_failure,_anf_]}
          throw [0,Assert_failure,_ang_]});
      var
       _aUB_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_command_shape_ml$60),
         469,
         12563,
         12569,
         12575];
      return caml_call1(Expect_test_collector$15[1],_aUB_)}
    var
     _anh_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_command_shape_ml$61),
       470,
       12576,
       12582,
       12839],
     _ank_=
      [0,
       [0,
        _anj_,
        _ani_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_command_shape_ml$62),
         469,
         12563,
         12569,
         12575],
        _anh_],
       0],
     _anm_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_command_shape_ml$64),
       461,
       12221,
       12223,
       12840],
     _ann_=
      caml_call1
       (Expect_test_common_File[4][3],cst_f1755de6c27d9367cb640e60f8$11);
    caml_call9
     (Expect_test_collector$15[3],
      _ann_,
      _anm_,
      cst_src_command_shape_ml$63,
      _anl_,
      0,
      _ank_,
      0,
      Inline_test_config,
      _ane_);
    var
     _ano_=
      [0,
       [0,cst_name$5,bin_shape_string],
       [0,
        [0,cst_doc$2,bin_shape_string],
        [0,[0,cst_aliases$2,bin_shape_list(bin_shape_string)],0]]],
     _anp_=caml_call1(Bin_prot_Shape[8],_ano_),
     _anq_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$265),0,_anp_],0],
     _anr_=caml_call1(Bin_prot_Shape[4][1],cst_src_command_shape_ml_479_2),
     group$144=caml_call2(Bin_prot_Shape[6],_anr_,_anq_),
     _ans_=caml_call1(Bin_prot_Shape[2][1],cst_t$266),
     bin_shape_t$126=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$144,_ans_),0);
    function bin_size_t$83(param)
     {var
       v3=param[3],
       v2=param[2],
       v1=param[1],
       _aUy_=caml_call1(bin_size_t$48,v1),
       size=caml_call2(Bin_prot_Common[23],0,_aUy_),
       _aUz_=caml_call1(bin_size_t$48,v2),
       size$0=caml_call2(Bin_prot_Common[23],size,_aUz_),
       _aUA_=bin_size_list(bin_size_t$48,v3);
      return caml_call2(Bin_prot_Common[23],size$0,_aUA_)}
    function bin_write_t$84(buf,pos,param)
     {var
       v3=param[3],
       v2=param[2],
       v1=param[1],
       pos$0=caml_call3(bin_write_t$48,buf,pos,v1),
       pos$1=caml_call3(bin_write_t$48,buf,pos$0,v2);
      return bin_write_list(bin_write_t$48,buf,pos$1,v3)}
    var bin_writer_t$103=[0,bin_size_t$83,bin_write_t$84];
    function bin_read_t$165(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_src_command_shape_ml_Flag_,pos_ref[1])}
    function bin_read_t$166(buf,pos_ref)
     {var
       v_name=caml_call2(bin_read_t$98,buf,pos_ref),
       v_doc=caml_call2(bin_read_t$98,buf,pos_ref),
       v_aliases=bin_read_list$0(bin_read_t$98,buf,pos_ref);
      return [0,v_name,v_doc,v_aliases]}
    var
     bin_reader_t$103=[0,bin_read_t$166,bin_read_t$165],
     bin_t$103=[0,bin_shape_t$126,bin_writer_t$103,bin_reader_t$103];
    function compare$93(a_108,b_109)
     {if(caml_call2(Ppx_compare_lib[1],a_108,b_109))return 0;
      var n=caml_call2(compare$37,a_108[1],b_109[1]);
      if(0 === n)
       {var n$0=caml_call2(compare$37,a_108[2],b_109[2]);
        if(0 === n$0)
         {var _aUw_=b_109[3],_aUx_=a_108[3];
          return compare_list
                  (function(a_110,b_111)
                    {return caml_call2(compare$37,a_110,b_111)},
                   _aUx_,
                   _aUw_)}
        return n$0}
      return n}
    function aliases(r){return r[3]}
    function doc(r){return r[2]}
    function name$70(r){return r[1]}
    function _ant_(r,v){return [0,r[1],r[2],v]}
    var
     _anu_=0,
     aliases$0=[0,function(param){return 0},cst_aliases$3,_anu_,aliases,_ant_];
    function _anv_(r,v){return [0,r[1],v,r[3]]}
    var _anw_=0,doc$0=[0,function(param){return 0},cst_doc$3,_anw_,doc,_anv_];
    function _anx_(r,v){return [0,v,r[2],r[3]]}
    var
     _any_=0,
     name$71=[0,function(param){return 0},cst_name$6,_any_,name$70,_anx_];
    function make_creator$0(name_fun,doc_fun,aliases_fun,compile_acc)
     {var
       match=caml_call2(name_fun,name$71,compile_acc),
       compile_acc$0=match[2],
       name_gen=match[1],
       match$0=caml_call2(doc_fun,doc$0,compile_acc$0),
       compile_acc$1=match$0[2],
       doc_gen=match$0[1],
       match$1=caml_call2(aliases_fun,aliases$0,compile_acc$1),
       compile_acc$2=match$1[2],
       aliases_gen=match$1[1];
      return [0,
              function(acc)
               {var
                 name=caml_call1(name_gen,acc),
                 doc=caml_call1(doc_gen,acc),
                 aliases=caml_call1(aliases_gen,acc);
                return [0,name,doc,aliases]},
              compile_acc$2]}
    function create$28(name,doc,aliases){return [0,name,doc,aliases]}
    function map$29(name_fun,doc_fun,aliases_fun)
     {var
       _aUu_=caml_call1(aliases_fun,aliases$0),
       _aUv_=caml_call1(doc_fun,doc$0);
      return [0,caml_call1(name_fun,name$71),_aUv_,_aUu_]}
    function iter$22(name_fun,doc_fun,aliases_fun)
     {caml_call1(name_fun,name$71);
      caml_call1(doc_fun,doc$0);
      return caml_call1(aliases_fun,aliases$0)}
    function fold$18(init,name_fun,doc_fun,aliases_fun)
     {return caml_call2
              (aliases_fun,
               caml_call2(doc_fun,caml_call2(name_fun,init,name$71),doc$0),
               aliases$0)}
    function map_poly$0(record)
     {var
       _aUs_=[0,caml_call1(record[1],aliases$0),0],
       _aUt_=[0,caml_call1(record[1],doc$0),_aUs_];
      return [0,caml_call1(record[1],name$71),_aUt_]}
    function for_all$14(name_fun,doc_fun,aliases_fun)
     {var
       _aUq_=caml_call1(name_fun,name$71),
       _aUr_=_aUq_?caml_call1(doc_fun,doc$0):_aUq_;
      return _aUr_?caml_call1(aliases_fun,aliases$0):_aUr_}
    function exists$15(name_fun,doc_fun,aliases_fun)
     {var
       _aUp_=caml_call1(name_fun,name$71),
       _aUo_=_aUp_ || caml_call1(doc_fun,doc$0);
      return _aUo_?_aUo_:caml_call1(aliases_fun,aliases$0)}
    function to_list$11(name_fun,doc_fun,aliases_fun)
     {var
       _aUm_=[0,caml_call1(aliases_fun,aliases$0),0],
       _aUn_=[0,caml_call1(doc_fun,doc$0),_aUm_];
      return [0,caml_call1(name_fun,name$71),_aUn_]}
    function iter$23(record,name_fun,doc_fun,aliases_fun)
     {caml_call3(name_fun,name$71,record,record[1]);
      caml_call3(doc_fun,doc$0,record,record[2]);
      return caml_call3(aliases_fun,aliases$0,record,record[3])}
    function fold$19(record,init,name_fun,doc_fun,aliases_fun)
     {var _aUk_=record[3],_aUl_=record[2];
      return caml_call4
              (aliases_fun,
               caml_call4
                (doc_fun,
                 caml_call4(name_fun,init,name$71,record,record[1]),
                 doc$0,
                 record,
                 _aUl_),
               aliases$0,
               record,
               _aUk_)}
    function for_all$15(record,name_fun,doc_fun,aliases_fun)
     {var
       _aUi_=caml_call3(name_fun,name$71,record,record[1]),
       _aUj_=_aUi_?caml_call3(doc_fun,doc$0,record,record[2]):_aUi_;
      return _aUj_?caml_call3(aliases_fun,aliases$0,record,record[3]):_aUj_}
    function exists$16(record,name_fun,doc_fun,aliases_fun)
     {var
       _aUh_=caml_call3(name_fun,name$71,record,record[1]),
       _aUg_=_aUh_ || caml_call3(doc_fun,doc$0,record,record[2]);
      return _aUg_?_aUg_:caml_call3(aliases_fun,aliases$0,record,record[3])}
    function to_list$12(record,name_fun,doc_fun,aliases_fun)
     {var
       _aUe_=[0,caml_call3(aliases_fun,aliases$0,record,record[3]),0],
       _aUf_=[0,caml_call3(doc_fun,doc$0,record,record[2]),_aUe_];
      return [0,caml_call3(name_fun,name$71,record,record[1]),_aUf_]}
    function map$30(record,name_fun,doc_fun,aliases_fun)
     {var
       _aUc_=caml_call3(aliases_fun,aliases$0,record,record[3]),
       _aUd_=caml_call3(doc_fun,doc$0,record,record[2]);
      return [0,caml_call3(name_fun,name$71,record,record[1]),_aUd_,_aUc_]}
    function set_all_mutable_fields$0(record)
     {caml_call1(Base_Field[1][1],record);return 0}
    var
     Direct$0=
      [0,
       iter$23,
       fold$19,
       for_all$15,
       exists$16,
       to_list$12,
       map$30,
       set_all_mutable_fields$0];
    function t_of_sexp$105(sexp)
     {if(0 === sexp[0])
       return caml_call2(Sexplib0_Sexp_conv_error[16],tp_loc$47,sexp);
      var
       field_sexps=sexp[1],
       name_field=[0,0],
       doc_field=[0,0],
       aliases_field=[0,0],
       duplicates=[0,0],
       extra=[0,0],
       param=field_sexps;
      for(;;)
       {if(param)
         {var _aT5_=param[1];
          if(1 === _aT5_[0])
           {var _aT6_=_aT5_[1];
            if(_aT6_)
             {var _aT7_=_aT6_[1];
              if(0 === _aT7_[0])
               {var _aT8_=_aT6_[2],_aT9_=_aT7_[1],switch$0=0;
                if(! _aT8_ || ! _aT8_[2])switch$0 = 1;
                if(switch$0)
                 {var
                   tail=param[2],
                   field_sexp$3=
                    function(_aUb_)
                     {function field_sexp(param)
                       {if(_aUb_)
                         {if(_aUb_[2])throw [0,Assert_failure,_anz_];
                          var x=_aUb_[1];
                          return x}
                        return caml_call2
                                (Sexplib0_Sexp_conv_error[10],tp_loc$47,sexp)}
                      return field_sexp},
                   field_sexp=field_sexp$3(_aT8_);
                  if(caml_string_notequal(_aT9_,cst_aliases$4))
                   if(caml_string_notequal(_aT9_,cst_doc$4))
                    if(caml_string_notequal(_aT9_,cst_name$7))
                     {if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_aT9_,extra[1]]}
                    else
                     if(name_field[1])
                      duplicates[1] = [0,_aT9_,duplicates[1]];
                     else
                      {var
                        field_sexp$0=field_sexp(0),
                        fvalue=caml_call1(t_of_sexp$35,field_sexp$0);
                       name_field[1] = [0,fvalue]}
                   else
                    if(doc_field[1])
                     duplicates[1] = [0,_aT9_,duplicates[1]];
                    else
                     {var
                       field_sexp$1=field_sexp(0),
                       fvalue$0=caml_call1(t_of_sexp$35,field_sexp$1);
                      doc_field[1] = [0,fvalue$0]}
                  else
                   if(aliases_field[1])
                    duplicates[1] = [0,_aT9_,duplicates[1]];
                   else
                    {var
                      field_sexp$2=field_sexp(0),
                      fvalue$1=caml_call2(t_of_sexp$18,t_of_sexp$35,field_sexp$2);
                     aliases_field[1] = [0,fvalue$1]}
                  var param=tail;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[10],tp_loc$47,_aT5_)}
        if(duplicates[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],tp_loc$47,duplicates[1],sexp);
        if(extra[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[13],tp_loc$47,extra[1],sexp);
        var _aT__=name_field[1],_aT$_=doc_field[1],_aUa_=aliases_field[1];
        if(_aT__ && _aT$_ && _aUa_)
         {var aliases_value=_aUa_[1],doc_value=_aT$_[1],name_value=_aT__[1];
          return [0,name_value,doc_value,aliases_value]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[15],
                 tp_loc$47,
                 sexp,
                 [0,
                  [0,0 === name_field[1]?1:0,cst_name$8],
                  [0,
                   [0,0 === doc_field[1]?1:0,cst_doc$5],
                   [0,[0,0 === aliases_field[1]?1:0,cst_aliases$5],0]]])}}
    function sexp_of_t$116(param)
     {var
       v_aliases=param[3],
       v_doc=param[2],
       v_name=param[1],
       arg=caml_call2(sexp_of_t$17,sexp_of_t$43,v_aliases),
       bnds=[0,[1,[0,_anA_,[0,arg,0]]],0],
       arg$0=caml_call1(sexp_of_t$43,v_doc),
       bnds$0=[0,[1,[0,_anB_,[0,arg$0,0]]],bnds],
       arg$1=caml_call1(sexp_of_t$43,v_name),
       bnds$1=[0,[1,[0,_anC_,[0,arg$1,0]]],bnds$0];
      return [1,bnds$1]}
    function parse_name(t)
     {var
       match=of_help_string(t[1]),
       flag_name=match[2],
       num_occurrences=match[1],
       match$0=caml_call2(_CI_,flag_name,32);
      if(match$0)
       {var _aT2_=match$0[2],_aT3_=match$0[1];
        if(! _aT2_)return [0,[0,num_occurrences,0,_aT3_]];
        if(! _aT2_[2])return [0,[0,num_occurrences,1,_aT3_]]}
      var _aT4_=[0,caml_call1(Sexplib0_Sexp_conv[7],flag_name),0];
      return caml_call1
              (_tW_,
               [1,
                [0,
                 caml_call1(Sexplib0_Sexp_conv[7],cst_Unable_to_parse),
                 _aT4_]])}
    function flag_name(t){return caml_call2(_t3_,parse_name(t),trd3)}
    function num_occurrences(t){return caml_call2(_t3_,parse_name(t),fst3)}
    function requires_arg(t){return caml_call2(_t3_,parse_name(t),snd3)}
    function help_screen_compare(a,b)
     {return caml_string_notequal(b,cst_help)
              ?caml_string_notequal(a,cst_help$0)
                ?caml_string_notequal(b,cst_version)
                  ?caml_string_notequal(a,cst_version$0)
                    ?caml_string_notequal(b,cst_build_info)
                      ?caml_string_notequal(a,cst_build_info$0)
                        ?caml_string_notequal(b,cst_help$1)
                          ?caml_string_notequal(a,cst_help$2)
                            ?caml_string_notequal(b,cst_version$1)
                              ?caml_string_notequal(a,cst_version$2)?0:1
                              :-1
                            :1
                          :-1
                        :1
                      :-1
                    :1
                  :-1
                :1
              :-1}
    function sort$0(ts)
     {return caml_call2
              (_pX_,ts,function(a,b){return help_screen_compare(a[1],b[1])})}
    function word_wrap(text,width)
     {var chunks=caml_call2(_CI_,text,10);
      return caml_call2
              (_qc_,
               chunks,
               function(text)
                {function _aTZ_(word){return 1 - caml_call1(_BU_,word)}
                 var
                  words=caml_call2(_pO_,caml_call2(_CI_,text,32),_aTZ_),
                  match=
                   caml_call3
                    (_o__,
                     words,
                     0,
                     function(acc,word)
                      {if(acc)
                        var
                         match=acc[1],
                         line=match[2],
                         lines=match[1],
                         line_and_word=
                          caml_call2(_Gp_,line,caml_call2(_Gp_,cst$205,word)),
                         _aT0_=
                          caml_call2(_Nq_,caml_ml_string_length(line_and_word),width)
                           ?[0,lines,line_and_word]
                           :[0,[0,line,lines],word],
                         _aT1_=_aT0_;
                       else
                        var _aT1_=[0,0,word];
                       return [0,_aT1_]});
                 if(match)
                  {var match$0=match[1],line=match$0[2],lines=match$0[1];
                   return caml_call1(parts,[0,line,lines])}
                 return 0})}
    function to_string$28(ts)
     {var
       n=
        caml_call3
         (_o__,
          ts,
          0,
          function(acc,t)
           {return caml_call2(max$3,acc,caml_ml_string_length(t[1]))}),
       lhs_width=n + 4 | 0,
       lhs_pad=caml_call2(_B$_,lhs_width,32);
      return caml_call2
              (_Cd_,
               0,
               caml_call2
                (_p9_,
                 ts,
                 function(t)
                  {function rows(k,v)
                    {var vs=word_wrap(v,80 - lhs_width | 0);
                     if(vs)
                      {var
                        vs$0=vs[2],
                        v$0=vs[1],
                        slack=n - caml_ml_string_length(k) | 0,
                        first_line=
                         [0,
                          cst$207,
                          [0,
                           caml_call2(_Gp_,k,caml_call2(_B$_,slack,32)),
                           [0,cst$206,[0,v$0,_anD_]]]],
                        rest_lines=
                         caml_call2
                          (_p9_,vs$0,function(v){return [0,lhs_pad,[0,v,_anE_]]});
                       return caml_call1(_q5_,[0,first_line,rest_lines])}
                     return [0,cst$208,[0,k,_anF_]]}
                   var _aTW_=t[3];
                   if(_aTW_)
                    {if(_aTW_[2])
                      var
                       _aTX_=
                        [0,
                         rows
                          (cst$209,
                           caml_call2(_fw_,_anH_,caml_call2(_Cd_,_anG_,_aTW_))),
                         0];
                     else
                      var
                       x=_aTW_[1],
                       _aTX_=[0,rows(cst$210,caml_call2(_fw_,_anI_,x)),0];
                     var _aTY_=_aTX_}
                   else
                    var _aTY_=0;
                   return caml_call2
                           (_Cd_,0,caml_call1(_q5_,[0,rows(t[1],t[2]),_aTY_]))}))}
    function to_string$29(param){return param?cst_flag:cst_subcommand}
    var Key_type=[0,to_string$29];
    function lookup_expand(alist,prefix,key_type)
     {var
       is_dash=caml_call1(_FD_,45),
       alist$0=
        caml_call2(_B0_,prefix,is_dash)
         ?caml_call2
           (_p9_,
            alist,
            function(param)
             {var match=param[2],data=match[1],key=param[1];
              return [0,key,[0,data,-461087063]]})
         :alist,
       matches=
        caml_call2
         (_pO_,
          alist$0,
          function(param)
           {var _aTV_=param[1];
            return -461087063 <= param[2][2]
                    ?caml_call2(symbol$11,_aTV_,prefix)
                    :caml_call2(_CD_,_aTV_,prefix)});
      if(matches)
       {if(matches[2])
         {var
           match=
            caml_call2
             (_pe_,
              matches,
              function(param)
               {var key=param[1];return caml_call2(symbol$11,key,prefix)});
          if(match)
           {var _aTR_=match[1],match$0=_aTR_[2],data=match$0[1],key=_aTR_[1];
            return [0,[0,key,data]]}
          var
           matching_keys=
            caml_call2(_p9_,matches,function(_aTU_){return _aTU_[1]}),
           _aTS_=caml_call2(_Cd_,_anJ_,matching_keys);
          return [1,
                  caml_call4
                   (_fw_,
                    [0,
                     [24,
                      _anL_,
                      function(param,custom_printf_113)
                       {return caml_call1(Key_type[1],custom_printf_113)},
                      _anK_],
                     cst_Key_type_s_is_an_ambiguous],
                    key_type,
                    prefix,
                    _aTS_)]}
        var
         _aTT_=matches[1],
         match$1=_aTT_[2],
         data$0=match$1[1],
         key$0=_aTT_[1];
        return [0,[0,key$0,data$0]]}
      return [1,
              caml_call3
               (_fw_,
                [0,
                 [11,
                  cst_unknown,
                  [24,
                   _anN_,
                   function(param,custom_printf_112)
                    {return caml_call1(Key_type[1],custom_printf_112)},
                   _anM_]],
                 cst_unknown_Key_type_s],
                key_type,
                prefix)]}
    var
     _anO_=
      [0,
       [0,cst_anons$2,bin_shape_t$125],
       [0,[0,cst_flags$5,bin_shape_list(bin_shape_t$126)],0]],
     _anP_=
      [0,
       [0,cst_summary$20,bin_shape_string],
       [0,[0,cst_readme$13,bin_shape_option(bin_shape_string)],_anO_]],
     _anQ_=caml_call1(Bin_prot_Shape[8],_anP_),
     _anR_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$267),0,_anQ_],0],
     _anS_=caml_call1(Bin_prot_Shape[4][1],cst_src_command_shape_ml_616_2),
     group$145=caml_call2(Bin_prot_Shape[6],_anS_,_anR_),
     _anT_=caml_call1(Bin_prot_Shape[2][1],cst_t$268),
     bin_shape_t$127=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$145,_anT_),0);
    function bin_size_t$84(param)
     {var
       v4=param[4],
       v3=param[3],
       v2=param[2],
       v1$1=param[1],
       _aTN_=caml_call1(bin_size_t$48,v1$1),
       size=caml_call2(Bin_prot_Common[23],0,_aTN_),
       _aTO_=bin_size_option(bin_size_t$48,v2),
       size$0=caml_call2(Bin_prot_Common[23],size,_aTO_);
      if(0 === v3[0])
       var
        v1=v3[1],
        _aTL_=caml_call1(bin_size_t$48,v1),
        _aTP_=caml_call2(Bin_prot_Common[23],1,_aTL_);
      else
       var
        v1$0=v3[1],
        _aTM_=bin_size_t$82(v1$0),
        _aTP_=caml_call2(Bin_prot_Common[23],1,_aTM_);
      var
       size$1=caml_call2(Bin_prot_Common[23],size$0,_aTP_),
       _aTQ_=bin_size_list(bin_size_t$83,v4);
      return caml_call2(Bin_prot_Common[23],size$1,_aTQ_)}
    function bin_write_t$85(buf,pos$1,param)
     {var
       v4=param[4],
       v3=param[3],
       v2=param[2],
       v1$1=param[1],
       pos$2=caml_call3(bin_write_t$48,buf,pos$1,v1$1),
       pos$4=bin_write_option(bin_write_t$48,buf,pos$2,v2);
      if(0 === v3[0])
       var
        v1=v3[1],
        pos=caml_call3(Bin_prot_Write[30],buf,pos$4,0),
        pos$3=caml_call3(bin_write_t$48,buf,pos,v1);
      else
       var
        v1$0=v3[1],
        pos$0=caml_call3(Bin_prot_Write[30],buf,pos$4,1),
        pos$3=bin_write_t$83(buf,pos$0,v1$0);
      return bin_write_list(bin_write_t$84,buf,pos$3,v4)}
    var bin_writer_t$104=[0,bin_size_t$84,bin_write_t$85];
    function bin_read_t$167(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_src_command_shape_ml_Base_,pos_ref[1])}
    function bin_read_t$168(buf,pos_ref)
     {var
       v_summary=caml_call2(bin_read_t$98,buf,pos_ref),
       v_readme=bin_read_option$0(bin_read_t$98,buf,pos_ref),
       match=caml_call2(Bin_prot_Read[29],buf,pos_ref);
      if(0 === match)
       var arg_1=caml_call2(bin_read_t$98,buf,pos_ref),v_anons=[0,arg_1];
      else
       if(1 === match)
        var arg_1$0=bin_read_t$164(buf,pos_ref),v_anons=[1,arg_1$0];
       else
        var v_anons=caml_call2(Bin_prot_Common[18],_am7_,pos_ref[1]);
      var v_flags=bin_read_list$0(bin_read_t$166,buf,pos_ref);
      return [0,v_summary,v_readme,v_anons,v_flags]}
    var
     bin_reader_t$104=[0,bin_read_t$168,bin_read_t$167],
     bin_t$104=[0,bin_shape_t$127,bin_writer_t$104,bin_reader_t$104];
    function compare$94(a_114,b_115)
     {if(caml_call2(Ppx_compare_lib[1],a_114,b_115))return 0;
      var n=caml_call2(compare$37,a_114[1],b_115[1]);
      if(0 === n)
       {var
         _aTH_=b_115[2],
         _aTI_=a_114[2],
         n$0=
          compare_option
           (function(a_116,b_117){return caml_call2(compare$37,a_116,b_117)},
            _aTI_,
            _aTH_);
        if(0 === n$0)
         {var n$1=compare$91(a_114[3],b_115[3]);
          if(0 === n$1)
           {var _aTJ_=b_115[4],_aTK_=a_114[4];
            return compare_list
                    (function(a_118,b_119){return compare$93(a_118,b_119)},
                     _aTK_,
                     _aTJ_)}
          return n$1}
        return n$0}
      return n}
    function flags(r){return r[4]}
    function anons(r){return r[3]}
    function readme(r){return r[2]}
    function summary(r){return r[1]}
    function _anU_(r,v){return [0,r[1],r[2],r[3],v]}
    var
     _anV_=0,
     flags$0=[0,function(param){return 0},cst_flags$6,_anV_,flags,_anU_];
    function _anW_(r,v){return [0,r[1],r[2],v,r[4]]}
    var
     _anX_=0,
     anons$0=[0,function(param){return 0},cst_anons$3,_anX_,anons,_anW_];
    function _anY_(r,v){return [0,r[1],v,r[3],r[4]]}
    var
     _anZ_=0,
     readme$0=[0,function(param){return 0},cst_readme$14,_anZ_,readme,_anY_];
    function _an0_(r,v){return [0,v,r[2],r[3],r[4]]}
    var
     _an1_=0,
     summary$0=
      [0,function(param){return 0},cst_summary$21,_an1_,summary,_an0_];
    function make_creator$1
     (summary_fun,readme_fun,anons_fun,flags_fun,compile_acc)
     {var
       match=caml_call2(summary_fun,summary$0,compile_acc),
       compile_acc$0=match[2],
       summary_gen=match[1],
       match$0=caml_call2(readme_fun,readme$0,compile_acc$0),
       compile_acc$1=match$0[2],
       readme_gen=match$0[1],
       match$1=caml_call2(anons_fun,anons$0,compile_acc$1),
       compile_acc$2=match$1[2],
       anons_gen=match$1[1],
       match$2=caml_call2(flags_fun,flags$0,compile_acc$2),
       compile_acc$3=match$2[2],
       flags_gen=match$2[1];
      return [0,
              function(acc)
               {var
                 summary=caml_call1(summary_gen,acc),
                 readme=caml_call1(readme_gen,acc),
                 anons=caml_call1(anons_gen,acc),
                 flags=caml_call1(flags_gen,acc);
                return [0,summary,readme,anons,flags]},
              compile_acc$3]}
    function create$29(summary,readme,anons,flags)
     {return [0,summary,readme,anons,flags]}
    function map$31(summary_fun,readme_fun,anons_fun,flags_fun)
     {var
       _aTE_=caml_call1(flags_fun,flags$0),
       _aTF_=caml_call1(anons_fun,anons$0),
       _aTG_=caml_call1(readme_fun,readme$0);
      return [0,caml_call1(summary_fun,summary$0),_aTG_,_aTF_,_aTE_]}
    function iter$24(summary_fun,readme_fun,anons_fun,flags_fun)
     {caml_call1(summary_fun,summary$0);
      caml_call1(readme_fun,readme$0);
      caml_call1(anons_fun,anons$0);
      return caml_call1(flags_fun,flags$0)}
    function fold$20(init,summary_fun,readme_fun,anons_fun,flags_fun)
     {return caml_call2
              (flags_fun,
               caml_call2
                (anons_fun,
                 caml_call2
                  (readme_fun,caml_call2(summary_fun,init,summary$0),readme$0),
                 anons$0),
               flags$0)}
    function map_poly$1(record)
     {var
       _aTB_=[0,caml_call1(record[1],flags$0),0],
       _aTC_=[0,caml_call1(record[1],anons$0),_aTB_],
       _aTD_=[0,caml_call1(record[1],readme$0),_aTC_];
      return [0,caml_call1(record[1],summary$0),_aTD_]}
    function for_all$16(summary_fun,readme_fun,anons_fun,flags_fun)
     {var
       _aTy_=caml_call1(summary_fun,summary$0),
       _aTz_=_aTy_?caml_call1(readme_fun,readme$0):_aTy_,
       _aTA_=_aTz_?caml_call1(anons_fun,anons$0):_aTz_;
      return _aTA_?caml_call1(flags_fun,flags$0):_aTA_}
    function exists$17(summary_fun,readme_fun,anons_fun,flags_fun)
     {var
       _aTx_=caml_call1(summary_fun,summary$0),
       _aTv_=_aTx_ || caml_call1(readme_fun,readme$0),
       _aTw_=_aTv_ || caml_call1(anons_fun,anons$0);
      return _aTw_?_aTw_:caml_call1(flags_fun,flags$0)}
    function to_list$13(summary_fun,readme_fun,anons_fun,flags_fun)
     {var
       _aTs_=[0,caml_call1(flags_fun,flags$0),0],
       _aTt_=[0,caml_call1(anons_fun,anons$0),_aTs_],
       _aTu_=[0,caml_call1(readme_fun,readme$0),_aTt_];
      return [0,caml_call1(summary_fun,summary$0),_aTu_]}
    function iter$25(record,summary_fun,readme_fun,anons_fun,flags_fun)
     {caml_call3(summary_fun,summary$0,record,record[1]);
      caml_call3(readme_fun,readme$0,record,record[2]);
      caml_call3(anons_fun,anons$0,record,record[3]);
      return caml_call3(flags_fun,flags$0,record,record[4])}
    function fold$21(record,init,summary_fun,readme_fun,anons_fun,flags_fun)
     {var _aTp_=record[4],_aTq_=record[3],_aTr_=record[2];
      return caml_call4
              (flags_fun,
               caml_call4
                (anons_fun,
                 caml_call4
                  (readme_fun,
                   caml_call4(summary_fun,init,summary$0,record,record[1]),
                   readme$0,
                   record,
                   _aTr_),
                 anons$0,
                 record,
                 _aTq_),
               flags$0,
               record,
               _aTp_)}
    function for_all$17(record,summary_fun,readme_fun,anons_fun,flags_fun)
     {var
       _aTm_=caml_call3(summary_fun,summary$0,record,record[1]),
       _aTn_=_aTm_?caml_call3(readme_fun,readme$0,record,record[2]):_aTm_,
       _aTo_=_aTn_?caml_call3(anons_fun,anons$0,record,record[3]):_aTn_;
      return _aTo_?caml_call3(flags_fun,flags$0,record,record[4]):_aTo_}
    function exists$18(record,summary_fun,readme_fun,anons_fun,flags_fun)
     {var
       _aTl_=caml_call3(summary_fun,summary$0,record,record[1]),
       _aTj_=_aTl_ || caml_call3(readme_fun,readme$0,record,record[2]),
       _aTk_=_aTj_ || caml_call3(anons_fun,anons$0,record,record[3]);
      return _aTk_?_aTk_:caml_call3(flags_fun,flags$0,record,record[4])}
    function to_list$14(record,summary_fun,readme_fun,anons_fun,flags_fun)
     {var
       _aTg_=[0,caml_call3(flags_fun,flags$0,record,record[4]),0],
       _aTh_=[0,caml_call3(anons_fun,anons$0,record,record[3]),_aTg_],
       _aTi_=[0,caml_call3(readme_fun,readme$0,record,record[2]),_aTh_];
      return [0,caml_call3(summary_fun,summary$0,record,record[1]),_aTi_]}
    function map$32(record,summary_fun,readme_fun,anons_fun,flags_fun)
     {var
       _aTd_=caml_call3(flags_fun,flags$0,record,record[4]),
       _aTe_=caml_call3(anons_fun,anons$0,record,record[3]),
       _aTf_=caml_call3(readme_fun,readme$0,record,record[2]);
      return [0,
              caml_call3(summary_fun,summary$0,record,record[1]),
              _aTf_,
              _aTe_,
              _aTd_]}
    function set_all_mutable_fields$1(record)
     {caml_call1(Base_Field[1][1],record);return 0}
    var
     Direct$1=
      [0,
       iter$25,
       fold$21,
       for_all$17,
       exists$18,
       to_list$14,
       map$32,
       set_all_mutable_fields$1];
    function t_of_sexp$106(sexp)
     {if(0 === sexp[0])
       return caml_call2(Sexplib0_Sexp_conv_error[16],tp_loc$48,sexp);
      var
       field_sexps=sexp[1],
       summary_field=[0,0],
       readme_field=[0,0],
       anons_field=[0,0],
       flags_field=[0,0],
       duplicates=[0,0],
       extra=[0,0],
       param=field_sexps;
      for(;;)
       {if(param)
         {var _aS5_=param[1];
          if(1 === _aS5_[0])
           {var _aS6_=_aS5_[1];
            if(_aS6_)
             {var _aS7_=_aS6_[1];
              if(0 === _aS7_[0])
               {var _aS8_=_aS6_[2],_aS9_=_aS7_[1],switch$0=0;
                if(! _aS8_ || ! _aS8_[2])switch$0 = 1;
                if(switch$0)
                 {var
                   tail=param[2],
                   field_sexp$3=
                    function(_aTc_)
                     {function field_sexp(param)
                       {if(_aTc_)
                         {if(_aTc_[2])throw [0,Assert_failure,_an2_];
                          var x=_aTc_[1];
                          return x}
                        return caml_call2
                                (Sexplib0_Sexp_conv_error[10],tp_loc$48,sexp)}
                      return field_sexp},
                   field_sexp=field_sexp$3(_aS8_);
                  if(caml_string_notequal(_aS9_,cst_anons$4))
                   if(caml_string_notequal(_aS9_,cst_flags$7))
                    if(caml_string_notequal(_aS9_,cst_readme$15))
                     if(caml_string_notequal(_aS9_,cst_summary$22))
                      {if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_aS9_,extra[1]]}
                     else
                      if(summary_field[1])
                       duplicates[1] = [0,_aS9_,duplicates[1]];
                      else
                       {var
                         field_sexp$0=field_sexp(0),
                         fvalue=caml_call1(t_of_sexp$35,field_sexp$0);
                        summary_field[1] = [0,fvalue]}
                    else
                     if(readme_field[1])
                      duplicates[1] = [0,_aS9_,duplicates[1]];
                     else
                      {var
                        field_sexp$1=field_sexp(0),
                        fvalue$0=caml_call1(t_of_sexp$35,field_sexp$1);
                       readme_field[1] = [0,fvalue$0]}
                   else
                    if(flags_field[1])
                     duplicates[1] = [0,_aS9_,duplicates[1]];
                    else
                     {var
                       field_sexp$2=field_sexp(0),
                       fvalue$1=caml_call2(t_of_sexp$18,t_of_sexp$105,field_sexp$2);
                      flags_field[1] = [0,fvalue$1]}
                  else
                   if(anons_field[1])
                    duplicates[1] = [0,_aS9_,duplicates[1]];
                   else
                    {var sexp$0=field_sexp(0),switch$1=0;
                     if(0 === sexp$0[0])
                      {var _aS1_=sexp$0[1],switch$2=0;
                       if(caml_string_notequal(_aS1_,cst_Grammar$3))
                        {var switch$3=0;
                         if(caml_string_notequal(_aS1_,cst_Usage$3))
                          if(caml_string_notequal(_aS1_,cst_grammar$1))
                           {if(caml_string_notequal(_aS1_,cst_usage$4))
                             {switch$1 = 1;switch$2 = 1;switch$3 = 1}}
                          else
                           switch$3 = 1;
                         if(! switch$3)
                          {var
                            fvalue$2=
                             caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$46,sexp$0);
                           switch$2 = 1}}
                       if(! switch$2)
                        var
                         fvalue$2=
                          caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$46,sexp$0)}
                     else
                      {var _aS2_=sexp$0[1];
                       if(_aS2_)
                        {var _aS3_=_aS2_[1];
                         if(0 === _aS3_[0])
                          {var _aS4_=_aS3_[1],switch$4=0;
                           if(caml_string_notequal(_aS4_,cst_Grammar$4))
                            {var switch$5=0;
                             if(caml_string_notequal(_aS4_,cst_Usage$4))
                              if(caml_string_notequal(_aS4_,cst_grammar$2))
                               {if(caml_string_notequal(_aS4_,cst_usage$5))
                                 {switch$1 = 1;switch$4 = 1;switch$5 = 1}}
                              else
                               switch$5 = 1;
                             if(! switch$5)
                              {var sexp_args=_aS2_[2],switch$6=0;
                               if(sexp_args && ! sexp_args[2])
                                {var
                                  v0=sexp_args[1],
                                  v0$0=caml_call1(t_of_sexp$35,v0),
                                  fvalue$2=[0,v0$0];
                                 switch$4 = 1;
                                 switch$6 = 1}
                               if(! switch$6)
                                {var
                                  fvalue$2=
                                   caml_call3
                                    (Sexplib0_Sexp_conv_error[4],tp_loc$46,_aS4_,sexp$0);
                                 switch$4 = 1}}}
                           if(! switch$4)
                            {var sexp_args$0=_aS2_[2],switch$7=0;
                             if(sexp_args$0 && ! sexp_args$0[2])
                              var
                               v0$1=sexp_args$0[1],
                               v0$2=caml_call1(t_of_sexp$104,v0$1),
                               fvalue$2=[1,v0$2];
                             else
                              switch$7 = 1;
                             if(switch$7)
                              var
                               fvalue$2=
                                caml_call3
                                 (Sexplib0_Sexp_conv_error[4],tp_loc$46,_aS4_,sexp$0)}}
                         else
                          var
                           fvalue$2=
                            caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$46,sexp$0)}
                       else
                        var
                         fvalue$2=
                          caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$46,sexp$0)}
                     if(switch$1)
                      var
                       fvalue$2=
                        caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$46,sexp$0);
                     anons_field[1] = [0,fvalue$2]}
                  var param=tail;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[10],tp_loc$48,_aS5_)}
        if(duplicates[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],tp_loc$48,duplicates[1],sexp);
        if(extra[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[13],tp_loc$48,extra[1],sexp);
        var
         _aS__=summary_field[1],
         _aTa_=anons_field[1],
         _aTb_=flags_field[1],
         _aS$_=readme_field[1];
        if(_aS__ && _aTa_ && _aTb_)
         {var
           flags_value=_aTb_[1],
           anons_value=_aTa_[1],
           summary_value=_aS__[1];
          return [0,summary_value,_aS$_,anons_value,flags_value]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[15],
                 tp_loc$48,
                 sexp,
                 [0,
                  [0,0 === summary_field[1]?1:0,cst_summary$23],
                  [0,
                   [0,0 === anons_field[1]?1:0,cst_anons$5],
                   [0,[0,0 === flags_field[1]?1:0,cst_flags$8],0]]])}}
    function sexp_of_t$117(param)
     {var
       v_flags=param[4],
       v_anons=param[3],
       v_readme=param[2],
       v_summary=param[1],
       arg=caml_call2(sexp_of_t$17,sexp_of_t$116,v_flags),
       bnds=[0,[1,[0,_an3_,[0,arg,0]]],0],
       arg$0=sexp_of_t$114(v_anons),
       bnds$0=[0,[1,[0,_an4_,[0,arg$0,0]]],bnds];
      if(v_readme)
       var
        v=v_readme[1],
        arg$1=caml_call1(sexp_of_t$43,v),
        bnd=[1,[0,_an5_,[0,arg$1,0]]],
        bnds$1=[0,bnd,bnds$0];
      else
       var bnds$1=bnds$0;
      var
       arg$2=caml_call1(sexp_of_t$43,v_summary),
       bnds$2=[0,[1,[0,_an6_,[0,arg$2,0]]],bnds$1];
      return [1,bnds$2]}
    function find_flag(t,prefix)
     {var match=caml_call2(_CD_,prefix,cst$211);
      if(match)
       {var
         _aSS_=
          function(choices)
           {function _aSZ_(_aS0_){return _aS0_[2]}
            return caml_call2
                    (_t3_,
                     caml_call2
                      (_hY_,lookup_expand(caml_call1(_q5_,choices),prefix,1),_n0_),
                     _aSZ_)},
         _aST_=
          function(flag_info)
           {function _aSW_(flag_name)
             {function _aSY_(key){return [0,key,[0,flag_info,-481604174]]}
              return [0,caml_call2(_p9_,[0,flag_name,flag_info[3]],_aSY_)]}
            var _aSX_=flag_name(flag_info);
            return caml_call2(include$27[24][4][2],_aSX_,_aSW_)},
         _aSU_=caml_call1(_t6_,caml_call2(_p9_,t[4],_aST_));
        return caml_call2(include$27[24][4][2],_aSU_,_aSS_)}
      var _aSV_=[0,caml_call1(Sexplib0_Sexp_conv[7],prefix),0];
      return caml_call1
              (_tW_,
               [1,
                [0,
                 caml_call1(Sexplib0_Sexp_conv[7],cst_Flags_must_begin_with),
                 _aSV_]])}
    function get_usage(t)
     {var _aSR_=t[3];
      if(0 === _aSR_[0]){var usage$0=_aSR_[1];return usage$0}
      var grammar=_aSR_[1];
      return usage(grammar)}
    var
     _an7_=caml_call1(Bin_prot_Shape[3][1],cst_a$99),
     _an8_=caml_call1(Bin_prot_Shape[4][1],cst_src_command_shape_ml_652_3),
     _an9_=
      [0,bin_shape_string,[0,caml_call2(Bin_prot_Shape[15],_an8_,_an7_),0]],
     _an__=
      [0,
       [0,
        cst_subcommands$5,
        bin_shape_t$70(bin_shape_t$24(caml_call1(Bin_prot_Shape[7],_an9_)))],
       0],
     _an$_=
      [0,
       [0,cst_summary$24,bin_shape_string],
       [0,[0,cst_readme$16,bin_shape_option(bin_shape_string)],_an__]],
     _aoa_=caml_call1(Bin_prot_Shape[8],_an$_),
     _aob_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$100),0],
     _aoc_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$269),_aob_,_aoa_],0],
     _aod_=caml_call1(Bin_prot_Shape[4][1],cst_src_command_shape_ml_649_2),
     group$146=caml_call2(Bin_prot_Shape[6],_aod_,_aoc_);
    function bin_shape_t$128(a)
     {var _aSQ_=caml_call1(Bin_prot_Shape[2][1],cst_t$270);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$146,_aSQ_),[0,a,0])}
    function bin_size_t$85(size_of_a,param)
     {var
       v3=param[3],
       v2=param[2],
       v1=param[1],
       _aSJ_=caml_call1(bin_size_t$48,v1),
       size=caml_call2(Bin_prot_Common[23],0,_aSJ_),
       _aSK_=bin_size_option(bin_size_t$48,v2),
       size$0=caml_call2(Bin_prot_Common[23],size,_aSK_);
      function _aSL_(param)
       {var
         v2=param[2],
         v1=param[1],
         _aSO_=caml_call1(bin_size_t$48,v1),
         size=caml_call2(Bin_prot_Common[23],0,_aSO_),
         _aSP_=caml_call1(size_of_a,v2);
        return caml_call2(Bin_prot_Common[23],size,_aSP_)}
      var
       _aSM_=
        bin_size_t$58(function(_aSN_){return bin_size_t$31(_aSL_,_aSN_)},v3);
      return caml_call2(Bin_prot_Common[23],size$0,_aSM_)}
    function bin_write_t$86(write_a,buf,pos,param)
     {var
       v3=param[3],
       v2=param[2],
       v1=param[1],
       pos$0=caml_call3(bin_write_t$48,buf,pos,v1),
       pos$1=bin_write_option(bin_write_t$48,buf,pos$0,v2);
      function _aSF_(buf,pos,param)
       {var
         v2=param[2],
         v1=param[1],
         pos$0=caml_call3(bin_write_t$48,buf,pos,v1);
        return caml_call3(write_a,buf,pos$0,v2)}
      return bin_write_t$58
              (function(_aSG_,_aSH_,_aSI_)
                {return bin_write_t$31(_aSF_,_aSG_,_aSH_,_aSI_)},
               buf,
               pos$1,
               v3)}
    function bin_writer_t$105(bin_writer_a)
     {function _aSB_(v)
       {var _aSC_=bin_writer_a[2];
        return function(_aSD_,_aSE_)
         {return bin_write_t$86(_aSC_,v,_aSD_,_aSE_)}}
      return [0,function(v){return bin_size_t$85(bin_writer_a[1],v)},_aSB_]}
    function bin_read_t$169(of_a,buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_src_command_shape_ml_Group,pos_ref[1])}
    function bin_read_t$170(of_a,buf,pos_ref)
     {var
       v_summary=caml_call2(bin_read_t$98,buf,pos_ref),
       v_readme=bin_read_option$0(bin_read_t$98,buf,pos_ref);
      function _aSy_(buf,pos_ref)
       {var
         v1=caml_call2(bin_read_t$98,buf,pos_ref),
         v2=caml_call2(of_a,buf,pos_ref);
        return [0,v1,v2]}
      var
       v_subcommands=
        bin_read_t$119
         (function(_aSz_,_aSA_){return bin_read_t$65(_aSy_,_aSz_,_aSA_)},
          buf,
          pos_ref);
      return [0,v_summary,v_readme,v_subcommands]}
    function bin_reader_t$105(bin_reader_a)
     {function _aSx_(buf,pos_ref,vtag)
       {return bin_read_t$169(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$170(bin_reader_a[1],buf,pos_ref)},
              _aSx_]}
    function bin_t$105(bin_a)
     {var _aSv_=bin_reader_t$105(bin_a[3]),_aSw_=bin_writer_t$105(bin_a[2]);
      return [0,bin_shape_t$128(bin_a[1]),_aSw_,_aSv_]}
    function compare$95(cmp_a,a_120,b_121)
     {if(caml_call2(Ppx_compare_lib[1],a_120,b_121))return 0;
      var n=caml_call2(compare$37,a_120[1],b_121[1]);
      if(0 === n)
       {var
         _aSr_=b_121[2],
         _aSs_=a_120[2],
         n$0=
          compare_option
           (function(a_122,b_123){return caml_call2(compare$37,a_122,b_123)},
            _aSs_,
            _aSr_);
        if(0 === n$0)
         {var _aSt_=b_121[3],_aSu_=a_120[3];
          return caml_call3
                  (_Lp_,
                   function(a_124,b_125)
                    {return caml_call3
                             (_o6_,
                              function(a_126,b_127)
                               {var
                                 t_129=a_126[2],
                                 t_128=a_126[1],
                                 t_131=b_127[2],
                                 t_130=b_127[1],
                                 n=caml_call2(compare$37,t_128,t_130);
                                return 0 === n?caml_call2(cmp_a,t_129,t_131):n},
                              a_124,
                              b_125)},
                   _aSu_,
                   _aSt_)}
        return n$0}
      return n}
    function subcommands(r){return r[3]}
    function readme$1(r){return r[2]}
    function summary$1(r){return r[1]}
    function _aoe_(r,v){return [0,r[1],r[2],v]}
    var
     _aof_=0,
     subcommands$0=
      [0,function(param){return 0},cst_subcommands$6,_aof_,subcommands,_aoe_];
    function _aog_(r,v){return [0,r[1],v,r[3]]}
    var
     _aoh_=0,
     readme$2=[0,function(param){return 0},cst_readme$17,_aoh_,readme$1,_aog_];
    function _aoi_(r,v){return [0,v,r[2],r[3]]}
    var
     _aoj_=0,
     summary$2=
      [0,function(param){return 0},cst_summary$25,_aoj_,summary$1,_aoi_];
    function make_creator$2
     (summary_fun,readme_fun,subcommands_fun,compile_acc)
     {var
       match=caml_call2(summary_fun,summary$2,compile_acc),
       compile_acc$0=match[2],
       summary_gen=match[1],
       match$0=caml_call2(readme_fun,readme$2,compile_acc$0),
       compile_acc$1=match$0[2],
       readme_gen=match$0[1],
       match$1=caml_call2(subcommands_fun,subcommands$0,compile_acc$1),
       compile_acc$2=match$1[2],
       subcommands_gen=match$1[1];
      return [0,
              function(acc)
               {var
                 summary=caml_call1(summary_gen,acc),
                 readme=caml_call1(readme_gen,acc),
                 subcommands=caml_call1(subcommands_gen,acc);
                return [0,summary,readme,subcommands]},
              compile_acc$2]}
    function create$30(summary,readme,subcommands)
     {return [0,summary,readme,subcommands]}
    function map$33(summary_fun,readme_fun,subcommands_fun)
     {var
       _aSp_=caml_call1(subcommands_fun,subcommands$0),
       _aSq_=caml_call1(readme_fun,readme$2);
      return [0,caml_call1(summary_fun,summary$2),_aSq_,_aSp_]}
    function iter$26(summary_fun,readme_fun,subcommands_fun)
     {caml_call1(summary_fun,summary$2);
      caml_call1(readme_fun,readme$2);
      return caml_call1(subcommands_fun,subcommands$0)}
    function fold$22(init,summary_fun,readme_fun,subcommands_fun)
     {return caml_call2
              (subcommands_fun,
               caml_call2
                (readme_fun,caml_call2(summary_fun,init,summary$2),readme$2),
               subcommands$0)}
    function map_poly$2(record)
     {var
       _aSn_=[0,caml_call1(record[1],subcommands$0),0],
       _aSo_=[0,caml_call1(record[1],readme$2),_aSn_];
      return [0,caml_call1(record[1],summary$2),_aSo_]}
    function for_all$18(summary_fun,readme_fun,subcommands_fun)
     {var
       _aSl_=caml_call1(summary_fun,summary$2),
       _aSm_=_aSl_?caml_call1(readme_fun,readme$2):_aSl_;
      return _aSm_?caml_call1(subcommands_fun,subcommands$0):_aSm_}
    function exists$19(summary_fun,readme_fun,subcommands_fun)
     {var
       _aSk_=caml_call1(summary_fun,summary$2),
       _aSj_=_aSk_ || caml_call1(readme_fun,readme$2);
      return _aSj_?_aSj_:caml_call1(subcommands_fun,subcommands$0)}
    function to_list$15(summary_fun,readme_fun,subcommands_fun)
     {var
       _aSh_=[0,caml_call1(subcommands_fun,subcommands$0),0],
       _aSi_=[0,caml_call1(readme_fun,readme$2),_aSh_];
      return [0,caml_call1(summary_fun,summary$2),_aSi_]}
    function iter$27(record,summary_fun,readme_fun,subcommands_fun)
     {caml_call3(summary_fun,summary$2,record,record[1]);
      caml_call3(readme_fun,readme$2,record,record[2]);
      return caml_call3(subcommands_fun,subcommands$0,record,record[3])}
    function fold$23(record,init,summary_fun,readme_fun,subcommands_fun)
     {var _aSf_=record[3],_aSg_=record[2];
      return caml_call4
              (subcommands_fun,
               caml_call4
                (readme_fun,
                 caml_call4(summary_fun,init,summary$2,record,record[1]),
                 readme$2,
                 record,
                 _aSg_),
               subcommands$0,
               record,
               _aSf_)}
    function for_all$19(record,summary_fun,readme_fun,subcommands_fun)
     {var
       _aSd_=caml_call3(summary_fun,summary$2,record,record[1]),
       _aSe_=_aSd_?caml_call3(readme_fun,readme$2,record,record[2]):_aSd_;
      return _aSe_
              ?caml_call3(subcommands_fun,subcommands$0,record,record[3])
              :_aSe_}
    function exists$20(record,summary_fun,readme_fun,subcommands_fun)
     {var
       _aSc_=caml_call3(summary_fun,summary$2,record,record[1]),
       _aSb_=_aSc_ || caml_call3(readme_fun,readme$2,record,record[2]);
      return _aSb_
              ?_aSb_
              :caml_call3(subcommands_fun,subcommands$0,record,record[3])}
    function to_list$16(record,summary_fun,readme_fun,subcommands_fun)
     {var
       _aR$_=[0,caml_call3(subcommands_fun,subcommands$0,record,record[3]),0],
       _aSa_=[0,caml_call3(readme_fun,readme$2,record,record[2]),_aR$_];
      return [0,caml_call3(summary_fun,summary$2,record,record[1]),_aSa_]}
    function map$34(record,summary_fun,readme_fun,subcommands_fun)
     {var
       _aR9_=caml_call3(subcommands_fun,subcommands$0,record,record[3]),
       _aR__=caml_call3(readme_fun,readme$2,record,record[2]);
      return [0,
              caml_call3(summary_fun,summary$2,record,record[1]),
              _aR__,
              _aR9_]}
    function set_all_mutable_fields$2(record)
     {caml_call1(Base_Field[1][1],record);return 0}
    var
     Direct$2=
      [0,
       iter$27,
       fold$23,
       for_all$19,
       exists$20,
       to_list$16,
       map$34,
       set_all_mutable_fields$2];
    function t_of_sexp$107(of_a,sexp)
     {if(0 === sexp[0])
       return caml_call2(Sexplib0_Sexp_conv_error[16],tp_loc$49,sexp);
      var
       field_sexps=sexp[1],
       summary_field=[0,0],
       readme_field=[0,0],
       subcommands_field=[0,0],
       duplicates=[0,0],
       extra=[0,0],
       param=field_sexps;
      for(;;)
       {if(param)
         {var _aRY_=param[1];
          if(1 === _aRY_[0])
           {var _aRZ_=_aRY_[1];
            if(_aRZ_)
             {var _aR0_=_aRZ_[1];
              if(0 === _aR0_[0])
               {var _aR1_=_aRZ_[2],_aR2_=_aR0_[1],switch$0=0;
                if(! _aR1_ || ! _aR1_[2])switch$0 = 1;
                if(switch$0)
                 {var
                   tail=param[2],
                   field_sexp$3=
                    function(_aR8_)
                     {function field_sexp(param)
                       {if(_aR8_)
                         {if(_aR8_[2])throw [0,Assert_failure,_aok_];
                          var x=_aR8_[1];
                          return x}
                        return caml_call2
                                (Sexplib0_Sexp_conv_error[10],tp_loc$49,sexp)}
                      return field_sexp},
                   field_sexp=field_sexp$3(_aR1_);
                  if(caml_string_notequal(_aR2_,cst_readme$18))
                   if(caml_string_notequal(_aR2_,cst_subcommands$7))
                    if(caml_string_notequal(_aR2_,cst_summary$26))
                     {if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_aR2_,extra[1]]}
                    else
                     if(summary_field[1])
                      duplicates[1] = [0,_aR2_,duplicates[1]];
                     else
                      {var
                        field_sexp$0=field_sexp(0),
                        fvalue=caml_call1(t_of_sexp$35,field_sexp$0);
                       summary_field[1] = [0,fvalue]}
                   else
                    if(subcommands_field[1])
                     duplicates[1] = [0,_aR2_,duplicates[1]];
                    else
                     {var
                       field_sexp$1=field_sexp(0),
                       fvalue$0=
                        caml_call2
                         (_Lr_,
                          caml_call1
                           (t_of_sexp$18,
                            function(sexp)
                             {if(1 === sexp[0])
                               {var _aR6_=sexp[1];
                                if(_aR6_)
                                 {var _aR7_=_aR6_[2];
                                  if(_aR7_ && ! _aR7_[2])
                                   {var
                                     v1=_aR7_[1],
                                     v0=_aR6_[1],
                                     v0$0=caml_call1(t_of_sexp$35,v0),
                                     v1$0=caml_call1(of_a,v1);
                                    return [0,v0$0,v1$0]}}}
                              return caml_call3
                                      (Sexplib0_Sexp_conv_error[2],tp_loc$49,2,sexp)}),
                          field_sexp$1);
                      subcommands_field[1] = [0,fvalue$0]}
                  else
                   if(readme_field[1])
                    duplicates[1] = [0,_aR2_,duplicates[1]];
                   else
                    {var
                      field_sexp$2=field_sexp(0),
                      fvalue$1=caml_call1(t_of_sexp$35,field_sexp$2);
                     readme_field[1] = [0,fvalue$1]}
                  var param=tail;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[10],tp_loc$49,_aRY_)}
        if(duplicates[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],tp_loc$49,duplicates[1],sexp);
        if(extra[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[13],tp_loc$49,extra[1],sexp);
        var
         _aR3_=summary_field[1],
         _aR5_=subcommands_field[1],
         _aR4_=readme_field[1];
        if(_aR3_ && _aR5_)
         {var subcommands_value=_aR5_[1],summary_value=_aR3_[1];
          return [0,summary_value,_aR4_,subcommands_value]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[15],
                 tp_loc$49,
                 sexp,
                 [0,
                  [0,0 === summary_field[1]?1:0,cst_summary$27],
                  [0,[0,0 === subcommands_field[1]?1:0,cst_subcommands$8],0]])}}
    function sexp_of_t$118(of_a,param)
     {var
       v_subcommands=param[3],
       v_readme=param[2],
       v_summary=param[1],
       bnds=0,
       arg=
        caml_call2
         (_Ls_,
          caml_call1
           (sexp_of_t$17,
            function(param)
             {var
               v1=param[2],
               v0=param[1],
               v0$0=caml_call1(sexp_of_t$43,v0),
               v1$0=caml_call1(of_a,v1);
              return [1,[0,v0$0,[0,v1$0,0]]]}),
          v_subcommands),
       bnds$0=[0,[1,[0,_aol_,[0,arg,0]]],bnds];
      if(v_readme)
       var
        v=v_readme[1],
        arg$0=caml_call1(sexp_of_t$43,v),
        bnd=[1,[0,_aom_,[0,arg$0,0]]],
        bnds$1=[0,bnd,bnds$0];
      else
       var bnds$1=bnds$0;
      var
       arg$1=caml_call1(sexp_of_t$43,v_summary),
       bnds$2=[0,[1,[0,_aon_,[0,arg$1,0]]],bnds$1];
      return [1,bnds$2]}
    function find_subcommand(t,prefix)
     {var match=caml_call2(_CD_,prefix,cst$212);
      if(match)
       {var _aRU_=[0,caml_call1(Sexplib0_Sexp_conv[7],prefix),0];
        return caml_call1
                (_tW_,
                 [1,
                  [0,
                   caml_call1
                    (Sexplib0_Sexp_conv[7],cst_Subcommands_must_not_begin),
                   _aRU_]])}
      function _aRV_(param)
       {var a=param[2],key=param[1];return [0,key,[0,a,-481604174]]}
      var choices=caml_call2(_p9_,force(t[3]),_aRV_);
      function _aRW_(_aRX_){return _aRX_[2]}
      return caml_call2
              (_t3_,
               caml_call2(_hY_,lookup_expand(choices,prefix,0),_n0_),
               _aRW_)}
    var
     _aoo_=
      [0,
       [0,cst_working_dir$5,bin_shape_string],
       [0,
        [0,cst_path_to_exe$8,bin_shape_string],
        [0,[0,cst_child_subcommand$2,bin_shape_list(bin_shape_string)],0]]],
     _aop_=
      [0,
       [0,cst_summary$28,bin_shape_string],
       [0,[0,cst_readme$19,bin_shape_option(bin_shape_string)],_aoo_]],
     _aoq_=caml_call1(Bin_prot_Shape[8],_aop_),
     _aor_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$271),0,_aoq_],0],
     _aos_=caml_call1(Bin_prot_Shape[4][1],cst_src_command_shape_ml_672_2),
     group$147=caml_call2(Bin_prot_Shape[6],_aos_,_aor_),
     _aot_=caml_call1(Bin_prot_Shape[2][1],cst_t$272),
     bin_shape_t$129=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$147,_aot_),0);
    function bin_size_t$86(param)
     {var
       v5=param[5],
       v4=param[4],
       v3=param[3],
       v2=param[2],
       v1=param[1],
       _aRP_=caml_call1(bin_size_t$48,v1),
       size=caml_call2(Bin_prot_Common[23],0,_aRP_),
       _aRQ_=bin_size_option(bin_size_t$48,v2),
       size$0=caml_call2(Bin_prot_Common[23],size,_aRQ_),
       _aRR_=caml_call1(bin_size_t$48,v3),
       size$1=caml_call2(Bin_prot_Common[23],size$0,_aRR_),
       _aRS_=caml_call1(bin_size_t$48,v4),
       size$2=caml_call2(Bin_prot_Common[23],size$1,_aRS_),
       _aRT_=bin_size_list(bin_size_t$48,v5);
      return caml_call2(Bin_prot_Common[23],size$2,_aRT_)}
    function bin_write_t$87(buf,pos,param)
     {var
       v5=param[5],
       v4=param[4],
       v3=param[3],
       v2=param[2],
       v1=param[1],
       pos$0=caml_call3(bin_write_t$48,buf,pos,v1),
       pos$3=bin_write_option(bin_write_t$48,buf,pos$0,v2),
       pos$1=caml_call3(bin_write_t$48,buf,pos$3,v3),
       pos$2=caml_call3(bin_write_t$48,buf,pos$1,v4);
      return bin_write_list(bin_write_t$48,buf,pos$2,v5)}
    var bin_writer_t$106=[0,bin_size_t$86,bin_write_t$87];
    function bin_read_t$171(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_src_command_shape_ml_Exec_,pos_ref[1])}
    function bin_read_t$172(buf,pos_ref)
     {var
       v_summary=caml_call2(bin_read_t$98,buf,pos_ref),
       v_readme=bin_read_option$0(bin_read_t$98,buf,pos_ref),
       v_working_dir=caml_call2(bin_read_t$98,buf,pos_ref),
       v_path_to_exe=caml_call2(bin_read_t$98,buf,pos_ref),
       v_child_subcommand=bin_read_list$0(bin_read_t$98,buf,pos_ref);
      return [0,
              v_summary,
              v_readme,
              v_working_dir,
              v_path_to_exe,
              v_child_subcommand]}
    var
     bin_reader_t$106=[0,bin_read_t$172,bin_read_t$171],
     bin_t$106=[0,bin_shape_t$129,bin_writer_t$106,bin_reader_t$106];
    function compare$96(a_132,b_133)
     {if(caml_call2(Ppx_compare_lib[1],a_132,b_133))return 0;
      var n=caml_call2(compare$37,a_132[1],b_133[1]);
      if(0 === n)
       {var
         _aRL_=b_133[2],
         _aRM_=a_132[2],
         n$0=
          compare_option
           (function(a_134,b_135){return caml_call2(compare$37,a_134,b_135)},
            _aRM_,
            _aRL_);
        if(0 === n$0)
         {var n$1=caml_call2(compare$37,a_132[3],b_133[3]);
          if(0 === n$1)
           {var n$2=caml_call2(compare$37,a_132[4],b_133[4]);
            if(0 === n$2)
             {var _aRN_=b_133[5],_aRO_=a_132[5];
              return compare_list
                      (function(a_136,b_137)
                        {return caml_call2(compare$37,a_136,b_137)},
                       _aRO_,
                       _aRN_)}
            return n$2}
          return n$1}
        return n$0}
      return n}
    function child_subcommand(r){return r[5]}
    function path_to_exe(r){return r[4]}
    function working_dir(r){return r[3]}
    function readme$3(r){return r[2]}
    function summary$3(r){return r[1]}
    function _aou_(r,v){return [0,r[1],r[2],r[3],r[4],v]}
    var
     _aov_=0,
     child_subcommand$0=
      [0,
       function(param){return 0},
       cst_child_subcommand$3,
       _aov_,
       child_subcommand,
       _aou_];
    function _aow_(r,v){return [0,r[1],r[2],r[3],v,r[5]]}
    var
     _aox_=0,
     path_to_exe$0=
      [0,function(param){return 0},cst_path_to_exe$9,_aox_,path_to_exe,_aow_];
    function _aoy_(r,v){return [0,r[1],r[2],v,r[4],r[5]]}
    var
     _aoz_=0,
     working_dir$0=
      [0,function(param){return 0},cst_working_dir$6,_aoz_,working_dir,_aoy_];
    function _aoA_(r,v){return [0,r[1],v,r[3],r[4],r[5]]}
    var
     _aoB_=0,
     readme$4=[0,function(param){return 0},cst_readme$20,_aoB_,readme$3,_aoA_];
    function _aoC_(r,v){return [0,v,r[2],r[3],r[4],r[5]]}
    var
     _aoD_=0,
     summary$4=
      [0,function(param){return 0},cst_summary$29,_aoD_,summary$3,_aoC_];
    function make_creator$3
     (summary_fun,
      readme_fun,
      working_dir_fun,
      path_to_exe_fun,
      child_subcommand_fun,
      compile_acc)
     {var
       match=caml_call2(summary_fun,summary$4,compile_acc),
       compile_acc$0=match[2],
       summary_gen=match[1],
       match$0=caml_call2(readme_fun,readme$4,compile_acc$0),
       compile_acc$1=match$0[2],
       readme_gen=match$0[1],
       match$1=caml_call2(working_dir_fun,working_dir$0,compile_acc$1),
       compile_acc$2=match$1[2],
       working_dir_gen=match$1[1],
       match$2=caml_call2(path_to_exe_fun,path_to_exe$0,compile_acc$2),
       compile_acc$3=match$2[2],
       path_to_exe_gen=match$2[1],
       match$3=
        caml_call2(child_subcommand_fun,child_subcommand$0,compile_acc$3),
       compile_acc$4=match$3[2],
       child_subcommand_gen=match$3[1];
      return [0,
              function(acc)
               {var
                 summary=caml_call1(summary_gen,acc),
                 readme=caml_call1(readme_gen,acc),
                 working_dir=caml_call1(working_dir_gen,acc),
                 path_to_exe=caml_call1(path_to_exe_gen,acc),
                 child_subcommand=caml_call1(child_subcommand_gen,acc);
                return [0,
                        summary,
                        readme,
                        working_dir,
                        path_to_exe,
                        child_subcommand]},
              compile_acc$4]}
    function create$31
     (summary,readme,working_dir,path_to_exe,child_subcommand)
     {return [0,summary,readme,working_dir,path_to_exe,child_subcommand]}
    function map$35
     (summary_fun,
      readme_fun,
      working_dir_fun,
      path_to_exe_fun,
      child_subcommand_fun)
     {var
       _aRH_=caml_call1(child_subcommand_fun,child_subcommand$0),
       _aRI_=caml_call1(path_to_exe_fun,path_to_exe$0),
       _aRJ_=caml_call1(working_dir_fun,working_dir$0),
       _aRK_=caml_call1(readme_fun,readme$4);
      return [0,caml_call1(summary_fun,summary$4),_aRK_,_aRJ_,_aRI_,_aRH_]}
    function iter$28
     (summary_fun,
      readme_fun,
      working_dir_fun,
      path_to_exe_fun,
      child_subcommand_fun)
     {caml_call1(summary_fun,summary$4);
      caml_call1(readme_fun,readme$4);
      caml_call1(working_dir_fun,working_dir$0);
      caml_call1(path_to_exe_fun,path_to_exe$0);
      return caml_call1(child_subcommand_fun,child_subcommand$0)}
    function fold$24
     (init,
      summary_fun,
      readme_fun,
      working_dir_fun,
      path_to_exe_fun,
      child_subcommand_fun)
     {return caml_call2
              (child_subcommand_fun,
               caml_call2
                (path_to_exe_fun,
                 caml_call2
                  (working_dir_fun,
                   caml_call2
                    (readme_fun,caml_call2(summary_fun,init,summary$4),readme$4),
                   working_dir$0),
                 path_to_exe$0),
               child_subcommand$0)}
    function map_poly$3(record)
     {var
       _aRD_=[0,caml_call1(record[1],child_subcommand$0),0],
       _aRE_=[0,caml_call1(record[1],path_to_exe$0),_aRD_],
       _aRF_=[0,caml_call1(record[1],working_dir$0),_aRE_],
       _aRG_=[0,caml_call1(record[1],readme$4),_aRF_];
      return [0,caml_call1(record[1],summary$4),_aRG_]}
    function for_all$20
     (summary_fun,
      readme_fun,
      working_dir_fun,
      path_to_exe_fun,
      child_subcommand_fun)
     {var
       _aRz_=caml_call1(summary_fun,summary$4),
       _aRA_=_aRz_?caml_call1(readme_fun,readme$4):_aRz_,
       _aRB_=_aRA_?caml_call1(working_dir_fun,working_dir$0):_aRA_,
       _aRC_=_aRB_?caml_call1(path_to_exe_fun,path_to_exe$0):_aRB_;
      return _aRC_?caml_call1(child_subcommand_fun,child_subcommand$0):_aRC_}
    function exists$21
     (summary_fun,
      readme_fun,
      working_dir_fun,
      path_to_exe_fun,
      child_subcommand_fun)
     {var
       _aRy_=caml_call1(summary_fun,summary$4),
       _aRv_=_aRy_ || caml_call1(readme_fun,readme$4),
       _aRw_=_aRv_ || caml_call1(working_dir_fun,working_dir$0),
       _aRx_=_aRw_ || caml_call1(path_to_exe_fun,path_to_exe$0);
      return _aRx_?_aRx_:caml_call1(child_subcommand_fun,child_subcommand$0)}
    function to_list$17
     (summary_fun,
      readme_fun,
      working_dir_fun,
      path_to_exe_fun,
      child_subcommand_fun)
     {var
       _aRr_=[0,caml_call1(child_subcommand_fun,child_subcommand$0),0],
       _aRs_=[0,caml_call1(path_to_exe_fun,path_to_exe$0),_aRr_],
       _aRt_=[0,caml_call1(working_dir_fun,working_dir$0),_aRs_],
       _aRu_=[0,caml_call1(readme_fun,readme$4),_aRt_];
      return [0,caml_call1(summary_fun,summary$4),_aRu_]}
    function iter$29
     (record,
      summary_fun,
      readme_fun,
      working_dir_fun,
      path_to_exe_fun,
      child_subcommand_fun)
     {caml_call3(summary_fun,summary$4,record,record[1]);
      caml_call3(readme_fun,readme$4,record,record[2]);
      caml_call3(working_dir_fun,working_dir$0,record,record[3]);
      caml_call3(path_to_exe_fun,path_to_exe$0,record,record[4]);
      return caml_call3
              (child_subcommand_fun,child_subcommand$0,record,record[5])}
    function fold$25
     (record,
      init,
      summary_fun,
      readme_fun,
      working_dir_fun,
      path_to_exe_fun,
      child_subcommand_fun)
     {var _aRn_=record[5],_aRo_=record[4],_aRp_=record[3],_aRq_=record[2];
      return caml_call4
              (child_subcommand_fun,
               caml_call4
                (path_to_exe_fun,
                 caml_call4
                  (working_dir_fun,
                   caml_call4
                    (readme_fun,
                     caml_call4(summary_fun,init,summary$4,record,record[1]),
                     readme$4,
                     record,
                     _aRq_),
                   working_dir$0,
                   record,
                   _aRp_),
                 path_to_exe$0,
                 record,
                 _aRo_),
               child_subcommand$0,
               record,
               _aRn_)}
    function for_all$21
     (record,
      summary_fun,
      readme_fun,
      working_dir_fun,
      path_to_exe_fun,
      child_subcommand_fun)
     {var
       _aRj_=caml_call3(summary_fun,summary$4,record,record[1]),
       _aRk_=_aRj_?caml_call3(readme_fun,readme$4,record,record[2]):_aRj_,
       _aRl_=
        _aRk_?caml_call3(working_dir_fun,working_dir$0,record,record[3]):_aRk_,
       _aRm_=
        _aRl_?caml_call3(path_to_exe_fun,path_to_exe$0,record,record[4]):_aRl_;
      return _aRm_
              ?caml_call3
                (child_subcommand_fun,child_subcommand$0,record,record[5])
              :_aRm_}
    function exists$22
     (record,
      summary_fun,
      readme_fun,
      working_dir_fun,
      path_to_exe_fun,
      child_subcommand_fun)
     {var
       _aRi_=caml_call3(summary_fun,summary$4,record,record[1]),
       _aRf_=_aRi_ || caml_call3(readme_fun,readme$4,record,record[2]),
       _aRg_=
        _aRf_
        ||
        caml_call3(working_dir_fun,working_dir$0,record,record[3]),
       _aRh_=
        _aRg_
        ||
        caml_call3(path_to_exe_fun,path_to_exe$0,record,record[4]);
      return _aRh_
              ?_aRh_
              :caml_call3
                (child_subcommand_fun,child_subcommand$0,record,record[5])}
    function to_list$18
     (record,
      summary_fun,
      readme_fun,
      working_dir_fun,
      path_to_exe_fun,
      child_subcommand_fun)
     {var
       _aRb_=
        [0,
         caml_call3(child_subcommand_fun,child_subcommand$0,record,record[5]),
         0],
       _aRc_=
        [0,caml_call3(path_to_exe_fun,path_to_exe$0,record,record[4]),_aRb_],
       _aRd_=
        [0,caml_call3(working_dir_fun,working_dir$0,record,record[3]),_aRc_],
       _aRe_=[0,caml_call3(readme_fun,readme$4,record,record[2]),_aRd_];
      return [0,caml_call3(summary_fun,summary$4,record,record[1]),_aRe_]}
    function map$36
     (record,
      summary_fun,
      readme_fun,
      working_dir_fun,
      path_to_exe_fun,
      child_subcommand_fun)
     {var
       _aQ9_=
        caml_call3(child_subcommand_fun,child_subcommand$0,record,record[5]),
       _aQ__=caml_call3(path_to_exe_fun,path_to_exe$0,record,record[4]),
       _aQ$_=caml_call3(working_dir_fun,working_dir$0,record,record[3]),
       _aRa_=caml_call3(readme_fun,readme$4,record,record[2]);
      return [0,
              caml_call3(summary_fun,summary$4,record,record[1]),
              _aRa_,
              _aQ$_,
              _aQ__,
              _aQ9_]}
    function set_all_mutable_fields$3(record)
     {caml_call1(Base_Field[1][1],record);return 0}
    var
     Direct$3=
      [0,
       iter$29,
       fold$25,
       for_all$21,
       exists$22,
       to_list$18,
       map$36,
       set_all_mutable_fields$3];
    function t_of_sexp$108(sexp)
     {if(0 === sexp[0])
       return caml_call2(Sexplib0_Sexp_conv_error[16],tp_loc$50,sexp);
      var
       field_sexps=sexp[1],
       summary_field=[0,0],
       readme_field=[0,0],
       working_dir_field=[0,0],
       path_to_exe_field=[0,0],
       child_subcommand_field=[0,0],
       duplicates=[0,0],
       extra=[0,0],
       param=field_sexps;
      for(;;)
       {if(param)
         {var _aQY_=param[1];
          if(1 === _aQY_[0])
           {var _aQZ_=_aQY_[1];
            if(_aQZ_)
             {var _aQ0_=_aQZ_[1];
              if(0 === _aQ0_[0])
               {var _aQ1_=_aQZ_[2],_aQ2_=_aQ0_[1],switch$0=0;
                if(! _aQ1_ || ! _aQ1_[2])switch$0 = 1;
                if(switch$0)
                 {var
                   tail=param[2],
                   field_sexp$5=
                    function(_aQ8_)
                     {function field_sexp(param)
                       {if(_aQ8_)
                         {if(_aQ8_[2])throw [0,Assert_failure,_aoE_];
                          var x=_aQ8_[1];
                          return x}
                        return caml_call2
                                (Sexplib0_Sexp_conv_error[10],tp_loc$50,sexp)}
                      return field_sexp},
                   field_sexp=field_sexp$5(_aQ1_);
                  if(caml_string_notequal(_aQ2_,cst_child_subcommand$4))
                   if(caml_string_notequal(_aQ2_,cst_path_to_exe$10))
                    if(caml_string_notequal(_aQ2_,cst_readme$21))
                     if(caml_string_notequal(_aQ2_,cst_summary$30))
                      if(caml_string_notequal(_aQ2_,cst_working_dir$7))
                       {if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_aQ2_,extra[1]]}
                      else
                       if(working_dir_field[1])
                        duplicates[1] = [0,_aQ2_,duplicates[1]];
                       else
                        {var
                          field_sexp$0=field_sexp(0),
                          fvalue=caml_call1(t_of_sexp$35,field_sexp$0);
                         working_dir_field[1] = [0,fvalue]}
                     else
                      if(summary_field[1])
                       duplicates[1] = [0,_aQ2_,duplicates[1]];
                      else
                       {var
                         field_sexp$1=field_sexp(0),
                         fvalue$0=caml_call1(t_of_sexp$35,field_sexp$1);
                        summary_field[1] = [0,fvalue$0]}
                    else
                     if(readme_field[1])
                      duplicates[1] = [0,_aQ2_,duplicates[1]];
                     else
                      {var
                        field_sexp$2=field_sexp(0),
                        fvalue$1=caml_call1(t_of_sexp$35,field_sexp$2);
                       readme_field[1] = [0,fvalue$1]}
                   else
                    if(path_to_exe_field[1])
                     duplicates[1] = [0,_aQ2_,duplicates[1]];
                    else
                     {var
                       field_sexp$3=field_sexp(0),
                       fvalue$2=caml_call1(t_of_sexp$35,field_sexp$3);
                      path_to_exe_field[1] = [0,fvalue$2]}
                  else
                   if(child_subcommand_field[1])
                    duplicates[1] = [0,_aQ2_,duplicates[1]];
                   else
                    {var
                      field_sexp$4=field_sexp(0),
                      fvalue$3=caml_call2(t_of_sexp$18,t_of_sexp$35,field_sexp$4);
                     child_subcommand_field[1] = [0,fvalue$3]}
                  var param=tail;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[10],tp_loc$50,_aQY_)}
        if(duplicates[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],tp_loc$50,duplicates[1],sexp);
        if(extra[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[13],tp_loc$50,extra[1],sexp);
        var
         _aQ3_=summary_field[1],
         _aQ5_=working_dir_field[1],
         _aQ6_=path_to_exe_field[1],
         _aQ7_=child_subcommand_field[1],
         _aQ4_=readme_field[1];
        if(_aQ3_ && _aQ5_ && _aQ6_ && _aQ7_)
         {var
           child_subcommand_value=_aQ7_[1],
           path_to_exe_value=_aQ6_[1],
           working_dir_value=_aQ5_[1],
           summary_value=_aQ3_[1];
          return [0,
                  summary_value,
                  _aQ4_,
                  working_dir_value,
                  path_to_exe_value,
                  child_subcommand_value]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[15],
                 tp_loc$50,
                 sexp,
                 [0,
                  [0,0 === summary_field[1]?1:0,cst_summary$31],
                  [0,
                   [0,0 === working_dir_field[1]?1:0,cst_working_dir$8],
                   [0,
                    [0,0 === path_to_exe_field[1]?1:0,cst_path_to_exe$11],
                    [0,
                     [0,
                      0 === child_subcommand_field[1]?1:0,
                      cst_child_subcommand$5],
                     0]]]])}}
    function sexp_of_t$119(param)
     {var
       v_child_subcommand=param[5],
       v_path_to_exe=param[4],
       v_working_dir=param[3],
       v_readme=param[2],
       v_summary=param[1],
       arg=caml_call2(sexp_of_t$17,sexp_of_t$43,v_child_subcommand),
       bnds=[0,[1,[0,_aoF_,[0,arg,0]]],0],
       arg$0=caml_call1(sexp_of_t$43,v_path_to_exe),
       bnds$0=[0,[1,[0,_aoG_,[0,arg$0,0]]],bnds],
       arg$1=caml_call1(sexp_of_t$43,v_working_dir),
       bnds$1=[0,[1,[0,_aoH_,[0,arg$1,0]]],bnds$0];
      if(v_readme)
       var
        v=v_readme[1],
        arg$2=caml_call1(sexp_of_t$43,v),
        bnd=[1,[0,_aoI_,[0,arg$2,0]]],
        bnds$2=[0,bnd,bnds$1];
      else
       var bnds$2=bnds$1;
      var
       arg$3=caml_call1(sexp_of_t$43,v_summary),
       bnds$3=[0,[1,[0,_aoJ_,[0,arg$3,0]]],bnds$2];
      return [1,bnds$3]}
    var
     _aoK_=caml_call1(Bin_prot_Shape[2][1],cst_t$273),
     _aoL_=
      [0,
       [0,
        cst_Exec$11,
        [0,
         bin_shape_t$129,
         [0,caml_call1(caml_call1(Bin_prot_Shape[13],_aoK_),0),0]]],
       0],
     _aoM_=caml_call1(Bin_prot_Shape[2][1],cst_t$274),
     _aoN_=
      [0,
       [0,cst_Basic$2,[0,bin_shape_t$127,0]],
       [0,
        [0,
         cst_Group$11,
         [0,
          bin_shape_t$128(caml_call1(caml_call1(Bin_prot_Shape[13],_aoM_),0)),
          0]],
        _aoL_]],
     _aoO_=caml_call1(Bin_prot_Shape[9],_aoN_),
     _aoP_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$275),0,_aoO_],0],
     _aoQ_=caml_call1(Bin_prot_Shape[4][1],cst_src_command_shape_ml_683_2),
     group$148=caml_call2(Bin_prot_Shape[6],_aoQ_,_aoP_),
     _aoR_=caml_call1(Bin_prot_Shape[2][1],cst_t$276),
     bin_shape_t$130=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$148,_aoR_),0);
    function bin_size_t$87(param)
     {switch(param[0])
       {case 0:
         var v1=param[1],_aQU_=bin_size_t$84(v1);
         return caml_call2(Bin_prot_Common[23],1,_aQU_);
        case 1:
         var v1$0=param[1],_aQV_=bin_size_t$85(bin_size_t$87,v1$0);
         return caml_call2(Bin_prot_Common[23],1,_aQV_);
        default:
         var
          v2=param[2],
          v1$1=param[1],
          _aQW_=bin_size_t$86(v1$1),
          size=caml_call2(Bin_prot_Common[23],1,_aQW_),
          _aQX_=bin_size_t$87(v2);
         return caml_call2(Bin_prot_Common[23],size,_aQX_)}}
    function bin_write_t$88(buf,pos,param)
     {var pos$0=pos,param$0=param;
      for(;;)
       switch(param$0[0])
        {case 0:
          var v1=param$0[1],pos$1=caml_call3(Bin_prot_Write[30],buf,pos$0,0);
          return bin_write_t$85(buf,pos$1,v1);
         case 1:
          var
           v1$0=param$0[1],
           pos$2=caml_call3(Bin_prot_Write[30],buf,pos$0,1);
          return bin_write_t$86(bin_write_t$88,buf,pos$2,v1$0);
         default:
          var
           v2=param$0[2],
           v1$1=param$0[1],
           pos$3=caml_call3(Bin_prot_Write[30],buf,pos$0,2),
           pos$4=bin_write_t$87(buf,pos$3,v1$1),
           pos$0=pos$4,
           param$0=v2;
          continue}}
    var bin_writer_t$107=[0,bin_size_t$87,bin_write_t$88];
    function bin_read_t$173(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_src_command_shape_ml_Fully,pos_ref[1])}
    function bin_read_t$174(buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[29],buf,pos_ref);
      if(2 < match >>> 0)
       return caml_call2(Bin_prot_Common[18],_aoS_,pos_ref[1]);
      switch(match)
       {case 0:var arg_1=bin_read_t$168(buf,pos_ref);return [0,arg_1];
        case 1:
         var arg_1$1=bin_read_t$170(bin_read_t$174,buf,pos_ref);
         return [1,arg_1$1];
        default:
         var
          arg_1$0=bin_read_t$172(buf,pos_ref),
          arg_2=bin_read_t$174(buf,pos_ref);
         return [2,arg_1$0,arg_2]}}
    var
     bin_reader_t$107=[0,bin_read_t$174,bin_read_t$173],
     bin_t$107=[0,bin_shape_t$130,bin_writer_t$107,bin_reader_t$107];
    function compare$97(a_138,b_139)
     {var a_138$0=a_138,b_139$0=b_139;
      for(;;)
       {if(caml_call2(Ppx_compare_lib[1],a_138$0,b_139$0))return 0;
        switch(a_138$0[0])
         {case 0:
           var _aQQ_=a_138$0[1];
           if(0 === b_139$0[0])
            {var b_141=b_139$0[1];return compare$94(_aQQ_,b_141)}
           return -1;
          case 1:
           var _aQR_=a_138$0[1];
           switch(b_139$0[0])
            {case 0:break;
             case 1:
              var b_143=b_139$0[1];
              return compare$95
                      (function(a_144,b_145){return compare$97(a_144,b_145)},
                       _aQR_,
                       b_143);
             default:return -1}
           break;
          default:
           var _aQS_=a_138$0[2],_aQT_=a_138$0[1];
           switch(b_139$0[0])
            {case 0:break;
             case 1:return 1;
             default:
              var b_149=b_139$0[2],b_147=b_139$0[1],n=compare$96(_aQT_,b_147);
              if(0 === n){var a_138$0=_aQS_,b_139$0=b_149;continue}
              return n}}
        return 1}}
    var t_of_sexp$109=function _aQP_(_aQO_){return _aQP_.fun(_aQO_)};
    caml_update_dummy
     (t_of_sexp$109,
      function(sexp)
       {if(0 === sexp[0])
         {var _aQJ_=sexp[1],switch$0=0;
          if(caml_string_notequal(_aQJ_,cst_Basic$3))
           {var switch$1=0;
            if(caml_string_notequal(_aQJ_,cst_Exec$12))
             {var switch$2=0;
              if(caml_string_notequal(_aQJ_,cst_Group$12))
               if(caml_string_notequal(_aQJ_,cst_basic$1))
                if(caml_string_notequal(_aQJ_,cst_exec$7))
                 {if(caml_string_notequal(_aQJ_,cst_group$7))
                   {switch$0 = 1;switch$1 = 1;switch$2 = 1}}
                else
                 switch$2 = 1;
               else
                {switch$1 = 1;switch$2 = 1}
              if(! switch$2)
               return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$51,sexp)}
            if(! switch$1)
             return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$51,sexp)}
          if(! switch$0)
           return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$51,sexp)}
        else
         {var _aQK_=sexp[1];
          if(! _aQK_)
           return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$51,sexp);
          var _aQL_=_aQK_[1];
          if(0 !== _aQL_[0])
           return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$51,sexp);
          var _aQM_=_aQL_[1],switch$3=0;
          if(caml_string_notequal(_aQM_,cst_Basic$4))
           {var switch$4=0;
            if(caml_string_notequal(_aQM_,cst_Exec$13))
             {var switch$5=0;
              if(caml_string_notequal(_aQM_,cst_Group$13))
               if(caml_string_notequal(_aQM_,cst_basic$2))
                if(caml_string_notequal(_aQM_,cst_exec$8))
                 {if(caml_string_notequal(_aQM_,cst_group$8))
                   {switch$3 = 1;switch$4 = 1;switch$5 = 1}}
                else
                 switch$5 = 1;
               else
                {switch$4 = 1;switch$5 = 1}
              if(! switch$5)
               {var sexp_args=_aQK_[2];
                if(sexp_args && ! sexp_args[2])
                 {var v0=sexp_args[1],v0$0=t_of_sexp$107(t_of_sexp$109,v0);
                  return [1,v0$0]}
                return caml_call3
                        (Sexplib0_Sexp_conv_error[4],tp_loc$51,_aQM_,sexp)}}
            if(! switch$4)
             {var sexp_args$0=_aQK_[2];
              if(sexp_args$0)
               {var _aQN_=sexp_args$0[2];
                if(_aQN_ && ! _aQN_[2])
                 {var
                   v1=_aQN_[1],
                   v0$1=sexp_args$0[1],
                   v0$2=t_of_sexp$108(v0$1),
                   v1$0=caml_call1(t_of_sexp$109,v1);
                  return [2,v0$2,v1$0]}}
              return caml_call3
                      (Sexplib0_Sexp_conv_error[4],tp_loc$51,_aQM_,sexp)}}
          if(! switch$3)
           {var sexp_args$1=_aQK_[2];
            if(sexp_args$1 && ! sexp_args$1[2])
             {var v0$3=sexp_args$1[1],v0$4=t_of_sexp$106(v0$3);
              return [0,v0$4]}
            return caml_call3
                    (Sexplib0_Sexp_conv_error[4],tp_loc$51,_aQM_,sexp)}}
        return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$51,sexp)});
    function sexp_of_t$120(param)
     {switch(param[0])
       {case 0:
         var v0=param[1],v0$0=sexp_of_t$117(v0);
         return [1,[0,_aoT_,[0,v0$0,0]]];
        case 1:
         var v0$1=param[1],v0$2=sexp_of_t$118(sexp_of_t$120,v0$1);
         return [1,[0,_aoU_,[0,v0$2,0]]];
        default:
         var
          v1=param[2],
          v0$3=param[1],
          v0$4=sexp_of_t$119(v0$3),
          v1$0=sexp_of_t$120(v1);
         return [1,[0,_aoV_,[0,v0$4,[0,v1$0,0]]]]}}
    function sexp_of_t$121(param)
     {switch(param[0])
       {case 0:
         var v0=param[1],v0$0=sexp_of_t$117(v0);
         return [1,[0,_aoW_,[0,v0$0,0]]];
        case 1:
         var v0$1=param[1],v0$2=sexp_of_t$118(sexp_of_t$121,v0$1);
         return [1,[0,_aoX_,[0,v0$2,0]]];
        case 2:
         var v0$3=param[1],v0$4=sexp_of_t$119(v0$3);
         return [1,[0,_aoY_,[0,v0$4,0]]];
        default:
         var v0$5=param[1],v0$6=caml_call2(_Ls_,sexp_of_t$121,v0$5);
         return [1,[0,_aoZ_,[0,v0$6,0]]]}}
    function f(i,supported,param){return caml_call2(add$7,supported,i)}
    var _ao0_=3;
    function _ao1_(_aQH_,_aQI_){return f(_ao0_,_aQH_,_aQI_)}
    var _ao2_=2;
    function _ao3_(_aQF_,_aQG_){return f(_ao2_,_aQF_,_aQG_)}
    var _ao4_=1;
    function _ao5_(_aQD_,_aQE_){return f(_ao4_,_aQD_,_aQE_)}
    var
     supported_versions=
      fold$15(caml_call1(empty$6,[0,comparator$7]),_ao5_,_ao3_,_ao1_);
    function to_versioned(t,version_to_use)
     {var switcher=version_to_use - 1 | 0;
      if(2 < switcher >>> 0)
       return failwiths
               (0,_amK_,cst_unsupported_version_to_use,version_to_use,_$N_);
      switch(switcher)
       {case 0:return [0,of_latest$4(t)];
        case 1:return [1,of_latest$3(t)];
        default:return [2,t]}}
    function fully_forced(param)
     {var param$0=param;
      for(;;)
       switch(param$0[0])
        {case 0:var b=param$0[1];return [0,b];
         case 1:var g=param$0[1];return [1,map$25(g,fully_forced)];
         case 2:
          var f=param$0[2],e=param$0[1];
          return [2,e,fully_forced(caml_call1(f,0))];
         default:
          var
           thunk=param$0[1],
           _aQC_=caml_obj_tag(thunk),
           param$1=
            250 === _aQC_
             ?thunk[1]
             :246 === _aQC_?caml_call1(CamlinternalLazy[2],thunk):thunk,
           param$0=param$1;
          continue}}
    function get_summary(param)
     {var param$0=param;
      for(;;)
       switch(param$0[0])
        {case 0:var b=param$0[1];return b[1];
         case 1:var g=param$0[1];return g[1];
         case 2:var e=param$0[1];return e[1];
         default:
          var
           thunk=param$0[1],
           _aQB_=caml_obj_tag(thunk),
           param$1=
            250 === _aQB_
             ?thunk[1]
             :246 === _aQB_?caml_call1(CamlinternalLazy[2],thunk):thunk,
           param$0=param$1;
          continue}}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$427);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Command_shape$0);
    var
     _ao6_=[0,Key_type,abs_path,help_screen_compare,lookup_expand,word_wrap],
     include$129=
      [0,
       sexp_of_t$121,
       extraction_var,
       supported_versions,
       [0,t_of_sexp$103,sexp_of_t$112],
       of_versioned,
       to_versioned],
     _ao7_=
      [0,
       compare$94,
       flags,
       anons,
       readme,
       summary,
       [0,
        names$1,
        flags$0,
        anons$0,
        readme$0,
        summary$0,
        fold$20,
        make_creator$1,
        create$29,
        map$31,
        iter$24,
        for_all$16,
        exists$17,
        to_list$13,
        map_poly$1,
        Direct$1],
       sexp_of_t$117,
       find_flag,
       get_usage,
       bin_size_t$84,
       bin_write_t$85,
       bin_read_t$168,
       bin_read_t$167,
       bin_shape_t$127,
       bin_writer_t$104,
       bin_reader_t$104,
       bin_t$104,
       t_of_sexp$106],
     _ao8_=
      [0,
       compare$93,
       aliases,
       doc,
       name$70,
       [0,
        names$0,
        aliases$0,
        doc$0,
        name$71,
        fold$18,
        make_creator$0,
        create$28,
        map$29,
        iter$22,
        for_all$14,
        exists$15,
        to_list$11,
        map_poly$0,
        Direct$0],
       sexp_of_t$116,
       flag_name,
       num_occurrences,
       requires_arg,
       bin_size_t$83,
       bin_write_t$84,
       bin_read_t$166,
       bin_read_t$165,
       bin_shape_t$126,
       bin_writer_t$103,
       bin_reader_t$103,
       bin_t$103,
       t_of_sexp$105,
       sort$0,
       to_string$28],
     _ao9_=
      [0,
       compare$92,
       all$5,
       at_most_once,
       at_least_once,
       [0,
        names,
        at_most_once$0,
        at_least_once$0,
        fold$16,
        make_creator,
        create$27,
        map$27,
        iter$20,
        for_all$12,
        exists$13,
        to_list$9,
        map_poly,
        Direct],
       sexp_of_t$115,
       to_help_string],
     _ao__=
      [0,
       [0,bin_shape_t$124,compare$90,sexp_of_t$113,invariant$14,usage],
       bin_shape_t$125,
       compare$91,
       sexp_of_t$114],
     Core_kernel_Command_shape=
      [0,
       _ao__,
       _ao9_,
       _ao8_,
       _ao7_,
       [0,
        compare$95,
        subcommands,
        readme$1,
        summary$1,
        [0,
         names$2,
         subcommands$0,
         readme$2,
         summary$2,
         fold$22,
         make_creator$2,
         create$30,
         map$33,
         iter$26,
         for_all$18,
         exists$19,
         to_list$15,
         map_poly$2,
         Direct$2],
        sexp_of_t$118,
        find_subcommand,
        map$25,
        bin_shape_t$128,
        bin_size_t$85,
        bin_write_t$86,
        bin_read_t$170,
        bin_read_t$169,
        bin_writer_t$105,
        bin_reader_t$105,
        bin_t$105,
        t_of_sexp$107],
       [0,
        compare$96,
        child_subcommand,
        path_to_exe,
        working_dir,
        readme$3,
        summary$3,
        [0,
         names$3,
         child_subcommand$0,
         path_to_exe$0,
         working_dir$0,
         readme$4,
         summary$4,
         fold$24,
         make_creator$3,
         create$31,
         map$35,
         iter$28,
         for_all$20,
         exists$21,
         to_list$17,
         map_poly$3,
         Direct$3],
        sexp_of_t$119,
        bin_size_t$86,
        bin_write_t$87,
        bin_read_t$172,
        bin_read_t$171,
        bin_shape_t$129,
        bin_writer_t$106,
        bin_reader_t$106,
        bin_t$106,
        t_of_sexp$108],
       [0,
        compare$97,
        sexp_of_t$120,
        bin_size_t$87,
        bin_write_t$88,
        bin_read_t$174,
        bin_read_t$173,
        bin_shape_t$130,
        bin_writer_t$107,
        bin_reader_t$107,
        bin_t$107,
        t_of_sexp$109],
       fully_forced,
       get_summary,
       include$129,
       [0,
        [0,
         [0,
          [0,
           bin_size_t$75,
           bin_write_t$76,
           bin_read_t$151,
           bin_read_t$150,
           bin_shape_t$109,
           bin_writer_t$96,
           bin_reader_t$96,
           bin_t$96,
           compare$83,
           t_of_sexp$92,
           sexp_of_t$101]],
         [0,
          bin_size_t$76,
          bin_write_t$77,
          bin_read_t$153,
          bin_read_t$152,
          bin_shape_t$110,
          bin_writer_t$97,
          bin_reader_t$97,
          bin_t$97,
          compare$84,
          t_of_sexp$93,
          sexp_of_t$102]],
        [0,
         [0,
          bin_size_t$77,
          bin_write_t$78,
          bin_read_t$155,
          bin_read_t$154,
          bin_shape_t$111,
          bin_writer_t$98,
          bin_reader_t$98,
          bin_t$98,
          compare$85,
          t_of_sexp$94,
          sexp_of_t$103]],
        [0,
         [0,
          bin_size_t$78,
          bin_write_t$79,
          bin_read_t$157,
          bin_read_t$156,
          bin_shape_t$112,
          bin_writer_t$99,
          bin_reader_t$99,
          bin_t$99,
          compare$86,
          t_of_sexp$95,
          sexp_of_t$104]],
        [0,
         [0,
          bin_shape_t$114,
          bin_size_t$79,
          bin_write_t$80,
          bin_read_t$159,
          bin_read_t$158,
          bin_writer_t$100,
          bin_reader_t$100,
          bin_t$100,
          compare$87,
          t_of_sexp$96,
          sexp_of_t$105,
          map$25]],
        [0,
         [0,
          bin_size_t$80,
          bin_write_t$81,
          bin_read_t$161,
          bin_read_t$160,
          bin_shape_t$116,
          bin_writer_t$101,
          bin_reader_t$101,
          bin_t$101,
          compare$88,
          t_of_sexp$98,
          sexp_of_t$107]],
        [0,
         [0,
          bin_size_t$81,
          bin_write_t$82,
          bin_read_t$163,
          bin_read_t$162,
          bin_shape_t$119,
          bin_writer_t$102,
          bin_reader_t$102,
          bin_t$102,
          compare$89,
          t_of_sexp$99,
          sexp_of_t$108]]],
       _ao6_];
    caml_register_global
     (5144,Core_kernel_Command_shape,"Core_kernel__Command_shape");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Command_shape_);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$428);
    caml_call1(Expect_test_collector[4][1],cst_src_command_shape_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$429,cst$213);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$430);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Command_shape_$0);
    var Core_kernel_Command_shape_intf=[0];
    caml_register_global
     (5145,Core_kernel_Command_shape_intf,"Core_kernel__Command_shape_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Host_and_port);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$431);
    caml_call1(Expect_test_collector[4][1],cst_src_host_and_port_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$432,cst$214);
    function t_of_sexp$110(sexp)
     {if(1 === sexp[0])
       {var _aQz_=sexp[1];
        if(_aQz_)
         {var _aQA_=_aQz_[2];
          if(_aQA_ && ! _aQA_[2])
           {var
             v1=_aQA_[1],
             v0=_aQz_[1],
             v0$0=caml_call1(_$r_,v0),
             v1$0=caml_call1(_$M_,v1);
            return [0,v0$0,v1$0]}}}
      return caml_call3(Sexplib0_Sexp_conv_error[2],tp_loc$52,2,sexp)}
    function sexp_of_t$122(param)
     {var
       v1=param[2],
       v0=param[1],
       v0$0=caml_call1(_$s_,v0),
       v1$0=caml_call1(_$N_,v1);
      return [1,[0,v0$0,[0,v1$0,0]]]}
    var
     _ao$_=caml_call1(Bin_prot_Shape[7],[0,_Yt_,[0,_YO_,0]]),
     _apa_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$277),0,_ao$_],0],
     _apb_=caml_call1(Bin_prot_Shape[4][1],cst_src_host_and_port_ml_7_6),
     group$149=caml_call2(Bin_prot_Shape[6],_apb_,_apa_),
     _apc_=caml_call1(Bin_prot_Shape[2][1],cst_t$278),
     bin_shape_t$131=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$149,_apc_),0);
    function bin_size_t$88(param)
     {var
       v2=param[2],
       v1=param[1],
       _aQx_=caml_call1(_XB_,v1),
       size=caml_call2(Bin_prot_Common[23],0,_aQx_),
       _aQy_=caml_call1(_XE_,v2);
      return caml_call2(Bin_prot_Common[23],size,_aQy_)}
    function bin_write_t$89(buf,pos,param)
     {var v2=param[2],v1=param[1],pos$0=caml_call3(_Yv_,buf,pos,v1);
      return caml_call3(_YQ_,buf,pos$0,v2)}
    function bin_read_t$175(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_src_host_and_port_ml_Stabl,pos_ref[1])}
    function bin_read_t$176(buf,pos_ref)
     {var v1=caml_call2(_Yx_,buf,pos_ref),v2=caml_call2(_YS_,buf,pos_ref);
      return [0,v1,v2]}
    function compare$98(a_001,b_002)
     {if(caml_call2(Ppx_compare_lib[1],a_001,b_002))return 0;
      var n=caml_call2(Ppx_compare_lib[4][8],a_001[1],b_002[1]);
      return 0 === n?caml_call2(Ppx_compare_lib[4][4],a_001[2],b_002[2]):n}
    function hash_fold_t$43(hsv,arg)
     {var hsv$0=caml_call2(__6_,hsv,arg[1]);
      return caml_call2(__4_,hsv$0,arg[2])}
    function hash$50(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_aQw_=hash_fold_t$43(hsv,x);
      return caml_call1(Base_Hash[9],_aQw_)}
    function to_serializable(param)
     {var port=param[2],host=param[1];return [0,host,port]}
    function of_serializable(param)
     {var port=param[2],host=param[1];return [0,host,port]}
    var
     include$130=
      caml_call1
       (caml_call1
         (Stable$0[1][1],
          [0,
           bin_shape_t$131,
           bin_size_t$88,
           bin_write_t$89,
           bin_read_t$176,
           bin_read_t$175]),
        [0,to_serializable,of_serializable]),
     bin_size_t$89=include$130[1],
     bin_write_t$90=include$130[2],
     bin_read_t$177=include$130[3],
     bin_read_t$178=include$130[4],
     bin_shape_t$132=include$130[5],
     bin_writer_t$108=include$130[6],
     bin_reader_t$108=include$130[7],
     bin_t$108=include$130[8],
     Expect_test_collector$16=
      caml_call1(Expect_test_collector[2],Expect_test_config);
    function _apd_(param)
     {var
       _aQr_=caml_call1(Bin_prot_Shape[21],bin_shape_t$132),
       _aQs_=caml_call1(Bin_prot_Shape[18][4],_aQr_);
      caml_call1(Stdlib[46],_aQs_);
      var
       _aQt_=caml_call1(Bin_prot_Shape[21],bin_shape_t$131),
       _aQu_=caml_call1(Bin_prot_Shape[18][4],_aQt_);
      caml_call1(Stdlib[46],_aQu_);
      var
       _aQv_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_host_and_port_ml$0),
         35,
         795,
         803,
         809];
      return caml_call1(Expect_test_collector$16[1],_aQv_)}
    var
     _ape_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_host_and_port_ml$1),
       36,
       810,
       818,
       925],
     _aph_=
      [0,
       [0,
        _apg_,
        _apf_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_host_and_port_ml$2),
         35,
         795,
         803,
         809],
        _ape_],
       0],
     _apj_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_host_and_port_ml$4),
       32,
       675,
       679,
       926],
     _apk_=
      caml_call1(Expect_test_common_File[4][3],cst_b3b97aad9d77964b46fc90863d);
    caml_call9
     (Expect_test_collector$16[3],
      _apk_,
      _apj_,
      cst_src_host_and_port_ml$3,
      _api_,
      0,
      _aph_,
      0,
      Inline_test_config,
      _apd_);
    var
     include$131=
      caml_call1
       (caml_call1(Stable[1][1],[0,t_of_sexp$110,sexp_of_t$122]),
        [0,to_serializable,of_serializable]),
     sexp_of_t$123=include$131[2],
     _apl_=include$131[1];
    function to_string$30(param)
     {var port=param[2],host=param[1];return caml_call3(_fw_,_apm_,host,port)}
    function of_string$26(s)
     {var match=caml_call2(_CI_,s,58);
      if(match)
       {var _aQo_=match[2];
        if(_aQo_ && ! _aQo_[2])
         {var port=_aQo_[1],host=match[1];
          try
           {var _aQp_=caml_call1(of_string$3,port),port$0=_aQp_}
          catch(_aQq_){var port$0=caml_call3(_Pe_,_apo_,s,0)}
          return [0,host,port$0]}}
      return caml_call3(_Pe_,_apn_,s,0)}
    function t_of_sexp$111(sexp)
     {if(0 === sexp[0])
       {var s=sexp[1];
        try
         {var _aQn_=of_string$26(s);return _aQn_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          if(exn[1] === Stdlib[7])
           {var err=exn[2];return caml_call2(_Od_,err,sexp)}
          throw exn}}
      return caml_call1(_apl_,sexp)}
    function _app_(param)
     {var
       got=t_of_sexp$111(caml_call1(of_string,cst_localhost_8080)),
       equal=0,
       message=0,
       here=0;
      function comparator(a_003,b_004){return compare$98(a_003,b_004)}
      caml_call8
       (Ppx_assert_lib_Runtime[3],
        pos,
        sexp_of_t$123,
        comparator,
        here,
        message,
        equal,
        expect,
        got);
      var
       got$0=t_of_sexp$111(caml_call1(of_string,cst_localhost_8080$0)),
       equal$0=0,
       message$0=0,
       here$0=0;
      function comparator$0(a_005,b_006){return compare$98(a_005,b_006)}
      return caml_call8
              (Ppx_assert_lib_Runtime[3],
               pos$0,
               sexp_of_t$123,
               comparator$0,
               here$0,
               message$0,
               equal$0,
               expect$0,
               got$0)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_t_of_sexp,
      0,
      cst_src_host_and_port_ml$5,
      74,
      4,
      298,
      _app_);
    function _apq_(param)
     {function _aQk_(expect)
       {var
         got=t_of_sexp$111(caml_call1(sexp_of_t$123,expect)),
         equal=0,
         message=0,
         here=0;
        function comparator(a_009,b_010){return compare$98(a_009,b_010)}
        return caml_call8
                (Ppx_assert_lib_Runtime[3],
                 pos$1,
                 sexp_of_t$123,
                 comparator,
                 here,
                 message,
                 equal,
                 expect,
                 got)}
      function _aQl_(param)
       {var port=param[2],host=param[1];return [0,host,port]}
      var _aQm_=caml_call2(_uT_[4][4],_DQ_,_J9_);
      return caml_call9
              (_uP_,0,0,0,0,0,0,0,caml_call2(_uT_[4][3],_aQm_,_aQl_),_aQk_)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_sexp_roundtrip,
      0,
      cst_src_host_and_port_ml$6,
      83,
      4,
      299,
      _apq_);
    function create$32(host,port){return [0,host,port]}
    function host(t){return t[1]}
    function port(t){return t[2]}
    function tuple(t){return to_serializable(t)}
    var
     _apr_=
      caml_call1(Base_Pretty_printer[2],[0,module_name$13,to_string$30])[1],
     _aps_=
      Make_binable
       ([0,
         hash_fold_t$43,
         bin_size_t$89,
         bin_write_t$90,
         bin_read_t$177,
         bin_read_t$178,
         bin_shape_t$132,
         bin_writer_t$108,
         bin_reader_t$108,
         bin_t$108,
         t_of_sexp$111,
         compare$98,
         sexp_of_t$123,
         hash$50]),
     _apt_=_aps_[1],
     _apu_=_aps_[2],
     _apv_=_aps_[3],
     _apw_=_aps_[4],
     _apx_=_aps_[5],
     _apy_=_aps_[6],
     include$132=
      _xj_
       ([0,
         bin_size_t$89,
         bin_write_t$90,
         bin_read_t$177,
         bin_read_t$178,
         bin_shape_t$132,
         bin_writer_t$108,
         bin_reader_t$108,
         bin_t$108,
         compare$98,
         t_of_sexp$111,
         sexp_of_t$123]),
     _apz_=include$132[1],
     _apA_=include$132[2],
     _apB_=include$132[3],
     _apC_=include$132[4],
     _apD_=include$132[5],
     _apE_=include$132[6],
     _apF_=include$132[7],
     _apG_=include$132[8],
     _apH_=include$132[9],
     _apI_=include$132[10],
     _apJ_=include$132[11],
     _apK_=include$132[12],
     _apL_=include$132[13],
     _apM_=include$132[14],
     _apN_=include$132[15],
     _apO_=include$132[16],
     _apP_=include$132[17],
     _apQ_=include$132[18],
     _apR_=include$132[19],
     _apS_=include$132[20],
     _apT_=include$132[21],
     _apU_=include$132[22],
     type_id=caml_call2(Id$0[3],cst_Host_and_port,sexp_of_t$123);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$433);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Host_and_port$0);
    var
     Core_kernel_Host_and_port=
      [0,
       create$32,
       host,
       port,
       tuple,
       bin_size_t$89,
       bin_write_t$90,
       bin_read_t$177,
       bin_read_t$178,
       bin_shape_t$132,
       bin_writer_t$108,
       bin_reader_t$108,
       bin_t$108,
       t_of_sexp$111,
       sexp_of_t$123,
       of_string$26,
       to_string$30,
       _apr_,
       _apz_,
       _apA_,
       _apB_,
       _apC_,
       _apD_,
       _apE_,
       _apF_,
       _apG_,
       _apH_,
       _apI_,
       _apJ_,
       _apK_,
       _apL_,
       _apM_,
       _apN_,
       _apO_,
       _apP_,
       _apQ_,
       _apR_,
       _apS_,
       _apT_,
       _apU_,
       _apt_,
       _apu_,
       _apv_,
       _apw_,
       _apx_,
       _apy_,
       [0,
        [0,
         t_of_sexp$111,
         sexp_of_t$123,
         bin_size_t$89,
         bin_write_t$90,
         bin_read_t$177,
         bin_read_t$178,
         bin_shape_t$132,
         bin_writer_t$108,
         bin_reader_t$108,
         bin_t$108,
         compare$98,
         hash_fold_t$43,
         hash$50]],
       type_id];
    caml_register_global
     (5147,Core_kernel_Host_and_port,"Core_kernel__Host_and_port");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Pid);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$434);
    caml_call1(Expect_test_collector[4][1],cst_src_pid_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$435,cst$215);
    var
     compare$99=Stable$4[1][9],
     Pid_must_be_positive=
      [248,cst_Core_kernel_Pid_Stable_V1_,caml_fresh_oo_id(0)];
    function _apV_(param)
     {if(param[1] === Pid_must_be_positive)
       {var v0=param[2],v0$0=caml_call1(Stable$4[1][11],v0);
        return [1,[0,_apW_,[0,v0$0,0]]]}
      throw [0,Assert_failure,_apX_]}
    caml_call3(Sexplib0_Sexp_conv[51][2],0,Pid_must_be_positive,_apV_);
    function ensure(i){if(0 < i)return i;throw [0,Pid_must_be_positive,i]}
    function to_sexpable(_aQj_){return _aQj_}
    var
     _apY_=Stable$4[1],
     include$133=
      caml_call1
       (caml_call1(Stable[1][1],[0,_apY_[10],_apY_[11]]),
        [0,to_sexpable,ensure]),
     t_of_sexp$112=include$133[1],
     sexp_of_t$124=include$133[2];
    function to_binable$6(_aQi_){return _aQi_}
    var
     _apZ_=Stable$4[1],
     include$134=
      caml_call1
       (caml_call1
         (Stable$0[1][1],[0,_apZ_[5],_apZ_[1],_apZ_[2],_apZ_[3],_apZ_[4]]),
        [0,to_binable$6,ensure]),
     bin_size_t$90=include$134[1],
     bin_write_t$91=include$134[2],
     bin_read_t$179=include$134[3],
     bin_read_t$180=include$134[4],
     bin_shape_t$133=include$134[5],
     bin_writer_t$109=include$134[6],
     bin_reader_t$109=include$134[7],
     bin_t$109=include$134[8],
     include$135=caml_call2(_hc_[1][1],compare$99,sexp_of_t$124),
     comparator$25=include$135[1],
     _ap0_=
      caml_call1
       (Stable$2[1][1],
        [0,
         bin_size_t$90,
         bin_write_t$91,
         bin_read_t$179,
         bin_read_t$180,
         bin_shape_t$133,
         bin_writer_t$109,
         bin_reader_t$109,
         bin_t$109,
         compare$99,
         t_of_sexp$112,
         sexp_of_t$124,
         comparator$25]),
     Map$26=_ap0_[1],
     Set$26=_ap0_[2];
    function of_int$7(i){return ensure(i)}
    function to_int$7(_aQh_){return _aQh_}
    function of_string$27(string)
     {return ensure(caml_call1(of_string$3,string))}
    var
     init$5=of_int$7(1),
     _ap1_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$279),0,bin_shape_t$133],0],
     _ap2_=caml_call1(Bin_prot_Shape[4][1],cst_src_pid_ml_50_4),
     group$150=caml_call2(Bin_prot_Shape[6],_ap2_,_ap1_),
     _ap3_=caml_call1(Bin_prot_Shape[2][1],cst_t$280),
     bin_shape_t$134=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$150,_ap3_),0),
     bin_writer_t$110=[0,bin_size_t$90,bin_write_t$91],
     bin_reader_t$110=[0,bin_read_t$179,bin_read_t$180],
     bin_t$110=[0,bin_shape_t$134,bin_writer_t$110,bin_reader_t$110];
    function hash$51(x){return caml_call1(_D_,x)}
    var
     include$136=
      _AN_
       ([0,
         bin_size_t$90,
         bin_write_t$91,
         bin_read_t$179,
         bin_read_t$180,
         bin_shape_t$134,
         bin_writer_t$110,
         bin_reader_t$110,
         bin_t$110,
         compare$99,
         hash_fold_t,
         hash$51,
         t_of_sexp$112,
         sexp_of_t$124,
         comparator$25,
         of_string$27,
         to_string$4,
         module_name$14]),
     _aqd_=include$136[12],
     _ap4_=include$136[1],
     _ap5_=include$136[2],
     _ap6_=include$136[3],
     _ap7_=include$136[4],
     _ap8_=include$136[5],
     _ap9_=include$136[6],
     _ap__=include$136[7],
     _ap$_=include$136[8],
     _aqa_=include$136[9],
     _aqb_=include$136[10],
     _aqc_=include$136[11],
     _aqe_=include$136[13],
     _aqf_=include$136[14],
     _aqg_=include$136[15],
     _aqh_=include$136[16],
     _aqi_=include$136[17],
     _aqj_=include$136[18],
     _aqk_=include$136[19],
     _aql_=include$136[20],
     _aqm_=include$136[21],
     _aqn_=include$136[22],
     _aqo_=include$136[23],
     _aqp_=include$136[24],
     _aqq_=include$136[25],
     _aqr_=include$136[26],
     _aqs_=include$136[27],
     _aqt_=include$136[28],
     _aqu_=include$136[29],
     _aqv_=include$136[30],
     _aqw_=include$136[31],
     _aqx_=include$136[32],
     _aqy_=include$136[33],
     _aqz_=include$136[34],
     _aqA_=include$136[35],
     _aqB_=include$136[36],
     _aqC_=include$136[37],
     _aqD_=include$136[38],
     _aqE_=include$136[39],
     _aqF_=include$136[40],
     _aqG_=include$136[41];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$436);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Pid$0);
    var
     Core_kernel_Pid=
      [0,
       _ap4_,
       _ap5_,
       _ap6_,
       _ap7_,
       _ap8_,
       _ap9_,
       _ap__,
       _ap$_,
       _aqa_,
       _aqb_,
       _aqc_,
       _aqd_,
       _aqe_,
       _aqf_,
       _aqg_,
       _aqh_,
       _aqi_,
       _aqj_,
       _aqk_,
       _aql_,
       _aqm_,
       _aqn_,
       _aqo_,
       _aqp_,
       _aqq_,
       _aqr_,
       _aqs_,
       _aqt_,
       _aqu_,
       _aqv_,
       _aqw_,
       _aqx_,
       _aqy_,
       _aqz_,
       _aqA_,
       _aqB_,
       _aqC_,
       _aqD_,
       _aqE_,
       _aqF_,
       _aqG_,
       of_int$7,
       to_int$7,
       init$5,
       [0,
        [0,
         bin_size_t$90,
         bin_write_t$91,
         bin_read_t$179,
         bin_read_t$180,
         bin_shape_t$133,
         bin_writer_t$109,
         bin_reader_t$109,
         bin_t$109,
         compare$99,
         t_of_sexp$112,
         sexp_of_t$124,
         comparator$25,
         Map$26,
         Set$26]]];
    caml_register_global(5148,Core_kernel_Pid,"Core_kernel__Pid");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Command_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$437);
    caml_call1(Expect_test_collector[4][1],cst_src_command_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$438,cst$216);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$439);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Command_intf$0);
    var Core_kernel_Command_intf=[0];
    caml_register_global
     (5149,Core_kernel_Command_intf,"Core_kernel__Command_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Fdeque);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$440);
    caml_call1(Expect_test_collector[4][1],cst_src_fdeque_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$441,cst$217);
    var Empty=[248,cst_Core_kernel_Fdeque_Empty,caml_fresh_oo_id(0)];
    function _aqH_(param)
     {if(param === Empty)return _aqI_;throw [0,Assert_failure,_aqJ_]}
    caml_call3(Sexplib0_Sexp_conv[51][2],0,Empty,_aqH_);
    function length$19(t){return t[3]}
    function is_empty$15(t){return caml_call2(_Nr_,t[3],0)}
    function invariant$15(f,t)
     {var n_front=caml_call1(length$1,t[1]),n_back=caml_call1(length$1,t[2]);
      if(caml_call2(_Nr_,t[3],n_front + n_back | 0))
       {if(! caml_call2(_Nt_,t[3],2))
         {var switch$0=0;
          if(! caml_call2(_Nu_,n_front,0) || ! caml_call2(_Nu_,n_back,0))
           switch$0 = 1;
          if(switch$0)throw [0,Assert_failure,_aqK_]}
        caml_call2(_o9_,t[1],f);
        return caml_call2(_o9_,t[2],f)}
      throw [0,Assert_failure,_aqL_]}
    function make$0(length,front,back)
     {if(front)
       {var switch$0=0;
        if(front[2])
         {if(! back)
           {var
             match=caml_call2(_pV_,front,length / 2 | 0),
             rev_back=match[2],
             front$0=match[1];
            return [0,front$0,caml_call1(parts,rev_back),length]}
          switch$0 = 1}
        else
         if(back)switch$0 = 1}
      else
       if(back && back[2])
        {var
          match$0=caml_call2(_pV_,back,length / 2 | 0),
          rev_front=match$0[2],
          back$0=match$0[1];
         return [0,caml_call1(parts,rev_front),back$0,length]}
      return [0,front,back,length]}
    function enqueue_front(t,x){return make$0(t[3] + 1 | 0,[0,x,t[1]],t[2])}
    function enqueue(t,x){return make$0(t[3] + 1 | 0,t[1],[0,x,t[2]])}
    function raise_front_invariant(param)
     {return caml_call1
              (_od_,
               caml_call1(Sexplib0_Sexp_conv[7],cst_BUG_Fdeque_front_0_back_2))}
    function raise_back_invariant(param)
     {return caml_call1
              (_od_,
               caml_call1(Sexplib0_Sexp_conv[7],cst_BUG_Fdeque_back_0_front_2))}
    function top_exn$0(t)
     {var _aQe_=t[1];
      if(_aQe_){var x=_aQe_[1];return x}
      var _aQf_=t[2];
      if(_aQf_)
       {var _aQg_=_aQf_[1];return _aQf_[2]?raise_front_invariant(0):_aQg_}
      throw Empty}
    function peek_back_exn(t)
     {var _aQb_=t[2];
      if(_aQb_){var x=_aQb_[1];return x}
      var _aQc_=t[1];
      if(_aQc_)
       {var _aQd_=_aQc_[1];return _aQc_[2]?raise_back_invariant(0):_aQd_}
      throw Empty}
    function discard_exn(t)
     {var _aP$_=t[1];
      if(_aP$_){var xs=_aP$_[2];return make$0(t[3] - 1 | 0,xs,t[2])}
      var _aQa_=t[2];
      if(_aQa_)return _aQa_[2]?raise_front_invariant(0):acc;
      throw Empty}
    function drop_back_exn(t)
     {var _aP9_=t[2];
      if(_aP9_){var xs=_aP9_[2];return make$0(t[3] - 1 | 0,t[1],xs)}
      var _aP__=t[1];
      if(_aP__)return _aP__[2]?raise_back_invariant(0):acc;
      throw Empty}
    function dequeue_exn(t)
     {var _aP8_=discard_exn(t);return [0,top_exn$0(t),_aP8_]}
    function dequeue_back_exn(t)
     {var _aP7_=drop_back_exn(t);return [0,peek_back_exn(t),_aP7_]}
    function optional(f,t)
     {try
       {var x=caml_call1(f,t)}
      catch(_aP6_)
       {_aP6_ = caml_wrap_exception(_aP6_);
        if(_aP6_ === Empty)return 0;
        throw _aP6_}
      return [0,x]}
    function top$0(t){return optional(top_exn$0,t)}
    function peek_back(t){return optional(peek_back_exn,t)}
    function drop_front(t){return optional(discard_exn,t)}
    function drop_back(t){return optional(drop_back_exn,t)}
    function dequeue(t){return optional(dequeue_exn,t)}
    function dequeue_back(t){return optional(dequeue_back_exn,t)}
    function enqueue$0(t,side,x)
     {return 109975721 <= side?enqueue_front(t,x):enqueue(t,x)}
    function peek(t,side){return 109975721 <= side?top$0(t):peek_back(t)}
    function peek_exn(t,side)
     {return 109975721 <= side?top_exn$0(t):peek_back_exn(t)}
    function drop(t,side){return 109975721 <= side?drop_front(t):drop_back(t)}
    function drop_exn(t,side)
     {return 109975721 <= side?discard_exn(t):drop_back_exn(t)}
    function dequeue$0(t,side)
     {return 109975721 <= side?dequeue(t):dequeue_back(t)}
    function dequeue_exn$0(t,side)
     {return 109975721 <= side?dequeue_exn(t):dequeue_back_exn(t)}
    function rev(t){return [0,t[2],t[1],t[3]]}
    function to_list$19(t){return caml_call2(_pz_,t[1],t[2])}
    function to_array$8(t){return caml_call1(of_list,to_list$19(t))}
    function to_sequence$9(t)
     {var _aP5_=caml_call1(_j3_,t[2]);
      return caml_call2(_jp_,caml_call1(_j3_,t[1]),_aP5_)}
    function sum$8(M,t,f)
     {var _aP3_=caml_call3(_pd_,M,t[2],f),_aP4_=caml_call3(_pd_,M,t[1],f);
      return caml_call2(M[2],_aP4_,_aP3_)}
    function count$12(t,f)
     {var _aP2_=caml_call2(_qM_,t[2],f);
      return caml_call2(_qM_,t[1],f) + _aP2_ | 0}
    function for_all$22(t,f)
     {var _aP1_=caml_call2(_pc_,t[1],f);
      return _aP1_?caml_call2(_pc_,t[2],f):_aP1_}
    function exists$23(t,f)
     {var _aP0_=caml_call2(_pb_,t[1],f);
      return _aP0_?_aP0_:caml_call2(_pb_,t[2],f)}
    function mem$13(t,x,equal)
     {var _aPZ_=caml_call3(_o8_,t[1],x,equal);
      return _aPZ_?_aPZ_:caml_call3(_o8_,t[2],x,equal)}
    function iter$30(t,f)
     {caml_call2(_o9_,t[1],f);return caml_call2(_o9_,t[2],f)}
    function fold$26(t,init,f)
     {var init$0=caml_call3(_o__,t[1],init,f);
      return caml_call3(_o__,t[2],init$0,f)}
    function fold_result$7(t,init,f){return caml_call4(_ie_,fold$26,init,f,t)}
    function fold_until$7(t,init,f)
     {var _aPX_=caml_call3(_if_,fold$26,init,f);
      return function(_aPY_){return caml_call2(_aPX_,_aPY_,t)}}
    function find$15(t,f)
     {var some=caml_call2(_pe_,t[1],f);
      return some?some:caml_call2(_pe_,t[2],f)}
    function find_map$7(t,f)
     {var some=caml_call2(_pf_,t[1],f);
      return some?some:caml_call2(_pf_,t[2],f)}
    function max_elt$12(t,compare)
     {var
       match=caml_call2(_pj_,t[1],compare),
       match$0=caml_call2(_pj_,t[2],compare);
      if(match)
       {if(match$0)
         {var y=match$0[1],x=match[1];
          return caml_call2(_Np_,caml_call2(compare,x,y),0)?match:match$0}
        var opt=match}
      else
       var opt=match$0;
      return opt}
    function min_elt$12(t,compare)
     {var
       match=caml_call2(_pi_,t[1],compare),
       match$0=caml_call2(_pi_,t[2],compare);
      if(match)
       {if(match$0)
         {var y=match$0[1],x=match[1];
          return caml_call2(_Nq_,caml_call2(compare,x,y),0)?match:match$0}
        var opt=match}
      else
       var opt=match$0;
      return opt}
    function Make_container(F)
     {var to_list=F[1];
      function mem(t,x,equal)
       {return caml_call3(_o8_,caml_call1(to_list,t),x,equal)}
      function iter(t,f){return caml_call2(_o9_,caml_call1(to_list,t),f)}
      function fold(t,init,f)
       {return caml_call3(_o__,caml_call1(to_list,t),init,f)}
      function exists(t,f){return caml_call2(_pb_,caml_call1(to_list,t),f)}
      function for_all(t,f){return caml_call2(_pc_,caml_call1(to_list,t),f)}
      function count(t,f){return caml_call2(_qM_,caml_call1(to_list,t),f)}
      function sum(m,t,f){return caml_call3(_pd_,m,caml_call1(to_list,t),f)}
      function find(t,f){return caml_call2(_pe_,caml_call1(to_list,t),f)}
      function find_map(t,f){return caml_call2(_pf_,caml_call1(to_list,t),f)}
      function to_array(t){return caml_call1(_ph_,caml_call1(to_list,t))}
      function min_elt(t,compare)
       {return caml_call2(_pi_,caml_call1(to_list,t),compare)}
      function max_elt(t,compare)
       {return caml_call2(_pj_,caml_call1(to_list,t),compare)}
      function fold_result(t,init,f){return caml_call4(_ie_,fold,init,f,t)}
      function fold_until(t,init,f)
       {var _aPV_=caml_call3(_if_,fold,init,f);
        return function(_aPW_){return caml_call2(_aPV_,_aPW_,t)}}
      return [0,
              to_list,
              is_empty$15,
              length$19,
              mem,
              iter,
              fold,
              exists,
              for_all,
              count,
              sum,
              find,
              find_map,
              to_array,
              min_elt,
              max_elt,
              fold_result,
              fold_until]}
    function of_list$10(list){return make$0(caml_call1(length$1,list),list,0)}
    function to_list$20(t)
     {var _aPU_=caml_call1(parts,t[2]);return caml_call2(_Of_,t[1],_aPU_)}
    function to_sequence$10(t)
     {var _aPT_=caml_call1(_j3_,caml_call1(parts,t[2]));
      return caml_call2(_jp_,caml_call1(_j3_,t[1]),_aPT_)}
    function of_sequence$4(sequence)
     {var
       match=
        caml_call3
         (_iC_,
          sequence,
          _aqM_,
          function(param,a)
           {var acc=param[2],length=param[1];
            return [0,length + 1 | 0,[0,a,acc]]}),
       back=match[2],
       length=match[1];
      return make$0(length,0,back)}
    var
     include$137=Make_container([0,to_list$20]),
     to_list$21=include$137[1],
     is_empty$16=include$137[2],
     length$20=include$137[3],
     mem$14=include$137[4],
     iter$31=include$137[5],
     fold$27=include$137[6],
     exists$24=include$137[7],
     for_all$23=include$137[8],
     count$13=include$137[9],
     sum$9=include$137[10],
     find$16=include$137[11],
     find_map$8=include$137[12],
     to_array$9=include$137[13],
     min_elt$13=include$137[14],
     max_elt$13=include$137[15],
     fold_result$8=include$137[16],
     fold_until$8=include$137[17];
    function to_list$22(t)
     {var _aPS_=caml_call1(parts,t[1]);return caml_call2(_Of_,t[2],_aPS_)}
    function of_list$11(list){return make$0(caml_call1(length$1,list),0,list)}
    function to_sequence$11(t)
     {var _aPR_=caml_call1(_j3_,caml_call1(parts,t[1]));
      return caml_call2(_jp_,caml_call1(_j3_,t[2]),_aPR_)}
    function of_sequence$5(sequence)
     {var
       match=
        caml_call3
         (_iC_,
          sequence,
          _aqN_,
          function(param,a)
           {var acc=param[2],length=param[1];
            return [0,length + 1 | 0,[0,a,acc]]}),
       front=match[2],
       length=match[1];
      return make$0(length,front,0)}
    var
     include$138=Make_container([0,to_list$22]),
     to_list$23=include$138[1],
     is_empty$17=include$138[2],
     length$21=include$138[3],
     mem$15=include$138[4],
     iter$32=include$138[5],
     fold$28=include$138[6],
     exists$25=include$138[7],
     for_all$24=include$138[8],
     count$14=include$138[9],
     sum$10=include$138[10],
     find$17=include$138[11],
     find_map$9=include$138[12],
     to_array$10=include$138[13],
     min_elt$14=include$138[14],
     max_elt$14=include$138[15],
     fold_result$9=include$138[16],
     fold_until$9=include$138[17];
    function singleton$11(x){return of_list$10([0,x,0])}
    function bind$2(t,f)
     {return caml_call3
              (fold$27,
               t,
               acc,
               function(t,elt)
                {return caml_call3(fold$27,caml_call1(f,elt),t,enqueue)})}
    var
     map$37=
      [0,
       -198771759,
       function(t,f)
        {var _aPP_=t[3],_aPQ_=caml_call2(_p9_,t[2],f);
         return [0,caml_call2(_p9_,t[1],f),_aPQ_,_aPP_]}],
     include$139=caml_call1(Base_Monad[1],[0,bind$2,singleton$11,map$37]),
     _aqO_=include$139[1],
     _aqP_=include$139[2],
     _aqQ_=include$139[3],
     _aqR_=include$139[4],
     _aqS_=include$139[5],
     _aqT_=include$139[6],
     _aqU_=include$139[7],
     _aqV_=include$139[8],
     _aqW_=include$139[9],
     _aqX_=include$139[10],
     _aqY_=include$139[11];
    function compare$100(cmp,t1,t2)
     {var _aPO_=caml_call1(to_list$21,t2);
      return caml_call3(_o6_,cmp,caml_call1(to_list$21,t1),_aPO_)}
    function hash_fold_t$44(hash_fold_a,state,t)
     {return caml_call3
              (fold$27,
               t,
               caml_call2(hash_fold_t$18,state,caml_call1(length$20,t)),
               hash_fold_a)}
    function sexp_of_t$125(sexp_of_elt,t)
     {var _aPN_=caml_call1(to_list$21,t);
      return caml_call1(caml_call1(sexp_of_t$17,sexp_of_elt),_aPN_)}
    function t_of_sexp$113(elt_of_sexp,sexp)
     {return of_list$10(caml_call1(caml_call1(t_of_sexp$18,elt_of_sexp),sexp))}
    var
     _aqZ_=caml_call1(Bin_prot_Shape[3][1],cst_a$101),
     _aq0_=caml_call1(Bin_prot_Shape[4][1],cst_src_fdeque_ml_315_21),
     _aq1_=caml_call2(Bin_prot_Shape[15],_aq0_,_aqZ_),
     _aq2_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$102),0],
     _aq3_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_el$13),_aq2_,_aq1_],0],
     _aq4_=caml_call1(Bin_prot_Shape[4][1],cst_src_fdeque_ml_315_8),
     group$151=caml_call2(Bin_prot_Shape[6],_aq4_,_aq3_);
    function bin_shape_el$2(a)
     {var _aPM_=caml_call1(Bin_prot_Shape[2][1],cst_el$14);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$151,_aPM_),[0,a,0])}
    function bin_size_el$2(size_of_a){return size_of_a}
    function bin_write_el$2(write_a){return write_a}
    function bin_read_el$2(of_a){return of_a}
    var
     caller_identity$2=
      caml_call1(Bin_prot_Shape[5][1],cst_83f96982_4992_11e6_919d_fb);
    function iter$33(t,f){return caml_call2(_o9_,caml_call1(to_list$21,t),f)}
    function init$6(len,next)
     {var acc$0=acc,n=0;
      for(;;)
       {if(caml_call2(_Nr_,len,n))return acc$0;
        if(caml_call2(_Nr_,n,caml_call1(length$20,acc$0)))
         {var
           x=caml_call1(next,0),
           n$0=n + 1 | 0,
           acc$1=enqueue(acc$0,x),
           acc$0=acc$1,
           n=n$0;
          continue}
        throw [0,Assert_failure,_aq5_]}}
    var
     include$140=
      caml_call1
       (Bin_prot_Utils[16],
        [0,
         caller_identity$2,
         module_name$15,
         length$20,
         iter$33,
         init$6,
         bin_size_el$2,
         bin_write_el$2,
         bin_read_el$2,
         bin_shape_el$2]),
     bin_shape_t$135=include$140[1],
     bin_size_t$91=include$140[2],
     bin_write_t$92=include$140[3],
     bin_read_t$181=include$140[4],
     bin_read_t$182=include$140[5],
     bin_writer_t$111=include$140[6],
     bin_reader_t$111=include$140[7],
     bin_t$111=include$140[8];
    function build(front,back)
     {var
       _aPK_=caml_call1(length$1,back),
       length=caml_call1(length$1,front) + _aPK_ | 0,
       t=[0,front,back,length];
      invariant$15(function(_aPL_){return 0},t);
      return t}
    var Private$4=[0,build];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$442);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Fdeque$0);
    var
     Stable$9=
      [0,
       [0,
        bin_shape_t$135,
        bin_size_t$91,
        bin_write_t$92,
        bin_read_t$181,
        bin_read_t$182,
        bin_writer_t$111,
        bin_reader_t$111,
        bin_t$111,
        compare$100,
        t_of_sexp$113,
        sexp_of_t$125,
        _aqT_]],
     Front_to_back=
      [0,
       of_list$10,
       mem$14,
       length$20,
       is_empty$16,
       iter$31,
       fold$27,
       fold_result$8,
       fold_until$8,
       exists$24,
       for_all$23,
       count$13,
       sum$9,
       find$16,
       find_map$8,
       to_list$21,
       to_array$9,
       min_elt$13,
       max_elt$13,
       to_sequence$10,
       of_sequence$4],
     include$141=
      [0,
       bin_shape_t$135,
       bin_size_t$91,
       bin_write_t$92,
       bin_read_t$181,
       bin_read_t$182,
       bin_writer_t$111,
       bin_reader_t$111,
       bin_t$111,
       compare$100,
       hash_fold_t$44,
       t_of_sexp$113,
       sexp_of_t$125,
       mem$14,
       length$20,
       is_empty$16,
       iter$31,
       fold$27,
       fold_result$8,
       fold_until$8,
       exists$24,
       for_all$23,
       count$13,
       sum$9,
       find$16,
       find_map$8,
       to_list$21,
       to_array$9,
       min_elt$13,
       max_elt$13,
       invariant$15,
       _aqO_,
       _aqP_,
       _aqQ_,
       _aqR_,
       _aqS_,
       _aqT_,
       _aqU_,
       _aqV_,
       _aqW_,
       _aqX_,
       _aqY_,
       [0,
        mem$13,
        length$19,
        is_empty$15,
        iter$30,
        fold$26,
        fold_result$7,
        fold_until$7,
        exists$23,
        for_all$22,
        count$12,
        sum$8,
        find$15,
        find_map$7,
        to_list$19,
        to_array$8,
        min_elt$12,
        max_elt$12,
        to_sequence$9],
       Front_to_back,
       [0,
        of_list$11,
        mem$15,
        length$21,
        is_empty$17,
        iter$32,
        fold$28,
        fold_result$9,
        fold_until$9,
        exists$25,
        for_all$24,
        count$14,
        sum$10,
        find$17,
        find_map$9,
        to_list$23,
        to_array$10,
        min_elt$14,
        max_elt$14,
        to_sequence$11,
        of_sequence$5],
       acc,
       singleton$11,
       of_list$10,
       rev,
       enqueue$0,
       enqueue_front,
       enqueue,
       peek,
       peek_exn,
       top$0,
       top_exn$0,
       peek_back,
       peek_back_exn,
       drop,
       drop_exn,
       drop_front,
       discard_exn,
       drop_back,
       drop_back_exn,
       dequeue$0,
       dequeue_exn$0,
       dequeue,
       dequeue_exn,
       dequeue_back,
       dequeue_back_exn,
       Stable$9,
       Private$4];
    caml_register_global(5150,include$141,"Core_kernel__Fdeque");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Fqueue);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$443);
    caml_call1(Expect_test_collector[4][1],cst_src_fqueue_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$444,cst$218);
    var _aq6_=Front_to_back[19],_aq7_=Front_to_back[20];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$445);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Fqueue$0);
    var
     Core_kernel_Fqueue=
      [0,
       bin_shape_t$135,
       bin_size_t$91,
       bin_write_t$92,
       bin_read_t$181,
       bin_read_t$182,
       bin_writer_t$111,
       bin_reader_t$111,
       bin_t$111,
       compare$100,
       hash_fold_t$44,
       t_of_sexp$113,
       sexp_of_t$125,
       mem$14,
       iter$31,
       fold$27,
       fold_result$8,
       fold_until$8,
       exists$24,
       for_all$23,
       count$13,
       sum$9,
       find$16,
       find_map$8,
       to_array$9,
       min_elt$13,
       max_elt$13,
       invariant$15,
       _aqO_,
       _aqP_,
       _aqQ_,
       _aqR_,
       _aqS_,
       _aqT_,
       _aqU_,
       _aqV_,
       _aqW_,
       _aqX_,
       _aqY_,
       acc,
       enqueue,
       top_exn$0,
       top_exn$0,
       top$0,
       top$0,
       dequeue_exn,
       dequeue,
       discard_exn,
       discard_exn,
       to_list$21,
       of_list$10,
       _aq6_,
       _aq7_,
       length$20,
       is_empty$16,
       singleton$11,
       Stable$9];
    caml_register_global(5151,Core_kernel_Fqueue,"Core_kernel__Fqueue");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Set_once);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$446);
    caml_call1(Expect_test_collector[4][1],cst_src_set_once_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$447,cst$219);
    var
     _aq8_=caml_call1(Bin_prot_Shape[3][1],cst_a$103),
     _aq9_=caml_call1(Bin_prot_Shape[4][1],cst_src_set_once_ml_14_18),
     _aq__=
      caml_call1
       (_Zs_,caml_call1(_ZN_,caml_call2(Bin_prot_Shape[15],_aq9_,_aq8_))),
     _aq$_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$104),0],
     _ara_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$281),_aq$_,_aq__],0],
     _arb_=caml_call1(Bin_prot_Shape[4][1],cst_src_set_once_ml_14_6),
     group$152=caml_call2(Bin_prot_Shape[6],_arb_,_ara_);
    function bin_shape_t$136(a)
     {var _aPJ_=caml_call1(Bin_prot_Shape[2][1],cst_t$282);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$152,_aPJ_),[0,a,0])}
    function bin_size_t$92(size_of_a,v)
     {return caml_call2(_XK_,caml_call1(_XN_,size_of_a),v)}
    function bin_write_t$93(write_a,buf,pos,v)
     {return caml_call3(caml_call1(_Zu_,caml_call1(_ZP_,write_a)),buf,pos,v)}
    function bin_read_t$183(of_a,buf,pos_ref,vint)
     {return caml_call3
              (caml_call1(_Zx_,caml_call1(_ZR_,of_a)),buf,pos_ref,vint)}
    function bin_read_t$184(of_a,buf,pos_ref)
     {return caml_call2(caml_call1(_Zw_,caml_call1(_ZR_,of_a)),buf,pos_ref)}
    function t_of_sexp$114(of_a,t)
     {return caml_call2(_$u_,caml_call1(_$x_,of_a),t)}
    function sexp_of_t$126(of_a,v)
     {return caml_call2(_$v_,caml_call1(_$y_,of_a),v)}
    function of_format(v1){return [0,v1[1],_arc_]}
    function to_format(t){return [0,t[1]]}
    var
     _ard_=
      caml_call1
       (caml_call1
         (_TO_,
          [0,
           bin_shape_t$136,
           bin_size_t$92,
           bin_write_t$93,
           bin_read_t$184,
           bin_read_t$183]),
        [0,to_format,of_format]),
     bin_shape_t$137=_ard_[1],
     bin_size_t$93=_ard_[2],
     bin_write_t$94=_ard_[3],
     bin_read_t$185=_ard_[4],
     bin_read_t$186=_ard_[5],
     bin_writer_t$112=_ard_[6],
     bin_reader_t$112=_ard_[7],
     bin_t$112=_ard_[8],
     include$142=
      caml_call1
       (caml_call1(Base_Sexpable[2],[0,t_of_sexp$114,sexp_of_t$126]),
        [0,to_format,of_format]),
     t_of_sexp$115=include$142[1],
     sexp_of_t$127=include$142[2];
    function sexp_of_t$128(sexp_of_a,param)
     {var value=param[1],set_at=param[2];
      if(value)
       {var
         value$0=value[1],
         _aPH_=caml_call1(_mW_,set_at),
         _aPI_=
          [0,[1,[0,_are_,[0,caml_call1(Sexplib0_Sexp_conv[7],_aPH_),0]]],0];
        return [1,[0,[1,[0,_arf_,[0,caml_call1(sexp_of_a,value$0),0]]],_aPI_]]}
      return caml_call1(Sexplib0_Sexp_conv[7],cst_unset)}
    function invariant$16(invariant_a,t)
     {var _aPG_=t[1];
      if(_aPG_){var a=_aPG_[1];return caml_call1(invariant_a,a)}
      return 0}
    function create$33(param){return [0,0,_arg_]}
    function set_internal(t,here,value){t[1] = [0,value];t[2] = here;return 0}
    function set_if_none(t,here,value)
     {var _aPF_=caml_call1(_x1_,t[1]);
      return _aPF_?set_internal(t,here,value):_aPF_}
    function set$12(t,here,value)
     {if(caml_call1(_x1_,t[1])){set_internal(t,here,value);return _arh_}
      var
       _aPD_=[0,[1,[0,_ari_,[0,caml_call1(_mX_,t[2]),0]]],0],
       _aPE_=[0,[1,[0,_arj_,[0,caml_call1(_mX_,here),0]]],_aPD_];
      return caml_call1
              (_tW_,
               [1,
                [0,
                 caml_call1
                  (Sexplib0_Sexp_conv[7],cst_Set_once_set_exn_already_s),
                 _aPE_]])}
    function set_exn(t,here,value)
     {return caml_call1(_tS_,set$12(t,here,value))}
    function get$5(t){return t[1]}
    function get_exn(t,here)
     {var _aPB_=t[1];
      if(_aPB_){var a=_aPB_[1];return a}
      var _aPC_=[0,[1,[0,_ark_,[0,caml_call1(_mX_,here),0]]],0];
      return caml_call1
              (_bn_,
               [1,
                [0,
                 caml_call1(Sexplib0_Sexp_conv[7],cst_Set_once_get_exn_unset),
                 _aPC_]])}
    function is_none$1(t){return caml_call1(_x1_,t[1])}
    function is_some$0(t){return caml_call1(_x2_,t[1])}
    function iter$34(t,f){return caml_call2(_xC_,t[1],f)}
    function unsafe_value$0(t){return get_exn(t,_arl_)}
    var
     Optional_syntax$3=[0,is_none$1,unsafe_value$0],
     Optional_syntax$4=[0,Optional_syntax$3];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$448);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Set_once$0);
    var
     Core_kernel_Set_once=
      [0,
       sexp_of_t$128,
       invariant$16,
       create$33,
       set$12,
       set_exn,
       set_if_none,
       get$5,
       get_exn,
       is_none$1,
       is_some$0,
       iter$34,
       Optional_syntax$4,
       [0,
        bin_shape_t$137,
        bin_size_t$93,
        bin_write_t$94,
        bin_read_t$185,
        bin_read_t$186,
        bin_writer_t$112,
        bin_reader_t$112,
        bin_t$112,
        t_of_sexp$115,
        sexp_of_t$127],
       [0,
        [0,
         bin_shape_t$137,
         bin_size_t$93,
         bin_write_t$94,
         bin_read_t$185,
         bin_read_t$186,
         bin_writer_t$112,
         bin_reader_t$112,
         bin_t$112,
         t_of_sexp$115,
         sexp_of_t$127]]];
    caml_register_global(5152,Core_kernel_Set_once,"Core_kernel__Set_once");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Command);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$449);
    caml_call1(Expect_test_collector[4][1],cst_src_command_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$450,cst$220);
    var Stable$10=[0],_arm_=Ppx_inline_test_lib_Runtime[7],switch$0=0;
    if(typeof _arm_ !== "number" && 545942154 <= _arm_[2])
     {var _arn_=1;switch$0 = 1}
    if(! switch$0)var _arn_=0;
    var Exit_called=[248,cst_Core_kernel_Command_Exit_c,caml_fresh_oo_id(0)];
    function _aro_(param)
     {if(param[1] === Exit_called)
       {var
         v_status=param[2],
         arg=caml_call1(sexp_of_t$48,v_status),
         bnds=[0,[1,[0,_arp_,[0,arg,0]]],0];
        return [1,[0,_arq_,bnds]]}
      throw [0,Assert_failure,_arr_]}
    caml_call3(Sexplib0_Sexp_conv[51][2],0,Exit_called,_aro_);
    function exit(status)
     {if(_arn_)throw [0,Exit_called,status];return caml_call1(_Hr_,status)}
    var to_string$31=Base_Exn[9];
    function handle_uncaught_and_exit(f)
     {if(_arn_)
       try
        {var _aPA_=caml_call1(f,0);return _aPA_}
       catch(exn)
        {exn = caml_wrap_exception(exn);
         if(exn[1] === Exit_called && 0 === exn[2])
          return caml_call2(_Ph_,0,caml_call1(_QG_,exn));
         throw exn}
      return caml_call1(Base_Exn[14],f)}
    function unparagraphs(xs){return caml_call2(_Cd_,_art_,xs)}
    var
     Failed_to_parse_command_line=
      [248,cst_Core_kernel_Command_Failed,caml_fresh_oo_id(0)];
    function die(fmt)
     {return caml_call2
              (_fy_,
               function(msg,param){throw [0,Failed_to_parse_command_line,msg]},
               fmt)}
    var help_screen_compare$0=_ao6_[3];
    function key_create(name){return caml_call2(Id$0[3],name,_N__)}
    var multi_add=Multi[4],set_with_default=With_default[2],Auto_complete=[0];
    function run_and_exit(t,env,part)
     {caml_call2
       (_xC_,
        t,
        function(completions)
         {return caml_call2(_o9_,caml_call2(completions,env,part),_GE_)});
      return exit(0)}
    function create$34(complete,key,of_string)
     {function parse(x)
       {return caml_call1
                (_h6_,function(param){return caml_call1(of_string,x)})}
      return [0,parse,complete,key]}
    function map$38(key,t,f)
     {function parse(str){return caml_call2(_hX_,caml_call1(t[1],str),f)}
      var complete=t[2];
      return [0,parse,complete,key]}
    var
     string$2=create$34(0,0,function(_aPz_){return _aPz_}),
     int$3=create$34(0,0,of_string$3),
     char$4=create$34(0,0,_FL_),
     float$2=create$34(0,0,_Ix_),
     date=create$34(0,0,of_string$17),
     percent=create$34(0,0,of_string$18),
     host_and_port=create$34(0,0,of_string$26),
     sexp=create$34(0,0,of_string);
    function sexp_conv(of_sexp)
     {return create$34
              (0,
               0,
               function(s){return caml_call1(of_sexp,caml_call1(of_string,s))})}
    function of_map(key,map)
     {function _aPx_(arg)
       {var match=caml_call2(find$3,map,arg);
        if(match){var v=match[1];return v}
        return caml_call3
                (_Pe_,_arv_,caml_call2(_Cd_,_aru_,caml_call1(keys$2,map)),0)}
      return create$34
              ([0,
                function(param,prefix)
                 {function _aPy_(param)
                   {var name=param[1];
                    return caml_call2(_CD_,name,prefix)?[0,name]:0}
                  return caml_call2(_qT_,caml_call2(to_alist$1,0,map),_aPy_)}],
               key,
               _aPx_)}
    function of_alist_exn$6(key,alist)
     {var match=caml_call1(Map$1[6],alist);
      if(17724 <= match[1]){var map=match[2];return of_map(key,map)}
      var key$0=match[2];
      return caml_call3(_Pe_,_arw_,key$0,0)}
    var bool$3=of_alist_exn$6(0,_arx_);
    function comma_separated(opt,key,_aPp_,_aPo_,t)
     {if(opt)var sth=opt[1],allow_empty=sth;else var allow_empty=0;
      if(_aPp_)
       var sth$0=_aPp_[1],strip_whitespace=sth$0;
      else
       var strip_whitespace=0;
      if(_aPo_)
       var sth$1=_aPo_[1],unique_values=sth$1;
      else
       var unique_values=0;
      var
       strip=
        strip_whitespace
         ?function(str){return caml_call2(_CP_,0,str)}
         :function(_aPw_){return _aPw_};
      function _aPq_(complete_elt,env,suffix)
       {var match=caml_call1(parts,caml_call2(_CI_,suffix,44));
        if(match)
         var
          tl=match[2],
          hd=match[1],
          suffix$0=hd,
          prefixes=caml_call1(parts,tl);
        else
         var suffix$0=suffix,prefixes=0;
        if(unique_values)
         var
          _aPt_=caml_call2(_p9_,prefixes,strip),
          seen_already=caml_call1(Set$1[58],_aPt_),
          is_allowed=
           function(choice)
            {return 1 - caml_call2(mem$8,seen_already,strip(choice))};
        else
         var is_allowed=function(param){return 1};
        function _aPu_(choice)
         {var _aPv_=1 - caml_call2(_BT_,choice,44);
          return _aPv_?is_allowed(choice):_aPv_}
        var
         choices=caml_call2(_pO_,caml_call2(complete_elt,env,suffix$0),_aPu_),
         switch$0=0;
        if(choices && ! choices[2])
         {var
           choice=choices[1],
           choices$0=[0,choice,[0,caml_call2(_Gp_,choice,cst$221),0]];
          switch$0 = 1}
        if(! switch$0)var choices$0=choices;
        return caml_call2
                (_p9_,
                 choices$0,
                 function(choice)
                  {return caml_call2
                           (_Cd_,_ary_,caml_call2(_Of_,prefixes,[0,choice,0]))})}
      var complete=caml_call2(_xW_,t[2],_aPq_);
      function of_string(string)
       {var string$0=strip(string);
        if(caml_call1(_BU_,string$0))
         return allow_empty?0:caml_call1(_Gb_,cst_Command_Spec_Arg_type_comm);
        function _aPr_(str)
         {var _aPs_=strip(str);return caml_call1(_hR_,caml_call1(t[1],_aPs_))}
        return caml_call2(_p9_,caml_call2(_CI_,string$0,44),_aPr_)}
      return create$34(complete,key,of_string)}
    var
     include$143=
      [0,
       string$2,
       int$3,
       char$4,
       float$2,
       bool$3,
       date,
       percent,
       host_and_port,
       sexp,
       sexp_conv];
    function loop$0(acc,enumerate_007,enumerate_008)
     {var
       acc$0=acc,
       enumerate_007$0=enumerate_007,
       enumerate_008$0=enumerate_008;
      for(;;)
       {if(enumerate_008$0)
         {if(enumerate_007$0)
           {var
             enumerate_006=enumerate_008$0[1],
             enumerate_007$1=enumerate_007$0[2],
             enumerate_005=enumerate_007$0[1],
             acc$1=[0,[0,enumerate_005,enumerate_006],acc$0],
             acc$0=acc$1,
             enumerate_007$0=enumerate_007$1;
            continue}
          var
           enumerate_008$1=enumerate_008$0[2],
           enumerate_007$0=enumerate_003,
           enumerate_008$0=enumerate_008$1;
          continue}
        return caml_call1(Stdlib_list[9],acc$0)}}
    loop$0(0,enumerate_003,enumerate_004);
    var to_help_string$0=_ao9_[7];
    function parse$1(action,doc)
     {if(0 === action[0])
       var arg_doc=0;
      else
       {var match$0=caml_call2(_CG_,doc,32),switch$0=0;
        if(match$0)
         {var _aPl_=match$0[1],_aPm_=_aPl_[1];
          if(caml_string_notequal(_aPm_,cst$222))
           var doc$1=_aPl_[2],_aPn_=[0,[0,_aPm_,doc$1]];
          else
           switch$0 = 1}
        else
         switch$0 = 1;
        if(switch$0)var _aPn_=1 === action[0]?[0,[0,cst$223,doc]]:0;
        var arg_doc=_aPn_}
      if(arg_doc)
       {var match=arg_doc[1],doc$0=match[2],arg_doc$0=match[1];
        return [0,[0,arg_doc$0],caml_call2(_CP_,0,doc$0)]}
      return [0,0,caml_call2(_CP_,0,doc)]}
    function concat$1(name,arg_doc)
     {if(arg_doc)
       {var arg_doc$0=arg_doc[1];
        return caml_call2(_Gp_,name,caml_call2(_Gp_,cst$224,arg_doc$0))}
      return name}
    function wrap_if_optional(t,x)
     {var at_least_once=t[6][1];
      return caml_call2(to_help_string$0,[0,at_least_once,1],x)}
    function help(t)
     {var doc=t[5],action=t[4],aliases=t[2],name=t[1];
      if(caml_call2(_CD_,doc,cst$225))
       {var
         _aPi_=
          caml_call2
           (_p9_,
            aliases,
            function(x){return [0,x,caml_call2(_fw_,_arz_,name)]});
        return [0,[0,name,caml_call2(_CN_,0,doc)],_aPi_]}
      var
       match=parse$1(action,doc),
       doc$0=match[2],
       arg_doc=match[1],
       _aPj_=
        caml_call2
         (_p9_,
          aliases,
          function(x)
           {var _aPk_=caml_call2(_fw_,_arA_,name);
            return [0,wrap_if_optional(t,concat$1(x,arg_doc)),_aPk_]});
      return [0,[0,wrap_if_optional(t,concat$1(name,arg_doc)),doc$0],_aPj_]}
    function align(t)
     {var
       doc=t[5],
       action=t[4],
       aliases=t[2],
       name$0=t[1],
       match=parse$1(action,doc),
       doc$0=match[2],
       arg_doc=match[1],
       flag_name=concat$1(name$0,arg_doc),
       name=caml_call2(to_help_string$0,t[6],flag_name);
      return [0,name,doc$0,aliases]}
    function create$35(flags)
     {var
       _aPf_=caml_call2(_p9_,flags,function(flag){return [0,flag[1],flag]}),
       match=caml_call1(Map$1[6],_aPf_);
      if(17724 <= match[1])
       {var
         map=match[2],
         _aPg_=function(x){return caml_call3(_Pe_,_arB_,x,0)},
         _aPh_=
          caml_call2(_qc_,flags,function(flag){return [0,flag[1],flag[2]]});
        caml_call2
         (_xC_,
          caml_call2
           (_qJ_,
            function(a_010,b_011){return caml_call2(compare$37,a_010,b_011)},
            _aPh_),
          _aPg_);
        return map}
      var flag=match[2];
      return caml_call3(_Pe_,_arC_,flag,0)}
    function arg_flag(name,arg_type,read,write,num_occurrences)
     {function update(env,arg)
       {var match=caml_call1(arg_type[1],arg);
        if(0 === match[0])
         {var
           arg$0=match[1],
           env$0=caml_call2(write,env,arg$0),
           _aPd_=arg_type[3];
          if(_aPd_)
           {var key=_aPd_[1];return caml_call3(multi_add,env$0,key,arg$0)}
          return env$0}
        var exn=match[1],_aPe_=caml_call1(to_string$31,exn);
        return caml_call4(die(_arD_),name,arg,_aPe_,0)}
      return [0,[1,update,arg_type[2]],read,num_occurrences]}
    function map_flag(t,f,input)
     {var
       match=caml_call1(t,input),
       num_occurrences=match[3],
       read=match[2],
       action=match[1];
      return [0,
              action,
              function(env){return caml_call1(f,caml_call1(read,env))},
              num_occurrences]}
    function write_option(name,key,env,arg)
     {return caml_call3
              (update$4,
               env,
               key,
               function(param){return param?caml_call2(die(_arE_),name,0):arg})}
    function required_value(default$0,arg_type,name,num_occurrences)
     {function _aPc_(param){return _arF_}
      var key=caml_call2(Id$0[3],name,_aPc_);
      function read(env)
       {var match=caml_call2(find$10,env,key);
        if(match){var v=match[1];return v}
        if(default$0){var v$0=default$0[1];return v$0}
        return caml_call2(die(_arG_),name,0)}
      function write(env,arg){return write_option(name,key,env,arg)}
      return arg_flag(name,arg_type,read,write,num_occurrences)}
    function required$0(arg_type,name)
     {return required_value(0,arg_type,name,exactly_once)}
    function optional_with_default(default$0,arg_type,name)
     {return required_value([0,default$0],arg_type,name,at_most_once$1)}
    function optional$0(arg_type,name)
     {function _aPb_(param){return _arH_}
      var key=caml_call2(Id$0[3],name,_aPb_);
      function read(env){return caml_call2(find$10,env,key)}
      function write(env,arg){return write_option(name,key,env,arg)}
      return arg_flag(name,arg_type,read,write,at_most_once$1)}
    function no_arg_general(key_value,deprecated_hook,name)
     {var key=caml_call2(Id$0[3],name,sexp_of_t$57);
      function read(env){return caml_call2(mem$10,env,key)}
      function action(env)
       {var
         env$0=
          caml_call3
           (_xD_,
            key_value,
            env,
            function(env,param)
             {var value=param[2],key=param[1];
              return caml_call3(set_with_default,env,key,value)});
        return caml_call2(mem$10,env$0,key)
                ?caml_call2(die(_arI_),name,0)
                :caml_call3(set$8,env$0,key,0)}
      if(deprecated_hook)
       var
        f=deprecated_hook[1],
        action$0=
         function(env){var env$0=action(env);caml_call1(f,0);return env$0};
      else
       var action$0=action;
      return [0,[0,action$0],read,at_most_once$1]}
    function no_arg(name){return no_arg_general(0,0,name)}
    function no_arg_register(key,value,name)
     {return no_arg_general([0,[0,key,value]],0,name)}
    function no_arg_some(value)
     {function _aO$_(param){return param?[0,value]:0}
      return function(_aPa_){return map_flag(no_arg,_aO$_,_aPa_)}}
    function listed(arg_type,name)
     {var
       _aO9_=caml_call1(sexp_of_t$17,function(param){return _arJ_}),
       key=caml_call3(With_default[1][1],0,name,_aO9_);
      function read(env)
       {return caml_call1(parts,caml_call2(With_default[3],env,key))}
      function write(env,arg)
       {function _aO__(list){return [0,arg,list]}
        return caml_call3(With_default[4],env,key,_aO__)}
      return arg_flag(name,arg_type,read,write,any)}
    function one_or_more(arg_type,name)
     {function _aO5_(param){return _arK_}
      function _aO6_(_aO8_){return sexp_of_t$125(_aO5_,_aO8_)}
      var key=caml_call3(With_default[1][1],acc,name,_aO6_);
      function read(env)
       {var match=caml_call1(to_list$21,caml_call2(With_default[3],env,key));
        if(match){var rest=match[2],first=match[1];return [0,first,rest]}
        return caml_call2(die(_arL_),name,0)}
      function write(env,arg)
       {function _aO7_(q){return enqueue(q,arg)}
        return caml_call3(With_default[4],env,key,_aO7_)}
      return arg_flag(name,arg_type,read,write,at_least_once$1)}
    function escape_general(deprecated_hook,name)
     {var
       _aO4_=caml_call1(sexp_of_t$17,sexp_of_t$43),
       key=caml_call2(Id$0[3],name,_aO4_);
      function action(env,cmd_line){return caml_call3(set$8,env,key,cmd_line)}
      function read(env){return caml_call2(find$10,env,key)}
      if(deprecated_hook)
       var
        f=deprecated_hook[1],
        action$0=function(env,x){caml_call1(f,x);return action(env,x)};
      else
       var action$0=action;
      return [0,[2,action$0],read,at_most_once$1]}
    function no_arg_abort(exit,name)
     {function _aO3_(param){return 0}
      return [0,
              [0,function(param){return caml_call1(_L8_,caml_call1(exit,0))}],
              _aO3_,
              at_most_once$1]}
    function escape(name){return escape_general(0,name)}
    function no_arg$0(hook,name){return no_arg_general(0,[0,hook],name)}
    function escape$0(hook)
     {var _aO1_=[0,hook];
      return function(_aO2_){return escape_general(_aO1_,_aO2_)}}
    var empty$11=0;
    function create$36(path_to_exe){return [0,path_to_exe,0]}
    function append$4(t,subcommand){return [0,subcommand,t]}
    function parts_exe_basename(t)
     {var match=caml_call1(parts,t);
      if(match)
       {var tl=match[2],hd=match[1];return [0,caml_call1(basename,hd),tl]}
      return 0}
    function to_string$32(t)
     {var xs=parts_exe_basename(t);return caml_call2(_Cd_,_ars_,xs)}
    function replace_first(t,from,to)
     {var parts$1=caml_call1(parts,t),parts$0=parts$1,acc=0;
      for(;;)
       {if(parts$0)
         {var tl=parts$0[2],hd=parts$0[1];
          if(caml_call2(symbol$11,hd,from))
           return caml_call2(_pz_,tl,[0,to,acc]);
          var acc$0=[0,hd,acc],parts$0=tl,acc=acc$0;
          continue}
        return acc}}
    function to_string_dots(t)
     {if(t)
       var
        init=t[2],
        last=t[1],
        _aO0_=[0,last,caml_call2(_p9_,init,caml_call1(_im_,cst$226))];
      else
       var _aO0_=0;
      return to_string$32(_aO0_)}
    var invariant$17=_ao__[1][4],usage$0=_ao__[1][5];
    function is_fixed_arity(param)
     {var param$0=param;
      for(;;)
       if(typeof param$0 === "number")
        return 1;
       else
        switch(param$0[0])
         {case 0:return 1;
          case 1:return 0;
          case 2:return 0;
          case 3:
           var ts=param$0[1],match=caml_call1(parts,ts);
           if(match)
            {var others=match[2],last=match[1];
             if(caml_call2(_pc_,others,is_fixed_arity))
              {var param$0=last;continue}
             throw [0,Assert_failure,_arN_]}
           return caml_call1(_Gb_,cst_bug_in_command_ml$1);
          default:return 0}}
    function names$4(param)
     {var param$0=param;
      for(;;)
       if(typeof param$0 === "number")
        return 0;
       else
        switch(param$0[0])
         {case 0:var s=param$0[1];return [0,s,0];
          case 1:var param$1=param$0[1],param$0=param$1;continue;
          case 2:var param$2=param$0[1],param$0=param$2;continue;
          case 3:var ts=param$0[1];return caml_call2(_qc_,ts,names$4);
          default:var s$0=param$0[1];return [0,s$0,0]}}
    var zero$6=0;
    function concat$2(param)
     {if(param)
       {var
         cdr=param[2],
         car=param[1],
         match=
          caml_call3
           (_o__,
            cdr,
            [0,car,0],
            function(param,t2)
             {var acc=param[2],t1=param[1];
              if(typeof t1 === "number")
               var t=t2;
              else
               {if(typeof t2 !== "number")
                 {if(is_fixed_arity(t1))return [0,t2,[0,t1,acc]];
                  var
                   _aOY_=caml_call1(usage$0,t1),
                   _aOZ_=caml_call1(usage$0,t2);
                  return caml_call5
                          (_Pe_,
                           _arP_,
                           caml_call1(usage$0,[3,caml_call1(parts,[0,t2,[0,t1,acc]])]),
                           _aOZ_,
                           _aOY_,
                           0)}
                var t=t1}
              return [0,t,acc]}),
         cdr$0=match[2],
         car$0=match[1];
        return cdr$0?[3,caml_call1(parts,[0,car$0,cdr$0])]:car$0}
      return 0}
    function return$2(a){return [0,function(param){return a}]}
    function pack_for_completion(x)
     {switch(x[0])
       {case 0:return 0;
        case 3:var ps=x[1];return ps;
        default:return [0,[0,x],0]}}
    function symbol$214(tf,tx)
     {switch(tf[0])
       {case 0:
         var f=tf[1];
         switch(tx[0])
          {case 0:
            var x=tx[1];
            return [0,
                    function(env){return caml_call2(f,env,caml_call1(x,env))}];
           case 1:
            var
             match=tx[1],
             complete=match[3],
             parse=match[2],
             name=match[1],
             parse$0=
              function(arg,for_completion)
               {var
                 match=caml_call2(parse,arg,for_completion),
                 tx=match[2],
                 upd=match[1];
                return [0,upd,symbol$214(tf,tx)]};
            return [1,[0,name,parse$0,complete]];
           case 2:
            var test=tx[1];
            return [2,
                    function(more){return symbol$214(tf,caml_call1(test,more))}];
           default:var packed=tx[1];return [3,packed]}
        case 1:
         var
          match$0=tf[1],
          complete$0=match$0[3],
          parse$1=match$0[2],
          name$0=match$0[1],
          parse$2=
           function(arg,for_completion)
            {var
              match=caml_call2(parse$1,arg,for_completion),
              tf=match[2],
              upd=match[1];
             return [0,upd,symbol$214(tf,tx)]};
         return [1,[0,name$0,parse$2,complete$0]];
        case 2:
         var test$0=tf[1];
         return [2,
                 function(more){return symbol$214(caml_call1(test$0,more),tx)}];
        default:
         var packed$0=tf[1];
         return [3,caml_call2(_Of_,packed$0,pack_for_completion(tx))]}}
    function symbol_map$1(t,f){return symbol$214(return$2(f),t)}
    function one$4(name,arg_type)
     {return [2,
              function(more)
               {if(more)
                 {var
                   key=arg_type[3],
                   complete=arg_type[2],
                   of_string=arg_type[1],
                   parse=
                    function(anon,for_completion)
                     {var match=caml_call1(of_string,anon);
                      if(0 === match[0])
                       {var
                         v=match[1],
                         update=
                          function(env)
                           {return caml_call3
                                    (_xD_,
                                     key,
                                     env,
                                     function(env,key){return caml_call3(multi_add,env,key,v)})};
                        return [0,update,return$2(v)]}
                      var exn=match[1];
                      if(for_completion)
                       return [0,function(_aOX_){return _aOX_},_arQ_];
                      var _aOW_=caml_call1(to_string$31,exn);
                      return caml_call4(die(_arR_),name,anon,_aOW_,0)};
                  return [1,[0,name,parse,complete]]}
                return caml_call2(die(_arS_),name,0)}]}
    function sequence(t)
     {var loop=[];
      caml_update_dummy
       (loop,
        [2,
         function(more)
          {return more
                   ?symbol$214
                     (symbol$214(return$2(function(v,acc){return [0,v,acc]}),t),
                      loop)
                   :return$2(0)}]);
      return loop}
    function final_value(t,env)
     {var t$0=t;
      for(;;)
       switch(t$0[0])
        {case 0:var a=t$0[1];return caml_call1(a,env);
         case 1:
          var match=t$0[1],name=match[1];return caml_call2(die(_arT_),name,0);
         case 2:var f=t$0[1],t$1=caml_call1(f,0),t$0=t$1;continue;
         default:return caml_call1(_Gb_,cst_BUG_asked_for_final_value_)}}
    function consume(t,arg,for_completion)
     {var t$0=t;
      for(;;)
       switch(t$0[0])
        {case 0:return caml_call1(die(_arU_),0);
         case 1:
          var match=t$0[1],parse=match[2];
          return caml_call2(parse,arg,for_completion);
         case 2:var f=t$0[1],t$1=caml_call1(f,1),t$0=t$1;continue;
         default:
          var packed=t$0[1];
          if(packed)
           {var
             rest=packed[2],
             match$0=packed[1],
             t$2=match$0[1],
             match$1=consume(t$2,arg,for_completion),
             t$3=match$1[2],
             upd=match$1[1];
            return [0,upd,[3,caml_call2(_Of_,pack_for_completion(t$3),rest)]]}
          return [0,function(_aOV_){return _aOV_},_arV_]}}
    function complete(t,env,part)
     {var t$0=t;
      for(;;)
       switch(t$0[0])
        {case 0:return exit(0);
         case 1:
          var match=t$0[1],complete=match[3];
          return run_and_exit(complete,env,part);
         case 2:var f=t$0[1],t$1=caml_call1(f,1),t$0=t$1;continue;
         default:
          var t$2=t$0[1];
          if(t$2){var match$0=t$2[1],t$3=match$0[1],t$0=t$3;continue}
          return exit(0)}}
    function t2(t1,t2)
     {var _aOS_=concat$2([0,t1[2],[0,t2[2],0]]),_aOT_=t2[1],_aOU_=t1[1];
      return [0,
              symbol$214
               (symbol$214(return$2(function(a1,a2){return [0,a1,a2]}),_aOU_),
                _aOT_),
              _aOS_]}
    function t3(t1,t2,t3)
     {var
       _aOO_=concat$2([0,t1[2],[0,t2[2],[0,t3[2],0]]]),
       _aOP_=t3[1],
       _aOQ_=t2[1],
       _aOR_=t1[1];
      return [0,
              symbol$214
               (symbol$214
                 (symbol$214
                   (return$2(function(a1,a2,a3){return [0,a1,a2,a3]}),_aOR_),
                  _aOQ_),
                _aOP_),
              _aOO_]}
    function t4(t1,t2,t3,t4)
     {var
       _aOJ_=concat$2([0,t1[2],[0,t2[2],[0,t3[2],[0,t4[2],0]]]]),
       _aOK_=t4[1],
       _aOL_=t3[1],
       _aOM_=t2[1],
       _aON_=t1[1];
      return [0,
              symbol$214
               (symbol$214
                 (symbol$214
                   (symbol$214
                     (return$2(function(a1,a2,a3,a4){return [0,a1,a2,a3,a4]}),
                      _aON_),
                    _aOM_),
                  _aOL_),
                _aOK_),
              _aOJ_]}
    function normalize$1(str)
     {var strlen=caml_ml_string_length(str);
      if(caml_call2(_Nr_,strlen,0))
       caml_call1(_Gb_,cst_Empty_anonymous_argument_n);
      if(caml_call2(symbol$14,caml_call2(_CP_,0,str),str))
       caml_call3(_Pe_,_arW_,str,0);
      var
       special_chars=caml_call1(_E4_[58],_arX_),
       has_special_chars=caml_call2(_BZ_,str,caml_call1(mem$8,special_chars));
      return has_special_chars?str:caml_call1(_Cg_,str)}
    function symbol$215(name,arg_type)
     {var name$0=normalize$1(name);
      return [0,one$4(name$0,arg_type),[0,name$0]]}
    function map_anons(t,f)
     {var _aOI_=t[2];return [0,symbol_map$1(t[1],f),_aOI_]}
    function maybe(t)
     {var _aOF_=t[2],_aOG_=typeof _aOF_ === "number"?0:[2,_aOF_],_aOH_=t[1];
      return [0,
              [2,
               function(more)
                {return more
                         ?symbol_map$1(_aOH_,function(a){return [0,a]})
                         :return$2(0)}],
              _aOG_]}
    function maybe_with_default(default$0,t)
     {var init=maybe(t),_aOD_=init[2];
      function _aOE_(v){return caml_call2(_x6_,v,default$0)}
      return [0,symbol_map$1(init[1],_aOE_),_aOD_]}
    function sequence$0(t)
     {var _aOB_=t[2];
      if(typeof _aOB_ === "number")
       var _aOC_=0;
      else
       {if(1 - is_fixed_arity(_aOB_))
         caml_call3(_Pe_,_arO_,caml_call1(usage$0,_aOB_),0);
        var _aOC_=[1,_aOB_]}
      return [0,sequence(t[1]),_aOC_]}
    function non_empty_sequence_as_pair(t){return t2(t,sequence$0(t))}
    function non_empty_sequence_as_list(t)
     {var init=non_empty_sequence_as_pair(t),_aOz_=init[2];
      function _aOA_(param){var xs=param[2],x=param[1];return [0,x,xs]}
      return [0,symbol_map$1(init[1],_aOA_),_aOz_]}
    function ad_hoc(usage_arg)
     {return [0,
              sequence(one$4(cst_WILL_NEVER_BE_PRINTED,string$2)),
              [4,usage_arg]]}
    function compare$101(a_012,b_013)
     {var a_012$0=a_012,b_013$0=b_013;
      for(;;)
       {if(caml_call2(Ppx_compare_lib[1],a_012$0,b_013$0))return 0;
        if(typeof a_012$0 === "number")
         return typeof b_013$0 === "number"?0:-1;
        else
         if(0 === a_012$0[0])
          {var _aOw_=a_012$0[2],_aOx_=a_012$0[1];
           if(typeof b_013$0 !== "number")
            {if(0 === b_013$0[0])
              {var
                b_017=b_013$0[2],
                b_015=b_013$0[1],
                n=caml_call2(compare$37,_aOx_,b_015);
               if(0 === n){var a_012$0=_aOw_,b_013$0=b_017;continue}
               return n}
             return -1}}
         else
          {var _aOy_=a_012$0[1];
           if(typeof b_013$0 !== "number")
            {if(0 === b_013$0[0])return 1;
             var b_019=b_013$0[1];
             return caml_call2(compare$37,_aOy_,b_019)}}
        return 1}}
    function of_list$12(args)
     {var _aOv_=0;
      return caml_call3
              (_ql_,args,function(arg,args){return [0,arg,args]},_aOv_)}
    function to_list$24(param)
     {if(typeof param === "number")
       return 0;
      else
       {if(0 === param[0])
         {var xs=param[2],x=param[1];return [0,x,to_list$24(xs)]}
        var x$0=param[1];
        return [0,x$0,0]}}
    function ends_in_complete(param)
     {var param$0=param;
      for(;;)
       if(typeof param$0 === "number")
        return 0;
       else
        {if(0 === param$0[0]){var param$1=param$0[2],param$0=param$1;continue}
         return 1}}
    function extend(t,extend,path)
     {if(ends_in_complete(t))return t;
      var
       path_list=caml_call2(_x6_,caml_call1(_p0_,caml_call1(parts,path)),0),
       _aOu_=caml_call1(extend,path_list);
      return of_list$12(caml_call2(_Of_,to_list$24(t),_aOu_))}
    function normalize$2(key_type,key)
     {if(caml_call2(_BZ_,key,function(c){return caml_call2(_FH_,c,95)}))
       caml_call4(_Pe_,_arY_,caml_call1(_ao6_[1][1],key_type),key,0);
      if(key_type)
       {if(caml_call2(equal$18,key,cst$227))
         {var _aOs_=0;
          caml_call4
           (_Pe_,
            [0,
             [11,
              cst_invalid,
              [24,
               _ar0_,
               function(param,custom_printf_020)
                {return caml_call1(_ao6_[1][1],custom_printf_020)},
               _arZ_]],
             cst_invalid_Key_type_name_S],
            key_type,
            key,
            _aOs_)}
        if(caml_call2(_BZ_,key,_Fb_))
         {var _aOt_=0;
          caml_call4
           (_Pe_,
            [0,
             [11,
              cst_invalid$0,
              [24,
               _ar2_,
               function(param,custom_printf_021)
                {return caml_call1(_ao6_[1][1],custom_printf_021)},
               _ar1_]],
             cst_invalid_Key_type_name_cont],
            key_type,
            key,
            _aOt_)}
        return caml_call2(_CD_,key,cst$228)?key:caml_call2(_Gp_,cst$229,key)}
      return caml_call1(_Ch_,key)}
    var lookup_expand$0=_ao6_[4];
    function lookup_expand_with_aliases(map,prefix,key_type)
     {function _aOq_(flag)
       {var
         name_matching=flag[8],
         aliases_excluded_from_help=flag[3],
         aliases=flag[2],
         name=flag[1],
         data=[0,flag,name_matching],
         aliases$0=caml_call2(_Of_,aliases_excluded_from_help,aliases);
        return [0,
                [0,name,data],
                caml_call2
                 (_p9_,aliases$0,function(alias){return [0,alias,data]})]}
      var
       alist=caml_call2(_qc_,caml_call1(Map$1[65],map),_aOq_),
       match=
        caml_call2
         (_qJ_,
          function(param,_aOr_)
           {var s2=_aOr_[1],s1=param[1];return caml_call2(compare$37,s1,s2)},
          alist);
      if(match)
       {var match$0=match[1],flag=match$0[1];
        return caml_call3(_Pe_,_ar3_,flag,0)}
      return caml_call3(lookup_expand$0,alist,prefix,key_type)}
    function subcommand_cmp_fst(param,_aOp_)
     {var c=_aOp_[1],a=param[1];return caml_call2(help_screen_compare$0,a,c)}
    function shape(t)
     {function _aOj_(a,b){return caml_call2(compare$37,a[1],b[1])}
      var
       _aOk_=
        caml_call2
         (_pW_,caml_call2(_p9_,caml_call1(Map$1[65],t[3]),align),_aOj_),
       _aOl_=caml_call1(_ao8_[19],_aOk_),
       _aOm_=[1,t[5]];
      function _aOn_(readme){return caml_call1(readme,0)}
      var _aOo_=caml_call2(_xW_,t[2],_aOn_);
      return [0,t[1],_aOo_,_aOm_,_aOl_]}
    var
     path_key=key_create(cst_path),
     args_key=key_create(cst_args),
     help_key=key_create(cst_help$5);
    function app(t1,t2,f)
     {function _aOd_(param)
       {var _aOi_=caml_call1(t1[3],0);
        return caml_call2(_Of_,caml_call1(t2[3],0),_aOi_)}
      function _aOe_(param)
       {var _aOh_=[0,caml_call1(t2[2],0),0];
        return concat$2([0,caml_call1(t1[2],0),_aOh_])}
      return [0,
              function(param)
               {var _aOf_=caml_call1(t2[1],0),_aOg_=caml_call1(t1[1],0);
                return symbol$214(symbol$214(return$2(f),_aOg_),_aOf_)},
              _aOe_,
              _aOd_]}
    function apply$1(pf,px)
     {function _aN9_(param)
       {var _aOc_=caml_call1(pf[1][3],0);
        return caml_call2(_Of_,caml_call1(px[1][3],0),_aOc_)}
      function _aN__(param)
       {var _aOb_=[0,caml_call1(px[1][2],0),0];
        return concat$2([0,caml_call1(pf[1][2],0),_aOb_])}
      return [0,
              [0,
               function(param)
                {var
                  _aN$_=caml_call1(px[1][1],0),
                  _aOa_=caml_call1(pf[1][1],0);
                 return symbol$214
                         (symbol$214
                           (return$2
                             (function(mf,mx,k)
                               {return caml_call1
                                        (mf,
                                         function(f)
                                          {return caml_call1
                                                   (mx,function(x){return caml_call1(k,caml_call1(f,x))})})}),
                            _aOa_),
                          _aN$_)},
               _aN__,
               _aN9_]]}
    function symbol$216(t1,t2)
     {return app
              (t1,
               t2,
               function(f1,f2,x){return caml_call1(f2,caml_call1(f1,x))})}
    function symbol$217(t1,p2)
     {function _aN8_(f1,f2,x){return caml_call1(f2,caml_call1(f1,x))}
      return app(t1,p2[1],_aN8_)}
    function symbol$218(t1,p2)
     {function _aN7_(f2,f1,x){return caml_call1(f1,caml_call1(f2,x))}
      return app(p2[1],t1,_aN7_)}
    function step(f)
     {function _aN5_(param){return 0}
      function _aN6_(param){return zero$6}
      return [0,function(param){return return$2(f)},_aN6_,_aN5_]}
    function _ar8_(param){return 0}
    function _ar9_(param){return zero$6}
    var
     empty$12=
      [0,
       function(param){return return$2(function(_aN4_){return _aN4_})},
       _ar9_,
       _ar8_];
    function const$0(v)
     {function _aN2_(param){return 0}
      function _aN3_(param){return zero$6}
      return [0,
              [0,
               function(param)
                {return return$2(function(k){return caml_call1(k,v)})},
               _aN3_,
               _aN2_]]}
    function map$39(p,f)
     {var _aNZ_=p[1][3],_aN0_=p[1][2];
      return [0,
              [0,
               function(param)
                {function _aN1_(c,k)
                  {return caml_call1
                           (c,function(v){return caml_call1(k,caml_call1(f,v))})}
                 return symbol_map$1(caml_call1(p[1][1],0),_aN1_)},
               _aN0_,
               _aNZ_]]}
    function wrap(f,t)
     {var _aNW_=t[3],_aNX_=t[2];
      return [0,
              function(param)
               {function _aNY_(run,main){return caml_call2(f,run,main)}
                return symbol_map$1(caml_call1(t[1],0),_aNY_)},
              _aNX_,
              _aNW_]}
    function of_param(p){return p[1]}
    function to_param(t,main)
     {function _aNU_(k){return caml_call1(k,main)}
      var _aNS_=t[3],_aNT_=t[2];
      return map$39
              ([0,
                [0,
                 function(param)
                  {function _aNV_(f,k){return caml_call1(k,f)}
                   return symbol_map$1(caml_call1(t[1],0),_aNV_)},
                 _aNT_,
                 _aNS_]],
               _aNU_)}
    function lookup(key)
     {function _aNQ_(param){return 0}
      function _aNR_(param){return zero$6}
      return [0,
              [0,
               function(param)
                {return [0,
                         function(env,m)
                          {return caml_call1(m,caml_call2(find_exn$9,env,key))}]},
               _aNR_,
               _aNQ_]]}
    var path=lookup(path_key),args=lookup(args_key),help$0=lookup(help_key);
    function _ar__(param){return 0}
    function _ar$_(param){return zero$6}
    var
     env=
      [0,
       [0,
        function(param){return [0,function(env,m){return caml_call1(m,env)}]},
        _ar$_,
        _ar__]],
     string$3=include$143[1],
     int$4=include$143[2],
     char$5=include$143[3],
     float$3=include$143[4],
     bool$4=include$143[5],
     date$0=include$143[6],
     percent$0=include$143[7],
     host_and_port$0=include$143[8],
     sexp$0=include$143[9],
     sexp_conv$0=include$143[10];
    function anon(spec)
     {caml_call1(invariant$17,spec[2]);
      function _aNN_(param){return 0}
      function _aNO_(param){return spec[2]}
      return [0,
              [0,
               function(param)
                {function _aNP_(v,k){return caml_call1(k,v)}
                 return symbol_map$1(spec[1],_aNP_)},
               _aNO_,
               _aNN_]]}
    function flag(opt,full_flag_required,name)
     {return function(mode)
       {return function(doc)
         {var aliases_excluded_from_help=0;
          if(opt)var sth=opt[1],aliases=sth;else var aliases=0;
          function normalize(flag){return normalize$2(1,flag)}
          var
           name$0=normalize(name),
           aliases$0=caml_call2(_p9_,aliases,normalize),
           match=caml_call1(mode,name$0),
           num_occurrences=match[3],
           read=match[2],
           action=match[1],
           check_available=
            num_occurrences[1]
             ?function(env){caml_call1(read,env);return 0}
             :function(_aNM_){return 0},
           name_matching=
            caml_call1(_x2_,full_flag_required)?-461087063:-481604174;
          function _aNK_(param)
           {return [0,
                    [0,
                     name$0,
                     aliases$0,
                     aliases_excluded_from_help,
                     action,
                     doc,
                     num_occurrences,
                     check_available,
                     name_matching],
                    0]}
          function _aNL_(param){return zero$6}
          return [0,
                  [0,
                   function(param)
                    {return [0,
                             function(env,m){return caml_call1(m,caml_call1(read,env))}]},
                   _aNL_,
                   _aNK_]]}}}
    function flag_optional_with_default_doc
     (aliases,full_flag_required,name,arg_type,sexp_of_default,default$0,doc)
     {var
       _aNG_=caml_call1(sexp_of_default,default$0),
       _aNH_=
        caml_call3
         (_fw_,
          [0,
           [2,
            0,
            [11,
             cst_default,
             [24,
              _asb_,
              function(param,custom_printf_022)
               {return caml_call1(to_string$0,custom_printf_022)},
              _asa_]]],
           cst_s_default_Sexp],
          doc,
          _aNG_);
      function _aNI_(_aNJ_)
       {return optional_with_default(default$0,arg_type,_aNJ_)}
      return caml_call2(flag(aliases,full_flag_required,name),_aNI_,_aNH_)}
    var
     map$40=[0,-198771759,map$39],
     include$144=caml_call1(Base_Applicative[5],[0,const$0,apply$1,map$40]),
     return$3=include$144[1],
     map$41=include$144[2],
     pair=include$144[3],
     symbol$219=include$144[4],
     symbol$220=include$144[5],
     symbol$221=include$144[6],
     symbol_map$2=include$144[7],
     apply$2=include$144[8],
     map2$2=include$144[9],
     map3$1=include$144[10],
     all$6=include$144[11],
     all_unit$0=include$144[12],
     Applicative_infix$0=include$144[13];
    function flags_of_args_exn(args)
     {return caml_call3
              (_o__,
               args,
               empty$12,
               function(acc,param)
                {var doc=param[3],spec=param[2],name=param[1];
                 function gen(f,flag_type)
                  {var _aNF_=caml_call2(flag(0,0,name),flag_type,doc);
                   return symbol$217
                           (step(function(m,x){caml_call1(f,x);return m}),_aNF_)}
                 function call(f,arg_type)
                  {function _aND_(_aNE_){return optional$0(arg_type,_aNE_)}
                   return gen(function(x){return caml_call2(_xC_,x,f)},_aND_)}
                 function set(r,arg_type)
                  {return call(function(x){r[1] = x;return 0},arg_type)}
                 function set_bool(r,b)
                  {return gen
                           (function(passed)
                             {var _aNC_=passed?(r[1] = b,0):passed;return _aNC_},
                            no_arg)}
                 switch(spec[0])
                  {case 0:
                    var
                     f=spec[1],
                     _aNA_=
                      gen
                       (function(passed){return passed?caml_call1(f,0):passed},
                        no_arg);
                    break;
                   case 1:var f$0=spec[1],_aNA_=call(f$0,bool$4);break;
                   case 2:var r=spec[1],_aNA_=set_bool(r,1);break;
                   case 3:var r$0=spec[1],_aNA_=set_bool(r$0,0);break;
                   case 4:var f$1=spec[1],_aNA_=call(f$1,string$3);break;
                   case 5:var r$1=spec[1],_aNA_=set(r$1,string$3);break;
                   case 6:var f$2=spec[1],_aNA_=call(f$2,int$4);break;
                   case 7:var r$2=spec[1],_aNA_=set(r$2,int$4);break;
                   case 8:var f$3=spec[1],_aNA_=call(f$3,float$3);break;
                   case 9:var r$3=spec[1],_aNA_=set(r$3,float$3);break;
                   case 10:
                    var _aNA_=caml_call1(_Gb_,cst_Arg_Tuple_is_not_supported);
                    break;
                   case 11:
                    var
                     f$4=spec[2],
                     syms=spec[1],
                     arg_type=
                      of_alist_exn$6
                       (0,caml_call2(_p9_,syms,function(sym){return [0,sym,sym]})),
                     _aNA_=call(f$4,arg_type);
                    break;
                   case 12:
                    var
                     f$5=spec[1],
                     _aNA_=
                      gen
                       (function(x)
                         {return caml_call2
                                  (_xC_,x,function(_aNB_){return caml_call2(_o9_,_aNB_,f$5)})},
                        escape);
                    break;
                   case 13:
                    var _aNA_=caml_call1(_Gb_,cst_Arg_Rest_all_is_not_suppor);
                    break;
                   default:
                    var _aNA_=caml_call1(_Gb_,cst_Arg_Expand_is_not_supporte)}
                 return symbol$216(acc,_aNA_)})}
    var Deprecated=[0,no_arg$0,escape$0,ad_hoc];
    function arg_names(param)
     {var
       t=param[1],
       flag_names=caml_call1(keys$2,create$35(caml_call1(t[3],0))),
       anon_names=names$4(caml_call1(t[2],0));
      return caml_call1(_q5_,[0,flag_names,[0,anon_names,0]])}
    function compare$102(a_023,b_024)
     {return compare_list
              (function(a_025,b_026)
                {return caml_call2(compare$37,a_025,b_026)},
               a_023,
               b_024)}
    function sexp_of_t$129(v){return caml_call2(sexp_of_t$17,sexp_of_t$43,v)}
    var
     T=[0,compare$102,sexp_of_t$129],
     _asc_=T[2],
     include$145=caml_call1(Make,T),
     _asd_=include$145[1];
    function create_exn$0(param)
     {var
       names=arg_names(param),
       names_with_commas=
        caml_call2(_pO_,names,function(s){return caml_call4(_Cf_,0,0,s,44)});
      if(1 - caml_call1(is_empty$0,names_with_commas))
       failwiths
        (0,
         _ase_,
         cst_For_simplicity_Command_Spe,
         names_with_commas,
         caml_call1(sexp_of_t$17,sexp_of_t$43));
      return names
              ?names
              :caml_call1
                (_od_,
                 caml_call1
                  (Sexplib0_Sexp_conv[7],cst_choose_one_expects_choices))}
    var to_string$33=caml_call1(_Cd_,_asf_);
    function list_to_string(ts)
     {return caml_call2(_Cd_,_asg_,caml_call2(_p9_,ts,to_string$33))}
    var If_nothing_chosen=[0];
    function choose_one(ts,if_nothing_chosen)
     {var
       match=
        caml_call2
         (of_alist$2,
          [0,_asd_],
          caml_call2(_p9_,ts,function(t){return [0,create_exn$0(t),t]}));
      if(17724 <= match[1])
       {var
         ts$0=match[2],
         _aNq_=
          function(value)
           {if(value)
             {var _aNs_=value[1];
              if(value[2])
               {var
                 _aNt_=0,
                 _aNu_=caml_call2(_p9_,value,function(_aNz_){return _aNz_[1]}),
                 _aNv_=0;
                return caml_call2
                        (die
                          ([0,
                            [11,
                             cst_Cannot_pass_more_than_one_$0,
                             [24,
                              _ash_,
                              function(param,custom_printf_027)
                               {return list_to_string(custom_printf_027)},
                              _aNv_]],
                            cst_Cannot_pass_more_than_one_]),
                         _aNu_,
                         _aNt_)}
              var value$0=_aNs_[2];
              return typeof if_nothing_chosen === "number"
                      ?if_nothing_chosen?[0,value$0]:value$0
                      :value$0}
            if(typeof if_nothing_chosen === "number")
             {if(if_nothing_chosen)return 0;
              var _aNw_=0,_aNx_=caml_call1(keys$2,ts$0),_aNy_=0;
              return caml_call2
                      (die
                        ([0,
                          [11,
                           cst_Must_pass_one_of_these,
                           [24,
                            _asi_,
                            function(param,custom_printf_028)
                             {return list_to_string(custom_printf_028)},
                            _aNy_]],
                          cst_Must_pass_one_of_these_Cho]),
                       _aNx_,
                       _aNw_)}
            var value$1=if_nothing_chosen[1];
            return value$1},
         _aNr_=
          function(name,t,init)
           {return caml_call3
                    (map2$2,
                     init,
                     t,
                     function(init,value)
                      {return caml_call3
                               (_xD_,
                                value,
                                init,
                                function(init,value){return [0,[0,name,value],init]})})};
        return caml_call2
                (map$41,
                 caml_call3(fold$3,ts$0,caml_call1(return$3,0),_aNr_),
                 _aNq_)}
      var name=match[2];
      return failwiths(0,_asj_,cst_Command_Spec_choose_one_ca,name,_asc_)}
    function and_arg_names(t)
     {return caml_call2
              (map$41,t,function(value){return [0,value,arg_names(t)]})}
    function and_arg_name(t)
     {var names=arg_names(t);
      if(names && ! names[2])
       {var name=names[1];
        return caml_call2(map$41,t,function(value){return [0,value,name]})}
      var _aNp_=[0,caml_call2(sexp_of_t$17,sexp_of_t$43,names),0];
      return caml_call1
              (_od_,
               [1,
                [0,
                 caml_call1
                  (Sexplib0_Sexp_conv[7],cst_and_arg_name_expects_exact),
                 _aNp_]])}
    function shape$0(subcommand_to_shape,t)
     {var _aNj_=_xw_[17];
      function _aNk_(_aNo_)
       {return caml_call2(_aNj_,_aNo_,subcommand_to_shape)}
      var _aNl_=caml_call2(_Ly_,t[3],_aNk_);
      function _aNm_(readme){return caml_call1(readme,0)}
      var _aNn_=caml_call2(_xW_,t[2],_aNm_);
      return [0,t[1],_aNn_,_aNl_]}
    var abs_path$0=_ao6_[2];
    function shape$1(t)
     {var _aNe_=t[5],_aNf_=t[4],_aNg_=t[3];
      function _aNh_(readme){return caml_call1(readme,0)}
      var _aNi_=caml_call2(_xW_,t[2],_aNh_);
      return [0,t[1],_aNi_,_aNg_,_aNf_,_aNe_]}
    function get_summary$0(t)
     {var kind=t[5];
      for(;;)
       switch(kind[0])
        {case 0:var b=kind[1];return b[1];
         case 1:var g=kind[1];return g[1];
         case 2:var e=kind[1];return e[1];
         default:
          var
           l=kind[1],
           _aNd_=caml_obj_tag(l),
           kind$0=
            250 === _aNd_
             ?l[1]
             :246 === _aNd_?caml_call1(CamlinternalLazy[2],l):l,
           kind=kind$0;
          continue}}
    function sexpable_of_proxy_kind(kind)
     {switch(kind[0])
       {case 0:var base=kind[1];return [0,base];
        case 1:
         var
          group=kind[1],
          _aM$_=
           function(param)
            {var proxy=param[2],str=param[1];
             return [0,str,sexpable_of_proxy_kind(proxy[5])]},
          _aNa_=function(_aNc_){return caml_call2(_p9_,_aNc_,_aM$_)},
          _aNb_=caml_call2(_Ly_,group[3],_aNa_);
         return [1,[0,group[1],group[2],_aNb_]];
        case 2:var exec=kind[1];return [2,exec];
        default:
         var thunk=kind[1];
         return [3,caml_call2(_Ly_,thunk,sexpable_of_proxy_kind)]}}
    function sexpable_shape(param)
     {switch(param[0])
       {case 0:var base=param[1];return [0,shape(base)];
        case 1:var group=param[1];return [1,shape$0(sexpable_shape,group)];
        case 2:var exec=param[1];return [2,shape$1(exec)];
        case 3:var proxy=param[1];return sexpable_of_proxy_kind(proxy[5]);
        default:
         var thunk=param[1];return [3,caml_call2(_Ly_,thunk,sexpable_shape)]}}
    function extend_exn(mem,add,map,key_type,key,data)
     {if(caml_call2(mem,map,key))
       caml_call4(_Pe_,_ask_,caml_call1(_ao6_[1][1],key_type),key,0);
      return caml_call3(add,map,key,data)}
    function extend_alist_exn(alist,key_type,key,data)
     {function _aM__(alist,key,data)
       {return caml_call4(_xw_[12],alist,equal$18,key,data)}
      return extend_exn
              (function(alist,key)
                {return caml_call3(_xw_[15],alist,equal$18,key)},
               _aM__,
               alist,
               key_type,
               key,
               data)}
    function add$16
     (base,name,aliases,aliases_excluded_from_help,text,text_summary)
     {var flags$0=base[3],_aM6_=-481604174;
      function _aM7_(_aM9_){return 0}
      var
       _aM8_=caml_call2(_fw_,_asl_,text_summary),
       data=
        [0,
         name,
         aliases,
         aliases_excluded_from_help,
         [0,
          function(env){caml_call1(_GE_,caml_call1(text,env));return exit(0)}],
         _aM8_,
         at_most_once$1,
         _aM7_,
         _aM6_],
       flags=extend_exn(mem$3,set$2,flags$0,1,name,data);
      return [0,base[1],base[2],flags,base[4],base[5]]}
    function basic(summary,readme,param,main)
     {var
       flags=param[3],
       usage=param[2],
       f=param[1],
       flags$0=caml_call1(flags,0),
       usage$0=caml_call1(usage,0);
      function anons(param)
       {function _aM5_(k,param)
         {var thunk=caml_call1(k,main);
          return function(param){return caml_call1(thunk,0)}}
        return symbol_map$1(caml_call1(f,0),_aM5_)}
      var
       flags$1=create$35(flags$0),
       base=[0,summary,readme,flags$1,anons,usage$0],
       base$0=
        add$16
         (base,
          cst_help$7,
          _asn_,
          _asm_,
          function(env)
           {var
             _aM3_=caml_call2(find_exn$9,env,help_key),
             _aM4_=caml_obj_tag(_aM3_);
            return 250 === _aM4_
                    ?_aM3_[1]
                    :246 === _aM4_?caml_call1(CamlinternalLazy[2],_aM3_):_aM3_},
          cst_this_help_text);
      return [0,base$0]}
    var subs_key=key_create(cst_subcommands$9);
    function lazy_group(summary,readme,preserve_subcommand_order,body,alist)
     {var
       subcommands=
        caml_call2
         (_Ly_,
          alist,
          function(alist)
           {var
             alist$0=
              caml_call2
               (_p9_,
                alist,
                function(param)
                 {var t=param[2],name=param[1];
                  return [0,normalize$2(0,name),t]}),
             match=caml_call1(Map$1[6],alist$0);
            if(17724 <= match[1])
             {var map=match[2];
              return preserve_subcommand_order
                      ?alist$0
                      :caml_call2(to_alist$1,0,map)}
            var name=match[2];
            return caml_call3(_Pe_,_aso_,name,0)});
      return [1,[0,summary,readme,subcommands,body]]}
    function group$153(summary,readme,preserve_subcommand_order,body,alist)
     {return lazy_group
              (summary,
               readme,
               preserve_subcommand_order,
               body,
               caml_call1(_LH_,alist))}
    function exec(summary,readme,opt,path_to_exe,param)
     {if(opt)var sth=opt[1],child_subcommand=sth;else var child_subcommand=0;
      var
       _aM2_=
        -310138871 <= path_to_exe[1]
         ?Stdlib_sys[1]
         :caml_check_bound(caml_sys_argv(0),0)[1],
       working_dir=caml_call1(dirname,_aM2_);
      if(491227799 <= path_to_exe[1])
       var
        p=path_to_exe[2],
        p$0=is_absolute(p)?p:caml_call1(_Gb_,cst_Path_passed_to_Absolute_mu),
        path_to_exe$0=p$0;
      else
       var
        p$1=path_to_exe[2],
        p$2=
         caml_call1(_aiA_,p$1)
          ?p$1
          :caml_call1(_Gb_,cst_Path_passed_to_Relative_to),
        path_to_exe$0=p$2;
      return [2,[0,summary,readme,working_dir,path_to_exe$0,child_subcommand]]}
    function of_lazy(thunk){return [4,thunk]}
    function kind_of_sexpable
     (sexpable,working_dir,path_to_exe,child_subcommand,path_to_subcommand)
     {switch(sexpable[0])
       {case 0:var b=sexpable[1];return [0,b];
        case 1:
         var
          g=sexpable[1],
          _aMY_=
           function(param)
            {var
              sexpable=param[2],
              str=param[1],
              path_to_subcommand$0=
               caml_call2(_Of_,path_to_subcommand,[0,str,0]),
              proxy=
               proxy_of_sexpable
                (sexpable,
                 working_dir,
                 path_to_exe,
                 child_subcommand,
                 path_to_subcommand$0);
             return [0,str,proxy]},
          _aMZ_=function(_aM1_){return caml_call2(_p9_,_aM1_,_aMY_)},
          _aM0_=caml_call2(_Ly_,g[3],_aMZ_);
         return [1,[0,g[1],g[2],_aM0_]];
        case 2:var e=sexpable[1];return [2,e];
        default:
         var l=sexpable[1];
         return [3,
                 caml_call2
                  (_Ly_,
                   l,
                   function(sexpable)
                    {return kind_of_sexpable
                             (sexpable,
                              working_dir,
                              path_to_exe,
                              child_subcommand,
                              path_to_subcommand)})]}}
    function proxy_of_sexpable
     (sexpable,working_dir,path_to_exe,child_subcommand,path_to_subcommand)
     {var
       kind=
        kind_of_sexpable
         (sexpable,
          working_dir,
          path_to_exe,
          child_subcommand,
          path_to_subcommand);
      return [0,
              working_dir,
              path_to_exe,
              path_to_subcommand,
              child_subcommand,
              kind]}
    function sanitize_version(version)
     {function _aMW_(_aMX_){return caml_call2(_CI_,_aMX_,10)}
      return caml_call2
              (_pW_,
               caml_call2(_qc_,caml_call2(_CI_,version,32),_aMW_),
               compare$37)}
    function print_version(version)
     {return caml_call2(_o9_,sanitize_version(version),_GE_)}
    function print_build_info(build_info)
     {return caml_call1(_GE_,force(build_info))}
    function add$17(version,build_info,unversioned)
     {switch(unversioned[0])
       {case 0:
         var
          base=unversioned[1],
          base$0=
           add$16
            (base,
             cst_version$4,
             0,
             _asq_,
             function(param)
              {return caml_call2(_Cd_,_asp_,sanitize_version(version))},
             cst_the_version_of_this_build),
          base$1=
           add$16
            (base$0,
             cst_build_info$2,
             0,
             _asr_,
             function(param){return force(build_info)},
             cst_info_about_this_build);
         return [0,base$1];
        case 1:
         var
          group=unversioned[1],
          _aMQ_=
           function(subcommands)
            {function _aMR_(version_flag,build_info_flag)
              {if(build_info_flag)
                print_build_info(build_info);
               else
                if(version_flag)
                 print_version(version);
                else
                 {print_build_info(build_info);print_version(version)}
               return exit(0)}
             var
              _aMS_=
               caml_call2
                (flag(0,0,cst_build_info$1),
                 no_arg,
                 cst_print_build_info_for_this_);
             return extend_alist_exn
                     (subcommands,
                      0,
                      cst_version$5,
                      basic
                       (cst_print_version_information,
                        0,
                        symbol$217
                         (symbol$217
                           (empty$12,
                            caml_call2
                             (flag(0,0,cst_version$3),
                              no_arg,
                              cst_print_the_version_of_this_)),
                          _aMS_),
                        _aMR_))},
          subcommands=caml_call2(_Ly_,group[3],_aMQ_);
         return [1,[0,group[1],group[2],subcommands,group[4]]];
        case 2:var exec=unversioned[1];return [2,exec];
        case 3:var proxy=unversioned[1];return [3,proxy];
        default:
         var thunk=unversioned[1];
         return [4,
                 [246,
                  function(_aMT_)
                   {var
                     _aMU_=caml_obj_tag(thunk),
                     _aMV_=
                      250 === _aMU_
                       ?thunk[1]
                       :246 === _aMU_?caml_call1(CamlinternalLazy[2],thunk):thunk;
                    return add$17(version,build_info,_aMV_)}]]}}
    function summary$5(param)
     {var param$0=param;
      for(;;)
       switch(param$0[0])
        {case 0:var x=param$0[1];return x[1];
         case 1:var x$0=param$0[1];return x$0[1];
         case 2:var x$1=param$0[1];return x$1[1];
         case 3:var x$2=param$0[1];return get_summary$0(x$2);
         default:
          var
           thunk=param$0[1],
           _aMP_=caml_obj_tag(thunk),
           param$1=
            250 === _aMP_
             ?thunk[1]
             :246 === _aMP_?caml_call1(CamlinternalLazy[2],thunk):thunk,
           param$0=param$1;
          continue}}
    var path$0=caml_call2(map$41,path,parts_exe_basename);
    function get_flag_names(param)
     {var param$0=param;
      for(;;)
       switch(param$0[0])
        {case 0:var base=param$0[1];return caml_call1(Map$1[64],base[3]);
         case 4:
          var
           thunk=param$0[1],
           _aMO_=caml_obj_tag(thunk),
           param$1=
            250 === _aMO_
             ?thunk[1]
             :246 === _aMO_?caml_call1(CamlinternalLazy[2],thunk):thunk,
           param$0=param$1;
          continue;
         default:throw [0,Assert_failure,_ass_]}}
    function help_recursive(cmd,with_flags,expand_dots,t,s)
     {function help_recursive_rec(cmd,t,s)
       {var t$0=t;
        for(;;)
         {var
           cmd$0=expand_dots?cmd:cst$236,
           new_s=caml_call2(_Gp_,s,caml_call2(_Gp_,cmd$0,cst$235));
          switch(t$0[0])
           {case 0:
             var
              base=t$0[1],
              _aMH_=summary$5([0,base]),
              base_help=[0,caml_call2(_Gp_,s,cmd),_aMH_];
             if(with_flags)
              {var
                _aMI_=
                 function(param)
                  {var h=param[2],flag=param[1];
                   return [0,caml_call2(_Gp_,new_s,flag),h]};
               if(opt)
                var sth=opt[1],display_help_flags=sth;
               else
                var display_help_flags=1;
               var
                flags=caml_call1(Map$1[65],base[3]),
                flags$0=
                 display_help_flags
                  ?flags
                  :caml_call2
                    (_pO_,
                     flags,
                     function(f){return caml_call2(symbol$14,f[1],cst_help$4)});
               return [0,
                       base_help,
                       caml_call2
                        (_p9_,
                         caml_call2
                          (_pW_,caml_call2(_qc_,flags$0,help),subcommand_cmp_fst),
                         _aMI_)]}
             return [0,base_help,0];
            case 1:
             var
              match=t$0[1],
              subcommands=match[3],
              summary=match[1],
              _aMJ_=
               function(param)
                {var t=param[2],cmd=param[1];
                 return help_recursive_rec(cmd,t,new_s)},
              _aMK_=caml_obj_tag(subcommands),
              _aML_=
               250 === _aMK_
                ?subcommands[1]
                :246 === _aMK_
                  ?caml_call1(CamlinternalLazy[2],subcommands)
                  :subcommands,
              _aMM_=
               caml_call2
                (_qc_,caml_call2(_pW_,_aML_,subcommand_cmp_fst),_aMJ_);
             return [0,[0,caml_call2(_Gp_,s,cmd),summary],_aMM_];
            case 4:
             var
              thunk=t$0[1],
              _aMN_=caml_obj_tag(thunk),
              t$1=
               250 === _aMN_
                ?thunk[1]
                :246 === _aMN_?caml_call1(CamlinternalLazy[2],thunk):thunk,
              t$0=t$1;
             continue;
            default:return 0}}}
      return help_recursive_rec(cmd,t,s)}
    var
     map$42=[0,-198771759,map$41],
     include$146=caml_call1(Base_Applicative[5],[0,const$0,apply$2,map$42]),
     return$4=include$146[1],
     map$43=include$146[2],
     both$0=include$146[3],
     symbol$222=include$146[4],
     symbol$223=include$146[5],
     symbol$224=include$146[6],
     symbol_map$3=include$146[7],
     apply$3=include$146[8],
     map2$3=include$146[9],
     map3$2=include$146[10],
     all$7=include$146[11],
     all_unit$1=include$146[12],
     Applicative_infix$1=include$146[13],
     string$4=include$143[1],
     int$5=include$143[2],
     char$6=include$143[3],
     float$4=include$143[4],
     bool$5=include$143[5],
     date$1=include$143[6],
     percent$1=include$143[7],
     host_and_port$1=include$143[8],
     sexp$1=include$143[9],
     sexp_conv$1=include$143[10];
    function basic$0(summary,readme,param)
     {var
       params=
        caml_call2
         (map$43,param,function(run,param,_aMG_){return caml_call1(run,0)}),
       t=params[1],
       _aMC_=t[3],
       _aMD_=t[2],
       spec=
        [0,
         function(param)
          {function _aME_(run,main)
            {return caml_call2(run,function(_aMF_){return _aMF_},main)}
           return symbol_map$1(caml_call1(t[1],0),_aME_)},
         _aMD_,
         _aMC_],
       readme$0=
        caml_call2
         (_xW_,
          readme,
          function(f,param){return caml_call2(_CP_,0,caml_call1(f,0))});
      return basic(summary,readme$0,spec,0)}
    var word_wrap$0=_ao6_[5];
    function to_string_for_choose_one(param)
     {return caml_call1(to_string$33,create_exn$0(param))}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$451);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Command$0);
    var
     _asK_=
      [0,create$34,map$38,of_map,of_alist_exn$6,comma_separated,include$143],
     Core_kernel_Command=
      [0,
       Auto_complete,
       _asK_,
       [0,
        required$0,
        optional$0,
        optional_with_default,
        listed,
        one_or_more,
        no_arg,
        no_arg_register,
        no_arg_some,
        no_arg_abort,
        escape,
        map_flag],
       [0,
        symbol$215,
        sequence$0,
        non_empty_sequence_as_pair,
        non_empty_sequence_as_list,
        maybe,
        maybe_with_default,
        t2,
        t3,
        t4,
        map_anons],
       [0,
        return$4,
        map$43,
        both$0,
        symbol$222,
        symbol$223,
        symbol$224,
        symbol_map$3,
        apply$3,
        map2$3,
        map3$2,
        all$7,
        all_unit$1,
        Applicative_infix$1,
        help$0,
        path$0,
        args,
        flag,
        flag_optional_with_default_doc,
        anon,
        If_nothing_chosen,
        choose_one,
        and_arg_names,
        and_arg_name,
        [0,create$34,map$38,of_map,of_alist_exn$6,comma_separated,include$143],
        string$4,
        int$5,
        char$6,
        float$4,
        bool$5,
        date$1,
        percent$1,
        host_and_port$1,
        sexp$1,
        sexp_conv$1,
        required$0,
        optional$0,
        optional_with_default,
        listed,
        one_or_more,
        no_arg,
        no_arg_register,
        no_arg_some,
        no_arg_abort,
        escape,
        map_flag,
        symbol$215,
        sequence$0,
        non_empty_sequence_as_pair,
        non_empty_sequence_as_list,
        maybe,
        maybe_with_default,
        t2,
        t3,
        t4,
        map_anons],
       [0,
        return$4,
        symbol$222,
        symbol$223,
        symbol$224,
        symbol_map$3,
        [0,return$4,map$43,both$0]],
       [0,
        return$3,
        map$41,
        pair,
        symbol$219,
        symbol$220,
        symbol$221,
        symbol_map$2,
        apply$2,
        map2$2,
        map3$1,
        all$6,
        all_unit$0,
        Applicative_infix$0,
        help$0,
        path$0,
        args,
        flag,
        flag_optional_with_default_doc,
        anon,
        If_nothing_chosen,
        choose_one,
        and_arg_names,
        and_arg_name,
        const$0,
        pair,
        empty$12,
        symbol$216,
        symbol$217,
        symbol$218,
        step,
        wrap,
        [0,create$34,map$38,of_map,of_alist_exn$6,comma_separated,include$143],
        string$3,
        int$4,
        char$5,
        float$3,
        bool$4,
        date$0,
        percent$0,
        host_and_port$0,
        sexp$0,
        sexp_conv$0,
        required$0,
        optional$0,
        optional_with_default,
        listed,
        one_or_more,
        no_arg,
        no_arg_register,
        no_arg_some,
        no_arg_abort,
        escape,
        map_flag,
        flags_of_args_exn,
        symbol$215,
        sequence$0,
        non_empty_sequence_as_pair,
        non_empty_sequence_as_list,
        maybe,
        maybe_with_default,
        t2,
        t3,
        t4,
        map_anons,
        to_param,
        of_param],
       basic,
       basic$0,
       group$153,
       lazy_group,
       exec,
       of_lazy,
       summary$5,
       [0,fully_forced,get_summary],
       exit,
       [0,Deprecated,summary$5,help_recursive,get_flag_names],
       [0,
        abs_path$0,
        word_wrap$0,
        [0,normalize$1],
        [0,
         empty$11,
         create$36,
         append$4,
         parts,
         replace_first,
         to_string$32,
         to_string_dots],
        [0,compare$101,of_list$12,extend],
        [0,flags_of_args_exn,to_string_for_choose_one],
        function(M)
         {function getenv_and_clear(var$0)
           {var value=caml_call1(M[5][11],var$0);
            if(caml_call1(_x2_,value))caml_call1(M[5][10],var$0);
            return value}
          function exec_with_args(t,args,maybe_new_comp_cword)
           {var
             prog=caml_call2(abs_path$0,t[3],t[4]),
             args$0=caml_call2(_Of_,t[5],args);
            caml_call2
             (_xC_,
              maybe_new_comp_cword,
              function(n)
               {var
                 new_value$0=n + caml_call1(length$1,t[5]) | 0,
                 new_value=caml_call1(to_string$4,new_value$0);
                return caml_call2(M[5][9],comp_cword,new_value)});
            return caml_call1
                    (_L8_,caml_call5(M[5][12],prog,[0,prog,args$0],0,0,0))}
          var
           extraction_var=include$129[2],
           supported_versions=include$129[3],
           Versioned=include$129[4],
           of_versioned=include$129[5],
           to_versioned=include$129[6];
          function read_stdout_and_stderr(process_info)
           {function start_reading(descr,info)
             {var output=create$33(0),_aMx_=0;
              function _aMy_(param)
               {return set_exn
                        (output,
                         _ast_,
                         caml_call1
                          (_h6_,
                           function(param)
                            {var _aMB_=caml_call1(M[5][8],descr);
                             return caml_call1(Stdio_In_channel[14],_aMB_)}))}
              var thread=caml_call3(M[3][1],890699316,_aMy_,_aMx_);
              return caml_call1
                      (_Pm_,
                       function(param)
                        {caml_call1(M[3][2],thread);
                         caml_call2(M[5][5],0,descr);
                         var match=output[1];
                         if(match)
                          {var _aMz_=match[1];
                           if(0 === _aMz_[0]){var output$0=_aMz_[1];return output$0}
                           var exn=_aMz_[1];
                           throw exn}
                         var _aMA_=[0,[1,[0,_asu_,[0,caml_call1(_nk_,info),0]]],0];
                         return caml_call1
                                 (_od_,
                                  [1,
                                   [0,
                                    caml_call1(Sexplib0_Sexp_conv[7],cst_BUG_failed_to_read),
                                    _aMA_]])})}
            var
             _aMu_=caml_call1(_np_,cst_stdout),
             finish_stdout=start_reading(process_info[3],_aMu_),
             _aMv_=caml_call1(_np_,cst_stderr),
             finish_stderr=start_reading(process_info[4],_aMv_),
             _aMw_=caml_call2(_Pn_,finish_stderr,0);
            return [0,caml_call2(_Pn_,finish_stdout,0),_aMw_]}
          function of_external(working_dir,path_to_exe,child_subcommand)
           {var
             _aMo_=
              [0,
               -72399366,
               [0,
                [0,
                 extraction_var,
                 caml_call1
                  (to_string$0,caml_call1(Set$5[75],supported_versions))],
                0]],
             _aMp_=caml_call2(abs_path$0,working_dir,path_to_exe),
             process_info=
              caml_call7(M[5][14],0,0,0,_aMp_,child_subcommand,_aMo_,0);
            caml_call2(M[5][5],0,process_info[2]);
            var
             match=read_stdout_and_stderr(process_info),
             stderr=match[2],
             stdout=match[1];
            caml_call2(M[5][15],0,[0,4001835,process_info[1]]);
            try
             {var
               _aMt_=caml_call1(of_string,stdout),
               t=caml_call1(of_versioned,caml_call1(Versioned[1],_aMt_));
              return t}
            catch(exn)
             {exn = caml_wrap_exception(exn);
              var
               _aMq_=[0,[1,[0,_asv_,[0,caml_call1(sexp_of_t$43,stderr),0]]],0],
               _aMr_=
                [0,[1,[0,_asw_,[0,caml_call1(sexp_of_t$43,stdout),0]]],_aMq_],
               _aMs_=[0,caml_call1(_QG_,exn),_aMr_];
              return caml_call1
                      (_od_,
                       [1,
                        [0,
                         caml_call1
                          (Sexplib0_Sexp_conv[7],cst_cannot_parse_command_shape),
                         _aMs_]])}}
          function shape_of_exe
           (param,child_subcommand,path_to_exe,working_dir)
           {return shape_of_proxy
                    (proxy_of_sexpable
                      (of_external(working_dir,path_to_exe,child_subcommand),
                       working_dir,
                       path_to_exe,
                       child_subcommand,
                       0))}
          function shape_of_proxy(proxy){return shape_of_proxy_kind(proxy[5])}
          function shape_of_proxy_kind(kind)
           {switch(kind[0])
             {case 0:var b=kind[1];return [0,b];
              case 1:
               var
                g=kind[1],
                _aMj_=_xw_[17],
                _aMk_=
                 function(_aMn_)
                  {return caml_call2(_aMj_,_aMn_,shape_of_proxy)},
                _aMl_=caml_call2(_Ly_,g[3],_aMk_);
               return [1,[0,g[1],g[2],_aMl_]];
              case 2:
               var
                e=kind[1],
                child_subcommand=e[5],
                path_to_exe=e[4],
                working_dir=e[3];
               return [2,
                       e,
                       function(_aMm_)
                        {return shape_of_exe
                                 (_aMm_,child_subcommand,path_to_exe,working_dir)}];
              default:
               var l=kind[1];return [3,caml_call2(_Ly_,l,shape_of_proxy_kind)]}}
          function shape$2(t)
           {var t$0=t;
            for(;;)
             switch(t$0[0])
              {case 0:var b=t$0[1];return [0,shape(b)];
               case 1:var g=t$0[1];return [1,shape$0(shape$2,g)];
               case 2:
                var
                 e=t$0[1],
                 child_subcommand=e[5],
                 path_to_exe=e[4],
                 working_dir=e[3],
                 _aMg_=
                  function(_aMi_)
                   {return shape_of_exe
                            (_aMi_,child_subcommand,path_to_exe,working_dir)};
                return [2,shape$1(e),_aMg_];
               case 3:var p=t$0[1];return shape_of_proxy(p);
               default:
                var
                 thunk=t$0[1],
                 _aMh_=caml_obj_tag(thunk),
                 t$1=
                  250 === _aMh_
                   ?thunk[1]
                   :246 === _aMh_?caml_call1(CamlinternalLazy[2],thunk):thunk,
                 t$0=t$1;
                continue}}
          function group_or_exec_help_text
           (flags,path,summary,readme,format_list)
           {var
             _aMe_=[0,[0,caml_call1(_ao8_[20],format_list)],0],
             _aMf_=flags?cst_subcommands_and_flags:cst_subcommands$10;
            return unparagraphs
                    (caml_call1
                      (_qV_,
                       [0,
                        [0,summary],
                        [0,
                         [0,
                          caml_call2(_Cd_,0,[0,cst$237,[0,to_string$32(path),_asz_]])],
                         [0,readme,[0,[0,_aMf_],_aMe_]]]]))}
          function help_for_shape(shape,path,expand_dots,flags,recursive)
           {var shape$0=shape;
            for(;;)
             {var
               loop=
                function(path,acc,shape)
                 {var shape$0=shape;
                  for(;;)
                   {var
                     string_of_path=expand_dots?to_string$32:to_string_dots,
                     gather_group$0=
                      function(string_of_path)
                       {function gather_group(path,acc,subcommands)
                         {var
                           filtered_subcommands=
                            caml_call1(is_empty$0,path)
                             ?subcommands
                             :caml_call3(_xw_[16],subcommands,symbol$11,cst_help$8);
                          function _aMd_(acc,param)
                           {var
                             shape=param[2],
                             subcommand=param[1],
                             path$0=[0,subcommand,path],
                             name=string_of_path(path$0),
                             doc=get_summary(shape),
                             acc$0=enqueue(acc,[0,name,doc,0]);
                            return recursive?loop(path$0,acc$0,shape):acc$0}
                          return caml_call3
                                  (_o__,
                                   caml_call2
                                    (_pX_,
                                     filtered_subcommands,
                                     function(a,b)
                                      {return caml_call2(help_screen_compare$0,a[1],b[1])}),
                                   acc,
                                   _aMd_)}
                        return gather_group},
                     gather_group=gather_group$0(string_of_path);
                    switch(shape$0[0])
                     {case 0:
                       var b=shape$0[1];
                       if(flags)
                        {var
                          _aL5_=
                           function(acc,fmt)
                            {var
                              path$0=[0,fmt[1],path],
                              _aMb_=fmt[3],
                              _aMc_=fmt[2],
                              fmt$0=[0,string_of_path(path$0),_aMc_,_aMb_];
                             return enqueue(acc,fmt$0)},
                          _aL6_=
                           function(fmt)
                            {return caml_call2(symbol$14,fmt[1],cst_help$9)};
                         return caml_call3
                                 (_o__,caml_call2(_pO_,b[4],_aL6_),acc,_aL5_)}
                       return acc;
                      case 1:
                       var
                        g=shape$0[1],
                        _aL7_=g[3],
                        _aL8_=caml_obj_tag(_aL7_),
                        _aL9_=
                         250 === _aL8_
                          ?_aL7_[1]
                          :246 === _aL8_?caml_call1(CamlinternalLazy[2],_aL7_):_aL7_;
                       return gather_group(path,acc,_aL9_);
                      case 2:
                       var shape$1=shape$0[2];
                       try
                        {var _aL__=loop(path,acc,caml_call1(shape$1,0));
                         return _aL__}
                       catch(_aMa_){return acc}
                      default:
                       var
                        thunk=shape$0[1],
                        _aL$_=caml_obj_tag(thunk),
                        shape$2=
                         250 === _aL$_
                          ?thunk[1]
                          :246 === _aL$_?caml_call1(CamlinternalLazy[2],thunk):thunk,
                        shape$0=shape$2;
                       continue}}},
               format_list=caml_call1(to_list$21,loop(empty$11,acc,shape$0));
              switch(shape$0[0])
               {case 0:
                 var
                  b=shape$0[1],
                  usage=caml_call1(_ao7_[9],b),
                  _aL0_=[0,_asA_,[0,[0,caml_call1(_ao8_[20],b[4])],0]],
                  _aL1_=[0,b[2],_aL0_],
                  _aL2_=caml_call2(_Gp_,cst$238,usage),
                  _aL3_=
                   [0,
                    [0,
                     caml_call2
                      (_Gp_,cst$239,caml_call2(_Gp_,to_string$32(path),_aL2_))],
                    _aL1_];
                 return unparagraphs(caml_call1(_qV_,[0,[0,b[1]],_aL3_]));
                case 1:
                 var g=shape$0[1];
                 return group_or_exec_help_text
                         (flags,path,g[1],g[2],format_list);
                case 2:
                 var e=shape$0[1];
                 return group_or_exec_help_text
                         (flags,path,e[1],e[2],format_list);
                default:
                 var
                  thunk=shape$0[1],
                  _aL4_=caml_obj_tag(thunk),
                  shape$1=
                   250 === _aL4_
                    ?thunk[1]
                    :246 === _aL4_?caml_call1(CamlinternalLazy[2],thunk):thunk,
                  shape$0=shape$1;
                 continue}}}
          function handle_environment(t,argv)
           {if(argv)
             {var
               args=argv[2],
               cmd=argv[1],
               _aLQ_=
                function(version)
                 {var
                   _aLZ_=caml_call1(of_string,version),
                   supported_versions$0=caml_call1(Set$5[74],_aLZ_),
                   _aLW_=
                    caml_call2
                     (Set$5[22],supported_versions,supported_versions$0),
                   param=caml_call1(Set$5[38],_aLW_);
                  if(param)
                   {var
                     version_to_use=param[1],
                     t$4=sexpable_shape(t),
                     t$0=t$4,
                     path_to_subcommand=args;
                    for(;;)
                     {if(path_to_subcommand)
                       {var subs=path_to_subcommand[2],sub=path_to_subcommand[1];
                        switch(t$0[0])
                         {case 0:var _aLX_=caml_call3(_Pe_,_asx_,sub,0);break;
                          case 1:
                           var
                            g=t$0[1],
                            _aLS_=g[3],
                            _aLT_=caml_obj_tag(_aLS_),
                            _aLU_=
                             250 === _aLT_
                              ?_aLS_[1]
                              :246 === _aLT_?caml_call1(CamlinternalLazy[2],_aLS_):_aLS_,
                            match=caml_call3(_xw_[13],_aLU_,equal$18,sub);
                           if(match)
                            {var t$1=match[1],t$0=t$1,path_to_subcommand=subs;continue}
                           var _aLX_=caml_call3(_Pe_,_asy_,sub,0);
                           break;
                          case 2:
                           var
                            match$0=t$0[1],
                            child_subcommand=match$0[5],
                            path_to_exe=match$0[4],
                            working_dir=match$0[3],
                            path_to_subcommand$0=
                             [0,sub,caml_call2(_Of_,subs,child_subcommand)],
                            t$2=of_external(working_dir,path_to_exe,child_subcommand),
                            t$0=t$2,
                            path_to_subcommand=path_to_subcommand$0;
                           continue;
                          default:
                           var
                            thunk=t$0[1],
                            _aLV_=caml_obj_tag(thunk),
                            t$3=
                             250 === _aLV_
                              ?thunk[1]
                              :246 === _aLV_?caml_call1(CamlinternalLazy[2],thunk):thunk,
                            t$0=t$3;
                           continue}}
                      else
                       var _aLX_=t$0;
                      var _aLY_=caml_call2(to_versioned,_aLX_,version_to_use);
                      caml_call1
                       (_GA_,
                        caml_call1(to_string$0,caml_call1(Versioned[2],_aLY_)));
                      break}}
                  else
                   failwiths
                    (0,
                     _asF_,
                     cst_Couldn_t_choose_a_supporte,
                     supported_versions,
                     Set$5[75]);
                  return exit(0)};
              caml_call2(_xC_,getenv_and_clear(extraction_var),_aLQ_);
              var
               _aLR_=
                function(param)
                 {var
                   fname=
                    caml_call2
                     (_fw_,_asD_,caml_call1(_aqd_,caml_call1(M[5][4],0))),
                   argv_0=caml_check_bound(caml_sys_argv(0),0)[1];
                  caml_call5(_fE_,_asE_,fname,argv_0,fname,argv_0);
                  return exit(0)};
              caml_call2
               (_xC_,getenv_and_clear(cst_COMMAND_OUTPUT_INSTALLATIO),_aLR_);
              return [0,cmd,args]}
            return caml_call1(_Gb_,cst_missing_executable_name)}
          function process_args(cmd,args)
           {var
             maybe_comp_cword=
              caml_call2(_xW_,getenv_and_clear(comp_cword),of_string$3);
            if(maybe_comp_cword)
             var
              comp_cword$0=maybe_comp_cword[1],
              args$0=caml_call2(_qY_,caml_call2(_Of_,args,_asG_),comp_cword$0),
              _aLP_=0,
              args$1=
               caml_call3
                (_ql_,
                 args$0,
                 function(arg,args)
                  {return typeof args === "number"?[1,arg]:[0,arg,args]},
                 _aLP_);
            else
             var args$1=of_list$12(args);
            return [0,create$36(cmd),args$1,maybe_comp_cword]}
          function add_help_subcommands(t)
           {switch(t[0])
             {case 0:return t;
              case 1:
               var
                match=t[1],
                body=match[4],
                subcommands=match[3],
                readme=match[2],
                summary=match[1],
                subcommands$0=
                 caml_call2
                  (_Ly_,
                   subcommands,
                   function(subcommands)
                    {function _aLD_
                      (recursive,flags,expand_dots,path,env,cmd_opt,param)
                      {var match=caml_call2(find$10,env,subs_key);
                       if(match)
                        {var subs=match[1];
                         if(path && ! caml_string_notequal(path[1],cst_help$3))
                          {var
                            t=path[2],
                            path$0=
                             caml_call3
                              (_xD_,
                               cmd_opt,
                               t,
                               function(path,subcommand){return [0,subcommand,path]});
                           if(cmd_opt)
                            {var
                              cmd=cmd_opt[1],
                              _aLI_=0,
                              _aLJ_=function(x){return [0,x,-481604174]},
                              match$0=
                               caml_call3
                                (lookup_expand$0,caml_call2(_xw_[17],subs,_aLJ_),cmd,_aLI_);
                             if(0 === match$0[0])
                              var
                               match$1=match$0[1],
                               t$0=match$1[2],
                               possibly_expanded_name=match$1[1],
                               path$1=replace_first(path$0,cmd,possibly_expanded_name),
                               shape=shape$2(t$0),
                               path$2=path$1;
                             else
                              var
                               e=match$0[1],
                               _aLK_=to_string$32(path$0),
                               _aLL_=caml_call4(die(_asB_),cmd,_aLK_,e,0),
                               shape=_aLL_[2],
                               path$2=_aLL_[1]}
                           else
                            var
                             subcommands=
                              caml_call1(_LH_,caml_call2(_xw_[17],subs,shape$2)),
                             readme$0=
                              caml_call2
                               (_xW_,readme,function(readme){return caml_call1(readme,0)}),
                             shape$0=[1,[0,summary,readme$0,subcommands]],
                             shape=shape$0,
                             path$2=path$0;
                           return caml_call1
                                   (_GE_,
                                    help_for_shape(shape,path$2,expand_dots,flags,recursive))}
                         throw [0,Assert_failure,_arM_]}
                       throw [0,Assert_failure,_asC_]}
                     var
                      _aLE_=anon(maybe(symbol$215(cst_SUBCOMMAND,string$3))),
                      _aLF_=
                       caml_call2
                        (flag(0,0,cst_expand_dots),
                         no_arg,
                         cst_expand_subcommands_in_recu),
                      _aLG_=
                       caml_call2
                        (flag(0,0,cst_flags$9),
                         no_arg,
                         cst_show_flags_as_well_in_recu),
                      _aLH_=
                       basic
                        (cst_explain_a_given_subcommand,
                         0,
                         symbol$217
                          (symbol$217
                            (symbol$217
                              (symbol$217
                                (symbol$217
                                  (symbol$217
                                    (empty$12,
                                     caml_call2
                                      (flag(0,0,cst_recursive),
                                       no_arg,
                                       cst_show_subcommands_of_subcom)),
                                   _aLG_),
                                 _aLF_),
                               path),
                             env),
                           _aLE_),
                         _aLD_);
                     return extend_alist_exn
                             (caml_call2(_xw_[17],subcommands,add_help_subcommands),
                              0,
                              cst_help$10,
                              _aLH_)});
               return [1,[0,summary,readme,subcommands$0,body]];
              case 2:return t;
              case 3:return t;
              default:
               var thunk=t[1];
               return [4,
                       [246,
                        function(_aLM_)
                         {var
                           _aLN_=caml_obj_tag(thunk),
                           _aLO_=
                            250 === _aLN_
                             ?thunk[1]
                             :246 === _aLN_?caml_call1(CamlinternalLazy[2],thunk):thunk;
                          return add_help_subcommands(_aLO_)}]]}}
          function maybe_apply_extend(args,extend$0,path)
           {return caml_call3
                    (_x3_,extend$0,args,function(f){return extend(args,f,path)})}
          function dispatch
           (t,
            env$2,
            extend,
            path,
            args,
            maybe_new_comp_cword,
            version,
            build_info,
            verbose_on_parse_error,
            when_parsing_succeeds)
           {var
             t$0=t,
             env$3=env$2,
             path$0=path,
             args$0=args,
             maybe_new_comp_cword$0=maybe_new_comp_cword;
            for(;;)
             switch(t$0[0])
              {case 0:
                var
                 base=t$0[1],
                 args$1=maybe_apply_extend(args$0,extend,path$0),
                 help_text=
                  [246,
                   function(_aLC_)
                    {return help_for_shape(shape$2(t$0),path$0,0,1,0)}],
                 env=caml_call3(set$8,env$3,path_key,path$0),
                 env$0=caml_call3(set$8,env,args_key,to_list$24(args$1)),
                 env$1=caml_call3(set$8,env$0,help_key,help_text),
                 loop$0=
                  function(counter,env,anons,param)
                   {var env$0=env,param$0=param;
                    for(;;)
                     if(typeof param$0 === "number")
                      {var _aLw_=function(flag){return caml_call1(flag[7],env$0)};
                       caml_call2(_o9_,caml_call1(Map$1[65],base[3]),_aLw_);
                       return final_value(anons,env$0)}
                     else
                      {if(0 === param$0[0])
                        {var _aLx_=param$0[1];
                         if(! caml_string_notequal(_aLx_,cst_anon))
                          {var _aLz_=param$0[2];
                           if(typeof _aLz_ !== "number" && 1 !== _aLz_[0])
                            {var args$0=_aLz_[2],arg$0=_aLz_[1];
                             if(counter < 50)
                              {var counter$0=counter + 1 | 0;
                               return anon(counter$0,env$0,anons,arg$0,args$0)}
                             return caml_trampoline_return
                                     (anon,[0,env$0,anons,arg$0,args$0])}}
                         var args=param$0[2];
                         if
                          (caml_call2(_CD_,_aLx_,cst$231)
                           &&
                           !
                           caml_call2(equal$18,_aLx_,cst$232))
                          {var match=lookup_expand_with_aliases(base[3],_aLx_,1);
                           if(0 === match[0])
                            var x=match[1],x$0=x;
                           else
                            var msg=match[1],x$0=caml_call2(die(_ar6_),msg,0);
                           var match$0=x$0[2],action=match$0[4],flag=x$0[1];
                           switch(action[0])
                            {case 0:
                              var
                               f=action[1],
                               env$1=caml_call1(f,env$0),
                               env$0=env$1,
                               param$0=args;
                              continue;
                             case 1:
                              var comp=action[2],f$0=action[1];
                              if(typeof args === "number")
                               return caml_call2(die(_ar5_),flag,0);
                              else
                               {if(0 === args[0])
                                 {var rest=args[2],arg=args[1];
                                  try
                                   {var _aLy_=caml_call2(f$0,env$0,arg),env$2=_aLy_}
                                  catch(e$0)
                                   {e$0 = caml_wrap_exception(e$0);
                                    if(e$0[1] !== Failed_to_parse_command_line)throw e$0;
                                    if(! ends_in_complete(rest))throw e$0;
                                    var env$2=env$0,e=e$0}
                                  var env$0=env$2,param$0=rest;
                                  continue}
                                var part=args[1];
                                return caml_call1(_L8_,run_and_exit(comp,env$0,part))}
                             default:
                              var f$1=action[1];
                              if(ends_in_complete(args))exit(0);
                              var
                               env$3=caml_call2(f$1,env$0,to_list$24(args)),
                               env$0=env$3,
                               param$0=0;
                              continue}}
                         if(counter < 50)
                          {var counter$1=counter + 1 | 0;
                           return anon(counter$1,env$0,anons,_aLx_,args)}
                         return caml_trampoline_return
                                 (anon,[0,env$0,anons,_aLx_,args])}
                       var part$0=param$0[1];
                       if(caml_call2(_CD_,part$0,cst$233))
                        {var
                          _aLA_=
                           function(name)
                            {var _aLB_=caml_call2(_CD_,name,part$0);
                             return _aLB_?caml_call1(_GE_,name):_aLB_};
                         caml_call2(_o9_,caml_call1(Map$1[64],base[3]),_aLA_);
                         return exit(0)}
                       return caml_call1(_L8_,complete(anons,env$0,part$0))}},
                 anon=
                  function(counter,env,anons,arg,args)
                   {var
                     match=consume(anons,arg,ends_in_complete(args)),
                     anons$0=match[2],
                     env_upd=match[1],
                     env$0=caml_call1(env_upd,env);
                    if(counter < 50)
                     {var counter$0=counter + 1 | 0;
                      return loop$0(counter$0,env$0,anons$0,args)}
                    return caml_trampoline_return(loop$0,[0,env$0,anons$0,args])},
                 loop=
                  function(env,anons,param)
                   {return caml_trampoline(loop$0(0,env,anons,param))},
                 match=
                  caml_call1
                   (_h6_,
                    function(param)
                     {return caml_call1
                              (loop(env$1,caml_call1(base[4],0),args$1),15369289)});
                if(0 === match[0])
                 {var thunk=match[1];
                  caml_call1(when_parsing_succeeds,0);
                  return caml_call1(thunk,-903816947)}
                var exn=match[1];
                if
                 (exn[1]
                  ===
                  Failed_to_parse_command_line
                  &&
                  ends_in_complete(args$1))
                 return exit(0);
                if(exn[1] === Exit_called)
                 {var status=exn[2];return exit(status)}
                if(exn[1] === Failed_to_parse_command_line)
                 var msg=exn[2],exn_str=msg;
                else
                 var exn_str=caml_call2(to_string_hum,0,caml_call1(_QG_,exn));
                var verbose=caml_call2(_x6_,verbose_on_parse_error,1);
                if(verbose)
                 var
                  _aK__=
                   [0,
                    cst_For_usage_information_run,
                    [0,
                     caml_call2
                      (_Gp_,
                       cst$234,
                       caml_call2(_Gp_,to_string$32(path$0),cst_help$6)),
                     0]],
                  _aK9_=function(line){return caml_call2(_Gp_,cst$230,line)},
                  error_msg=
                   caml_call2
                    (_Cd_,
                     _ar7_,
                     [0,
                      cst_Error_parsing_command_line,
                      [0,
                       caml_call2
                        (_Cd_,
                         _ar4_,
                         caml_call2(_p9_,caml_call2(_CI_,exn_str,10),_aK9_)),
                       _aK__]]);
                else
                 var error_msg=exn_str;
                caml_call1(_GL_,error_msg);
                return exit(1);
               case 1:
                var
                 group=t$0[1],
                 body=group[4],
                 subs=group[3],
                 readme=group[2],
                 summary=group[1],
                 _aLb_=caml_obj_tag(subs),
                 _aLc_=
                  250 === _aLb_
                   ?subs[1]
                   :246 === _aLb_?caml_call1(CamlinternalLazy[2],subs):subs,
                 env$4=caml_call3(set$8,env$3,subs_key,_aLc_),
                 die_showing_help$0=
                  function(args,path,body,subs,readme,summary)
                   {function die_showing_help(msg)
                     {var _aLv_=1 - ends_in_complete(args);
                      return _aLv_
                              ?(caml_call2
                                 (_fB_,
                                  _asH_,
                                  help_for_shape
                                   (shape$2([1,[0,summary,readme,subs,body]]),path,0,0,0)),
                                caml_call2(die(_asI_),msg,0))
                              :_aLv_}
                    return die_showing_help},
                 die_showing_help=
                  die_showing_help$0(args$0,path$0,body,subs,readme,summary);
                if(typeof args$0 === "number")
                 {if(body)
                   {var body$0=body[1];
                    return caml_call1(body$0,parts_exe_basename(path$0))}
                  return die_showing_help
                          (caml_call2(_fw_,_asJ_,to_string$32(path$0)))}
                else
                 {if(0 === args$0[0])
                   {var rest=args$0[2],sub=args$0[1],switch$0=0;
                    if(caml_string_notequal(sub,cst_build_info$3))
                     {var switch$1=0;
                      if(caml_string_notequal(sub,cst_help$11))
                       {var switch$2=0;
                        if(caml_string_notequal(sub,cst_version$6))
                         if(caml_string_notequal(sub,cst_build_info$4))
                          if(caml_string_notequal(sub,cst_help$12))
                           {if(caml_string_notequal(sub,cst_version$7))
                             {switch$0 = 1;switch$1 = 1;switch$2 = 1}}
                          else
                           switch$2 = 1;
                         else
                          {switch$0 = 2;switch$1 = 1;switch$2 = 1}
                        if(! switch$2)
                         if(caml_call2(_Nr_,caml_call1(length$1,path$0),1))
                          {print_version(version);
                           var _aLh_=exit(0),rest$0=_aLh_[2],sub$0=_aLh_[1];
                           switch$1 = 1}
                         else
                          {switch$0 = 1;switch$1 = 1}}
                      if(! switch$1)
                       if(typeof rest === "number")
                        {caml_call1
                          (_GE_,
                           help_for_shape
                            (shape$2([1,[0,group[1],group[2],subs,group[4]]]),
                             path$0,
                             0,
                             0,
                             0));
                         var _aLi_=exit(0),rest$0=_aLi_[2],sub$0=_aLi_[1]}
                       else
                        if(0 === rest[0])
                         var
                          rest$1=rest[2],
                          sub$2=rest[1],
                          rest$0=[0,cst_help$13,rest$1],
                          sub$0=sub$2;
                        else
                         switch$0 = 1}
                    else
                     switch$0 = 2;
                    var switch$3=0;
                    switch(switch$0)
                     {case 2:
                       if(caml_call2(_Nr_,caml_call1(length$1,path$0),1))
                        {print_build_info(build_info);
                         var _aLj_=exit(0),rest$0=_aLj_[2],sub$0=_aLj_[1]}
                       else
                        switch$3 = 1;
                       break;
                      case 1:switch$3 = 1;break
                      }
                    if(switch$3)var rest$0=rest,sub$0=sub;
                    var
                     _aLd_=0,
                     _aLe_=function(x){return [0,x,-481604174]},
                     _aLf_=caml_obj_tag(subs),
                     _aLg_=
                      250 === _aLf_
                       ?subs[1]
                       :246 === _aLf_?caml_call1(CamlinternalLazy[2],subs):subs,
                     match$0=
                      caml_call3
                       (lookup_expand$0,
                        caml_call2(_xw_[17],_aLg_,_aLe_),
                        sub$0,
                        _aLd_);
                    if(0 === match$0[0])
                     {var
                       match$1=match$0[1],
                       t$1=match$1[2],
                       sub$1=match$1[1],
                       maybe_new_comp_cword$1=
                        caml_call2(_xW_,maybe_new_comp_cword$0,prev$1),
                       path$1=[0,sub$1,path$0],
                       t$0=t$1,
                       env$3=env$4,
                       path$0=path$1,
                       args$0=rest$0,
                       maybe_new_comp_cword$0=maybe_new_comp_cword$1;
                      continue}
                    var msg$0=match$0[1];
                    return die_showing_help(msg$0)}
                  var
                   part=args$0[1],
                   _aLk_=function(name){return caml_call2(_CD_,name,part)},
                   _aLl_=function(_aLu_){return _aLu_[1]},
                   _aLm_=caml_obj_tag(subs),
                   _aLn_=
                    250 === _aLm_
                     ?subs[1]
                     :246 === _aLm_?caml_call1(CamlinternalLazy[2],subs):subs,
                   subs$0=
                    caml_call2
                     (_pW_,
                      caml_call2(_pO_,caml_call2(_p9_,_aLn_,_aLl_),_aLk_),
                      compare$37);
                  caml_call2(_o9_,subs$0,_GE_);
                  return exit(0)}
               case 2:
                var
                 exec=t$0[1],
                 args$2=to_list$24(maybe_apply_extend(args$0,extend,path$0));
                return exec_with_args(exec,args$2,maybe_new_comp_cword$0);
               case 3:
                var
                 proxy=t$0[1],
                 _aLo_=to_list$24(maybe_apply_extend(args$0,extend,path$0)),
                 args$3=caml_call2(_Of_,proxy[3],_aLo_),
                 kind=proxy[5],
                 _aLp_=proxy[4],
                 _aLq_=proxy[2],
                 _aLr_=proxy[1];
                for(;;)
                 {switch(kind[0])
                   {case 0:var b=kind[1],_aLa_=b[2];break;
                    case 1:var g=kind[1],_aLa_=g[2];break;
                    case 2:var e=kind[1],_aLa_=e[2];break;
                    default:
                     var
                      l=kind[1],
                      _aK$_=caml_obj_tag(l),
                      kind$0=
                       250 === _aK$_
                        ?l[1]
                        :246 === _aK$_?caml_call1(CamlinternalLazy[2],l):l,
                      kind=kind$0;
                     continue}
                  var
                   _aLs_=caml_call2(_xW_,_aLa_,_im_),
                   exec$0=[0,get_summary$0(proxy),_aLs_,_aLr_,_aLq_,_aLp_];
                  return exec_with_args(exec$0,args$3,maybe_new_comp_cword$0)}
               default:
                var
                 thunk$0=t$0[1],
                 _aLt_=caml_obj_tag(thunk$0),
                 t$2=
                  250 === _aLt_
                   ?thunk$0[1]
                   :246 === _aLt_
                     ?caml_call1(CamlinternalLazy[2],thunk$0)
                     :thunk$0,
                 t$0=t$2;
                continue}}
          var
           default_build_info=
            [246,function(_aK8_){return caml_call1(M[1][2],M[4][1])}],
           default_version=M[1][1];
          function run
           (verbose_on_parse_error,opt,build_info,_aK5_,extend,_aK4_,t)
           {if(opt)
             var sth=opt[1],version=sth;
            else
             var version=default_version;
            if(_aK5_)
             var sth$0=_aK5_[1],argv=sth$0;
            else
             var argv=caml_call1(to_list,caml_sys_argv(0));
            if(_aK4_)
             var sth$1=_aK4_[1],when_parsing_succeeds=sth$1;
            else
             var when_parsing_succeeds=function(_aK7_){return _aK7_};
            if(build_info)
             var v=build_info[1],build_info$0=v;
            else
             var build_info$0=default_build_info;
            return handle_uncaught_and_exit
                    (function(param)
                      {var
                        t$0=add$17(version,build_info$0,t),
                        t$1=add_help_subcommands(t$0),
                        match=handle_environment(t$1,argv),
                        args=match[2],
                        cmd=match[1],
                        match$0=process_args(cmd,args),
                        maybe_new_comp_cword=match$0[3],
                        args$0=match$0[2],
                        path=match$0[1];
                       try
                        {var
                          _aK6_=
                           dispatch
                            (t$1,
                             empty$9,
                             extend,
                             path,
                             args$0,
                             maybe_new_comp_cword,
                             version,
                             build_info$0,
                             verbose_on_parse_error,
                             when_parsing_succeeds);
                         return _aK6_}
                       catch(exn)
                        {exn = caml_wrap_exception(exn);
                         if(exn[1] === Failed_to_parse_command_line)
                          {var msg=exn[2];
                           return ends_in_complete(args$0)
                                   ?exit(0)
                                   :(caml_call1(_GL_,msg),exit(1))}
                         throw exn}})}
          function deprecated_run
           (t,cmd,args,is_help,is_help_rec,is_help_rec_flags,is_expand_dots)
           {var
             parts$0=caml_call2(_CI_,cmd,32),
             path=caml_call1(parts,parts$0),
             args$0=is_expand_dots?[0,cst_expand_dots$0,args]:args,
             args$1=is_help_rec_flags?[0,cst_flags$10,args$0]:args$0,
             args$2=is_help_rec?[0,cst_r,args$1]:args$1,
             args$3=is_help?[0,cst_help$14,args$2]:args$2,
             args$4=of_list$12(args$3),
             t$0=add_help_subcommands(t);
            return dispatch
                    (t$0,
                     empty$9,
                     0,
                     path,
                     args$4,
                     0,
                     default_version,
                     default_build_info,
                     0,
                     function(_aK3_){return _aK3_})}
          return [0,shape$2,help_for_shape,run,deprecated_run]}],
       Stable$10];
    caml_register_global(5154,Core_kernel_Command,"Core_kernel__Command");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Byte_units);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$452);
    caml_call1(Expect_test_collector[4][1],cst_src_byte_units_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$453,cst$240);
    var
     _asL_=Make_plain$1([0,compare$49,sexp_of_t$62]),
     symbol$225=_asL_[1],
     symbol$226=_asL_[2],
     symbol$227=_asL_[3],
     symbol$228=_asL_[4],
     symbol$229=_asL_[5],
     symbol$230=_asL_[6],
     equal$38=_asL_[7],
     min$16=_asL_[9],
     max$16=_asL_[10],
     ascending$16=_asL_[11],
     descending$16=_asL_[12],
     between$16=_asL_[13],
     clamp_exn$16=_asL_[14],
     clamp$16=_asL_[15],
     comparator$26=_asL_[16],
     validate_lbound$16=_asL_[17],
     validate_ubound$16=_asL_[18],
     validate_bound$16=_asL_[19],
     Replace_polymorphic_compare$15=_asL_[20],
     Map$27=_asL_[21],
     Set$27=_asL_[22],
     include$147=
      Make_plain$2([0,hash_fold_t$24,compare$49,sexp_of_t$62,hash$25]),
     compare$103=include$147[1],
     hash_fold_t$45=include$147[2],
     hash$52=include$147[3],
     hashable$14=include$147[4],
     Table$18=include$147[5],
     Hash_set$18=include$147[6],
     Hash_queue$14=include$147[7];
    function symbol$231(a,b){return caml_call2(symbol$106,a,b)}
    function symbol$232(a,b){return caml_call2(symbol$105,a,b)}
    function symbol$233(a,b){return caml_call2(symbol$113,a,b)}
    function symbol$234(t,s)
     {return caml_call1(of_float$4,caml_call1(to_float$3,t) / s)}
    function scale$2(t,s)
     {return caml_call1(of_float$4,caml_call1(to_float$3,t) * s)}
    function iscale(t,s)
     {return caml_call2(symbol$107,t,caml_call1(of_int$3,s))}
    function bytes_int64(t){return caml_call1(to_int64$2,t)}
    function bytes$0(t){return caml_call1(to_float$3,t)}
    function of_bytes_int(b){return caml_call1(of_int$3,b)}
    function of_bytes_int64_exn(b){return caml_call1(of_int64_exn$2,b)}
    function of_bytes$0(b){return caml_call1(of_float$4,b)}
    var
     kilobyte=of_bytes_int(1024),
     megabyte=iscale(kilobyte,1024),
     gigabyte=iscale(megabyte,1024),
     terabyte=iscale(gigabyte,1024),
     petabyte=iscale(terabyte,1024),
     exabyte=iscale(petabyte,1024),
     _asM_=Base_Word_size[3]?of_bytes_int(8):of_bytes_int(4);
    function kilobytes(t){return symbol$233(t,kilobyte)}
    function megabytes(t){return symbol$233(t,megabyte)}
    function gigabytes(t){return symbol$233(t,gigabyte)}
    function terabytes(t){return symbol$233(t,terabyte)}
    function petabytes(t){return symbol$233(t,petabyte)}
    function exabytes(t){return symbol$233(t,exabyte)}
    function words_int_exn(t)
     {return caml_call1(to_int_exn$2,caml_call2(symbol$112,t,_asM_))}
    function words(t){return symbol$233(t,_asM_)}
    function of_kilobytes(t){return scale$2(kilobyte,t)}
    function of_megabytes(t){return scale$2(megabyte,t)}
    function of_gigabytes(t){return scale$2(gigabyte,t)}
    function of_terabytes(t){return scale$2(terabyte,t)}
    function of_petabytes(t){return scale$2(petabyte,t)}
    function of_exabytes(t){return scale$2(exabyte,t)}
    function of_words_int(t){return iscale(_asM_,t)}
    function of_words(t){return scale$2(_asM_,t)}
    function of_string$28(s)
     {var length=caml_ml_string_length(s);
      if(caml_call2(symbol$58,length,2))caml_call3(_Pf_,_asN_,s,0);
      var
       base_str=caml_call3(_BR_,s,0,caml_call2(symbol$61,length,1)),
       ext_char=
        caml_call1(_Fj_,caml_string_get(s,caml_call2(symbol$61,length,1)));
      try
       {var _aK1_=caml_call1(_Ix_,base_str),base=_aK1_}
      catch(_aK2_){var base=caml_call4(_Pf_,_asO_,s,base_str,0)}
      var switcher=ext_char - 98 | 0;
      if(! (21 < switcher >>> 0))
       switch(switcher)
        {case 0:return of_bytes$0(base);
         case 3:return of_exabytes(base);
         case 5:return of_gigabytes(base);
         case 9:return of_kilobytes(base);
         case 11:return of_megabytes(base);
         case 14:return of_petabytes(base);
         case 18:return of_terabytes(base);
         case 21:return of_words(base)
         }
      return caml_call4(_Pf_,_asP_,s,ext_char,0)}
    var arg_type=caml_call3(_asK_[1],0,0,of_string$28);
    function largest_measure(t)
     {var t_abs=caml_call1(abs$4,t);
      return caml_call2(symbol$225,t_abs,exabyte)
              ?-287410883
              :caml_call2(symbol$225,t_abs,petabyte)
                ?-632836503
                :caml_call2(symbol$225,t_abs,terabyte)
                  ?-756914965
                  :caml_call2(symbol$225,t_abs,gigabyte)
                    ?939376143
                    :caml_call2(symbol$225,t_abs,megabyte)
                      ?-992187495
                      :caml_call2(symbol$225,t_abs,kilobyte)?-324157174:-792364981}
    function no_match(param)
     {return caml_call1(_Gb_,cst_Not_a_recognized_Byte_unit)}
    function of_value_sexp_and_unit_name(val_sexp,param)
     {if(caml_string_notequal(param,cst_Bytes))
       return caml_string_notequal(param,cst_Exabytes)
               ?caml_string_notequal(param,cst_Gigabytes)
                 ?caml_string_notequal(param,cst_Kilobytes)
                   ?caml_string_notequal(param,cst_Megabytes)
                     ?caml_string_notequal(param,cst_Petabytes)
                       ?caml_string_notequal(param,cst_Terabytes)
                         ?caml_string_notequal(param,cst_Words)
                           ?no_match(0)
                           :of_words(caml_call1(_Iw_,val_sexp))
                         :of_terabytes(caml_call1(_Iw_,val_sexp))
                       :of_petabytes(caml_call1(_Iw_,val_sexp))
                     :of_megabytes(caml_call1(_Iw_,val_sexp))
                   :of_kilobytes(caml_call1(_Iw_,val_sexp))
                 :of_gigabytes(caml_call1(_Iw_,val_sexp))
               :of_exabytes(caml_call1(_Iw_,val_sexp));
      try
       {var _aKZ_=caml_call1(_KO_,val_sexp);return _aKZ_}
      catch(_aK0_){return of_bytes$0(caml_call1(_Iw_,val_sexp))}}
    function _asQ_(param)
     {if(0 === param[0]){var str=param[1];return of_string$28(str)}
      var _aKW_=param[1];
      if(_aKW_)
       {var _aKX_=_aKW_[1];
        if(0 === _aKX_[0])
         {var _aKY_=_aKW_[2];
          if(_aKY_ && ! _aKY_[2])
           {var value=_aKY_[1],unit_name=_aKX_[1];
            return of_value_sexp_and_unit_name(value,unit_name)}}}
      return no_match(0)}
    function t_of_sexp$116(sexp)
     {try
       {var _aKV_=_asQ_(sexp);return _aKV_}
      catch(exn)
       {exn = caml_wrap_exception(exn);throw [0,Of_sexp_error,exn,sexp]}}
    var
     _asR_=
      caml_call1
       (caml_call1
         (Stable$0[1][1],
          [0,
           bin_shape_t$51,
           bin_size_t$5,
           bin_write_t$5,
           bin_read_t$11,
           bin_read_t$12]),
        [0,bytes$0,of_bytes$0]),
     _asS_=_asR_[1],
     _asT_=_asR_[2],
     _asU_=_asR_[3],
     _asV_=_asR_[4],
     _asW_=_asR_[5],
     _asX_=_asR_[6],
     _asY_=_asR_[7],
     _asZ_=_asR_[8];
    function sexp_of_t$130(t)
     {var match=largest_measure(t);
      return -756914965 <= match
              ?-324157174 === match
                ?[1,[0,_as0_,[0,caml_call1(sexp_of_t$46,kilobytes(t)),0]]]
                :[1,[0,_as1_,[0,caml_call1(sexp_of_t$46,gigabytes(t)),0]]]
              :-792364981 <= match
                ?[1,[0,_as2_,[0,caml_call1(sexp_of_t$46,bytes$0(t)),0]]]
                :[1,[0,_as3_,[0,caml_call1(sexp_of_t$46,megabytes(t)),0]]]}
    function to_string$34(t){return caml_call1(_Ch_,to_string$14(t))}
    var
     Expect_test_collector$17=
      caml_call1(Expect_test_collector[2],Expect_test_config);
    function _as4_(param)
     {var _aKu_=of_bytes_int(1000),_aKv_=0;
      caml_call2
       (_fE_,
        [0,
         [24,
          _as5_,
          function(param,custom_printf_003)
           {return to_string$34(custom_printf_003)},
          _aKv_],
         cst$241],
        _aKu_);
      var
       _aKw_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$0),
         199,
         6196,
         6204,
         6210];
      caml_call1(Expect_test_collector$17[1],_aKw_);
      var _aKx_=of_bytes_int(1023),_aKy_=0;
      caml_call2
       (_fE_,
        [0,
         [24,
          _as6_,
          function(param,custom_printf_004)
           {return to_string$34(custom_printf_004)},
          _aKy_],
         cst$242],
        _aKx_);
      var
       _aKz_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$1),
         201,
         6266,
         6274,
         6280];
      caml_call1(Expect_test_collector$17[1],_aKz_);
      var _aKA_=of_bytes_int(1024),_aKB_=0;
      caml_call2
       (_fE_,
        [0,
         [24,
          _as7_,
          function(param,custom_printf_005)
           {return to_string$34(custom_printf_005)},
          _aKB_],
         cst$243],
        _aKA_);
      var
       _aKC_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$2),
         203,
         6336,
         6344,
         6350];
      caml_call1(Expect_test_collector$17[1],_aKC_);
      var _aKD_=of_bytes_int(1025),_aKE_=0;
      caml_call2
       (_fE_,
        [0,
         [24,
          _as8_,
          function(param,custom_printf_006)
           {return to_string$34(custom_printf_006)},
          _aKE_],
         cst$244],
        _aKD_);
      var
       _aKF_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$3),
         205,
         6403,
         6411,
         6417];
      caml_call1(Expect_test_collector$17[1],_aKF_);
      var _aKG_=of_bytes_int(1500),_aKH_=0;
      caml_call2
       (_fE_,
        [0,
         [24,
          _as9_,
          function(param,custom_printf_007)
           {return to_string$34(custom_printf_007)},
          _aKH_],
         cst$245],
        _aKG_);
      var
       _aKI_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$4),
         207,
         6476,
         6484,
         6490];
      caml_call1(Expect_test_collector$17[1],_aKI_);
      var _aKJ_=of_bytes_int(10000),_aKK_=0;
      caml_call2
       (_fE_,
        [0,
         [24,
          _as__,
          function(param,custom_printf_008)
           {return to_string$34(custom_printf_008)},
          _aKK_],
         cst$246],
        _aKJ_);
      var
       _aKL_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$5),
         209,
         6550,
         6558,
         6564];
      caml_call1(Expect_test_collector$17[1],_aKL_);
      var _aKM_=of_bytes_int(100000),_aKN_=0;
      caml_call2
       (_fE_,
        [0,
         [24,
          _as$_,
          function(param,custom_printf_009)
           {return to_string$34(custom_printf_009)},
          _aKN_],
         cst$247],
        _aKM_);
      var
       _aKO_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$6),
         211,
         6625,
         6633,
         6639];
      caml_call1(Expect_test_collector$17[1],_aKO_);
      var _aKP_=of_bytes_int(1000000),_aKQ_=0;
      caml_call2
       (_fE_,
        [0,
         [24,
          _ata_,
          function(param,custom_printf_010)
           {return to_string$34(custom_printf_010)},
          _aKQ_],
         cst$248],
        _aKP_);
      var
       _aKR_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$7),
         213,
         6701,
         6709,
         6715];
      caml_call1(Expect_test_collector$17[1],_aKR_);
      var _aKS_=of_bytes_int(10000000),_aKT_=0;
      caml_call2
       (_fE_,
        [0,
         [24,
          _atb_,
          function(param,custom_printf_011)
           {return to_string$34(custom_printf_011)},
          _aKT_],
         cst$249],
        _aKS_);
      var
       _aKU_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$8),
         215,
         6778,
         6786,
         6792];
      return caml_call1(Expect_test_collector$17[1],_aKU_)}
    var
     _atc_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$9),
       199,
       6196,
       6211,
       6222],
     _atf_=
      [0,
       [0,
        _ate_,
        _atd_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$10),
         199,
         6196,
         6204,
         6210],
        _atc_],
       0],
     _atg_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$11),
       201,
       6266,
       6281,
       6292],
     _atj_=
      [0,
       [0,
        _ati_,
        _ath_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$12),
         201,
         6266,
         6274,
         6280],
        _atg_],
       _atf_],
     _atk_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$13),
       203,
       6336,
       6351,
       6359],
     _atn_=
      [0,
       [0,
        _atm_,
        _atl_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$14),
         203,
         6336,
         6344,
         6350],
        _atk_],
       _atj_],
     _ato_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$15),
       205,
       6403,
       6418,
       6432],
     _atr_=
      [0,
       [0,
        _atq_,
        _atp_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$16),
         205,
         6403,
         6411,
         6417],
        _ato_],
       _atn_],
     _ats_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$17),
       207,
       6476,
       6491,
       6505],
     _atv_=
      [0,
       [0,
        _atu_,
        _att_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$18),
         207,
         6476,
         6484,
         6490],
        _ats_],
       _atr_],
     _atw_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$19),
       209,
       6550,
       6565,
       6579],
     _atz_=
      [0,
       [0,
        _aty_,
        _atx_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$20),
         209,
         6550,
         6558,
         6564],
        _atw_],
       _atv_],
     _atA_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$21),
       211,
       6625,
       6640,
       6654],
     _atD_=
      [0,
       [0,
        _atC_,
        _atB_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$22),
         211,
         6625,
         6633,
         6639],
        _atA_],
       _atz_],
     _atE_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$23),
       213,
       6701,
       6716,
       6730],
     _atH_=
      [0,
       [0,
        _atG_,
        _atF_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$24),
         213,
         6701,
         6709,
         6715],
        _atE_],
       _atD_],
     _atI_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$25),
       215,
       6778,
       6793,
       6807],
     _atL_=
      [0,
       [0,
        _atK_,
        _atJ_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$26),
         215,
         6778,
         6786,
         6792],
        _atI_],
       _atH_],
     _atN_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$28),
       197,
       6114,
       6118,
       6808],
     _atO_=
      caml_call1(Expect_test_common_File[4][3],cst_e5fd3c71a5d31e4005a60055a4);
    caml_call9
     (Expect_test_collector$17[3],
      _atO_,
      _atN_,
      cst_src_byte_units_ml$27,
      0,
      _atM_,
      _atL_,
      0,
      Inline_test_config,
      _as4_);
    function t_of_sexp$117(sexp)
     {if(0 === sexp[0])
       {var s=sexp[1];
        try
         {var _aKt_=of_string$28(s);return _aKt_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          if(exn[1] === Stdlib[6])
           {var msg=exn[2];return caml_call2(_Od_,msg,sexp)}
          throw exn}}
      return t_of_sexp$116(sexp)}
    var
     _atP_=
      caml_call1
       (caml_call1
         (Stable$0[1][1],
          [0,
           bin_shape_t$65,
           bin_size_t$55,
           bin_write_t$55,
           bin_read_t$112,
           bin_read_t$113]),
        [0,bytes_int63,of_bytes_int63]),
     bin_size_t$94=_atP_[1],
     bin_write_t$95=_atP_[2],
     bin_read_t$187=_atP_[3],
     bin_read_t$188=_atP_[4],
     bin_shape_t$138=_atP_[5],
     bin_writer_t$113=_atP_[6],
     bin_reader_t$113=_atP_[7],
     bin_t$113=_atP_[8];
    function sexp_of_t$131(t){return [1,[0,_atQ_,[0,caml_call1(_KP_,t),0]]]}
    function to_string_short(t)
     {function to_units_str(to_unit,ext)
       {var f=caml_call1(to_unit,t),f_abs=caml_call1(abs,f);
        return caml_call2(include$54[2],f_abs,100.)
                ?caml_call3(_fw_,_atR_,f,ext)
                :caml_call2(include$54[2],f_abs,10.)
                  ?caml_call3(_fw_,_atS_,f,ext)
                  :caml_call3(_fw_,_atT_,f,ext)}
      var match=largest_measure(t);
      return -632836503 <= match
              ?-287410883 <= match
                ?939376143 <= match
                  ?to_units_str(gigabytes,71)
                  :to_units_str(exabytes,69)
                :-324157174 <= match
                  ?to_units_str(kilobytes,75)
                  :to_units_str(petabytes,80)
              :-792364981 === match
                ?caml_call2(_fw_,_atU_,bytes_int_exn(t))
                :-756914965 <= match
                  ?to_units_str(terabytes,84)
                  :to_units_str(megabytes,77)}
    var
     Expect_test_collector$18=
      caml_call1(Expect_test_collector[2],Expect_test_config);
    function _atV_(param)
     {var _aJS_=of_bytes_int(1000),_aJT_=0;
      caml_call2
       (_fE_,
        [0,
         [24,
          _atW_,
          function(param,custom_printf_014)
           {return to_string_short(custom_printf_014)},
          _aJT_],
         cst_short],
        _aJS_);
      var
       _aJU_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$29),
         269,
         8187,
         8191,
         8197];
      caml_call1(Expect_test_collector$18[1],_aJU_);
      var _aJV_=of_bytes_int(1023),_aJW_=0;
      caml_call2
       (_fE_,
        [0,
         [24,
          _atX_,
          function(param,custom_printf_015)
           {return to_string_short(custom_printf_015)},
          _aJW_],
         cst_short$0],
        _aJV_);
      var
       _aJX_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$30),
         271,
         8255,
         8259,
         8265];
      caml_call1(Expect_test_collector$18[1],_aJX_);
      var _aJY_=of_bytes_int(1024),_aJZ_=0;
      caml_call2
       (_fE_,
        [0,
         [24,
          _atY_,
          function(param,custom_printf_016)
           {return to_string_short(custom_printf_016)},
          _aJZ_],
         cst_short$1],
        _aJY_);
      var
       _aJ0_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$31),
         273,
         8323,
         8327,
         8333];
      caml_call1(Expect_test_collector$18[1],_aJ0_);
      var _aJ1_=of_bytes_int(1025),_aJ2_=0;
      caml_call2
       (_fE_,
        [0,
         [24,
          _atZ_,
          function(param,custom_printf_017)
           {return to_string_short(custom_printf_017)},
          _aJ2_],
         cst_short$2],
        _aJ1_);
      var
       _aJ3_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$32),
         275,
         8391,
         8395,
         8401];
      caml_call1(Expect_test_collector$18[1],_aJ3_);
      var _aJ4_=of_bytes_int(10000),_aJ5_=0;
      caml_call2
       (_fE_,
        [0,
         [24,
          _at0_,
          function(param,custom_printf_018)
           {return to_string_short(custom_printf_018)},
          _aJ5_],
         cst_short$3],
        _aJ4_);
      var
       _aJ6_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$33),
         277,
         8460,
         8464,
         8470];
      caml_call1(Expect_test_collector$18[1],_aJ6_);
      var _aJ7_=of_bytes_int(100000),_aJ8_=0;
      caml_call2
       (_fE_,
        [0,
         [24,
          _at1_,
          function(param,custom_printf_019)
           {return to_string_short(custom_printf_019)},
          _aJ8_],
         cst_short$4],
        _aJ7_);
      var
       _aJ9_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$34),
         279,
         8530,
         8534,
         8540];
      caml_call1(Expect_test_collector$18[1],_aJ9_);
      var _aJ__=of_bytes_int(1000000),_aJ$_=0;
      caml_call2
       (_fE_,
        [0,
         [24,
          _at2_,
          function(param,custom_printf_020)
           {return to_string_short(custom_printf_020)},
          _aJ$_],
         cst_short$5],
        _aJ__);
      var
       _aKa_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$35),
         281,
         8601,
         8605,
         8611];
      caml_call1(Expect_test_collector$18[1],_aKa_);
      var _aKb_=of_bytes_int(10000000),_aKc_=0;
      caml_call2
       (_fE_,
        [0,
         [24,
          _at3_,
          function(param,custom_printf_021)
           {return to_string_short(custom_printf_021)},
          _aKc_],
         cst_short$6],
        _aKb_);
      var
       _aKd_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$36),
         283,
         8672,
         8676,
         8682];
      caml_call1(Expect_test_collector$18[1],_aKd_);
      var _aKe_=of_bytes$0(10000000000.),_aKf_=0;
      caml_call2
       (_fE_,
        [0,
         [24,
          _at4_,
          function(param,custom_printf_022)
           {return to_string_short(custom_printf_022)},
          _aKf_],
         cst_short$7],
        _aKe_);
      var
       _aKg_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$37),
         285,
         8744,
         8748,
         8754];
      caml_call1(Expect_test_collector$18[1],_aKg_);
      var _aKh_=of_bytes$0(1000000000000.),_aKi_=0;
      caml_call2
       (_fE_,
        [0,
         [24,
          _at5_,
          function(param,custom_printf_023)
           {return to_string_short(custom_printf_023)},
          _aKi_],
         cst_short$8],
        _aKh_);
      var
       _aKj_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$38),
         287,
         8818,
         8822,
         8828];
      caml_call1(Expect_test_collector$18[1],_aKj_);
      var _aKk_=of_bytes$0(100000000000000.),_aKl_=0;
      caml_call2
       (_fE_,
        [0,
         [24,
          _at6_,
          function(param,custom_printf_024)
           {return to_string_short(custom_printf_024)},
          _aKl_],
         cst_short$9],
        _aKk_);
      var
       _aKm_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$39),
         289,
         8893,
         8897,
         8903];
      caml_call1(Expect_test_collector$18[1],_aKm_);
      var _aKn_=of_bytes$0(100000000000000000.),_aKo_=0;
      caml_call2
       (_fE_,
        [0,
         [24,
          _at7_,
          function(param,custom_printf_025)
           {return to_string_short(custom_printf_025)},
          _aKo_],
         cst_short$10],
        _aKn_);
      var
       _aKp_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$40),
         291,
         8972,
         8976,
         8982];
      caml_call1(Expect_test_collector$18[1],_aKp_);
      var _aKq_=of_bytes$0(3000000000000000000.),_aKr_=0;
      caml_call2
       (_fE_,
        [0,
         [24,
          _at8_,
          function(param,custom_printf_026)
           {return to_string_short(custom_printf_026)},
          _aKr_],
         cst_short$11],
        _aKq_);
      var
       _aKs_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$41),
         293,
         9052,
         9056,
         9062];
      caml_call1(Expect_test_collector$18[1],_aKs_);
      return 0}
    var
     _at9_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$42),
       269,
       8187,
       8198,
       8209],
     _aua_=
      [0,
       [0,
        _at$_,
        _at__,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$43),
         269,
         8187,
         8191,
         8197],
        _at9_],
       0],
     _aub_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$44),
       271,
       8255,
       8266,
       8277],
     _aue_=
      [0,
       [0,
        _aud_,
        _auc_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$45),
         271,
         8255,
         8259,
         8265],
        _aub_],
       _aua_],
     _auf_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$46),
       273,
       8323,
       8334,
       8345],
     _aui_=
      [0,
       [0,
        _auh_,
        _aug_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$47),
         273,
         8323,
         8327,
         8333],
        _auf_],
       _aue_],
     _auj_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$48),
       275,
       8391,
       8402,
       8413],
     _aum_=
      [0,
       [0,
        _aul_,
        _auk_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$49),
         275,
         8391,
         8395,
         8401],
        _auj_],
       _aui_],
     _aun_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$50),
       277,
       8460,
       8471,
       8482],
     _auq_=
      [0,
       [0,
        _aup_,
        _auo_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$51),
         277,
         8460,
         8464,
         8470],
        _aun_],
       _aum_],
     _aur_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$52),
       279,
       8530,
       8541,
       8552],
     _auu_=
      [0,
       [0,
        _aut_,
        _aus_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$53),
         279,
         8530,
         8534,
         8540],
        _aur_],
       _auq_],
     _auv_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$54),
       281,
       8601,
       8612,
       8622],
     _auy_=
      [0,
       [0,
        _aux_,
        _auw_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$55),
         281,
         8601,
         8605,
         8611],
        _auv_],
       _auu_],
     _auz_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$56),
       283,
       8672,
       8683,
       8694],
     _auC_=
      [0,
       [0,
        _auB_,
        _auA_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$57),
         283,
         8672,
         8676,
         8682],
        _auz_],
       _auy_],
     _auD_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$58),
       285,
       8744,
       8755,
       8766],
     _auG_=
      [0,
       [0,
        _auF_,
        _auE_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$59),
         285,
         8744,
         8748,
         8754],
        _auD_],
       _auC_],
     _auH_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$60),
       287,
       8818,
       8829,
       8839],
     _auK_=
      [0,
       [0,
        _auJ_,
        _auI_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$61),
         287,
         8818,
         8822,
         8828],
        _auH_],
       _auG_],
     _auL_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$62),
       289,
       8893,
       8904,
       8915],
     _auO_=
      [0,
       [0,
        _auN_,
        _auM_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$63),
         289,
         8893,
         8897,
         8903],
        _auL_],
       _auK_],
     _auP_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$64),
       291,
       8972,
       8983,
       8994],
     _auS_=
      [0,
       [0,
        _auR_,
        _auQ_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$65),
         291,
         8972,
         8976,
         8982],
        _auP_],
       _auO_],
     _auT_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$66),
       293,
       9052,
       9063,
       9074],
     _auW_=
      [0,
       [0,
        _auV_,
        _auU_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$67),
         293,
         9052,
         9056,
         9062],
        _auT_],
       _auS_],
     _auX_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_byte_units_ml$69),
       267,
       8124,
       8124,
       9081],
     _auY_=
      caml_call1
       (Expect_test_common_File[4][3],cst_e5fd3c71a5d31e4005a60055a4$0);
    caml_call9
     (Expect_test_collector$18[3],
      _auY_,
      _auX_,
      cst_src_byte_units_ml$68,
      0,
      0,
      _auW_,
      0,
      Inline_test_config,
      _atV_);
    function create$37(units,value)
     {return -792364981 === units
              ?of_bytes$0(value)
              :-324157174 <= units
                ?939376143 <= units?of_gigabytes(value):of_kilobytes(value)
                :-510525623 <= units?of_words(value):of_megabytes(value)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$454);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Byte_units$0);
    var
     Core_kernel_Byte_units=
      [0,
       sexp_of_t$62,
       create$37,
       symbol$225,
       symbol$226,
       symbol$227,
       symbol$228,
       symbol$229,
       symbol$230,
       equal$38,
       min$16,
       max$16,
       ascending$16,
       descending$16,
       between$16,
       clamp_exn$16,
       clamp$16,
       comparator$26,
       validate_lbound$16,
       validate_ubound$16,
       validate_bound$16,
       Replace_polymorphic_compare$15,
       Map$27,
       Set$27,
       compare$103,
       hash_fold_t$45,
       hash$52,
       hashable$14,
       Table$18,
       Hash_set$18,
       Hash_queue$14,
       of_string$28,
       to_string$14,
       of_bytes$0,
       of_bytes_int,
       of_bytes_int63,
       of_bytes_int64_exn,
       of_bytes$0,
       of_kilobytes,
       of_megabytes,
       of_gigabytes,
       of_terabytes,
       of_petabytes,
       of_exabytes,
       of_words,
       of_words_int,
       of_words,
       to_string$14,
       to_string_short,
       bytes$0,
       bytes_int_exn,
       bytes_int63,
       bytes_int64,
       bytes$0,
       kilobytes,
       megabytes,
       gigabytes,
       terabytes,
       petabytes,
       exabytes,
       words,
       words_int_exn,
       words,
       zero$4,
       scale$2,
       arg_type,
       [0,symbol$231,symbol$232,symbol$234,symbol$233],
       symbol$231,
       symbol$232,
       symbol$234,
       symbol$233,
       [0,
        [0,
         _asS_,
         _asT_,
         _asU_,
         _asV_,
         _asW_,
         _asX_,
         _asY_,
         _asZ_,
         compare$103,
         t_of_sexp$117,
         sexp_of_t$130],
        [0,
         bin_size_t$94,
         bin_write_t$95,
         bin_read_t$187,
         bin_read_t$188,
         bin_shape_t$138,
         bin_writer_t$113,
         bin_reader_t$113,
         bin_t$113,
         compare$103,
         t_of_sexp$116,
         sexp_of_t$131]]];
    caml_register_global
     (5155,Core_kernel_Byte_units,"Core_kernel__Byte_units");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Heap_block);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$455);
    caml_call1(Expect_test_collector[4][1],cst_src_heap_block_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$456,cst$250);
    function sexp_of_t$132(of_a,v){return caml_call1(of_a,v)}
    function create$38(v)
     {return runtime.Core_kernel_heap_block_is_heap_block(v)?[0,v]:0}
    function create_exn$1(v)
     {return runtime.Core_kernel_heap_block_is_heap_block(v)
              ?v
              :caml_call1(_bl_,cst_Heap_block_create_exn_call)}
    function value$4(t){return t}
    var
     bytes_per_word=
      caml_call2(_aM_,caml_call1(Base_Word_size[2],Base_Word_size[3]),8);
    function bytes$1(t)
     {return caml_call2(_aL_,caml_call2(_aJ_,t.length - 1,1),bytes_per_word)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$457);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Heap_block$0);
    var
     Core_kernel_Heap_block=
      [0,sexp_of_t$132,create$38,create_exn$1,value$4,bytes$1];
    caml_register_global
     (5156,Core_kernel_Heap_block,"Core_kernel__Heap_block");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Gc);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$458);
    caml_call1(Expect_test_collector[4][1],cst_src_gc_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$459,cst$251);
    var
     _au0_=caml_call1(Bin_prot_Shape[9],_auZ_),
     _au1_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$283),0,_au0_],0],
     _au2_=caml_call1(Bin_prot_Shape[4][1],cst_src_gc_ml_6_6),
     group$154=caml_call2(Bin_prot_Shape[6],_au2_,_au1_),
     _au3_=caml_call1(Bin_prot_Shape[2][1],cst_t$284),
     bin_shape_t$139=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$154,_au3_),0);
    function bin_size_t$95(param){return 1}
    function bin_write_t$96(buf,pos,param)
     {switch(param)
       {case 0:return caml_call3(Bin_prot_Write[30],buf,pos,0);
        case 1:return caml_call3(Bin_prot_Write[30],buf,pos,1);
        default:return caml_call3(Bin_prot_Write[30],buf,pos,2)}}
    var bin_writer_t$114=[0,bin_size_t$95,bin_write_t$96];
    function bin_read_t$189(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_src_gc_ml_Stable_Allocatio,pos_ref[1])}
    function bin_read_t$190(buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[29],buf,pos_ref);
      if(2 < match >>> 0)
       return caml_call2(Bin_prot_Common[18],_au4_,pos_ref[1]);
      switch(match){case 0:return 0;case 1:return 1;default:return 2}}
    var
     bin_reader_t$114=[0,bin_read_t$190,bin_read_t$189],
     bin_t$114=[0,bin_shape_t$139,bin_writer_t$114,bin_reader_t$114],
     compare$104=caml_int_compare;
    function equal$39(_aJR_,_aJQ_){return _aJR_ === _aJQ_?1:0}
    function hash_fold_t$46(hsv,arg)
     {switch(arg)
       {case 0:return caml_call2(Base_Hash[3],hsv,0);
        case 1:return caml_call2(Base_Hash[3],hsv,1);
        default:return caml_call2(Base_Hash[3],hsv,2)}}
    function hash$53(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_aJP_=hash_fold_t$46(hsv,x);
      return caml_call1(Base_Hash[9],_aJP_)}
    function t_of_sexp$118(sexp)
     {if(0 === sexp[0])
       {var _aJL_=sexp[1],switch$0=0;
        if(caml_string_notequal(_aJL_,cst_Best_fit))
         {var switch$1=0;
          if(caml_string_notequal(_aJL_,cst_First_fit))
           {var switch$2=0;
            if(caml_string_notequal(_aJL_,cst_Next_fit))
             if(caml_string_notequal(_aJL_,cst_best_fit))
              if(caml_string_notequal(_aJL_,cst_first_fit))
               {if(caml_string_notequal(_aJL_,cst_next_fit))
                 {switch$0 = 1;switch$1 = 1;switch$2 = 1}}
              else
               switch$2 = 1;
             else
              {switch$1 = 1;switch$2 = 1}
            if(! switch$2)return 0}
          if(! switch$1)return 1}
        if(! switch$0)return 2}
      else
       {var _aJM_=sexp[1];
        if(! _aJM_)
         return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$53,sexp);
        var _aJN_=_aJM_[1];
        if(0 !== _aJN_[0])
         return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$53,sexp);
        var _aJO_=_aJN_[1],switch$3=0;
        if(caml_string_notequal(_aJO_,cst_Best_fit$0))
         {var switch$4=0;
          if(caml_string_notequal(_aJO_,cst_First_fit$0))
           {var switch$5=0;
            if(caml_string_notequal(_aJO_,cst_Next_fit$0))
             if(caml_string_notequal(_aJO_,cst_best_fit$0))
              if(caml_string_notequal(_aJO_,cst_first_fit$0))
               {if(caml_string_notequal(_aJO_,cst_next_fit$0))
                 {switch$3 = 1;switch$4 = 1;switch$5 = 1}}
              else
               switch$5 = 1;
             else
              {switch$4 = 1;switch$5 = 1}
            if(! switch$5)
             return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$53,sexp)}
          if(! switch$4)
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$53,sexp)}
        if(! switch$3)
         return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$53,sexp)}
      return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$53,sexp)}
    function sexp_of_t$133(param)
     {switch(param)
       {case 0:return _au5_;case 1:return _au6_;default:return _au7_}}
    var
     print_stat=include$148[1],
     allocated_bytes=include$148[2],
     create_alarm=include$148[6],
     delete_alarm=include$148[7];
    function compare$105(a_005,b_006)
     {if(caml_call2(Ppx_compare_lib[1],a_005,b_006))return 0;
      var n=caml_call2(_v_,a_005[1],b_006[1]);
      if(0 === n)
       {var n$0=caml_call2(_v_,a_005[2],b_006[2]);
        if(0 === n$0)
         {var n$1=caml_call2(_v_,a_005[3],b_006[3]);
          if(0 === n$1)
           {var n$2=caml_call2(compare,a_005[4],b_006[4]);
            if(0 === n$2)
             {var n$3=caml_call2(compare,a_005[5],b_006[5]);
              if(0 === n$3)
               {var n$4=caml_call2(compare,a_005[6],b_006[6]);
                if(0 === n$4)
                 {var n$5=caml_call2(compare,a_005[7],b_006[7]);
                  if(0 === n$5)
                   {var n$6=caml_call2(compare,a_005[8],b_006[8]);
                    if(0 === n$6)
                     {var n$7=caml_call2(compare,a_005[9],b_006[9]);
                      if(0 === n$7)
                       {var n$8=caml_call2(compare,a_005[10],b_006[10]);
                        if(0 === n$8)
                         {var n$9=caml_call2(compare,a_005[11],b_006[11]);
                          if(0 === n$9)
                           {var n$10=caml_call2(compare,a_005[12],b_006[12]);
                            if(0 === n$10)
                             {var n$11=caml_call2(compare,a_005[13],b_006[13]);
                              if(0 === n$11)
                               {var n$12=caml_call2(compare,a_005[14],b_006[14]);
                                if(0 === n$12)
                                 {var n$13=caml_call2(compare,a_005[15],b_006[15]);
                                  if(0 === n$13)
                                   {var n$14=caml_call2(compare,a_005[16],b_006[16]);
                                    return 0 === n$14
                                            ?caml_call2(compare,a_005[17],b_006[17])
                                            :n$14}
                                  return n$13}
                                return n$12}
                              return n$11}
                            return n$10}
                          return n$9}
                        return n$8}
                      return n$7}
                    return n$6}
                  return n$5}
                return n$4}
              return n$3}
            return n$2}
          return n$1}
        return n$0}
      return n}
    var
     _au8_=
      caml_call1
       (Bin_prot_Shape[8],
        [0,
         [0,cst_minor_words,_cs_],
         [0,
          [0,cst_promoted_words,_cs_],
          [0,
           [0,cst_major_words,_cs_],
           [0,
            [0,cst_minor_collections,_co_],
            [0,
             [0,cst_major_collections,_co_],
             [0,
              [0,cst_heap_words,_co_],
              [0,
               [0,cst_heap_chunks,_co_],
               [0,
                [0,cst_live_words,_co_],
                [0,
                 [0,cst_live_blocks,_co_],
                 [0,
                  [0,cst_free_words,_co_],
                  [0,
                   [0,cst_free_blocks,_co_],
                   [0,
                    [0,cst_largest_free,_co_],
                    [0,
                     [0,cst_fragments,_co_],
                     [0,
                      [0,cst_compactions,_co_],
                      [0,
                       [0,cst_top_heap_words,_co_],
                       [0,
                        [0,cst_stack_size,_co_],
                        [0,[0,cst_forced_major_collections,_co_],0]]]]]]]]]]]]]]]]]),
     _au9_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$285),0,_au8_],0],
     _au__=caml_call1(Bin_prot_Shape[4][1],cst_src_gc_ml_21_4),
     group$155=caml_call2(Bin_prot_Shape[6],_au__,_au9_),
     _au$_=caml_call1(Bin_prot_Shape[2][1],cst_t$286),
     bin_shape_t$140=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$155,_au$_),0);
    function bin_size_t$96(param)
     {var
       v17=param[17],
       v16=param[16],
       v15=param[15],
       v14=param[14],
       v13=param[13],
       v12=param[12],
       v11=param[11],
       v10=param[10],
       v9=param[9],
       v8=param[8],
       v7=param[7],
       v6=param[6],
       v5=param[5],
       v4=param[4],
       v3=param[3],
       v2=param[2],
       v1=param[1],
       _aJu_=caml_call1(bin_size_t$5,v1),
       size=caml_call2(Bin_prot_Common[23],0,_aJu_),
       _aJv_=caml_call1(bin_size_t$5,v2),
       size$0=caml_call2(Bin_prot_Common[23],size,_aJv_),
       _aJw_=caml_call1(bin_size_t$5,v3),
       size$1=caml_call2(Bin_prot_Common[23],size$0,_aJw_),
       _aJx_=caml_call1(bin_size_t$4,v4),
       size$2=caml_call2(Bin_prot_Common[23],size$1,_aJx_),
       _aJy_=caml_call1(bin_size_t$4,v5),
       size$3=caml_call2(Bin_prot_Common[23],size$2,_aJy_),
       _aJz_=caml_call1(bin_size_t$4,v6),
       size$4=caml_call2(Bin_prot_Common[23],size$3,_aJz_),
       _aJA_=caml_call1(bin_size_t$4,v7),
       size$5=caml_call2(Bin_prot_Common[23],size$4,_aJA_),
       _aJB_=caml_call1(bin_size_t$4,v8),
       size$6=caml_call2(Bin_prot_Common[23],size$5,_aJB_),
       _aJC_=caml_call1(bin_size_t$4,v9),
       size$7=caml_call2(Bin_prot_Common[23],size$6,_aJC_),
       _aJD_=caml_call1(bin_size_t$4,v10),
       size$8=caml_call2(Bin_prot_Common[23],size$7,_aJD_),
       _aJE_=caml_call1(bin_size_t$4,v11),
       size$9=caml_call2(Bin_prot_Common[23],size$8,_aJE_),
       _aJF_=caml_call1(bin_size_t$4,v12),
       size$10=caml_call2(Bin_prot_Common[23],size$9,_aJF_),
       _aJG_=caml_call1(bin_size_t$4,v13),
       size$11=caml_call2(Bin_prot_Common[23],size$10,_aJG_),
       _aJH_=caml_call1(bin_size_t$4,v14),
       size$12=caml_call2(Bin_prot_Common[23],size$11,_aJH_),
       _aJI_=caml_call1(bin_size_t$4,v15),
       size$13=caml_call2(Bin_prot_Common[23],size$12,_aJI_),
       _aJJ_=caml_call1(bin_size_t$4,v16),
       size$14=caml_call2(Bin_prot_Common[23],size$13,_aJJ_),
       _aJK_=caml_call1(bin_size_t$4,v17);
      return caml_call2(Bin_prot_Common[23],size$14,_aJK_)}
    function bin_write_t$97(buf,pos,param)
     {var
       v17=param[17],
       v16=param[16],
       v15=param[15],
       v14=param[14],
       v13=param[13],
       v12=param[12],
       v11=param[11],
       v10=param[10],
       v9=param[9],
       v8=param[8],
       v7=param[7],
       v6=param[6],
       v5=param[5],
       v4=param[4],
       v3=param[3],
       v2=param[2],
       v1=param[1],
       pos$0=caml_call3(bin_write_t$5,buf,pos,v1),
       pos$1=caml_call3(bin_write_t$5,buf,pos$0,v2),
       pos$2=caml_call3(bin_write_t$5,buf,pos$1,v3),
       pos$3=caml_call3(bin_write_t$4,buf,pos$2,v4),
       pos$4=caml_call3(bin_write_t$4,buf,pos$3,v5),
       pos$5=caml_call3(bin_write_t$4,buf,pos$4,v6),
       pos$6=caml_call3(bin_write_t$4,buf,pos$5,v7),
       pos$7=caml_call3(bin_write_t$4,buf,pos$6,v8),
       pos$8=caml_call3(bin_write_t$4,buf,pos$7,v9),
       pos$9=caml_call3(bin_write_t$4,buf,pos$8,v10),
       pos$10=caml_call3(bin_write_t$4,buf,pos$9,v11),
       pos$11=caml_call3(bin_write_t$4,buf,pos$10,v12),
       pos$12=caml_call3(bin_write_t$4,buf,pos$11,v13),
       pos$13=caml_call3(bin_write_t$4,buf,pos$12,v14),
       pos$14=caml_call3(bin_write_t$4,buf,pos$13,v15),
       pos$15=caml_call3(bin_write_t$4,buf,pos$14,v16);
      return caml_call3(bin_write_t$4,buf,pos$15,v17)}
    var bin_writer_t$115=[0,bin_size_t$96,bin_write_t$97];
    function bin_read_t$191(buf,pos_ref,vint)
     {return caml_call2(Bin_prot_Common[19],cst_src_gc_ml_Stat_T_t,pos_ref[1])}
    function bin_read_t$192(buf,pos_ref)
     {var
       v_minor_words=caml_call2(bin_read_t$11,buf,pos_ref),
       v_promoted_words=caml_call2(bin_read_t$11,buf,pos_ref),
       v_major_words=caml_call2(bin_read_t$11,buf,pos_ref),
       v_minor_collections=caml_call2(bin_read_t$9,buf,pos_ref),
       v_major_collections=caml_call2(bin_read_t$9,buf,pos_ref),
       v_heap_words=caml_call2(bin_read_t$9,buf,pos_ref),
       v_heap_chunks=caml_call2(bin_read_t$9,buf,pos_ref),
       v_live_words=caml_call2(bin_read_t$9,buf,pos_ref),
       v_live_blocks=caml_call2(bin_read_t$9,buf,pos_ref),
       v_free_words=caml_call2(bin_read_t$9,buf,pos_ref),
       v_free_blocks=caml_call2(bin_read_t$9,buf,pos_ref),
       v_largest_free=caml_call2(bin_read_t$9,buf,pos_ref),
       v_fragments=caml_call2(bin_read_t$9,buf,pos_ref),
       v_compactions=caml_call2(bin_read_t$9,buf,pos_ref),
       v_top_heap_words=caml_call2(bin_read_t$9,buf,pos_ref),
       v_stack_size=caml_call2(bin_read_t$9,buf,pos_ref),
       v_forced_major_collections=caml_call2(bin_read_t$9,buf,pos_ref);
      return [0,
              v_minor_words,
              v_promoted_words,
              v_major_words,
              v_minor_collections,
              v_major_collections,
              v_heap_words,
              v_heap_chunks,
              v_live_words,
              v_live_blocks,
              v_free_words,
              v_free_blocks,
              v_largest_free,
              v_fragments,
              v_compactions,
              v_top_heap_words,
              v_stack_size,
              v_forced_major_collections]}
    var
     bin_reader_t$115=[0,bin_read_t$192,bin_read_t$191],
     bin_t$115=[0,bin_shape_t$140,bin_writer_t$115,bin_reader_t$115];
    function t_of_sexp$119(sexp)
     {if(0 === sexp[0])
       return caml_call2(Sexplib0_Sexp_conv_error[16],tp_loc$54,sexp);
      var
       field_sexps=sexp[1],
       minor_words_field=[0,0],
       promoted_words_field=[0,0],
       major_words_field=[0,0],
       minor_collections_field=[0,0],
       major_collections_field=[0,0],
       heap_words_field=[0,0],
       heap_chunks_field=[0,0],
       live_words_field=[0,0],
       live_blocks_field=[0,0],
       free_words_field=[0,0],
       free_blocks_field=[0,0],
       largest_free_field=[0,0],
       fragments_field=[0,0],
       compactions_field=[0,0],
       top_heap_words_field=[0,0],
       stack_size_field=[0,0],
       forced_major_collections_field=[0,0],
       duplicates=[0,0],
       extra=[0,0],
       param=field_sexps;
      for(;;)
       {if(param)
         {var _aI9_=param[1];
          if(1 === _aI9_[0])
           {var _aI__=_aI9_[1];
            if(_aI__)
             {var _aI$_=_aI__[1];
              if(0 === _aI$_[0])
               {var _aJa_=_aI__[2],_aJb_=_aI$_[1],switch$1=0;
                if(! _aJa_ || ! _aJa_[2])switch$1 = 1;
                if(switch$1)
                 {var
                   tail=param[2],
                   field_sexp$17=
                    function(_aJt_)
                     {function field_sexp(param)
                       {if(_aJt_)
                         {if(_aJt_[2])throw [0,Assert_failure,_ava_];
                          var x=_aJt_[1];
                          return x}
                        return caml_call2
                                (Sexplib0_Sexp_conv_error[10],tp_loc$54,sexp)}
                      return field_sexp},
                   field_sexp=field_sexp$17(_aJa_),
                   switch$0=caml_string_compare(_aJb_,cst_live_blocks$0),
                   switch$2=0;
                  if(0 <= switch$0)
                   if(0 < switch$0)
                    if(caml_string_notequal(_aJb_,cst_live_words$0))
                     if(caml_string_notequal(_aJb_,cst_major_collections$0))
                      if(caml_string_notequal(_aJb_,cst_major_words$0))
                       if(caml_string_notequal(_aJb_,cst_minor_collections$0))
                        if(caml_string_notequal(_aJb_,cst_minor_words$0))
                         if(caml_string_notequal(_aJb_,cst_promoted_words$0))
                          if(caml_string_notequal(_aJb_,cst_stack_size$0))
                           if(caml_string_notequal(_aJb_,cst_top_heap_words$0))
                            switch$2 = 1;
                           else
                            if(top_heap_words_field[1])
                             duplicates[1] = [0,_aJb_,duplicates[1]];
                            else
                             {var
                               field_sexp$0=field_sexp(0),
                               fvalue=caml_call1(t_of_sexp,field_sexp$0);
                              top_heap_words_field[1] = [0,fvalue]}
                          else
                           if(stack_size_field[1])
                            duplicates[1] = [0,_aJb_,duplicates[1]];
                           else
                            {var
                              field_sexp$1=field_sexp(0),
                              fvalue$0=caml_call1(t_of_sexp,field_sexp$1);
                             stack_size_field[1] = [0,fvalue$0]}
                         else
                          if(promoted_words_field[1])
                           duplicates[1] = [0,_aJb_,duplicates[1]];
                          else
                           {var
                             field_sexp$2=field_sexp(0),
                             fvalue$1=caml_call1(_z_,field_sexp$2);
                            promoted_words_field[1] = [0,fvalue$1]}
                        else
                         if(minor_words_field[1])
                          duplicates[1] = [0,_aJb_,duplicates[1]];
                         else
                          {var
                            field_sexp$3=field_sexp(0),
                            fvalue$2=caml_call1(_z_,field_sexp$3);
                           minor_words_field[1] = [0,fvalue$2]}
                       else
                        if(minor_collections_field[1])
                         duplicates[1] = [0,_aJb_,duplicates[1]];
                        else
                         {var
                           field_sexp$4=field_sexp(0),
                           fvalue$3=caml_call1(t_of_sexp,field_sexp$4);
                          minor_collections_field[1] = [0,fvalue$3]}
                      else
                       if(major_words_field[1])
                        duplicates[1] = [0,_aJb_,duplicates[1]];
                       else
                        {var
                          field_sexp$5=field_sexp(0),
                          fvalue$4=caml_call1(_z_,field_sexp$5);
                         major_words_field[1] = [0,fvalue$4]}
                     else
                      if(major_collections_field[1])
                       duplicates[1] = [0,_aJb_,duplicates[1]];
                      else
                       {var
                         field_sexp$6=field_sexp(0),
                         fvalue$5=caml_call1(t_of_sexp,field_sexp$6);
                        major_collections_field[1] = [0,fvalue$5]}
                    else
                     if(live_words_field[1])
                      duplicates[1] = [0,_aJb_,duplicates[1]];
                     else
                      {var
                        field_sexp$7=field_sexp(0),
                        fvalue$6=caml_call1(t_of_sexp,field_sexp$7);
                       live_words_field[1] = [0,fvalue$6]}
                   else
                    if(live_blocks_field[1])
                     duplicates[1] = [0,_aJb_,duplicates[1]];
                    else
                     {var
                       field_sexp$8=field_sexp(0),
                       fvalue$7=caml_call1(t_of_sexp,field_sexp$8);
                      live_blocks_field[1] = [0,fvalue$7]}
                  else
                   if(caml_string_notequal(_aJb_,cst_compactions$0))
                    if
                     (caml_string_notequal(_aJb_,cst_forced_major_collections$0))
                     if(caml_string_notequal(_aJb_,cst_fragments$0))
                      if(caml_string_notequal(_aJb_,cst_free_blocks$0))
                       if(caml_string_notequal(_aJb_,cst_free_words$0))
                        if(caml_string_notequal(_aJb_,cst_heap_chunks$0))
                         if(caml_string_notequal(_aJb_,cst_heap_words$0))
                          if(caml_string_notequal(_aJb_,cst_largest_free$0))
                           switch$2 = 1;
                          else
                           if(largest_free_field[1])
                            duplicates[1] = [0,_aJb_,duplicates[1]];
                           else
                            {var
                              field_sexp$9=field_sexp(0),
                              fvalue$8=caml_call1(t_of_sexp,field_sexp$9);
                             largest_free_field[1] = [0,fvalue$8]}
                         else
                          if(heap_words_field[1])
                           duplicates[1] = [0,_aJb_,duplicates[1]];
                          else
                           {var
                             field_sexp$10=field_sexp(0),
                             fvalue$9=caml_call1(t_of_sexp,field_sexp$10);
                            heap_words_field[1] = [0,fvalue$9]}
                        else
                         if(heap_chunks_field[1])
                          duplicates[1] = [0,_aJb_,duplicates[1]];
                         else
                          {var
                            field_sexp$11=field_sexp(0),
                            fvalue$10=caml_call1(t_of_sexp,field_sexp$11);
                           heap_chunks_field[1] = [0,fvalue$10]}
                       else
                        if(free_words_field[1])
                         duplicates[1] = [0,_aJb_,duplicates[1]];
                        else
                         {var
                           field_sexp$12=field_sexp(0),
                           fvalue$11=caml_call1(t_of_sexp,field_sexp$12);
                          free_words_field[1] = [0,fvalue$11]}
                      else
                       if(free_blocks_field[1])
                        duplicates[1] = [0,_aJb_,duplicates[1]];
                       else
                        {var
                          field_sexp$13=field_sexp(0),
                          fvalue$12=caml_call1(t_of_sexp,field_sexp$13);
                         free_blocks_field[1] = [0,fvalue$12]}
                     else
                      if(fragments_field[1])
                       duplicates[1] = [0,_aJb_,duplicates[1]];
                      else
                       {var
                         field_sexp$14=field_sexp(0),
                         fvalue$13=caml_call1(t_of_sexp,field_sexp$14);
                        fragments_field[1] = [0,fvalue$13]}
                    else
                     if(forced_major_collections_field[1])
                      duplicates[1] = [0,_aJb_,duplicates[1]];
                     else
                      {var
                        field_sexp$15=field_sexp(0),
                        fvalue$14=caml_call1(t_of_sexp,field_sexp$15);
                       forced_major_collections_field[1] = [0,fvalue$14]}
                   else
                    if(compactions_field[1])
                     duplicates[1] = [0,_aJb_,duplicates[1]];
                    else
                     {var
                       field_sexp$16=field_sexp(0),
                       fvalue$15=caml_call1(t_of_sexp,field_sexp$16);
                      compactions_field[1] = [0,fvalue$15]}
                  if(switch$2 && Sexplib0_Sexp_conv[26][1])
                   extra[1] = [0,_aJb_,extra[1]];
                  var param=tail;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[10],tp_loc$54,_aI9_)}
        if(duplicates[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],tp_loc$54,duplicates[1],sexp);
        if(extra[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[13],tp_loc$54,extra[1],sexp);
        var
         _aJc_=minor_words_field[1],
         _aJd_=promoted_words_field[1],
         _aJe_=major_words_field[1],
         _aJf_=minor_collections_field[1],
         _aJg_=major_collections_field[1],
         _aJh_=heap_words_field[1],
         _aJi_=heap_chunks_field[1],
         _aJj_=live_words_field[1],
         _aJk_=live_blocks_field[1],
         _aJl_=free_words_field[1],
         _aJm_=free_blocks_field[1],
         _aJn_=largest_free_field[1],
         _aJo_=fragments_field[1],
         _aJp_=compactions_field[1],
         _aJq_=top_heap_words_field[1],
         _aJr_=stack_size_field[1],
         _aJs_=forced_major_collections_field[1];
        if
         (_aJc_
          &&
          _aJd_
          &&
          _aJe_
          &&
          _aJf_
          &&
          _aJg_
          &&
          _aJh_
          &&
          _aJi_
          &&
          _aJj_
          &&
          _aJk_
          &&
          _aJl_
          &&
          _aJm_
          &&
          _aJn_
          &&
          _aJo_
          &&
          _aJp_
          &&
          _aJq_
          &&
          _aJr_
          &&
          _aJs_)
         {var
           forced_major_collections_value=_aJs_[1],
           stack_size_value=_aJr_[1],
           top_heap_words_value=_aJq_[1],
           compactions_value=_aJp_[1],
           fragments_value=_aJo_[1],
           largest_free_value=_aJn_[1],
           free_blocks_value=_aJm_[1],
           free_words_value=_aJl_[1],
           live_blocks_value=_aJk_[1],
           live_words_value=_aJj_[1],
           heap_chunks_value=_aJi_[1],
           heap_words_value=_aJh_[1],
           major_collections_value=_aJg_[1],
           minor_collections_value=_aJf_[1],
           major_words_value=_aJe_[1],
           promoted_words_value=_aJd_[1],
           minor_words_value=_aJc_[1];
          return [0,
                  minor_words_value,
                  promoted_words_value,
                  major_words_value,
                  minor_collections_value,
                  major_collections_value,
                  heap_words_value,
                  heap_chunks_value,
                  live_words_value,
                  live_blocks_value,
                  free_words_value,
                  free_blocks_value,
                  largest_free_value,
                  fragments_value,
                  compactions_value,
                  top_heap_words_value,
                  stack_size_value,
                  forced_major_collections_value]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[15],
                 tp_loc$54,
                 sexp,
                 [0,
                  [0,0 === minor_words_field[1]?1:0,cst_minor_words$1],
                  [0,
                   [0,0 === promoted_words_field[1]?1:0,cst_promoted_words$1],
                   [0,
                    [0,0 === major_words_field[1]?1:0,cst_major_words$1],
                    [0,
                     [0,
                      0 === minor_collections_field[1]?1:0,
                      cst_minor_collections$1],
                     [0,
                      [0,
                       0 === major_collections_field[1]?1:0,
                       cst_major_collections$1],
                      [0,
                       [0,0 === heap_words_field[1]?1:0,cst_heap_words$1],
                       [0,
                        [0,0 === heap_chunks_field[1]?1:0,cst_heap_chunks$1],
                        [0,
                         [0,0 === live_words_field[1]?1:0,cst_live_words$1],
                         [0,
                          [0,0 === live_blocks_field[1]?1:0,cst_live_blocks$1],
                          [0,
                           [0,0 === free_words_field[1]?1:0,cst_free_words$1],
                           [0,
                            [0,0 === free_blocks_field[1]?1:0,cst_free_blocks$1],
                            [0,
                             [0,0 === largest_free_field[1]?1:0,cst_largest_free$1],
                             [0,
                              [0,0 === fragments_field[1]?1:0,cst_fragments$1],
                              [0,
                               [0,0 === compactions_field[1]?1:0,cst_compactions$1],
                               [0,
                                [0,0 === top_heap_words_field[1]?1:0,cst_top_heap_words$1],
                                [0,
                                 [0,0 === stack_size_field[1]?1:0,cst_stack_size$1],
                                 [0,
                                  [0,
                                   0 === forced_major_collections_field[1]?1:0,
                                   cst_forced_major_collections$1],
                                  0]]]]]]]]]]]]]]]]])}}
    function sexp_of_t$134(param)
     {var
       v_forced_major_collections=param[17],
       v_stack_size=param[16],
       v_top_heap_words=param[15],
       v_compactions=param[14],
       v_fragments=param[13],
       v_largest_free=param[12],
       v_free_blocks=param[11],
       v_free_words=param[10],
       v_live_blocks=param[9],
       v_live_words=param[8],
       v_heap_chunks=param[7],
       v_heap_words=param[6],
       v_major_collections=param[5],
       v_minor_collections=param[4],
       v_major_words=param[3],
       v_promoted_words=param[2],
       v_minor_words=param[1],
       arg=caml_call1(sexp_of_t$0,v_forced_major_collections),
       bnds=[0,[1,[0,_avb_,[0,arg,0]]],0],
       arg$0=caml_call1(sexp_of_t$0,v_stack_size),
       bnds$0=[0,[1,[0,_avc_,[0,arg$0,0]]],bnds],
       arg$1=caml_call1(sexp_of_t$0,v_top_heap_words),
       bnds$1=[0,[1,[0,_avd_,[0,arg$1,0]]],bnds$0],
       arg$2=caml_call1(sexp_of_t$0,v_compactions),
       bnds$2=[0,[1,[0,_ave_,[0,arg$2,0]]],bnds$1],
       arg$3=caml_call1(sexp_of_t$0,v_fragments),
       bnds$3=[0,[1,[0,_avf_,[0,arg$3,0]]],bnds$2],
       arg$4=caml_call1(sexp_of_t$0,v_largest_free),
       bnds$4=[0,[1,[0,_avg_,[0,arg$4,0]]],bnds$3],
       arg$5=caml_call1(sexp_of_t$0,v_free_blocks),
       bnds$5=[0,[1,[0,_avh_,[0,arg$5,0]]],bnds$4],
       arg$6=caml_call1(sexp_of_t$0,v_free_words),
       bnds$6=[0,[1,[0,_avi_,[0,arg$6,0]]],bnds$5],
       arg$7=caml_call1(sexp_of_t$0,v_live_blocks),
       bnds$7=[0,[1,[0,_avj_,[0,arg$7,0]]],bnds$6],
       arg$8=caml_call1(sexp_of_t$0,v_live_words),
       bnds$8=[0,[1,[0,_avk_,[0,arg$8,0]]],bnds$7],
       arg$9=caml_call1(sexp_of_t$0,v_heap_chunks),
       bnds$9=[0,[1,[0,_avl_,[0,arg$9,0]]],bnds$8],
       arg$10=caml_call1(sexp_of_t$0,v_heap_words),
       bnds$10=[0,[1,[0,_avm_,[0,arg$10,0]]],bnds$9],
       arg$11=caml_call1(sexp_of_t$0,v_major_collections),
       bnds$11=[0,[1,[0,_avn_,[0,arg$11,0]]],bnds$10],
       arg$12=caml_call1(sexp_of_t$0,v_minor_collections),
       bnds$12=[0,[1,[0,_avo_,[0,arg$12,0]]],bnds$11],
       arg$13=caml_call1(_A_,v_major_words),
       bnds$13=[0,[1,[0,_avp_,[0,arg$13,0]]],bnds$12],
       arg$14=caml_call1(_A_,v_promoted_words),
       bnds$14=[0,[1,[0,_avq_,[0,arg$14,0]]],bnds$13],
       arg$15=caml_call1(_A_,v_minor_words),
       bnds$15=[0,[1,[0,_avr_,[0,arg$15,0]]],bnds$14];
      return [1,bnds$15]}
    function forced_major_collections(r){return r[17]}
    function stack_size(r){return r[16]}
    function top_heap_words(r){return r[15]}
    function compactions(r){return r[14]}
    function fragments(r){return r[13]}
    function largest_free(r){return r[12]}
    function free_blocks(r){return r[11]}
    function free_words(r){return r[10]}
    function live_blocks(r){return r[9]}
    function live_words(r){return r[8]}
    function heap_chunks(r){return r[7]}
    function heap_words(r){return r[6]}
    function major_collections(r){return r[5]}
    function minor_collections(r){return r[4]}
    function major_words(r){return r[3]}
    function promoted_words(r){return r[2]}
    function minor_words(r){return r[1]}
    function _avs_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              v]}
    var
     _avt_=0,
     forced_major_collections$0=
      [0,
       function(param){return 0},
       cst_forced_major_collections$2,
       _avt_,
       forced_major_collections,
       _avs_];
    function _avu_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              v,
              r[17]]}
    var
     _avv_=0,
     stack_size$0=
      [0,function(param){return 0},cst_stack_size$2,_avv_,stack_size,_avu_];
    function _avw_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              v,
              r[16],
              r[17]]}
    var
     _avx_=0,
     top_heap_words$0=
      [0,
       function(param){return 0},
       cst_top_heap_words$2,
       _avx_,
       top_heap_words,
       _avw_];
    function _avy_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              v,
              r[15],
              r[16],
              r[17]]}
    var
     _avz_=0,
     compactions$0=
      [0,function(param){return 0},cst_compactions$2,_avz_,compactions,_avy_];
    function _avA_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              v,
              r[14],
              r[15],
              r[16],
              r[17]]}
    var
     _avB_=0,
     fragments$0=
      [0,function(param){return 0},cst_fragments$2,_avB_,fragments,_avA_];
    function _avC_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              v,
              r[13],
              r[14],
              r[15],
              r[16],
              r[17]]}
    var
     _avD_=0,
     largest_free$0=
      [0,
       function(param){return 0},
       cst_largest_free$2,
       _avD_,
       largest_free,
       _avC_];
    function _avE_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              v,
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17]]}
    var
     _avF_=0,
     free_blocks$0=
      [0,function(param){return 0},cst_free_blocks$2,_avF_,free_blocks,_avE_];
    function _avG_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              v,
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17]]}
    var
     _avH_=0,
     free_words$0=
      [0,function(param){return 0},cst_free_words$2,_avH_,free_words,_avG_];
    function _avI_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              v,
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17]]}
    var
     _avJ_=0,
     live_blocks$0=
      [0,function(param){return 0},cst_live_blocks$2,_avJ_,live_blocks,_avI_];
    function _avK_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              v,
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17]]}
    var
     _avL_=0,
     live_words$0=
      [0,function(param){return 0},cst_live_words$2,_avL_,live_words,_avK_];
    function _avM_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              v,
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17]]}
    var
     _avN_=0,
     heap_chunks$0=
      [0,function(param){return 0},cst_heap_chunks$2,_avN_,heap_chunks,_avM_];
    function _avO_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              v,
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17]]}
    var
     _avP_=0,
     heap_words$0=
      [0,function(param){return 0},cst_heap_words$2,_avP_,heap_words,_avO_];
    function _avQ_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              v,
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17]]}
    var
     _avR_=0,
     major_collections$0=
      [0,
       function(param){return 0},
       cst_major_collections$2,
       _avR_,
       major_collections,
       _avQ_];
    function _avS_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              v,
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17]]}
    var
     _avT_=0,
     minor_collections$0=
      [0,
       function(param){return 0},
       cst_minor_collections$2,
       _avT_,
       minor_collections,
       _avS_];
    function _avU_(r,v)
     {return [0,
              r[1],
              r[2],
              v,
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17]]}
    var
     _avV_=0,
     major_words$0=
      [0,function(param){return 0},cst_major_words$2,_avV_,major_words,_avU_];
    function _avW_(r,v)
     {return [0,
              r[1],
              v,
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17]]}
    var
     _avX_=0,
     promoted_words$0=
      [0,
       function(param){return 0},
       cst_promoted_words$2,
       _avX_,
       promoted_words,
       _avW_];
    function _avY_(r,v)
     {return [0,
              v,
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17]]}
    var
     _avZ_=0,
     minor_words$0=
      [0,function(param){return 0},cst_minor_words$2,_avZ_,minor_words,_avY_];
    function make_creator$4
     (minor_words_fun,
      promoted_words_fun,
      major_words_fun,
      minor_collections_fun,
      major_collections_fun,
      heap_words_fun,
      heap_chunks_fun,
      live_words_fun,
      live_blocks_fun,
      free_words_fun,
      free_blocks_fun,
      largest_free_fun,
      fragments_fun,
      compactions_fun,
      top_heap_words_fun,
      stack_size_fun,
      forced_major_collections_fun,
      compile_acc)
     {var
       match=caml_call2(minor_words_fun,minor_words$0,compile_acc),
       compile_acc$0=match[2],
       minor_words_gen=match[1],
       match$0=caml_call2(promoted_words_fun,promoted_words$0,compile_acc$0),
       compile_acc$1=match$0[2],
       promoted_words_gen=match$0[1],
       match$1=caml_call2(major_words_fun,major_words$0,compile_acc$1),
       compile_acc$2=match$1[2],
       major_words_gen=match$1[1],
       match$2=
        caml_call2(minor_collections_fun,minor_collections$0,compile_acc$2),
       compile_acc$3=match$2[2],
       minor_collections_gen=match$2[1],
       match$3=
        caml_call2(major_collections_fun,major_collections$0,compile_acc$3),
       compile_acc$4=match$3[2],
       major_collections_gen=match$3[1],
       match$4=caml_call2(heap_words_fun,heap_words$0,compile_acc$4),
       compile_acc$5=match$4[2],
       heap_words_gen=match$4[1],
       match$5=caml_call2(heap_chunks_fun,heap_chunks$0,compile_acc$5),
       compile_acc$6=match$5[2],
       heap_chunks_gen=match$5[1],
       match$6=caml_call2(live_words_fun,live_words$0,compile_acc$6),
       compile_acc$7=match$6[2],
       live_words_gen=match$6[1],
       match$7=caml_call2(live_blocks_fun,live_blocks$0,compile_acc$7),
       compile_acc$8=match$7[2],
       live_blocks_gen=match$7[1],
       match$8=caml_call2(free_words_fun,free_words$0,compile_acc$8),
       compile_acc$9=match$8[2],
       free_words_gen=match$8[1],
       match$9=caml_call2(free_blocks_fun,free_blocks$0,compile_acc$9),
       compile_acc$10=match$9[2],
       free_blocks_gen=match$9[1],
       match$10=caml_call2(largest_free_fun,largest_free$0,compile_acc$10),
       compile_acc$11=match$10[2],
       largest_free_gen=match$10[1],
       match$11=caml_call2(fragments_fun,fragments$0,compile_acc$11),
       compile_acc$12=match$11[2],
       fragments_gen=match$11[1],
       match$12=caml_call2(compactions_fun,compactions$0,compile_acc$12),
       compile_acc$13=match$12[2],
       compactions_gen=match$12[1],
       match$13=caml_call2(top_heap_words_fun,top_heap_words$0,compile_acc$13),
       compile_acc$14=match$13[2],
       top_heap_words_gen=match$13[1],
       match$14=caml_call2(stack_size_fun,stack_size$0,compile_acc$14),
       compile_acc$15=match$14[2],
       stack_size_gen=match$14[1],
       match$15=
        caml_call2
         (forced_major_collections_fun,
          forced_major_collections$0,
          compile_acc$15),
       compile_acc$16=match$15[2],
       forced_major_collections_gen=match$15[1];
      return [0,
              function(acc)
               {var
                 minor_words=caml_call1(minor_words_gen,acc),
                 promoted_words=caml_call1(promoted_words_gen,acc),
                 major_words=caml_call1(major_words_gen,acc),
                 minor_collections=caml_call1(minor_collections_gen,acc),
                 major_collections=caml_call1(major_collections_gen,acc),
                 heap_words=caml_call1(heap_words_gen,acc),
                 heap_chunks=caml_call1(heap_chunks_gen,acc),
                 live_words=caml_call1(live_words_gen,acc),
                 live_blocks=caml_call1(live_blocks_gen,acc),
                 free_words=caml_call1(free_words_gen,acc),
                 free_blocks=caml_call1(free_blocks_gen,acc),
                 largest_free=caml_call1(largest_free_gen,acc),
                 fragments=caml_call1(fragments_gen,acc),
                 compactions=caml_call1(compactions_gen,acc),
                 top_heap_words=caml_call1(top_heap_words_gen,acc),
                 stack_size=caml_call1(stack_size_gen,acc),
                 forced_major_collections=
                  caml_call1(forced_major_collections_gen,acc);
                return [0,
                        minor_words,
                        promoted_words,
                        major_words,
                        minor_collections,
                        major_collections,
                        heap_words,
                        heap_chunks,
                        live_words,
                        live_blocks,
                        free_words,
                        free_blocks,
                        largest_free,
                        fragments,
                        compactions,
                        top_heap_words,
                        stack_size,
                        forced_major_collections]},
              compile_acc$16]}
    function create$39
     (minor_words,
      promoted_words,
      major_words,
      minor_collections,
      major_collections,
      heap_words,
      heap_chunks,
      live_words,
      live_blocks,
      free_words,
      free_blocks,
      largest_free,
      fragments,
      compactions,
      top_heap_words,
      stack_size,
      forced_major_collections)
     {return [0,
              minor_words,
              promoted_words,
              major_words,
              minor_collections,
              major_collections,
              heap_words,
              heap_chunks,
              live_words,
              live_blocks,
              free_words,
              free_blocks,
              largest_free,
              fragments,
              compactions,
              top_heap_words,
              stack_size,
              forced_major_collections]}
    function map$44
     (minor_words_fun,
      promoted_words_fun,
      major_words_fun,
      minor_collections_fun,
      major_collections_fun,
      heap_words_fun,
      heap_chunks_fun,
      live_words_fun,
      live_blocks_fun,
      free_words_fun,
      free_blocks_fun,
      largest_free_fun,
      fragments_fun,
      compactions_fun,
      top_heap_words_fun,
      stack_size_fun,
      forced_major_collections_fun)
     {var
       _aIT_=
        caml_call1(forced_major_collections_fun,forced_major_collections$0),
       _aIU_=caml_call1(stack_size_fun,stack_size$0),
       _aIV_=caml_call1(top_heap_words_fun,top_heap_words$0),
       _aIW_=caml_call1(compactions_fun,compactions$0),
       _aIX_=caml_call1(fragments_fun,fragments$0),
       _aIY_=caml_call1(largest_free_fun,largest_free$0),
       _aIZ_=caml_call1(free_blocks_fun,free_blocks$0),
       _aI0_=caml_call1(free_words_fun,free_words$0),
       _aI1_=caml_call1(live_blocks_fun,live_blocks$0),
       _aI2_=caml_call1(live_words_fun,live_words$0),
       _aI3_=caml_call1(heap_chunks_fun,heap_chunks$0),
       _aI4_=caml_call1(heap_words_fun,heap_words$0),
       _aI5_=caml_call1(major_collections_fun,major_collections$0),
       _aI6_=caml_call1(minor_collections_fun,minor_collections$0),
       _aI7_=caml_call1(major_words_fun,major_words$0),
       _aI8_=caml_call1(promoted_words_fun,promoted_words$0);
      return [0,
              caml_call1(minor_words_fun,minor_words$0),
              _aI8_,
              _aI7_,
              _aI6_,
              _aI5_,
              _aI4_,
              _aI3_,
              _aI2_,
              _aI1_,
              _aI0_,
              _aIZ_,
              _aIY_,
              _aIX_,
              _aIW_,
              _aIV_,
              _aIU_,
              _aIT_]}
    function iter$35
     (minor_words_fun,
      promoted_words_fun,
      major_words_fun,
      minor_collections_fun,
      major_collections_fun,
      heap_words_fun,
      heap_chunks_fun,
      live_words_fun,
      live_blocks_fun,
      free_words_fun,
      free_blocks_fun,
      largest_free_fun,
      fragments_fun,
      compactions_fun,
      top_heap_words_fun,
      stack_size_fun,
      forced_major_collections_fun)
     {caml_call1(minor_words_fun,minor_words$0);
      caml_call1(promoted_words_fun,promoted_words$0);
      caml_call1(major_words_fun,major_words$0);
      caml_call1(minor_collections_fun,minor_collections$0);
      caml_call1(major_collections_fun,major_collections$0);
      caml_call1(heap_words_fun,heap_words$0);
      caml_call1(heap_chunks_fun,heap_chunks$0);
      caml_call1(live_words_fun,live_words$0);
      caml_call1(live_blocks_fun,live_blocks$0);
      caml_call1(free_words_fun,free_words$0);
      caml_call1(free_blocks_fun,free_blocks$0);
      caml_call1(largest_free_fun,largest_free$0);
      caml_call1(fragments_fun,fragments$0);
      caml_call1(compactions_fun,compactions$0);
      caml_call1(top_heap_words_fun,top_heap_words$0);
      caml_call1(stack_size_fun,stack_size$0);
      return caml_call1
              (forced_major_collections_fun,forced_major_collections$0)}
    function fold$29
     (init,
      minor_words_fun,
      promoted_words_fun,
      major_words_fun,
      minor_collections_fun,
      major_collections_fun,
      heap_words_fun,
      heap_chunks_fun,
      live_words_fun,
      live_blocks_fun,
      free_words_fun,
      free_blocks_fun,
      largest_free_fun,
      fragments_fun,
      compactions_fun,
      top_heap_words_fun,
      stack_size_fun,
      forced_major_collections_fun)
     {return caml_call2
              (forced_major_collections_fun,
               caml_call2
                (stack_size_fun,
                 caml_call2
                  (top_heap_words_fun,
                   caml_call2
                    (compactions_fun,
                     caml_call2
                      (fragments_fun,
                       caml_call2
                        (largest_free_fun,
                         caml_call2
                          (free_blocks_fun,
                           caml_call2
                            (free_words_fun,
                             caml_call2
                              (live_blocks_fun,
                               caml_call2
                                (live_words_fun,
                                 caml_call2
                                  (heap_chunks_fun,
                                   caml_call2
                                    (heap_words_fun,
                                     caml_call2
                                      (major_collections_fun,
                                       caml_call2
                                        (minor_collections_fun,
                                         caml_call2
                                          (major_words_fun,
                                           caml_call2
                                            (promoted_words_fun,
                                             caml_call2(minor_words_fun,init,minor_words$0),
                                             promoted_words$0),
                                           major_words$0),
                                         minor_collections$0),
                                       major_collections$0),
                                     heap_words$0),
                                   heap_chunks$0),
                                 live_words$0),
                               live_blocks$0),
                             free_words$0),
                           free_blocks$0),
                         largest_free$0),
                       fragments$0),
                     compactions$0),
                   top_heap_words$0),
                 stack_size$0),
               forced_major_collections$0)}
    function map_poly$4(record)
     {var
       _aID_=[0,caml_call1(record[1],forced_major_collections$0),0],
       _aIE_=[0,caml_call1(record[1],stack_size$0),_aID_],
       _aIF_=[0,caml_call1(record[1],top_heap_words$0),_aIE_],
       _aIG_=[0,caml_call1(record[1],compactions$0),_aIF_],
       _aIH_=[0,caml_call1(record[1],fragments$0),_aIG_],
       _aII_=[0,caml_call1(record[1],largest_free$0),_aIH_],
       _aIJ_=[0,caml_call1(record[1],free_blocks$0),_aII_],
       _aIK_=[0,caml_call1(record[1],free_words$0),_aIJ_],
       _aIL_=[0,caml_call1(record[1],live_blocks$0),_aIK_],
       _aIM_=[0,caml_call1(record[1],live_words$0),_aIL_],
       _aIN_=[0,caml_call1(record[1],heap_chunks$0),_aIM_],
       _aIO_=[0,caml_call1(record[1],heap_words$0),_aIN_],
       _aIP_=[0,caml_call1(record[1],major_collections$0),_aIO_],
       _aIQ_=[0,caml_call1(record[1],minor_collections$0),_aIP_],
       _aIR_=[0,caml_call1(record[1],major_words$0),_aIQ_],
       _aIS_=[0,caml_call1(record[1],promoted_words$0),_aIR_];
      return [0,caml_call1(record[1],minor_words$0),_aIS_]}
    function for_all$25
     (minor_words_fun,
      promoted_words_fun,
      major_words_fun,
      minor_collections_fun,
      major_collections_fun,
      heap_words_fun,
      heap_chunks_fun,
      live_words_fun,
      live_blocks_fun,
      free_words_fun,
      free_blocks_fun,
      largest_free_fun,
      fragments_fun,
      compactions_fun,
      top_heap_words_fun,
      stack_size_fun,
      forced_major_collections_fun)
     {var
       _aIn_=caml_call1(minor_words_fun,minor_words$0),
       _aIo_=_aIn_?caml_call1(promoted_words_fun,promoted_words$0):_aIn_,
       _aIp_=_aIo_?caml_call1(major_words_fun,major_words$0):_aIo_,
       _aIq_=_aIp_?caml_call1(minor_collections_fun,minor_collections$0):_aIp_,
       _aIr_=_aIq_?caml_call1(major_collections_fun,major_collections$0):_aIq_,
       _aIs_=_aIr_?caml_call1(heap_words_fun,heap_words$0):_aIr_,
       _aIt_=_aIs_?caml_call1(heap_chunks_fun,heap_chunks$0):_aIs_,
       _aIu_=_aIt_?caml_call1(live_words_fun,live_words$0):_aIt_,
       _aIv_=_aIu_?caml_call1(live_blocks_fun,live_blocks$0):_aIu_,
       _aIw_=_aIv_?caml_call1(free_words_fun,free_words$0):_aIv_,
       _aIx_=_aIw_?caml_call1(free_blocks_fun,free_blocks$0):_aIw_,
       _aIy_=_aIx_?caml_call1(largest_free_fun,largest_free$0):_aIx_,
       _aIz_=_aIy_?caml_call1(fragments_fun,fragments$0):_aIy_,
       _aIA_=_aIz_?caml_call1(compactions_fun,compactions$0):_aIz_,
       _aIB_=_aIA_?caml_call1(top_heap_words_fun,top_heap_words$0):_aIA_,
       _aIC_=_aIB_?caml_call1(stack_size_fun,stack_size$0):_aIB_;
      return _aIC_
              ?caml_call1
                (forced_major_collections_fun,forced_major_collections$0)
              :_aIC_}
    function exists$26
     (minor_words_fun,
      promoted_words_fun,
      major_words_fun,
      minor_collections_fun,
      major_collections_fun,
      heap_words_fun,
      heap_chunks_fun,
      live_words_fun,
      live_blocks_fun,
      free_words_fun,
      free_blocks_fun,
      largest_free_fun,
      fragments_fun,
      compactions_fun,
      top_heap_words_fun,
      stack_size_fun,
      forced_major_collections_fun)
     {var
       _aIm_=caml_call1(minor_words_fun,minor_words$0),
       _aH9_=_aIm_ || caml_call1(promoted_words_fun,promoted_words$0),
       _aH__=_aH9_ || caml_call1(major_words_fun,major_words$0),
       _aH$_=_aH__ || caml_call1(minor_collections_fun,minor_collections$0),
       _aIa_=_aH$_ || caml_call1(major_collections_fun,major_collections$0),
       _aIb_=_aIa_ || caml_call1(heap_words_fun,heap_words$0),
       _aIc_=_aIb_ || caml_call1(heap_chunks_fun,heap_chunks$0),
       _aId_=_aIc_ || caml_call1(live_words_fun,live_words$0),
       _aIe_=_aId_ || caml_call1(live_blocks_fun,live_blocks$0),
       _aIf_=_aIe_ || caml_call1(free_words_fun,free_words$0),
       _aIg_=_aIf_ || caml_call1(free_blocks_fun,free_blocks$0),
       _aIh_=_aIg_ || caml_call1(largest_free_fun,largest_free$0),
       _aIi_=_aIh_ || caml_call1(fragments_fun,fragments$0),
       _aIj_=_aIi_ || caml_call1(compactions_fun,compactions$0),
       _aIk_=_aIj_ || caml_call1(top_heap_words_fun,top_heap_words$0),
       _aIl_=_aIk_ || caml_call1(stack_size_fun,stack_size$0);
      return _aIl_
              ?_aIl_
              :caml_call1
                (forced_major_collections_fun,forced_major_collections$0)}
    function to_list$25
     (minor_words_fun,
      promoted_words_fun,
      major_words_fun,
      minor_collections_fun,
      major_collections_fun,
      heap_words_fun,
      heap_chunks_fun,
      live_words_fun,
      live_blocks_fun,
      free_words_fun,
      free_blocks_fun,
      largest_free_fun,
      fragments_fun,
      compactions_fun,
      top_heap_words_fun,
      stack_size_fun,
      forced_major_collections_fun)
     {var
       _aHT_=
        [0,
         caml_call1(forced_major_collections_fun,forced_major_collections$0),
         0],
       _aHU_=[0,caml_call1(stack_size_fun,stack_size$0),_aHT_],
       _aHV_=[0,caml_call1(top_heap_words_fun,top_heap_words$0),_aHU_],
       _aHW_=[0,caml_call1(compactions_fun,compactions$0),_aHV_],
       _aHX_=[0,caml_call1(fragments_fun,fragments$0),_aHW_],
       _aHY_=[0,caml_call1(largest_free_fun,largest_free$0),_aHX_],
       _aHZ_=[0,caml_call1(free_blocks_fun,free_blocks$0),_aHY_],
       _aH0_=[0,caml_call1(free_words_fun,free_words$0),_aHZ_],
       _aH1_=[0,caml_call1(live_blocks_fun,live_blocks$0),_aH0_],
       _aH2_=[0,caml_call1(live_words_fun,live_words$0),_aH1_],
       _aH3_=[0,caml_call1(heap_chunks_fun,heap_chunks$0),_aH2_],
       _aH4_=[0,caml_call1(heap_words_fun,heap_words$0),_aH3_],
       _aH5_=[0,caml_call1(major_collections_fun,major_collections$0),_aH4_],
       _aH6_=[0,caml_call1(minor_collections_fun,minor_collections$0),_aH5_],
       _aH7_=[0,caml_call1(major_words_fun,major_words$0),_aH6_],
       _aH8_=[0,caml_call1(promoted_words_fun,promoted_words$0),_aH7_];
      return [0,caml_call1(minor_words_fun,minor_words$0),_aH8_]}
    function iter$36
     (record,
      minor_words_fun,
      promoted_words_fun,
      major_words_fun,
      minor_collections_fun,
      major_collections_fun,
      heap_words_fun,
      heap_chunks_fun,
      live_words_fun,
      live_blocks_fun,
      free_words_fun,
      free_blocks_fun,
      largest_free_fun,
      fragments_fun,
      compactions_fun,
      top_heap_words_fun,
      stack_size_fun,
      forced_major_collections_fun)
     {caml_call3(minor_words_fun,minor_words$0,record,record[1]);
      caml_call3(promoted_words_fun,promoted_words$0,record,record[2]);
      caml_call3(major_words_fun,major_words$0,record,record[3]);
      caml_call3(minor_collections_fun,minor_collections$0,record,record[4]);
      caml_call3(major_collections_fun,major_collections$0,record,record[5]);
      caml_call3(heap_words_fun,heap_words$0,record,record[6]);
      caml_call3(heap_chunks_fun,heap_chunks$0,record,record[7]);
      caml_call3(live_words_fun,live_words$0,record,record[8]);
      caml_call3(live_blocks_fun,live_blocks$0,record,record[9]);
      caml_call3(free_words_fun,free_words$0,record,record[10]);
      caml_call3(free_blocks_fun,free_blocks$0,record,record[11]);
      caml_call3(largest_free_fun,largest_free$0,record,record[12]);
      caml_call3(fragments_fun,fragments$0,record,record[13]);
      caml_call3(compactions_fun,compactions$0,record,record[14]);
      caml_call3(top_heap_words_fun,top_heap_words$0,record,record[15]);
      caml_call3(stack_size_fun,stack_size$0,record,record[16]);
      return caml_call3
              (forced_major_collections_fun,
               forced_major_collections$0,
               record,
               record[17])}
    function fold$30
     (record,
      init,
      minor_words_fun,
      promoted_words_fun,
      major_words_fun,
      minor_collections_fun,
      major_collections_fun,
      heap_words_fun,
      heap_chunks_fun,
      live_words_fun,
      live_blocks_fun,
      free_words_fun,
      free_blocks_fun,
      largest_free_fun,
      fragments_fun,
      compactions_fun,
      top_heap_words_fun,
      stack_size_fun,
      forced_major_collections_fun)
     {var
       _aHD_=record[17],
       _aHE_=record[16],
       _aHF_=record[15],
       _aHG_=record[14],
       _aHH_=record[13],
       _aHI_=record[12],
       _aHJ_=record[11],
       _aHK_=record[10],
       _aHL_=record[9],
       _aHM_=record[8],
       _aHN_=record[7],
       _aHO_=record[6],
       _aHP_=record[5],
       _aHQ_=record[4],
       _aHR_=record[3],
       _aHS_=record[2];
      return caml_call4
              (forced_major_collections_fun,
               caml_call4
                (stack_size_fun,
                 caml_call4
                  (top_heap_words_fun,
                   caml_call4
                    (compactions_fun,
                     caml_call4
                      (fragments_fun,
                       caml_call4
                        (largest_free_fun,
                         caml_call4
                          (free_blocks_fun,
                           caml_call4
                            (free_words_fun,
                             caml_call4
                              (live_blocks_fun,
                               caml_call4
                                (live_words_fun,
                                 caml_call4
                                  (heap_chunks_fun,
                                   caml_call4
                                    (heap_words_fun,
                                     caml_call4
                                      (major_collections_fun,
                                       caml_call4
                                        (minor_collections_fun,
                                         caml_call4
                                          (major_words_fun,
                                           caml_call4
                                            (promoted_words_fun,
                                             caml_call4
                                              (minor_words_fun,init,minor_words$0,record,record[1]),
                                             promoted_words$0,
                                             record,
                                             _aHS_),
                                           major_words$0,
                                           record,
                                           _aHR_),
                                         minor_collections$0,
                                         record,
                                         _aHQ_),
                                       major_collections$0,
                                       record,
                                       _aHP_),
                                     heap_words$0,
                                     record,
                                     _aHO_),
                                   heap_chunks$0,
                                   record,
                                   _aHN_),
                                 live_words$0,
                                 record,
                                 _aHM_),
                               live_blocks$0,
                               record,
                               _aHL_),
                             free_words$0,
                             record,
                             _aHK_),
                           free_blocks$0,
                           record,
                           _aHJ_),
                         largest_free$0,
                         record,
                         _aHI_),
                       fragments$0,
                       record,
                       _aHH_),
                     compactions$0,
                     record,
                     _aHG_),
                   top_heap_words$0,
                   record,
                   _aHF_),
                 stack_size$0,
                 record,
                 _aHE_),
               forced_major_collections$0,
               record,
               _aHD_)}
    function for_all$26
     (record,
      minor_words_fun,
      promoted_words_fun,
      major_words_fun,
      minor_collections_fun,
      major_collections_fun,
      heap_words_fun,
      heap_chunks_fun,
      live_words_fun,
      live_blocks_fun,
      free_words_fun,
      free_blocks_fun,
      largest_free_fun,
      fragments_fun,
      compactions_fun,
      top_heap_words_fun,
      stack_size_fun,
      forced_major_collections_fun)
     {var
       _aHn_=caml_call3(minor_words_fun,minor_words$0,record,record[1]),
       _aHo_=
        _aHn_
         ?caml_call3(promoted_words_fun,promoted_words$0,record,record[2])
         :_aHn_,
       _aHp_=
        _aHo_?caml_call3(major_words_fun,major_words$0,record,record[3]):_aHo_,
       _aHq_=
        _aHp_
         ?caml_call3
           (minor_collections_fun,minor_collections$0,record,record[4])
         :_aHp_,
       _aHr_=
        _aHq_
         ?caml_call3
           (major_collections_fun,major_collections$0,record,record[5])
         :_aHq_,
       _aHs_=
        _aHr_?caml_call3(heap_words_fun,heap_words$0,record,record[6]):_aHr_,
       _aHt_=
        _aHs_?caml_call3(heap_chunks_fun,heap_chunks$0,record,record[7]):_aHs_,
       _aHu_=
        _aHt_?caml_call3(live_words_fun,live_words$0,record,record[8]):_aHt_,
       _aHv_=
        _aHu_?caml_call3(live_blocks_fun,live_blocks$0,record,record[9]):_aHu_,
       _aHw_=
        _aHv_?caml_call3(free_words_fun,free_words$0,record,record[10]):_aHv_,
       _aHx_=
        _aHw_
         ?caml_call3(free_blocks_fun,free_blocks$0,record,record[11])
         :_aHw_,
       _aHy_=
        _aHx_
         ?caml_call3(largest_free_fun,largest_free$0,record,record[12])
         :_aHx_,
       _aHz_=
        _aHy_?caml_call3(fragments_fun,fragments$0,record,record[13]):_aHy_,
       _aHA_=
        _aHz_
         ?caml_call3(compactions_fun,compactions$0,record,record[14])
         :_aHz_,
       _aHB_=
        _aHA_
         ?caml_call3(top_heap_words_fun,top_heap_words$0,record,record[15])
         :_aHA_,
       _aHC_=
        _aHB_?caml_call3(stack_size_fun,stack_size$0,record,record[16]):_aHB_;
      return _aHC_
              ?caml_call3
                (forced_major_collections_fun,
                 forced_major_collections$0,
                 record,
                 record[17])
              :_aHC_}
    function exists$27
     (record,
      minor_words_fun,
      promoted_words_fun,
      major_words_fun,
      minor_collections_fun,
      major_collections_fun,
      heap_words_fun,
      heap_chunks_fun,
      live_words_fun,
      live_blocks_fun,
      free_words_fun,
      free_blocks_fun,
      largest_free_fun,
      fragments_fun,
      compactions_fun,
      top_heap_words_fun,
      stack_size_fun,
      forced_major_collections_fun)
     {var
       _aHm_=caml_call3(minor_words_fun,minor_words$0,record,record[1]),
       _aG9_=
        _aHm_
        ||
        caml_call3(promoted_words_fun,promoted_words$0,record,record[2]),
       _aG__=
        _aG9_
        ||
        caml_call3(major_words_fun,major_words$0,record,record[3]),
       _aG$_=
        _aG__
        ||
        caml_call3(minor_collections_fun,minor_collections$0,record,record[4]),
       _aHa_=
        _aG$_
        ||
        caml_call3(major_collections_fun,major_collections$0,record,record[5]),
       _aHb_=_aHa_ || caml_call3(heap_words_fun,heap_words$0,record,record[6]),
       _aHc_=
        _aHb_
        ||
        caml_call3(heap_chunks_fun,heap_chunks$0,record,record[7]),
       _aHd_=_aHc_ || caml_call3(live_words_fun,live_words$0,record,record[8]),
       _aHe_=
        _aHd_
        ||
        caml_call3(live_blocks_fun,live_blocks$0,record,record[9]),
       _aHf_=
        _aHe_
        ||
        caml_call3(free_words_fun,free_words$0,record,record[10]),
       _aHg_=
        _aHf_
        ||
        caml_call3(free_blocks_fun,free_blocks$0,record,record[11]),
       _aHh_=
        _aHg_
        ||
        caml_call3(largest_free_fun,largest_free$0,record,record[12]),
       _aHi_=_aHh_ || caml_call3(fragments_fun,fragments$0,record,record[13]),
       _aHj_=
        _aHi_
        ||
        caml_call3(compactions_fun,compactions$0,record,record[14]),
       _aHk_=
        _aHj_
        ||
        caml_call3(top_heap_words_fun,top_heap_words$0,record,record[15]),
       _aHl_=
        _aHk_
        ||
        caml_call3(stack_size_fun,stack_size$0,record,record[16]);
      return _aHl_
              ?_aHl_
              :caml_call3
                (forced_major_collections_fun,
                 forced_major_collections$0,
                 record,
                 record[17])}
    function to_list$26
     (record,
      minor_words_fun,
      promoted_words_fun,
      major_words_fun,
      minor_collections_fun,
      major_collections_fun,
      heap_words_fun,
      heap_chunks_fun,
      live_words_fun,
      live_blocks_fun,
      free_words_fun,
      free_blocks_fun,
      largest_free_fun,
      fragments_fun,
      compactions_fun,
      top_heap_words_fun,
      stack_size_fun,
      forced_major_collections_fun)
     {var
       _aGT_=
        [0,
         caml_call3
          (forced_major_collections_fun,
           forced_major_collections$0,
           record,
           record[17]),
         0],
       _aGU_=
        [0,caml_call3(stack_size_fun,stack_size$0,record,record[16]),_aGT_],
       _aGV_=
        [0,
         caml_call3(top_heap_words_fun,top_heap_words$0,record,record[15]),
         _aGU_],
       _aGW_=
        [0,caml_call3(compactions_fun,compactions$0,record,record[14]),_aGV_],
       _aGX_=[0,caml_call3(fragments_fun,fragments$0,record,record[13]),_aGW_],
       _aGY_=
        [0,
         caml_call3(largest_free_fun,largest_free$0,record,record[12]),
         _aGX_],
       _aGZ_=
        [0,caml_call3(free_blocks_fun,free_blocks$0,record,record[11]),_aGY_],
       _aG0_=
        [0,caml_call3(free_words_fun,free_words$0,record,record[10]),_aGZ_],
       _aG1_=
        [0,caml_call3(live_blocks_fun,live_blocks$0,record,record[9]),_aG0_],
       _aG2_=
        [0,caml_call3(live_words_fun,live_words$0,record,record[8]),_aG1_],
       _aG3_=
        [0,caml_call3(heap_chunks_fun,heap_chunks$0,record,record[7]),_aG2_],
       _aG4_=
        [0,caml_call3(heap_words_fun,heap_words$0,record,record[6]),_aG3_],
       _aG5_=
        [0,
         caml_call3
          (major_collections_fun,major_collections$0,record,record[5]),
         _aG4_],
       _aG6_=
        [0,
         caml_call3
          (minor_collections_fun,minor_collections$0,record,record[4]),
         _aG5_],
       _aG7_=
        [0,caml_call3(major_words_fun,major_words$0,record,record[3]),_aG6_],
       _aG8_=
        [0,
         caml_call3(promoted_words_fun,promoted_words$0,record,record[2]),
         _aG7_];
      return [0,
              caml_call3(minor_words_fun,minor_words$0,record,record[1]),
              _aG8_]}
    function map$45
     (record,
      minor_words_fun,
      promoted_words_fun,
      major_words_fun,
      minor_collections_fun,
      major_collections_fun,
      heap_words_fun,
      heap_chunks_fun,
      live_words_fun,
      live_blocks_fun,
      free_words_fun,
      free_blocks_fun,
      largest_free_fun,
      fragments_fun,
      compactions_fun,
      top_heap_words_fun,
      stack_size_fun,
      forced_major_collections_fun)
     {var
       _aGD_=
        caml_call3
         (forced_major_collections_fun,
          forced_major_collections$0,
          record,
          record[17]),
       _aGE_=caml_call3(stack_size_fun,stack_size$0,record,record[16]),
       _aGF_=caml_call3(top_heap_words_fun,top_heap_words$0,record,record[15]),
       _aGG_=caml_call3(compactions_fun,compactions$0,record,record[14]),
       _aGH_=caml_call3(fragments_fun,fragments$0,record,record[13]),
       _aGI_=caml_call3(largest_free_fun,largest_free$0,record,record[12]),
       _aGJ_=caml_call3(free_blocks_fun,free_blocks$0,record,record[11]),
       _aGK_=caml_call3(free_words_fun,free_words$0,record,record[10]),
       _aGL_=caml_call3(live_blocks_fun,live_blocks$0,record,record[9]),
       _aGM_=caml_call3(live_words_fun,live_words$0,record,record[8]),
       _aGN_=caml_call3(heap_chunks_fun,heap_chunks$0,record,record[7]),
       _aGO_=caml_call3(heap_words_fun,heap_words$0,record,record[6]),
       _aGP_=
        caml_call3(major_collections_fun,major_collections$0,record,record[5]),
       _aGQ_=
        caml_call3(minor_collections_fun,minor_collections$0,record,record[4]),
       _aGR_=caml_call3(major_words_fun,major_words$0,record,record[3]),
       _aGS_=caml_call3(promoted_words_fun,promoted_words$0,record,record[2]);
      return [0,
              caml_call3(minor_words_fun,minor_words$0,record,record[1]),
              _aGS_,
              _aGR_,
              _aGQ_,
              _aGP_,
              _aGO_,
              _aGN_,
              _aGM_,
              _aGL_,
              _aGK_,
              _aGJ_,
              _aGI_,
              _aGH_,
              _aGG_,
              _aGF_,
              _aGE_,
              _aGD_]}
    function set_all_mutable_fields$4(record)
     {caml_call1(Base_Field[1][1],record);return 0}
    var
     Direct$4=
      [0,
       iter$36,
       fold$30,
       for_all$26,
       exists$27,
       to_list$26,
       map$45,
       set_all_mutable_fields$4],
     include$149=Make$2([0,compare$105,t_of_sexp$119,sexp_of_t$134]),
     symbol$235=include$149[1],
     symbol$236=include$149[2],
     symbol$237=include$149[3],
     symbol$238=include$149[4],
     symbol$239=include$149[5],
     symbol$240=include$149[6],
     equal$40=include$149[7],
     compare$106=include$149[8],
     min$17=include$149[9],
     max$17=include$149[10],
     ascending$17=include$149[11],
     descending$17=include$149[12],
     between$17=include$149[13],
     clamp_exn$17=include$149[14],
     clamp$17=include$149[15],
     comparator$27=include$149[16],
     validate_lbound$17=include$149[17],
     validate_ubound$17=include$149[18],
     validate_bound$17=include$149[19],
     Replace_polymorphic_compare$16=include$149[20],
     Map$28=include$149[21],
     Set$28=include$149[22];
    function compare$107(a_007,b_008)
     {if(caml_call2(Ppx_compare_lib[1],a_007,b_008))return 0;
      var n=caml_call2(compare,a_007[1],b_008[1]);
      if(0 === n)
       {var n$0=caml_call2(compare,a_007[2],b_008[2]);
        if(0 === n$0)
         {var n$1=caml_call2(compare,a_007[3],b_008[3]);
          if(0 === n$1)
           {var n$2=caml_call2(compare,a_007[4],b_008[4]);
            if(0 === n$2)
             {var n$3=caml_call2(compare,a_007[5],b_008[5]);
              if(0 === n$3)
               {var n$4=caml_call2(compare,a_007[6],b_008[6]);
                if(0 === n$4)
                 {var n$5=caml_call2(compare,a_007[7],b_008[7]);
                  if(0 === n$5)
                   {var n$6=caml_call2(compare,a_007[8],b_008[8]);
                    if(0 === n$6)
                     {var n$7=caml_call2(compare,a_007[9],b_008[9]);
                      if(0 === n$7)
                       {var n$8=caml_call2(compare,a_007[10],b_008[10]);
                        return 0 === n$8?caml_call2(compare,a_007[11],b_008[11]):n$8}
                      return n$7}
                    return n$6}
                  return n$5}
                return n$4}
              return n$3}
            return n$2}
          return n$1}
        return n$0}
      return n}
    var
     _av0_=
      caml_call1
       (Bin_prot_Shape[8],
        [0,
         [0,cst_minor_heap_size,_co_],
         [0,
          [0,cst_major_heap_increment,_co_],
          [0,
           [0,cst_space_overhead,_co_],
           [0,
            [0,cst_verbose,_co_],
            [0,
             [0,cst_max_overhead,_co_],
             [0,
              [0,cst_stack_limit,_co_],
              [0,
               [0,cst_allocation_policy,_co_],
               [0,
                [0,cst_window_size,_co_],
                [0,
                 [0,cst_custom_major_ratio,_co_],
                 [0,
                  [0,cst_custom_minor_ratio,_co_],
                  [0,[0,cst_custom_minor_max_size,_co_],0]]]]]]]]]]]),
     _av1_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$287),0,_av0_],0],
     _av2_=caml_call1(Bin_prot_Shape[4][1],cst_src_gc_ml_92_4),
     group$156=caml_call2(Bin_prot_Shape[6],_av2_,_av1_),
     _av3_=caml_call1(Bin_prot_Shape[2][1],cst_t$288),
     bin_shape_t$141=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$156,_av3_),0);
    function bin_size_t$97(param)
     {var
       v1=param[1],
       v2=param[2],
       v3=param[3],
       v4=param[4],
       v5=param[5],
       v6=param[6],
       v7=param[7],
       v11=param[11],
       v10=param[10],
       v9=param[9],
       v8=param[8],
       _aGs_=caml_call1(bin_size_t$4,v1),
       size=caml_call2(Bin_prot_Common[23],0,_aGs_),
       _aGt_=caml_call1(bin_size_t$4,v2),
       size$0=caml_call2(Bin_prot_Common[23],size,_aGt_),
       _aGu_=caml_call1(bin_size_t$4,v3),
       size$1=caml_call2(Bin_prot_Common[23],size$0,_aGu_),
       _aGv_=caml_call1(bin_size_t$4,v4),
       size$2=caml_call2(Bin_prot_Common[23],size$1,_aGv_),
       _aGw_=caml_call1(bin_size_t$4,v5),
       size$3=caml_call2(Bin_prot_Common[23],size$2,_aGw_),
       _aGx_=caml_call1(bin_size_t$4,v6),
       size$4=caml_call2(Bin_prot_Common[23],size$3,_aGx_),
       _aGy_=caml_call1(bin_size_t$4,v7),
       size$5=caml_call2(Bin_prot_Common[23],size$4,_aGy_),
       _aGz_=caml_call1(bin_size_t$4,v8),
       size$6=caml_call2(Bin_prot_Common[23],size$5,_aGz_),
       _aGA_=caml_call1(bin_size_t$4,v9),
       size$7=caml_call2(Bin_prot_Common[23],size$6,_aGA_),
       _aGB_=caml_call1(bin_size_t$4,v10),
       size$8=caml_call2(Bin_prot_Common[23],size$7,_aGB_),
       _aGC_=caml_call1(bin_size_t$4,v11);
      return caml_call2(Bin_prot_Common[23],size$8,_aGC_)}
    function bin_write_t$98(buf,pos,param)
     {var
       v1=param[1],
       v2=param[2],
       v3=param[3],
       v4=param[4],
       v5=param[5],
       v6=param[6],
       v7=param[7],
       v11=param[11],
       v10=param[10],
       v9=param[9],
       v8=param[8],
       pos$0=caml_call3(bin_write_t$4,buf,pos,v1),
       pos$1=caml_call3(bin_write_t$4,buf,pos$0,v2),
       pos$2=caml_call3(bin_write_t$4,buf,pos$1,v3),
       pos$3=caml_call3(bin_write_t$4,buf,pos$2,v4),
       pos$4=caml_call3(bin_write_t$4,buf,pos$3,v5),
       pos$5=caml_call3(bin_write_t$4,buf,pos$4,v6),
       pos$6=caml_call3(bin_write_t$4,buf,pos$5,v7),
       pos$7=caml_call3(bin_write_t$4,buf,pos$6,v8),
       pos$8=caml_call3(bin_write_t$4,buf,pos$7,v9),
       pos$9=caml_call3(bin_write_t$4,buf,pos$8,v10);
      return caml_call3(bin_write_t$4,buf,pos$9,v11)}
    var bin_writer_t$116=[0,bin_size_t$97,bin_write_t$98];
    function bin_read_t$193(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_src_gc_ml_Control_T_t,pos_ref[1])}
    function bin_read_t$194(buf,pos_ref)
     {var
       v_minor_heap_size=caml_call2(bin_read_t$9,buf,pos_ref),
       v_major_heap_increment=caml_call2(bin_read_t$9,buf,pos_ref),
       v_space_overhead=caml_call2(bin_read_t$9,buf,pos_ref),
       v_verbose=caml_call2(bin_read_t$9,buf,pos_ref),
       v_max_overhead=caml_call2(bin_read_t$9,buf,pos_ref),
       v_stack_limit=caml_call2(bin_read_t$9,buf,pos_ref),
       v_allocation_policy=caml_call2(bin_read_t$9,buf,pos_ref),
       v_window_size=caml_call2(bin_read_t$9,buf,pos_ref),
       v_custom_major_ratio=caml_call2(bin_read_t$9,buf,pos_ref),
       v_custom_minor_ratio=caml_call2(bin_read_t$9,buf,pos_ref),
       v_custom_minor_max_size=caml_call2(bin_read_t$9,buf,pos_ref);
      return [0,
              v_minor_heap_size,
              v_major_heap_increment,
              v_space_overhead,
              v_verbose,
              v_max_overhead,
              v_stack_limit,
              v_allocation_policy,
              v_window_size,
              v_custom_major_ratio,
              v_custom_minor_ratio,
              v_custom_minor_max_size]}
    var
     bin_reader_t$116=[0,bin_read_t$194,bin_read_t$193],
     bin_t$116=[0,bin_shape_t$141,bin_writer_t$116,bin_reader_t$116];
    function t_of_sexp$120(sexp)
     {if(0 === sexp[0])
       return caml_call2(Sexplib0_Sexp_conv_error[16],tp_loc$55,sexp);
      var
       field_sexps=sexp[1],
       minor_heap_size_field=[0,0],
       major_heap_increment_field=[0,0],
       space_overhead_field=[0,0],
       verbose_field=[0,0],
       max_overhead_field=[0,0],
       stack_limit_field=[0,0],
       allocation_policy_field=[0,0],
       window_size_field=[0,0],
       custom_major_ratio_field=[0,0],
       custom_minor_ratio_field=[0,0],
       custom_minor_max_size_field=[0,0],
       duplicates=[0,0],
       extra=[0,0],
       param=field_sexps;
      for(;;)
       {if(param)
         {var _aGb_=param[1];
          if(1 === _aGb_[0])
           {var _aGc_=_aGb_[1];
            if(_aGc_)
             {var _aGd_=_aGc_[1];
              if(0 === _aGd_[0])
               {var _aGe_=_aGc_[2],_aGf_=_aGd_[1],switch$1=0;
                if(! _aGe_ || ! _aGe_[2])switch$1 = 1;
                if(switch$1)
                 {var
                   tail=param[2],
                   field_sexp$11=
                    function(_aGr_)
                     {function field_sexp(param)
                       {if(_aGr_)
                         {if(_aGr_[2])throw [0,Assert_failure,_av4_];
                          var x=_aGr_[1];
                          return x}
                        return caml_call2
                                (Sexplib0_Sexp_conv_error[10],tp_loc$55,sexp)}
                      return field_sexp},
                   field_sexp=field_sexp$11(_aGe_),
                   switch$0=caml_string_compare(_aGf_,cst_max_overhead$0),
                   switch$2=0;
                  if(0 <= switch$0)
                   if(0 < switch$0)
                    if(caml_string_notequal(_aGf_,cst_minor_heap_size$0))
                     if(caml_string_notequal(_aGf_,cst_space_overhead$0))
                      if(caml_string_notequal(_aGf_,cst_stack_limit$0))
                       if(caml_string_notequal(_aGf_,cst_verbose$0))
                        if(caml_string_notequal(_aGf_,cst_window_size$0))
                         switch$2 = 1;
                        else
                         if(window_size_field[1])
                          duplicates[1] = [0,_aGf_,duplicates[1]];
                         else
                          {var
                            field_sexp$0=field_sexp(0),
                            fvalue=caml_call1(t_of_sexp,field_sexp$0);
                           window_size_field[1] = [0,fvalue]}
                       else
                        if(verbose_field[1])
                         duplicates[1] = [0,_aGf_,duplicates[1]];
                        else
                         {var
                           field_sexp$1=field_sexp(0),
                           fvalue$0=caml_call1(t_of_sexp,field_sexp$1);
                          verbose_field[1] = [0,fvalue$0]}
                      else
                       if(stack_limit_field[1])
                        duplicates[1] = [0,_aGf_,duplicates[1]];
                       else
                        {var
                          field_sexp$2=field_sexp(0),
                          fvalue$1=caml_call1(t_of_sexp,field_sexp$2);
                         stack_limit_field[1] = [0,fvalue$1]}
                     else
                      if(space_overhead_field[1])
                       duplicates[1] = [0,_aGf_,duplicates[1]];
                      else
                       {var
                         field_sexp$3=field_sexp(0),
                         fvalue$2=caml_call1(t_of_sexp,field_sexp$3);
                        space_overhead_field[1] = [0,fvalue$2]}
                    else
                     if(minor_heap_size_field[1])
                      duplicates[1] = [0,_aGf_,duplicates[1]];
                     else
                      {var
                        field_sexp$4=field_sexp(0),
                        fvalue$3=caml_call1(t_of_sexp,field_sexp$4);
                       minor_heap_size_field[1] = [0,fvalue$3]}
                   else
                    if(max_overhead_field[1])
                     duplicates[1] = [0,_aGf_,duplicates[1]];
                    else
                     {var
                       field_sexp$5=field_sexp(0),
                       fvalue$4=caml_call1(t_of_sexp,field_sexp$5);
                      max_overhead_field[1] = [0,fvalue$4]}
                  else
                   if(caml_string_notequal(_aGf_,cst_allocation_policy$0))
                    if(caml_string_notequal(_aGf_,cst_custom_major_ratio$0))
                     if(caml_string_notequal(_aGf_,cst_custom_minor_max_size$0))
                      if(caml_string_notequal(_aGf_,cst_custom_minor_ratio$0))
                       if(caml_string_notequal(_aGf_,cst_major_heap_increment$0))
                        switch$2 = 1;
                       else
                        if(major_heap_increment_field[1])
                         duplicates[1] = [0,_aGf_,duplicates[1]];
                        else
                         {var
                           field_sexp$6=field_sexp(0),
                           fvalue$5=caml_call1(t_of_sexp,field_sexp$6);
                          major_heap_increment_field[1] = [0,fvalue$5]}
                      else
                       if(custom_minor_ratio_field[1])
                        duplicates[1] = [0,_aGf_,duplicates[1]];
                       else
                        {var
                          field_sexp$7=field_sexp(0),
                          fvalue$6=caml_call1(t_of_sexp,field_sexp$7);
                         custom_minor_ratio_field[1] = [0,fvalue$6]}
                     else
                      if(custom_minor_max_size_field[1])
                       duplicates[1] = [0,_aGf_,duplicates[1]];
                      else
                       {var
                         field_sexp$8=field_sexp(0),
                         fvalue$7=caml_call1(t_of_sexp,field_sexp$8);
                        custom_minor_max_size_field[1] = [0,fvalue$7]}
                    else
                     if(custom_major_ratio_field[1])
                      duplicates[1] = [0,_aGf_,duplicates[1]];
                     else
                      {var
                        field_sexp$9=field_sexp(0),
                        fvalue$8=caml_call1(t_of_sexp,field_sexp$9);
                       custom_major_ratio_field[1] = [0,fvalue$8]}
                   else
                    if(allocation_policy_field[1])
                     duplicates[1] = [0,_aGf_,duplicates[1]];
                    else
                     {var
                       field_sexp$10=field_sexp(0),
                       fvalue$9=caml_call1(t_of_sexp,field_sexp$10);
                      allocation_policy_field[1] = [0,fvalue$9]}
                  if(switch$2 && Sexplib0_Sexp_conv[26][1])
                   extra[1] = [0,_aGf_,extra[1]];
                  var param=tail;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[10],tp_loc$55,_aGb_)}
        if(duplicates[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],tp_loc$55,duplicates[1],sexp);
        if(extra[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[13],tp_loc$55,extra[1],sexp);
        var
         _aGg_=minor_heap_size_field[1],
         _aGh_=major_heap_increment_field[1],
         _aGi_=space_overhead_field[1],
         _aGj_=verbose_field[1],
         _aGk_=max_overhead_field[1],
         _aGl_=stack_limit_field[1],
         _aGm_=allocation_policy_field[1],
         _aGn_=window_size_field[1],
         _aGo_=custom_major_ratio_field[1],
         _aGp_=custom_minor_ratio_field[1],
         _aGq_=custom_minor_max_size_field[1];
        if
         (_aGg_
          &&
          _aGh_
          &&
          _aGi_
          &&
          _aGj_
          &&
          _aGk_
          &&
          _aGl_
          &&
          _aGm_
          &&
          _aGn_
          &&
          _aGo_
          &&
          _aGp_
          &&
          _aGq_)
         {var
           custom_minor_max_size_value=_aGq_[1],
           custom_minor_ratio_value=_aGp_[1],
           custom_major_ratio_value=_aGo_[1],
           window_size_value=_aGn_[1],
           allocation_policy_value=_aGm_[1],
           stack_limit_value=_aGl_[1],
           max_overhead_value=_aGk_[1],
           verbose_value=_aGj_[1],
           space_overhead_value=_aGi_[1],
           major_heap_increment_value=_aGh_[1],
           minor_heap_size_value=_aGg_[1];
          return [0,
                  minor_heap_size_value,
                  major_heap_increment_value,
                  space_overhead_value,
                  verbose_value,
                  max_overhead_value,
                  stack_limit_value,
                  allocation_policy_value,
                  window_size_value,
                  custom_major_ratio_value,
                  custom_minor_ratio_value,
                  custom_minor_max_size_value]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[15],
                 tp_loc$55,
                 sexp,
                 [0,
                  [0,0 === minor_heap_size_field[1]?1:0,cst_minor_heap_size$1],
                  [0,
                   [0,
                    0 === major_heap_increment_field[1]?1:0,
                    cst_major_heap_increment$1],
                   [0,
                    [0,0 === space_overhead_field[1]?1:0,cst_space_overhead$1],
                    [0,
                     [0,0 === verbose_field[1]?1:0,cst_verbose$1],
                     [0,
                      [0,0 === max_overhead_field[1]?1:0,cst_max_overhead$1],
                      [0,
                       [0,0 === stack_limit_field[1]?1:0,cst_stack_limit$1],
                       [0,
                        [0,
                         0 === allocation_policy_field[1]?1:0,
                         cst_allocation_policy$1],
                        [0,
                         [0,0 === window_size_field[1]?1:0,cst_window_size$1],
                         [0,
                          [0,
                           0 === custom_major_ratio_field[1]?1:0,
                           cst_custom_major_ratio$1],
                          [0,
                           [0,
                            0 === custom_minor_ratio_field[1]?1:0,
                            cst_custom_minor_ratio$1],
                           [0,
                            [0,
                             0 === custom_minor_max_size_field[1]?1:0,
                             cst_custom_minor_max_size$1],
                            0]]]]]]]]]]])}}
    function sexp_of_t$135(param)
     {var
       v_minor_heap_size=param[1],
       v_major_heap_increment=param[2],
       v_space_overhead=param[3],
       v_verbose=param[4],
       v_max_overhead=param[5],
       v_stack_limit=param[6],
       v_allocation_policy=param[7],
       v_custom_minor_max_size=param[11],
       v_custom_minor_ratio=param[10],
       v_custom_major_ratio=param[9],
       v_window_size=param[8],
       arg=caml_call1(sexp_of_t$0,v_custom_minor_max_size),
       bnds=[0,[1,[0,_av5_,[0,arg,0]]],0],
       arg$0=caml_call1(sexp_of_t$0,v_custom_minor_ratio),
       bnds$0=[0,[1,[0,_av6_,[0,arg$0,0]]],bnds],
       arg$1=caml_call1(sexp_of_t$0,v_custom_major_ratio),
       bnds$1=[0,[1,[0,_av7_,[0,arg$1,0]]],bnds$0],
       arg$2=caml_call1(sexp_of_t$0,v_window_size),
       bnds$2=[0,[1,[0,_av8_,[0,arg$2,0]]],bnds$1],
       arg$3=caml_call1(sexp_of_t$0,v_allocation_policy),
       bnds$3=[0,[1,[0,_av9_,[0,arg$3,0]]],bnds$2],
       arg$4=caml_call1(sexp_of_t$0,v_stack_limit),
       bnds$4=[0,[1,[0,_av__,[0,arg$4,0]]],bnds$3],
       arg$5=caml_call1(sexp_of_t$0,v_max_overhead),
       bnds$5=[0,[1,[0,_av$_,[0,arg$5,0]]],bnds$4],
       arg$6=caml_call1(sexp_of_t$0,v_verbose),
       bnds$6=[0,[1,[0,_awa_,[0,arg$6,0]]],bnds$5],
       arg$7=caml_call1(sexp_of_t$0,v_space_overhead),
       bnds$7=[0,[1,[0,_awb_,[0,arg$7,0]]],bnds$6],
       arg$8=caml_call1(sexp_of_t$0,v_major_heap_increment),
       bnds$8=[0,[1,[0,_awc_,[0,arg$8,0]]],bnds$7],
       arg$9=caml_call1(sexp_of_t$0,v_minor_heap_size),
       bnds$9=[0,[1,[0,_awd_,[0,arg$9,0]]],bnds$8];
      return [1,bnds$9]}
    function custom_minor_max_size(r){return r[11]}
    function custom_minor_ratio(r){return r[10]}
    function custom_major_ratio(r){return r[9]}
    function window_size(r){return r[8]}
    function allocation_policy(r){return r[7]}
    function set_allocation_policy(r,v){r[7] = v;return 0}
    function stack_limit(r){return r[6]}
    function set_stack_limit(r,v){r[6] = v;return 0}
    function max_overhead(r){return r[5]}
    function set_max_overhead(r,v){r[5] = v;return 0}
    function verbose(r){return r[4]}
    function set_verbose(r,v){r[4] = v;return 0}
    function space_overhead(r){return r[3]}
    function set_space_overhead(r,v){r[3] = v;return 0}
    function major_heap_increment(r){return r[2]}
    function set_major_heap_increment(r,v){r[2] = v;return 0}
    function minor_heap_size(r){return r[1]}
    function set_minor_heap_size(r,v){r[1] = v;return 0}
    function _awe_(r,v)
     {return [0,r[1],r[2],r[3],r[4],r[5],r[6],r[7],r[8],r[9],r[10],v]}
    var
     _awf_=0,
     custom_minor_max_size$0=
      [0,
       function(param){return 0},
       cst_custom_minor_max_size$2,
       _awf_,
       custom_minor_max_size,
       _awe_];
    function _awg_(r,v)
     {return [0,r[1],r[2],r[3],r[4],r[5],r[6],r[7],r[8],r[9],v,r[11]]}
    var
     _awh_=0,
     custom_minor_ratio$0=
      [0,
       function(param){return 0},
       cst_custom_minor_ratio$2,
       _awh_,
       custom_minor_ratio,
       _awg_];
    function _awi_(r,v)
     {return [0,r[1],r[2],r[3],r[4],r[5],r[6],r[7],r[8],v,r[10],r[11]]}
    var
     _awj_=0,
     custom_major_ratio$0=
      [0,
       function(param){return 0},
       cst_custom_major_ratio$2,
       _awj_,
       custom_major_ratio,
       _awi_];
    function _awk_(r,v)
     {return [0,r[1],r[2],r[3],r[4],r[5],r[6],r[7],v,r[9],r[10],r[11]]}
    var
     _awl_=0,
     window_size$0=
      [0,function(param){return 0},cst_window_size$2,_awl_,window_size,_awk_];
    function _awm_(r,v)
     {return [0,r[1],r[2],r[3],r[4],r[5],r[6],v,r[8],r[9],r[10],r[11]]}
    var
     _awn_=[0,set_allocation_policy],
     allocation_policy$0=
      [0,
       function(param){return 0},
       cst_allocation_policy$2,
       _awn_,
       allocation_policy,
       _awm_];
    function _awo_(r,v)
     {return [0,r[1],r[2],r[3],r[4],r[5],v,r[7],r[8],r[9],r[10],r[11]]}
    var
     _awp_=[0,set_stack_limit],
     stack_limit$0=
      [0,function(param){return 0},cst_stack_limit$2,_awp_,stack_limit,_awo_];
    function _awq_(r,v)
     {return [0,r[1],r[2],r[3],r[4],v,r[6],r[7],r[8],r[9],r[10],r[11]]}
    var
     _awr_=[0,set_max_overhead],
     max_overhead$0=
      [0,
       function(param){return 0},
       cst_max_overhead$2,
       _awr_,
       max_overhead,
       _awq_];
    function _aws_(r,v)
     {return [0,r[1],r[2],r[3],v,r[5],r[6],r[7],r[8],r[9],r[10],r[11]]}
    var
     _awt_=[0,set_verbose],
     verbose$0=[0,function(param){return 0},cst_verbose$2,_awt_,verbose,_aws_];
    function _awu_(r,v)
     {return [0,r[1],r[2],v,r[4],r[5],r[6],r[7],r[8],r[9],r[10],r[11]]}
    var
     _awv_=[0,set_space_overhead],
     space_overhead$0=
      [0,
       function(param){return 0},
       cst_space_overhead$2,
       _awv_,
       space_overhead,
       _awu_];
    function _aww_(r,v)
     {return [0,r[1],v,r[3],r[4],r[5],r[6],r[7],r[8],r[9],r[10],r[11]]}
    var
     _awx_=[0,set_major_heap_increment],
     major_heap_increment$0=
      [0,
       function(param){return 0},
       cst_major_heap_increment$2,
       _awx_,
       major_heap_increment,
       _aww_];
    function _awy_(r,v)
     {return [0,v,r[2],r[3],r[4],r[5],r[6],r[7],r[8],r[9],r[10],r[11]]}
    var
     _awz_=[0,set_minor_heap_size],
     minor_heap_size$0=
      [0,
       function(param){return 0},
       cst_minor_heap_size$2,
       _awz_,
       minor_heap_size,
       _awy_];
    function make_creator$5
     (minor_heap_size_fun,
      major_heap_increment_fun,
      space_overhead_fun,
      verbose_fun,
      max_overhead_fun,
      stack_limit_fun,
      allocation_policy_fun,
      window_size_fun,
      custom_major_ratio_fun,
      custom_minor_ratio_fun,
      custom_minor_max_size_fun,
      compile_acc)
     {var
       match=caml_call2(minor_heap_size_fun,minor_heap_size$0,compile_acc),
       compile_acc$0=match[2],
       minor_heap_size_gen=match[1],
       match$0=
        caml_call2
         (major_heap_increment_fun,major_heap_increment$0,compile_acc$0),
       compile_acc$1=match$0[2],
       major_heap_increment_gen=match$0[1],
       match$1=caml_call2(space_overhead_fun,space_overhead$0,compile_acc$1),
       compile_acc$2=match$1[2],
       space_overhead_gen=match$1[1],
       match$2=caml_call2(verbose_fun,verbose$0,compile_acc$2),
       compile_acc$3=match$2[2],
       verbose_gen=match$2[1],
       match$3=caml_call2(max_overhead_fun,max_overhead$0,compile_acc$3),
       compile_acc$4=match$3[2],
       max_overhead_gen=match$3[1],
       match$4=caml_call2(stack_limit_fun,stack_limit$0,compile_acc$4),
       compile_acc$5=match$4[2],
       stack_limit_gen=match$4[1],
       match$5=
        caml_call2(allocation_policy_fun,allocation_policy$0,compile_acc$5),
       compile_acc$6=match$5[2],
       allocation_policy_gen=match$5[1],
       match$6=caml_call2(window_size_fun,window_size$0,compile_acc$6),
       compile_acc$7=match$6[2],
       window_size_gen=match$6[1],
       match$7=
        caml_call2(custom_major_ratio_fun,custom_major_ratio$0,compile_acc$7),
       compile_acc$8=match$7[2],
       custom_major_ratio_gen=match$7[1],
       match$8=
        caml_call2(custom_minor_ratio_fun,custom_minor_ratio$0,compile_acc$8),
       compile_acc$9=match$8[2],
       custom_minor_ratio_gen=match$8[1],
       match$9=
        caml_call2
         (custom_minor_max_size_fun,custom_minor_max_size$0,compile_acc$9),
       compile_acc$10=match$9[2],
       custom_minor_max_size_gen=match$9[1];
      return [0,
              function(acc)
               {var
                 minor_heap_size=caml_call1(minor_heap_size_gen,acc),
                 major_heap_increment=caml_call1(major_heap_increment_gen,acc),
                 space_overhead=caml_call1(space_overhead_gen,acc),
                 verbose=caml_call1(verbose_gen,acc),
                 max_overhead=caml_call1(max_overhead_gen,acc),
                 stack_limit=caml_call1(stack_limit_gen,acc),
                 allocation_policy=caml_call1(allocation_policy_gen,acc),
                 window_size=caml_call1(window_size_gen,acc),
                 custom_major_ratio=caml_call1(custom_major_ratio_gen,acc),
                 custom_minor_ratio=caml_call1(custom_minor_ratio_gen,acc),
                 custom_minor_max_size=
                  caml_call1(custom_minor_max_size_gen,acc);
                return [0,
                        minor_heap_size,
                        major_heap_increment,
                        space_overhead,
                        verbose,
                        max_overhead,
                        stack_limit,
                        allocation_policy,
                        window_size,
                        custom_major_ratio,
                        custom_minor_ratio,
                        custom_minor_max_size]},
              compile_acc$10]}
    function create$40
     (minor_heap_size,
      major_heap_increment,
      space_overhead,
      verbose,
      max_overhead,
      stack_limit,
      allocation_policy,
      window_size,
      custom_major_ratio,
      custom_minor_ratio,
      custom_minor_max_size)
     {return [0,
              minor_heap_size,
              major_heap_increment,
              space_overhead,
              verbose,
              max_overhead,
              stack_limit,
              allocation_policy,
              window_size,
              custom_major_ratio,
              custom_minor_ratio,
              custom_minor_max_size]}
    function map$46
     (minor_heap_size_fun,
      major_heap_increment_fun,
      space_overhead_fun,
      verbose_fun,
      max_overhead_fun,
      stack_limit_fun,
      allocation_policy_fun,
      window_size_fun,
      custom_major_ratio_fun,
      custom_minor_ratio_fun,
      custom_minor_max_size_fun)
     {var
       _aF3_=caml_call1(custom_minor_max_size_fun,custom_minor_max_size$0),
       _aF4_=caml_call1(custom_minor_ratio_fun,custom_minor_ratio$0),
       _aF5_=caml_call1(custom_major_ratio_fun,custom_major_ratio$0),
       _aF6_=caml_call1(window_size_fun,window_size$0),
       _aF7_=caml_call1(allocation_policy_fun,allocation_policy$0),
       _aF8_=caml_call1(stack_limit_fun,stack_limit$0),
       _aF9_=caml_call1(max_overhead_fun,max_overhead$0),
       _aF__=caml_call1(verbose_fun,verbose$0),
       _aF$_=caml_call1(space_overhead_fun,space_overhead$0),
       _aGa_=caml_call1(major_heap_increment_fun,major_heap_increment$0);
      return [0,
              caml_call1(minor_heap_size_fun,minor_heap_size$0),
              _aGa_,
              _aF$_,
              _aF__,
              _aF9_,
              _aF8_,
              _aF7_,
              _aF6_,
              _aF5_,
              _aF4_,
              _aF3_]}
    function iter$37
     (minor_heap_size_fun,
      major_heap_increment_fun,
      space_overhead_fun,
      verbose_fun,
      max_overhead_fun,
      stack_limit_fun,
      allocation_policy_fun,
      window_size_fun,
      custom_major_ratio_fun,
      custom_minor_ratio_fun,
      custom_minor_max_size_fun)
     {caml_call1(minor_heap_size_fun,minor_heap_size$0);
      caml_call1(major_heap_increment_fun,major_heap_increment$0);
      caml_call1(space_overhead_fun,space_overhead$0);
      caml_call1(verbose_fun,verbose$0);
      caml_call1(max_overhead_fun,max_overhead$0);
      caml_call1(stack_limit_fun,stack_limit$0);
      caml_call1(allocation_policy_fun,allocation_policy$0);
      caml_call1(window_size_fun,window_size$0);
      caml_call1(custom_major_ratio_fun,custom_major_ratio$0);
      caml_call1(custom_minor_ratio_fun,custom_minor_ratio$0);
      return caml_call1(custom_minor_max_size_fun,custom_minor_max_size$0)}
    function fold$31
     (init,
      minor_heap_size_fun,
      major_heap_increment_fun,
      space_overhead_fun,
      verbose_fun,
      max_overhead_fun,
      stack_limit_fun,
      allocation_policy_fun,
      window_size_fun,
      custom_major_ratio_fun,
      custom_minor_ratio_fun,
      custom_minor_max_size_fun)
     {return caml_call2
              (custom_minor_max_size_fun,
               caml_call2
                (custom_minor_ratio_fun,
                 caml_call2
                  (custom_major_ratio_fun,
                   caml_call2
                    (window_size_fun,
                     caml_call2
                      (allocation_policy_fun,
                       caml_call2
                        (stack_limit_fun,
                         caml_call2
                          (max_overhead_fun,
                           caml_call2
                            (verbose_fun,
                             caml_call2
                              (space_overhead_fun,
                               caml_call2
                                (major_heap_increment_fun,
                                 caml_call2(minor_heap_size_fun,init,minor_heap_size$0),
                                 major_heap_increment$0),
                               space_overhead$0),
                             verbose$0),
                           max_overhead$0),
                         stack_limit$0),
                       allocation_policy$0),
                     window_size$0),
                   custom_major_ratio$0),
                 custom_minor_ratio$0),
               custom_minor_max_size$0)}
    function map_poly$5(record)
     {var
       _aFT_=[0,caml_call1(record[1],custom_minor_max_size$0),0],
       _aFU_=[0,caml_call1(record[1],custom_minor_ratio$0),_aFT_],
       _aFV_=[0,caml_call1(record[1],custom_major_ratio$0),_aFU_],
       _aFW_=[0,caml_call1(record[1],window_size$0),_aFV_],
       _aFX_=[0,caml_call1(record[1],allocation_policy$0),_aFW_],
       _aFY_=[0,caml_call1(record[1],stack_limit$0),_aFX_],
       _aFZ_=[0,caml_call1(record[1],max_overhead$0),_aFY_],
       _aF0_=[0,caml_call1(record[1],verbose$0),_aFZ_],
       _aF1_=[0,caml_call1(record[1],space_overhead$0),_aF0_],
       _aF2_=[0,caml_call1(record[1],major_heap_increment$0),_aF1_];
      return [0,caml_call1(record[1],minor_heap_size$0),_aF2_]}
    function for_all$27
     (minor_heap_size_fun,
      major_heap_increment_fun,
      space_overhead_fun,
      verbose_fun,
      max_overhead_fun,
      stack_limit_fun,
      allocation_policy_fun,
      window_size_fun,
      custom_major_ratio_fun,
      custom_minor_ratio_fun,
      custom_minor_max_size_fun)
     {var
       _aFJ_=caml_call1(minor_heap_size_fun,minor_heap_size$0),
       _aFK_=
        _aFJ_
         ?caml_call1(major_heap_increment_fun,major_heap_increment$0)
         :_aFJ_,
       _aFL_=_aFK_?caml_call1(space_overhead_fun,space_overhead$0):_aFK_,
       _aFM_=_aFL_?caml_call1(verbose_fun,verbose$0):_aFL_,
       _aFN_=_aFM_?caml_call1(max_overhead_fun,max_overhead$0):_aFM_,
       _aFO_=_aFN_?caml_call1(stack_limit_fun,stack_limit$0):_aFN_,
       _aFP_=_aFO_?caml_call1(allocation_policy_fun,allocation_policy$0):_aFO_,
       _aFQ_=_aFP_?caml_call1(window_size_fun,window_size$0):_aFP_,
       _aFR_=
        _aFQ_?caml_call1(custom_major_ratio_fun,custom_major_ratio$0):_aFQ_,
       _aFS_=
        _aFR_?caml_call1(custom_minor_ratio_fun,custom_minor_ratio$0):_aFR_;
      return _aFS_
              ?caml_call1(custom_minor_max_size_fun,custom_minor_max_size$0)
              :_aFS_}
    function exists$28
     (minor_heap_size_fun,
      major_heap_increment_fun,
      space_overhead_fun,
      verbose_fun,
      max_overhead_fun,
      stack_limit_fun,
      allocation_policy_fun,
      window_size_fun,
      custom_major_ratio_fun,
      custom_minor_ratio_fun,
      custom_minor_max_size_fun)
     {var
       _aFI_=caml_call1(minor_heap_size_fun,minor_heap_size$0),
       _aFz_=
        _aFI_
        ||
        caml_call1(major_heap_increment_fun,major_heap_increment$0),
       _aFA_=_aFz_ || caml_call1(space_overhead_fun,space_overhead$0),
       _aFB_=_aFA_ || caml_call1(verbose_fun,verbose$0),
       _aFC_=_aFB_ || caml_call1(max_overhead_fun,max_overhead$0),
       _aFD_=_aFC_ || caml_call1(stack_limit_fun,stack_limit$0),
       _aFE_=_aFD_ || caml_call1(allocation_policy_fun,allocation_policy$0),
       _aFF_=_aFE_ || caml_call1(window_size_fun,window_size$0),
       _aFG_=_aFF_ || caml_call1(custom_major_ratio_fun,custom_major_ratio$0),
       _aFH_=_aFG_ || caml_call1(custom_minor_ratio_fun,custom_minor_ratio$0);
      return _aFH_
              ?_aFH_
              :caml_call1(custom_minor_max_size_fun,custom_minor_max_size$0)}
    function to_list$27
     (minor_heap_size_fun,
      major_heap_increment_fun,
      space_overhead_fun,
      verbose_fun,
      max_overhead_fun,
      stack_limit_fun,
      allocation_policy_fun,
      window_size_fun,
      custom_major_ratio_fun,
      custom_minor_ratio_fun,
      custom_minor_max_size_fun)
     {var
       _aFp_=
        [0,caml_call1(custom_minor_max_size_fun,custom_minor_max_size$0),0],
       _aFq_=[0,caml_call1(custom_minor_ratio_fun,custom_minor_ratio$0),_aFp_],
       _aFr_=[0,caml_call1(custom_major_ratio_fun,custom_major_ratio$0),_aFq_],
       _aFs_=[0,caml_call1(window_size_fun,window_size$0),_aFr_],
       _aFt_=[0,caml_call1(allocation_policy_fun,allocation_policy$0),_aFs_],
       _aFu_=[0,caml_call1(stack_limit_fun,stack_limit$0),_aFt_],
       _aFv_=[0,caml_call1(max_overhead_fun,max_overhead$0),_aFu_],
       _aFw_=[0,caml_call1(verbose_fun,verbose$0),_aFv_],
       _aFx_=[0,caml_call1(space_overhead_fun,space_overhead$0),_aFw_],
       _aFy_=
        [0,caml_call1(major_heap_increment_fun,major_heap_increment$0),_aFx_];
      return [0,caml_call1(minor_heap_size_fun,minor_heap_size$0),_aFy_]}
    function iter$38
     (record,
      minor_heap_size_fun,
      major_heap_increment_fun,
      space_overhead_fun,
      verbose_fun,
      max_overhead_fun,
      stack_limit_fun,
      allocation_policy_fun,
      window_size_fun,
      custom_major_ratio_fun,
      custom_minor_ratio_fun,
      custom_minor_max_size_fun)
     {caml_call3(minor_heap_size_fun,minor_heap_size$0,record,record[1]);
      caml_call3
       (major_heap_increment_fun,major_heap_increment$0,record,record[2]);
      caml_call3(space_overhead_fun,space_overhead$0,record,record[3]);
      caml_call3(verbose_fun,verbose$0,record,record[4]);
      caml_call3(max_overhead_fun,max_overhead$0,record,record[5]);
      caml_call3(stack_limit_fun,stack_limit$0,record,record[6]);
      caml_call3(allocation_policy_fun,allocation_policy$0,record,record[7]);
      caml_call3(window_size_fun,window_size$0,record,record[8]);
      caml_call3(custom_major_ratio_fun,custom_major_ratio$0,record,record[9]);
      caml_call3
       (custom_minor_ratio_fun,custom_minor_ratio$0,record,record[10]);
      return caml_call3
              (custom_minor_max_size_fun,
               custom_minor_max_size$0,
               record,
               record[11])}
    function fold$32
     (record,
      init,
      minor_heap_size_fun,
      major_heap_increment_fun,
      space_overhead_fun,
      verbose_fun,
      max_overhead_fun,
      stack_limit_fun,
      allocation_policy_fun,
      window_size_fun,
      custom_major_ratio_fun,
      custom_minor_ratio_fun,
      custom_minor_max_size_fun)
     {var
       _aFf_=record[11],
       _aFg_=record[10],
       _aFh_=record[9],
       _aFi_=record[8],
       _aFj_=record[7],
       _aFk_=record[6],
       _aFl_=record[5],
       _aFm_=record[4],
       _aFn_=record[3],
       _aFo_=record[2];
      return caml_call4
              (custom_minor_max_size_fun,
               caml_call4
                (custom_minor_ratio_fun,
                 caml_call4
                  (custom_major_ratio_fun,
                   caml_call4
                    (window_size_fun,
                     caml_call4
                      (allocation_policy_fun,
                       caml_call4
                        (stack_limit_fun,
                         caml_call4
                          (max_overhead_fun,
                           caml_call4
                            (verbose_fun,
                             caml_call4
                              (space_overhead_fun,
                               caml_call4
                                (major_heap_increment_fun,
                                 caml_call4
                                  (minor_heap_size_fun,
                                   init,
                                   minor_heap_size$0,
                                   record,
                                   record[1]),
                                 major_heap_increment$0,
                                 record,
                                 _aFo_),
                               space_overhead$0,
                               record,
                               _aFn_),
                             verbose$0,
                             record,
                             _aFm_),
                           max_overhead$0,
                           record,
                           _aFl_),
                         stack_limit$0,
                         record,
                         _aFk_),
                       allocation_policy$0,
                       record,
                       _aFj_),
                     window_size$0,
                     record,
                     _aFi_),
                   custom_major_ratio$0,
                   record,
                   _aFh_),
                 custom_minor_ratio$0,
                 record,
                 _aFg_),
               custom_minor_max_size$0,
               record,
               _aFf_)}
    function for_all$28
     (record,
      minor_heap_size_fun,
      major_heap_increment_fun,
      space_overhead_fun,
      verbose_fun,
      max_overhead_fun,
      stack_limit_fun,
      allocation_policy_fun,
      window_size_fun,
      custom_major_ratio_fun,
      custom_minor_ratio_fun,
      custom_minor_max_size_fun)
     {var
       _aE7_=
        caml_call3(minor_heap_size_fun,minor_heap_size$0,record,record[1]),
       _aE8_=
        _aE7_
         ?caml_call3
           (major_heap_increment_fun,major_heap_increment$0,record,record[2])
         :_aE7_,
       _aE9_=
        _aE8_
         ?caml_call3(space_overhead_fun,space_overhead$0,record,record[3])
         :_aE8_,
       _aE__=_aE9_?caml_call3(verbose_fun,verbose$0,record,record[4]):_aE9_,
       _aE$_=
        _aE__
         ?caml_call3(max_overhead_fun,max_overhead$0,record,record[5])
         :_aE__,
       _aFa_=
        _aE$_?caml_call3(stack_limit_fun,stack_limit$0,record,record[6]):_aE$_,
       _aFb_=
        _aFa_
         ?caml_call3
           (allocation_policy_fun,allocation_policy$0,record,record[7])
         :_aFa_,
       _aFc_=
        _aFb_?caml_call3(window_size_fun,window_size$0,record,record[8]):_aFb_,
       _aFd_=
        _aFc_
         ?caml_call3
           (custom_major_ratio_fun,custom_major_ratio$0,record,record[9])
         :_aFc_,
       _aFe_=
        _aFd_
         ?caml_call3
           (custom_minor_ratio_fun,custom_minor_ratio$0,record,record[10])
         :_aFd_;
      return _aFe_
              ?caml_call3
                (custom_minor_max_size_fun,
                 custom_minor_max_size$0,
                 record,
                 record[11])
              :_aFe_}
    function exists$29
     (record,
      minor_heap_size_fun,
      major_heap_increment_fun,
      space_overhead_fun,
      verbose_fun,
      max_overhead_fun,
      stack_limit_fun,
      allocation_policy_fun,
      window_size_fun,
      custom_major_ratio_fun,
      custom_minor_ratio_fun,
      custom_minor_max_size_fun)
     {var
       _aE6_=
        caml_call3(minor_heap_size_fun,minor_heap_size$0,record,record[1]),
       _aEX_=
        _aE6_
        ||
        caml_call3
         (major_heap_increment_fun,major_heap_increment$0,record,record[2]),
       _aEY_=
        _aEX_
        ||
        caml_call3(space_overhead_fun,space_overhead$0,record,record[3]),
       _aEZ_=_aEY_ || caml_call3(verbose_fun,verbose$0,record,record[4]),
       _aE0_=
        _aEZ_
        ||
        caml_call3(max_overhead_fun,max_overhead$0,record,record[5]),
       _aE1_=
        _aE0_
        ||
        caml_call3(stack_limit_fun,stack_limit$0,record,record[6]),
       _aE2_=
        _aE1_
        ||
        caml_call3(allocation_policy_fun,allocation_policy$0,record,record[7]),
       _aE3_=
        _aE2_
        ||
        caml_call3(window_size_fun,window_size$0,record,record[8]),
       _aE4_=
        _aE3_
        ||
        caml_call3
         (custom_major_ratio_fun,custom_major_ratio$0,record,record[9]),
       _aE5_=
        _aE4_
        ||
        caml_call3
         (custom_minor_ratio_fun,custom_minor_ratio$0,record,record[10]);
      return _aE5_
              ?_aE5_
              :caml_call3
                (custom_minor_max_size_fun,
                 custom_minor_max_size$0,
                 record,
                 record[11])}
    function to_list$28
     (record,
      minor_heap_size_fun,
      major_heap_increment_fun,
      space_overhead_fun,
      verbose_fun,
      max_overhead_fun,
      stack_limit_fun,
      allocation_policy_fun,
      window_size_fun,
      custom_major_ratio_fun,
      custom_minor_ratio_fun,
      custom_minor_max_size_fun)
     {var
       _aEN_=
        [0,
         caml_call3
          (custom_minor_max_size_fun,
           custom_minor_max_size$0,
           record,
           record[11]),
         0],
       _aEO_=
        [0,
         caml_call3
          (custom_minor_ratio_fun,custom_minor_ratio$0,record,record[10]),
         _aEN_],
       _aEP_=
        [0,
         caml_call3
          (custom_major_ratio_fun,custom_major_ratio$0,record,record[9]),
         _aEO_],
       _aEQ_=
        [0,caml_call3(window_size_fun,window_size$0,record,record[8]),_aEP_],
       _aER_=
        [0,
         caml_call3
          (allocation_policy_fun,allocation_policy$0,record,record[7]),
         _aEQ_],
       _aES_=
        [0,caml_call3(stack_limit_fun,stack_limit$0,record,record[6]),_aER_],
       _aET_=
        [0,caml_call3(max_overhead_fun,max_overhead$0,record,record[5]),_aES_],
       _aEU_=[0,caml_call3(verbose_fun,verbose$0,record,record[4]),_aET_],
       _aEV_=
        [0,
         caml_call3(space_overhead_fun,space_overhead$0,record,record[3]),
         _aEU_],
       _aEW_=
        [0,
         caml_call3
          (major_heap_increment_fun,major_heap_increment$0,record,record[2]),
         _aEV_];
      return [0,
              caml_call3
               (minor_heap_size_fun,minor_heap_size$0,record,record[1]),
              _aEW_]}
    function map$47
     (record,
      minor_heap_size_fun,
      major_heap_increment_fun,
      space_overhead_fun,
      verbose_fun,
      max_overhead_fun,
      stack_limit_fun,
      allocation_policy_fun,
      window_size_fun,
      custom_major_ratio_fun,
      custom_minor_ratio_fun,
      custom_minor_max_size_fun)
     {var
       _aED_=
        caml_call3
         (custom_minor_max_size_fun,custom_minor_max_size$0,record,record[11]),
       _aEE_=
        caml_call3
         (custom_minor_ratio_fun,custom_minor_ratio$0,record,record[10]),
       _aEF_=
        caml_call3
         (custom_major_ratio_fun,custom_major_ratio$0,record,record[9]),
       _aEG_=caml_call3(window_size_fun,window_size$0,record,record[8]),
       _aEH_=
        caml_call3(allocation_policy_fun,allocation_policy$0,record,record[7]),
       _aEI_=caml_call3(stack_limit_fun,stack_limit$0,record,record[6]),
       _aEJ_=caml_call3(max_overhead_fun,max_overhead$0,record,record[5]),
       _aEK_=caml_call3(verbose_fun,verbose$0,record,record[4]),
       _aEL_=caml_call3(space_overhead_fun,space_overhead$0,record,record[3]),
       _aEM_=
        caml_call3
         (major_heap_increment_fun,major_heap_increment$0,record,record[2]);
      return [0,
              caml_call3
               (minor_heap_size_fun,minor_heap_size$0,record,record[1]),
              _aEM_,
              _aEL_,
              _aEK_,
              _aEJ_,
              _aEI_,
              _aEH_,
              _aEG_,
              _aEF_,
              _aEE_,
              _aED_]}
    function set_all_mutable_fields$5
     (record,
      minor_heap_size,
      major_heap_increment,
      space_overhead,
      verbose,
      max_overhead,
      stack_limit,
      allocation_policy)
     {var record$0=caml_call1(Base_Field[1][1],record);
      record$0[1] = minor_heap_size;
      record$0[2] = major_heap_increment;
      record$0[3] = space_overhead;
      record$0[4] = verbose;
      record$0[5] = max_overhead;
      record$0[6] = stack_limit;
      record$0[7] = allocation_policy;
      return 0}
    var
     Direct$5=
      [0,
       iter$38,
       fold$32,
       for_all$28,
       exists$29,
       to_list$28,
       map$47,
       set_all_mutable_fields$5],
     include$150=Make$2([0,compare$107,t_of_sexp$120,sexp_of_t$135]),
     symbol$241=include$150[1],
     symbol$242=include$150[2],
     symbol$243=include$150[3],
     symbol$244=include$150[4],
     symbol$245=include$150[5],
     symbol$246=include$150[6],
     equal$41=include$150[7],
     compare$108=include$150[8],
     min$18=include$150[9],
     max$18=include$150[10],
     ascending$18=include$150[11],
     descending$18=include$150[12],
     between$18=include$150[13],
     clamp_exn$18=include$150[14],
     clamp$18=include$150[15],
     comparator$28=include$150[16],
     validate_lbound$18=include$150[17],
     validate_ubound$18=include$150[18],
     validate_bound$18=include$150[19],
     Replace_polymorphic_compare$17=include$150[20],
     Map$29=include$150[21],
     Set$29=include$150[22];
    function to_int$8(param)
     {switch(param){case 0:return 0;case 1:return 1;default:return 2}}
    function tune
     (logger,
      minor_heap_size,
      major_heap_increment,
      space_overhead,
      verbose,
      max_overhead,
      stack_limit,
      allocation_policy,
      window_size,
      custom_major_ratio,
      custom_minor_ratio,
      custom_minor_max_size,
      param)
     {var old_control_params=runtime.caml_gc_get(0);
      function f(opt,to_string,field)
       {var old_value=caml_call2(Base_Field[3],field,old_control_params);
        if(opt)
         {var new_value=opt[1];
          caml_call2
           (_xC_,
            logger,
            function(f)
             {var
               _aEB_=caml_call1(to_string,new_value),
               _aEC_=caml_call1(to_string,old_value);
              return caml_call5
                      (_fy_,f,_awA_,caml_call1(Base_Field[2],field),_aEC_,_aEB_)});
          return new_value}
        return old_value}
      var
       allocation_policy$0=caml_call2(_xW_,allocation_policy,to_int$8),
       _aD7_=Stdlib[33];
      function _aD8_(_aEA_){return f(custom_minor_max_size,_aD7_,_aEA_)}
      var _aD9_=Stdlib[33];
      function _aD__(_aEz_){return f(custom_minor_ratio,_aD9_,_aEz_)}
      var _aD$_=Stdlib[33];
      function _aEa_(_aEy_){return f(custom_major_ratio,_aD$_,_aEy_)}
      var _aEb_=Stdlib[33];
      function _aEc_(_aEx_){return f(window_size,_aEb_,_aEx_)}
      var _aEd_=Stdlib[33];
      function _aEe_(_aEw_){return f(allocation_policy$0,_aEd_,_aEw_)}
      var _aEf_=Stdlib[33];
      function _aEg_(_aEv_){return f(stack_limit,_aEf_,_aEv_)}
      var _aEh_=Stdlib[33];
      function _aEi_(_aEu_){return f(max_overhead,_aEh_,_aEu_)}
      var _aEj_=Stdlib[33];
      function _aEk_(_aEt_){return f(verbose,_aEj_,_aEt_)}
      var _aEl_=Stdlib[33];
      function _aEm_(_aEs_){return f(space_overhead,_aEl_,_aEs_)}
      var _aEn_=Stdlib[33];
      function _aEo_(_aEr_){return f(major_heap_increment,_aEn_,_aEr_)}
      var
       _aEp_=Stdlib[33],
       new_control_params=
        map$46
         (function(_aEq_){return f(minor_heap_size,_aEp_,_aEq_)},
          _aEo_,
          _aEm_,
          _aEk_,
          _aEi_,
          _aEg_,
          _aEe_,
          _aEc_,
          _aEa_,
          _aD__,
          _aD8_);
      return runtime.caml_gc_set(new_control_params)}
    function disable_compaction(logger,allocation_policy,param)
     {if(typeof allocation_policy === "number")
       var allocation_policy$0=0;
      else
       var policy=allocation_policy[2],allocation_policy$0=[0,policy];
      return tune(logger,0,0,0,0,_awB_,0,allocation_policy$0,0,0,0,0,0)}
    var zero$7=runtime.caml_int_of_string(cst_0);
    function keep_alive(o)
     {for(;;)
       {var _aD6_=caml_call2(_a4_,zero$7,0);if(_aD6_)continue;return _aD6_}}
    function prepare_heap_to_count_minor_al(param)
     {runtime.caml_gc_minor(0);return 0}
    function measure_internal(on_result,f)
     {var
       minor_words_before=runtime.core_kernel_gc_minor_words(0),
       major_words_before=runtime.core_kernel_gc_major_words(0),
       x=caml_call1(f,0),
       minor_words_after=runtime.core_kernel_gc_minor_words(0),
       major_words_after=runtime.core_kernel_gc_major_words(0),
       major_words_allocated=
        caml_call2(_aK_,major_words_after,major_words_before),
       minor_words_allocated=
        caml_call2(_aK_,minor_words_after,minor_words_before);
      return caml_call3
              (on_result,major_words_allocated,minor_words_allocated,x)}
    function is_zero_alloc(f)
     {return measure_internal
              (function(major_words_allocated,minor_words_allocated,value)
                {var
                  _aD4_=0 === major_words_allocated?1:0,
                  _aD5_=_aD4_?0 === minor_words_allocated?1:0:_aD4_;
                 return _aD5_},
               f)}
    function measure_allocation(f)
     {prepare_heap_to_count_minor_al(0);
      return measure_internal
              (function(major_words_allocated,minor_words_allocated,x)
                {return [0,x,[0,major_words_allocated,minor_words_allocated]]},
               f)}
    function add_finalizer(x,f)
     {try
       {var
         _aD0_=
          function(x)
           {function _aD3_(param){return caml_call1(f,x)}
            return caml_call1(Base_Exn[14],_aD3_)},
         _aD1_=caml_call2(include$148[3],_aD0_,x);
        return _aD1_}
      catch(_aD2_)
       {_aD2_ = caml_wrap_exception(_aD2_);
        if(_aD2_[1] === Stdlib[6])return 0;
        throw _aD2_}}
    function add_finalizer_exn(x,f)
     {try
       {var
         _aDW_=
          function(x)
           {function _aDZ_(param){return caml_call1(f,x)}
            return caml_call1(Base_Exn[14],_aDZ_)},
         _aDX_=caml_call2(include$148[3],_aDW_,x);
        return _aDX_}
      catch(_aDY_)
       {_aDY_ = caml_wrap_exception(_aDY_);
        if(_aDY_[1] === Stdlib[6]){create$38(x);return 0}
        throw _aDY_}}
    function add_finalizer_last(x,f)
     {try
       {var
         _aDT_=function(param){return caml_call1(Base_Exn[14],f)},
         _aDU_=caml_call2(include$148[4],_aDT_,x);
        return _aDU_}
      catch(_aDV_)
       {_aDV_ = caml_wrap_exception(_aDV_);
        if(_aDV_[1] === Stdlib[6])return 0;
        throw _aDV_}}
    function add_finalizer_last_exn(x,f)
     {try
       {var
         _aDQ_=function(param){return caml_call1(Base_Exn[14],f)},
         _aDR_=caml_call2(include$148[4],_aDQ_,x);
        return _aDR_}
      catch(_aDS_)
       {_aDS_ = caml_wrap_exception(_aDS_);
        if(_aDS_[1] === Stdlib[6]){create$38(x);return 0}
        throw _aDS_}}
    var finalize_release=include$148[5];
    function sexp_of_t$136(param){return caml_call1(_au_,cst_gc_alarm)}
    function create$41(f)
     {return caml_call1
              (create_alarm,
               function(param){return caml_call1(Base_Exn[14],f)})}
    var
     Alarm=[0,sexp_of_t$136,create$41,delete_alarm],
     Expert=
      [0,
       add_finalizer,
       add_finalizer_exn,
       add_finalizer_last,
       add_finalizer_last_exn,
       finalize_release,
       Alarm];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$460);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Gc$0);
    var
     Core_kernel_Gc=
      [0,
       [0,
        bin_size_t$96,
        bin_write_t$97,
        bin_read_t$192,
        bin_read_t$191,
        bin_shape_t$140,
        bin_writer_t$115,
        bin_reader_t$115,
        bin_t$115,
        t_of_sexp$119,
        sexp_of_t$134,
        forced_major_collections,
        stack_size,
        top_heap_words,
        compactions,
        fragments,
        largest_free,
        free_blocks,
        free_words,
        live_blocks,
        live_words,
        heap_chunks,
        heap_words,
        major_collections,
        minor_collections,
        major_words,
        promoted_words,
        minor_words,
        [0,
         names$5,
         forced_major_collections$0,
         stack_size$0,
         top_heap_words$0,
         compactions$0,
         fragments$0,
         largest_free$0,
         free_blocks$0,
         free_words$0,
         live_blocks$0,
         live_words$0,
         heap_chunks$0,
         heap_words$0,
         major_collections$0,
         minor_collections$0,
         major_words$0,
         promoted_words$0,
         minor_words$0,
         fold$29,
         make_creator$4,
         create$39,
         map$44,
         iter$35,
         for_all$25,
         exists$26,
         to_list$25,
         map_poly$4,
         Direct$4],
        symbol$235,
        symbol$236,
        symbol$237,
        symbol$238,
        symbol$239,
        symbol$240,
        equal$40,
        compare$106,
        min$17,
        max$17,
        ascending$17,
        descending$17,
        between$17,
        clamp_exn$17,
        clamp$17,
        comparator$27,
        validate_lbound$17,
        validate_ubound$17,
        validate_bound$17,
        Replace_polymorphic_compare$16,
        Map$28,
        Set$28],
       [0,
        bin_size_t$97,
        bin_write_t$98,
        bin_read_t$194,
        bin_read_t$193,
        bin_shape_t$141,
        bin_writer_t$116,
        bin_reader_t$116,
        bin_t$116,
        t_of_sexp$120,
        sexp_of_t$135,
        custom_minor_max_size,
        custom_minor_ratio,
        custom_major_ratio,
        window_size,
        allocation_policy,
        set_allocation_policy,
        stack_limit,
        set_stack_limit,
        max_overhead,
        set_max_overhead,
        verbose,
        set_verbose,
        space_overhead,
        set_space_overhead,
        major_heap_increment,
        set_major_heap_increment,
        minor_heap_size,
        set_minor_heap_size,
        [0,
         names$6,
         custom_minor_max_size$0,
         custom_minor_ratio$0,
         custom_major_ratio$0,
         window_size$0,
         allocation_policy$0,
         stack_limit$0,
         max_overhead$0,
         verbose$0,
         space_overhead$0,
         major_heap_increment$0,
         minor_heap_size$0,
         fold$31,
         make_creator$5,
         create$40,
         map$46,
         iter$37,
         for_all$27,
         exists$28,
         to_list$27,
         map_poly$5,
         Direct$5],
        symbol$241,
        symbol$242,
        symbol$243,
        symbol$244,
        symbol$245,
        symbol$246,
        equal$41,
        compare$108,
        min$18,
        max$18,
        ascending$18,
        descending$18,
        between$18,
        clamp_exn$18,
        clamp$18,
        comparator$28,
        validate_lbound$18,
        validate_ubound$18,
        validate_bound$18,
        Replace_polymorphic_compare$17,
        Map$29,
        Set$29],
       print_stat,
       allocated_bytes,
       keep_alive,
       [0,
        compare$104,
        equal$39,
        hash_fold_t$46,
        hash$53,
        t_of_sexp$118,
        sexp_of_t$133],
       tune,
       disable_compaction,
       [0,[0],measure_allocation,is_zero_alloc,prepare_heap_to_count_minor_al],
       Expert,
       [0,
        [0,
         [0,
          bin_size_t$95,
          bin_write_t$96,
          bin_read_t$190,
          bin_read_t$189,
          bin_shape_t$139,
          bin_writer_t$114,
          bin_reader_t$114,
          bin_t$114,
          compare$104,
          equal$39,
          hash_fold_t$46,
          hash$53,
          t_of_sexp$118,
          sexp_of_t$133]]]];
    caml_register_global(5158,Core_kernel_Gc,"Core_kernel__Gc");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Make_stable);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$461);
    caml_call1(Expect_test_collector[4][1],cst_src_make_stable_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$462,cst$252);
    function V1$14(Stable_format,M)
     {var
       compare=M[1],
       to_binable=M[2],
       of_binable=M[3],
       _aDP_=
        caml_call1
         (caml_call1(Stable[1][1],[0,Stable_format[9],Stable_format[10]]),
          [0,to_binable,of_binable]),
       t_of_sexp=_aDP_[1],
       sexp_of_t=_aDP_[2],
       include=
        caml_call1
         (caml_call1
           (Stable$0[1][1],
            [0,
             Stable_format[5],
             Stable_format[1],
             Stable_format[2],
             Stable_format[3],
             Stable_format[4]]),
          [0,to_binable,of_binable]),
       bin_size_t=include[1],
       bin_write_t=include[2],
       bin_read_t=include[3],
       bin_read_t$0=include[4],
       bin_shape_t=include[5],
       bin_writer_t=include[6],
       bin_reader_t=include[7],
       bin_t=include[8],
       include$0=caml_call1(_hc_[1][2],[0,compare,sexp_of_t]),
       comparator=include$0[1];
      return [0,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t,
              compare,
              t_of_sexp,
              sexp_of_t,
              comparator]}
    var Of_stable_format=[0,V1$14];
    function V1$15(Stable_format,M)
     {var
       compare=M[1],
       map=M[2],
       to_stable_format=M[3],
       of_stable_format=M[4],
       _aDO_=
        caml_call1
         (caml_call1(Stable[2][1],[0,Stable_format[9],Stable_format[10]]),
          [0,to_stable_format,of_stable_format]),
       t_of_sexp=_aDO_[1],
       sexp_of_t=_aDO_[2],
       include=
        caml_call1
         (caml_call1
           (Stable$0[2][1],
            [0,
             Stable_format[1],
             Stable_format[2],
             Stable_format[3],
             Stable_format[4],
             Stable_format[5]]),
          [0,to_stable_format,of_stable_format]),
       bin_shape_t=include[1],
       bin_size_t=include[2],
       bin_write_t=include[3],
       bin_read_t=include[4],
       bin_read_t$0=include[5],
       bin_writer_t=include[6],
       bin_reader_t=include[7],
       bin_t=include[8];
      return [0,
              bin_shape_t,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_writer_t,
              bin_reader_t,
              bin_t,
              compare,
              t_of_sexp,
              sexp_of_t,
              map]}
    var Of_stable_format1=[0,V1$15];
    function V1$16(Stable_format,M)
     {var
       compare=M[1],
       map=M[2],
       to_stable_format=M[3],
       of_stable_format=M[4],
       _aDN_=
        caml_call1
         (caml_call1(Stable[3][1],[0,Stable_format[9],Stable_format[10]]),
          [0,to_stable_format,of_stable_format]),
       t_of_sexp=_aDN_[1],
       sexp_of_t=_aDN_[2],
       include=
        caml_call1
         (caml_call1
           (Stable$0[3][1],
            [0,
             Stable_format[1],
             Stable_format[2],
             Stable_format[3],
             Stable_format[4],
             Stable_format[5]]),
          [0,to_stable_format,of_stable_format]),
       bin_shape_t=include[1],
       bin_size_t=include[2],
       bin_write_t=include[3],
       bin_read_t=include[4],
       bin_read_t$0=include[5],
       bin_writer_t=include[6],
       bin_reader_t=include[7],
       bin_t=include[8];
      return [0,
              bin_shape_t,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_writer_t,
              bin_reader_t,
              bin_t,
              compare,
              t_of_sexp,
              sexp_of_t,
              map]}
    var Of_stable_format2=[0,V1$16];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$463);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Make_stable$0);
    var
     Core_kernel_Make_stable=
      [0,Of_stable_format,Of_stable_format1,Of_stable_format2];
    caml_register_global
     (5159,Core_kernel_Make_stable,"Core_kernel__Make_stable");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Queue);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$464);
    caml_call1(Expect_test_collector[4][1],cst_src_queue_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$465,cst$253);
    var
     compare$109=include$151[1],
     t_of_sexp$121=include$151[2],
     sexp_of_t$137=include$151[3],
     mem$16=include$151[4],
     length$22=include$151[5],
     is_empty$18=include$151[6],
     iter$39=include$151[7],
     fold$33=include$151[8],
     fold_result$10=include$151[9],
     fold_until$10=include$151[10],
     exists$30=include$151[11],
     for_all$29=include$151[12],
     count$15=include$151[13],
     sum$11=include$151[14],
     find$18=include$151[15],
     find_map$10=include$151[16],
     to_list$29=include$151[17],
     to_array$11=include$151[18],
     min_elt$15=include$151[19],
     max_elt$15=include$151[20],
     foldi$1=include$151[21],
     iteri$7=include$151[22],
     existsi$5=include$151[23],
     for_alli$5=include$151[24],
     counti$5=include$151[25],
     findi$0=include$151[26],
     find_mapi$0=include$151[27],
     singleton$12=include$151[28],
     of_list$13=include$151[29],
     of_array$5=include$151[30],
     init$7=include$151[31],
     enqueue$1=include$151[32],
     enqueue_all=include$151[33],
     dequeue$1=include$151[34],
     dequeue_exn$1=include$151[35],
     peek$0=include$151[36],
     peek_exn$0=include$151[37],
     clear$3=include$151[38],
     copy$5=include$151[39],
     map$48=include$151[40],
     mapi$6=include$151[41],
     concat_map$0=include$151[42],
     concat_mapi$0=include$151[43],
     filter_map$12=include$151[44],
     filter_mapi$6=include$151[45],
     filter$13=include$151[46],
     filteri$6=include$151[47],
     filter_inplace$2=include$151[48],
     filteri_inplace$1=include$151[49],
     equal$42=include$151[50],
     invariant$18=include$151[51],
     create$42=include$151[52],
     last$1=include$151[53],
     last_exn=include$151[54],
     blit_transfer=include$151[55],
     get$6=include$151[56],
     set$13=include$151[57],
     capacity$0=include$151[58],
     set_capacity$0=include$151[59];
    function of_array$6(a)
     {var
       r=caml_call2(create$42,0,0),
       _aDI_=caml_call2(_aK_,caml_call1(length,a),1),
       _aDH_=0;
      if(! (_aDI_ < 0))
       {var i$0=_aDH_;
        for(;;)
         {caml_call2(enqueue$1,r,caml_check_bound(a,i$0)[1 + i$0]);
          var _aDM_=i$0 + 1 | 0;
          if(_aDI_ !== i$0){var i$0=_aDM_;continue}
          break}}
      var _aDK_=caml_call2(_aK_,caml_call1(length,a),1),_aDJ_=0;
      if(! (_aDK_ < 0))
       {var i=_aDJ_;
        for(;;)
         {caml_call1(dequeue_exn$1,r);
          caml_call2(enqueue$1,r,caml_check_bound(a,i)[1 + i]);
          var _aDL_=i + 1 | 0;
          if(_aDK_ !== i){var i=_aDL_;continue}
          break}}
      return r}
    var
     For_test=[0,of_array$6],
     include$152=
      caml_call1
       (Base_for_tests_Test_binary_sea[4],[0,get$6,length$22,For_test]),
     _awC_=include$152[1],
     _awD_=include$152[2],
     _awE_=caml_call1(Bin_prot_Shape[3][1],cst_a$105),
     _awF_=caml_call1(Bin_prot_Shape[4][1],cst_src_queue_ml_34_19),
     _awG_=caml_call2(Bin_prot_Shape[15],_awF_,_awE_),
     _awH_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$106),0],
     _awI_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_el$15),_awH_,_awG_],0],
     _awJ_=caml_call1(Bin_prot_Shape[4][1],cst_src_queue_ml_34_6),
     group$157=caml_call2(Bin_prot_Shape[6],_awJ_,_awI_);
    function bin_shape_el$3(a)
     {var _aDG_=caml_call1(Bin_prot_Shape[2][1],cst_el$16);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$157,_aDG_),[0,a,0])}
    function bin_size_el$3(size_of_a){return size_of_a}
    function bin_write_el$3(write_a){return write_a}
    function bin_read_el$3(of_a){return of_a}
    var
     caller_identity$3=
      caml_call1(Bin_prot_Shape[5][1],cst_b4c84254_4992_11e6_9ba7_73);
    function init$8(len,next)
     {return caml_call2(init$7,len,function(param){return caml_call1(next,0)})}
    var
     include$153=
      caml_call1
       (Bin_prot_Utils[16],
        [0,
         caller_identity$3,
         module_name$16,
         length$22,
         iter$39,
         init$8,
         bin_size_el$3,
         bin_write_el$3,
         bin_read_el$3,
         bin_shape_el$3]),
     bin_shape_t$142=include$153[1],
     bin_size_t$98=include$153[2],
     bin_write_t$99=include$153[3],
     bin_read_t$195=include$153[4],
     bin_read_t$196=include$153[5],
     bin_writer_t$117=include$153[6],
     bin_reader_t$117=include$153[7],
     bin_t$117=include$153[8];
    function compare$110(cmp_a,a_001,b_002)
     {return caml_call3
              (compare$109,
               function(a_003,b_004){return caml_call2(cmp_a,a_003,b_004)},
               a_001,
               b_002)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$466);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Queue$0);
    var
     Core_kernel_Queue=
      [0,
       bin_shape_t$142,
       bin_size_t$98,
       bin_write_t$99,
       bin_read_t$195,
       bin_read_t$196,
       bin_writer_t$117,
       bin_reader_t$117,
       bin_t$117,
       compare$109,
       t_of_sexp$121,
       sexp_of_t$137,
       mem$16,
       length$22,
       is_empty$18,
       iter$39,
       fold$33,
       fold_result$10,
       fold_until$10,
       exists$30,
       for_all$29,
       count$15,
       sum$11,
       find$18,
       find_map$10,
       to_list$29,
       to_array$11,
       min_elt$15,
       max_elt$15,
       foldi$1,
       iteri$7,
       existsi$5,
       for_alli$5,
       counti$5,
       findi$0,
       find_mapi$0,
       singleton$12,
       of_list$13,
       of_array$5,
       init$7,
       enqueue$1,
       enqueue_all,
       dequeue$1,
       dequeue_exn$1,
       peek$0,
       peek_exn$0,
       clear$3,
       copy$5,
       map$48,
       mapi$6,
       concat_map$0,
       concat_mapi$0,
       filter_map$12,
       filter_mapi$6,
       filter$13,
       filteri$6,
       filter_inplace$2,
       filteri_inplace$1,
       equal$42,
       invariant$18,
       create$42,
       last$1,
       last_exn,
       blit_transfer,
       get$6,
       set$13,
       capacity$0,
       set_capacity$0,
       _awC_,
       _awD_,
       [0,
        [0,
         bin_shape_t$142,
         bin_size_t$98,
         bin_write_t$99,
         bin_read_t$195,
         bin_read_t$196,
         bin_writer_t$117,
         bin_reader_t$117,
         bin_t$117,
         compare$110,
         t_of_sexp$121,
         sexp_of_t$137,
         map$48]]];
    caml_register_global(5162,Core_kernel_Queue,"Core_kernel__Queue");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Stable);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$467);
    caml_call1(Expect_test_collector[4][1],cst_src_stable_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$468,cst$254);
    var
     _awK_=_ha_[2],
     _axD_=Ppx_compare_lib[4],
     _awL_=_awK_[1],
     _awM_=_awK_[2],
     _awN_=_awK_[3],
     _awO_=_awK_[4],
     _awP_=_awK_[5],
     _awQ_=_awK_[6],
     _awR_=_awK_[7],
     _awS_=_awK_[8],
     _awT_=_awK_[9],
     _awU_=_awK_[10],
     _awV_=_awK_[11],
     _awW_=_awK_[12],
     _awX_=_awK_[13],
     _awY_=_awK_[14],
     _awZ_=_awK_[15],
     _aw0_=_awK_[16],
     _aw1_=_awK_[17],
     _aw2_=_awK_[18],
     _aw3_=_awK_[19],
     _aw4_=_awK_[20],
     _aw5_=_awK_[21],
     _aw6_=_awK_[22],
     _aw7_=_awK_[23],
     _aw8_=_awK_[24],
     _aw9_=_awK_[25],
     _aw__=_awK_[26],
     _aw$_=_awK_[27],
     _axa_=_awK_[28],
     _axb_=_awK_[29],
     _axc_=_awK_[30],
     _axd_=_awK_[31],
     _axe_=_awK_[32],
     _axf_=_awK_[33],
     _axg_=_awK_[34],
     _axh_=_awK_[35],
     _axi_=_awK_[36],
     _axj_=_awK_[37],
     _axk_=_awK_[38],
     _axl_=_awK_[39],
     _axm_=_awK_[40],
     _axn_=_awK_[41],
     _axo_=_awK_[42],
     _axp_=_awK_[43],
     _axq_=_awK_[44],
     _axr_=_awK_[45],
     _axs_=_awK_[46],
     _axt_=_awK_[47],
     _axu_=_awK_[48],
     _axv_=_awK_[49],
     _axw_=_awK_[50],
     _axx_=_awK_[51],
     _axy_=_awK_[52],
     _axz_=_awK_[53],
     _axA_=_awK_[54],
     _axB_=_awK_[55],
     _axC_=_awK_[56],
     _axE_=_axD_[1],
     _axF_=_axD_[2],
     _axG_=_axD_[3],
     _axH_=_axD_[4],
     _axI_=_axD_[5],
     _axJ_=_axD_[6],
     _axK_=_axD_[7],
     _axL_=_axD_[8],
     _axM_=_axD_[9],
     _axN_=_axD_[10],
     _axO_=_axD_[11],
     _axP_=_axD_[12],
     _axQ_=_axD_[13],
     _axR_=_axD_[14],
     _axS_=_axD_[15],
     _axT_=_axD_[16],
     _axU_=_axD_[17],
     _axV_=_axD_[18],
     _axW_=_axD_[19],
     _axX_=_axD_[20],
     _axY_=_axD_[21],
     _axZ_=_axD_[22],
     _ax0_=_axD_[23],
     _ax1_=_axD_[24],
     _ax2_=_axD_[25],
     _ax3_=_axD_[26],
     _ax4_=include$1[1],
     _ax5_=include$1[2];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$469);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Stable$0);
    var
     Core_kernel_Stable=
      [0,
       _Xz_,
       _XA_,
       _XB_,
       _XC_,
       _XD_,
       _XE_,
       _XF_,
       _XG_,
       _XH_,
       _XI_,
       _XJ_,
       _XK_,
       _XL_,
       _XM_,
       _XN_,
       _XO_,
       _XP_,
       _XQ_,
       _XR_,
       _XS_,
       _XT_,
       _XU_,
       _XV_,
       _XW_,
       _XX_,
       _XY_,
       _XZ_,
       _X0_,
       _X1_,
       _X2_,
       _X3_,
       _X4_,
       _X5_,
       _X6_,
       _X7_,
       _X8_,
       _X9_,
       _X__,
       _X$_,
       _Ya_,
       _Yb_,
       _Yc_,
       _Yd_,
       _Ye_,
       _Yf_,
       _Yg_,
       _Yh_,
       _Yi_,
       _Yj_,
       _Yk_,
       _Yl_,
       _Ym_,
       _Yn_,
       _Yo_,
       _Yp_,
       _Yq_,
       _Yr_,
       _Ys_,
       _Yt_,
       _Yu_,
       _Yv_,
       _Yw_,
       _Yx_,
       _Yy_,
       _Yz_,
       _YA_,
       _YB_,
       _YC_,
       _YD_,
       _YE_,
       _YF_,
       _YG_,
       _YH_,
       _YI_,
       _YJ_,
       _YK_,
       _YL_,
       _YM_,
       _YN_,
       _YO_,
       _YP_,
       _YQ_,
       _YR_,
       _YS_,
       _YT_,
       _YU_,
       _YV_,
       _YW_,
       _YX_,
       _YY_,
       _YZ_,
       _Y0_,
       _Y1_,
       _Y2_,
       _Y3_,
       _Y4_,
       _Y5_,
       _Y6_,
       _Y7_,
       _Y8_,
       _Y9_,
       _Y__,
       _Y$_,
       _Za_,
       _Zb_,
       _Zc_,
       _Zd_,
       _Ze_,
       _Zf_,
       _Zg_,
       _Zh_,
       _Zi_,
       _Zj_,
       _Zk_,
       _Zl_,
       _Zm_,
       _Zn_,
       _Zo_,
       _Zp_,
       _Zq_,
       _Zr_,
       _Zs_,
       _Zt_,
       _Zu_,
       _Zv_,
       _Zw_,
       _Zx_,
       _Zy_,
       _Zz_,
       _ZA_,
       _ZB_,
       _ZC_,
       _ZD_,
       _ZE_,
       _ZF_,
       _ZG_,
       _ZH_,
       _ZI_,
       _ZJ_,
       _ZK_,
       _ZL_,
       _ZM_,
       _ZN_,
       _ZO_,
       _ZP_,
       _ZQ_,
       _ZR_,
       _ZS_,
       _ZT_,
       _ZU_,
       _ZV_,
       _ZW_,
       _ZX_,
       _ZY_,
       _ZZ_,
       _Z0_,
       _Z1_,
       _Z2_,
       _Z3_,
       _Z4_,
       _Z5_,
       _Z6_,
       _Z7_,
       _Z8_,
       _Z9_,
       _Z__,
       _Z$_,
       __a_,
       __b_,
       __c_,
       __d_,
       __e_,
       __f_,
       __g_,
       __h_,
       __i_,
       __j_,
       __k_,
       __l_,
       __m_,
       __n_,
       __o_,
       __p_,
       __q_,
       __r_,
       __s_,
       __t_,
       __u_,
       __v_,
       __w_,
       __x_,
       __y_,
       __z_,
       __A_,
       __B_,
       __C_,
       __D_,
       __E_,
       __F_,
       __G_,
       __H_,
       __I_,
       __J_,
       __K_,
       __L_,
       __M_,
       __N_,
       __O_,
       __P_,
       __Q_,
       __R_,
       __S_,
       __T_,
       __U_,
       __V_,
       __W_,
       __X_,
       __Y_,
       __0_,
       __1_,
       __2_,
       __3_,
       __4_,
       __5_,
       __6_,
       hash_fold_t$40,
       __7_,
       __8_,
       __9_,
       ____,
       __$_,
       _$a_,
       _$b_,
       _$c_,
       _$d_,
       _$e_,
       _$f_,
       _$g_,
       _$h_,
       _$i_,
       _$j_,
       _$0_,
       _$Z_,
       _$Y_,
       _$X_,
       _$W_,
       _$V_,
       _$U_,
       _$T_,
       _$S_,
       _$R_,
       _$Q_,
       _$P_,
       _$O_,
       _$N_,
       _$M_,
       _$L_,
       _$K_,
       _$J_,
       _$I_,
       _$H_,
       _$G_,
       _$F_,
       _$E_,
       _$D_,
       _$C_,
       _$B_,
       _$A_,
       _$z_,
       _$y_,
       _$x_,
       _$w_,
       _$v_,
       _$u_,
       _$t_,
       _$s_,
       _$r_,
       _$q_,
       _$p_,
       _$o_,
       _$n_,
       _$m_,
       _$l_,
       _$k_,
       bin_shape_sexp_option$0,
       bin_size_sexp_option$0,
       bin_write_sexp_option$0,
       bin_writer_sexp_option$0,
       bin_read_sexp_option$2,
       bin_read_sexp_option$1,
       bin_reader_sexp_option$0,
       bin_sexp_option$0,
       compare_sexp_option$0,
       hash_fold_sexp_option,
       bin_shape_sexp_list$0,
       bin_size_sexp_list$0,
       bin_write_sexp_list$0,
       bin_writer_sexp_list$0,
       bin_read_sexp_list$2,
       bin_read_sexp_list$1,
       bin_reader_sexp_list$0,
       bin_sexp_list$0,
       compare_sexp_list$0,
       hash_fold_sexp_list,
       _awL_,
       _awM_,
       _awN_,
       _awO_,
       _awP_,
       _awQ_,
       _awR_,
       _awS_,
       _awT_,
       _awU_,
       _awV_,
       _awW_,
       _awX_,
       _awY_,
       _awZ_,
       _aw0_,
       _aw1_,
       _aw2_,
       _aw3_,
       _aw4_,
       _aw5_,
       _aw6_,
       _aw7_,
       _aw8_,
       _aw9_,
       _aw__,
       _aw$_,
       _axa_,
       _axb_,
       _axc_,
       _axd_,
       _axe_,
       _axf_,
       _axg_,
       _axh_,
       _axi_,
       _axj_,
       _axk_,
       _axl_,
       _axm_,
       _axn_,
       _axo_,
       _axp_,
       _axq_,
       _axr_,
       _axs_,
       _axt_,
       _axu_,
       _axv_,
       _axw_,
       _axx_,
       _axy_,
       _axz_,
       _axA_,
       _axB_,
       _axC_,
       _axE_,
       _axF_,
       _axG_,
       _axH_,
       _axI_,
       _axJ_,
       _axK_,
       _axL_,
       _axM_,
       _axN_,
       _axO_,
       _axP_,
       _axQ_,
       _axR_,
       _axS_,
       _axT_,
       _axU_,
       _axV_,
       _axW_,
       _axX_,
       _axY_,
       _axZ_,
       _ax0_,
       _ax1_,
       _ax2_,
       _ax3_,
       _ax4_,
       _ax5_];
    caml_register_global(5163,Core_kernel_Stable,"Core_kernel__Stable");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Sign_or_nan);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$470);
    caml_call1(Expect_test_collector[4][1],cst_src_sign_or_nan_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$471,cst$255);
    function t_of_sexp$122(sexp)
     {if(0 === sexp[0])
       {var _aDC_=sexp[1],switch$0=0;
        if(caml_string_notequal(_aDC_,cst_Nan))
         {var switch$1=0;
          if(caml_string_notequal(_aDC_,cst_Neg$2))
           {var switch$2=0;
            if(caml_string_notequal(_aDC_,cst_Pos$2))
             {var switch$3=0;
              if(caml_string_notequal(_aDC_,cst_Zero$6))
               if(caml_string_notequal(_aDC_,cst_nan$0))
                if(caml_string_notequal(_aDC_,cst_neg$1))
                 if(caml_string_notequal(_aDC_,cst_pos$1))
                  {if(caml_string_notequal(_aDC_,cst_zero$5))
                    {switch$0 = 1;switch$1 = 1;switch$2 = 1;switch$3 = 1}}
                 else
                  switch$3 = 1;
                else
                 {switch$2 = 1;switch$3 = 1}
               else
                {switch$1 = 1;switch$2 = 1;switch$3 = 1}
              if(! switch$3)return 1}
            if(! switch$2)return 2}
          if(! switch$1)return 0}
        if(! switch$0)return 3}
      else
       {var _aDD_=sexp[1];
        if(! _aDD_)
         return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$56,sexp);
        var _aDE_=_aDD_[1];
        if(0 !== _aDE_[0])
         return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$56,sexp);
        var _aDF_=_aDE_[1],switch$4=0;
        if(caml_string_notequal(_aDF_,cst_Nan$0))
         {var switch$5=0;
          if(caml_string_notequal(_aDF_,cst_Neg$3))
           {var switch$6=0;
            if(caml_string_notequal(_aDF_,cst_Pos$3))
             {var switch$7=0;
              if(caml_string_notequal(_aDF_,cst_Zero$7))
               if(caml_string_notequal(_aDF_,cst_nan$1))
                if(caml_string_notequal(_aDF_,cst_neg$2))
                 if(caml_string_notequal(_aDF_,cst_pos$2))
                  {if(caml_string_notequal(_aDF_,cst_zero$6))
                    {switch$4 = 1;switch$5 = 1;switch$6 = 1;switch$7 = 1}}
                 else
                  switch$7 = 1;
                else
                 {switch$6 = 1;switch$7 = 1}
               else
                {switch$5 = 1;switch$6 = 1;switch$7 = 1}
              if(! switch$7)
               return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$56,sexp)}
            if(! switch$6)
             return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$56,sexp)}
          if(! switch$5)
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$56,sexp)}
        if(! switch$4)
         return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$56,sexp)}
      return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$56,sexp)}
    function sexp_of_t$138(param)
     {switch(param)
       {case 0:return _ax6_;
        case 1:return _ax7_;
        case 2:return _ax8_;
        default:return _ax9_}}
    var
     _ax$_=caml_call1(Bin_prot_Shape[9],_ax__),
     _aya_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$289),0,_ax$_],0],
     _ayb_=caml_call1(Bin_prot_Shape[4][1],cst_src_sign_or_nan_ml_6_4),
     group$158=caml_call2(Bin_prot_Shape[6],_ayb_,_aya_),
     _ayc_=caml_call1(Bin_prot_Shape[2][1],cst_t$290),
     bin_shape_t$143=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$158,_ayc_),0);
    function bin_size_t$99(param){return 1}
    function bin_write_t$100(buf,pos,param)
     {switch(param)
       {case 0:return caml_call3(Bin_prot_Write[30],buf,pos,0);
        case 1:return caml_call3(Bin_prot_Write[30],buf,pos,1);
        case 2:return caml_call3(Bin_prot_Write[30],buf,pos,2);
        default:return caml_call3(Bin_prot_Write[30],buf,pos,3)}}
    var bin_writer_t$118=[0,bin_size_t$99,bin_write_t$100];
    function bin_read_t$197(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_src_sign_or_nan_ml_Stable_,pos_ref[1])}
    function bin_read_t$198(buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[29],buf,pos_ref);
      if(3 < match >>> 0)
       return caml_call2(Bin_prot_Common[18],_ayd_,pos_ref[1]);
      switch(match)
       {case 0:return 0;case 1:return 1;case 2:return 2;default:return 3}}
    var
     bin_reader_t$118=[0,bin_read_t$198,bin_read_t$197],
     bin_t$118=[0,bin_shape_t$143,bin_writer_t$118,bin_reader_t$118],
     compare$111=caml_int_compare;
    function hash_fold_t$47(hsv,arg)
     {switch(arg)
       {case 0:return caml_call2(Base_Hash[3],hsv,0);
        case 1:return caml_call2(Base_Hash[3],hsv,1);
        case 2:return caml_call2(Base_Hash[3],hsv,2);
        default:return caml_call2(Base_Hash[3],hsv,3)}}
    function hash$54(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_aDB_=hash_fold_t$47(hsv,x);
      return caml_call1(Base_Hash[9],_aDB_)}
    var
     Typename_of_t$30=caml_call1(Typerep_lib_Make_typename[1],[0,name$72]),
     typename_of_t$29=Typename_of_t$30[2],
     name_of_t$22=Typename_of_t$30[1],
     typerep_of_t$30=
      [9,
       [0,
        name_of_t$22,
        [0,
         [246,
          function(_aDA_)
           {var
             tag0=
              caml_call1
               (Typerep_lib_Std[1][4][9],
                [0,cst_Neg$4,_e1_,0,0,0,0,_eF_,_aye_]),
             tag1=
              caml_call1
               (Typerep_lib_Std[1][4][9],
                [0,cst_Zero$8,_e1_,0,0,1,1,_eF_,_ayf_]),
             tag2=
              caml_call1
               (Typerep_lib_Std[1][4][9],
                [0,cst_Pos$4,_e1_,0,0,2,2,_eF_,_ayg_]),
             tag3=
              caml_call1
               (Typerep_lib_Std[1][4][9],
                [0,cst_Nan$1,_e1_,0,0,3,3,_eF_,_ayh_]),
             typename=caml_call1(Typerep_lib_Std[1][1][2],name_of_t$22),
             tags=[0,[0,tag0],[0,tag1],[0,tag2],[0,tag3]],
             polymorphic=0;
            function value(param)
             {switch(param)
               {case 0:return [0,tag0,_e8_];
                case 1:return [0,tag1,_e8_];
                case 2:return [0,tag2,_e8_];
                default:return [0,tag3,_e8_]}}
            return [8,
                    caml_call1
                     (Typerep_lib_Std[1][6][7],
                      [0,typename,tags,polymorphic,value])]}]]]],
     _ayi_=Base_Sign_or_nan[1],
     _ayj_=Base_Sign_or_nan[28],
     _ayk_=Base_Sign_or_nan[29],
     _ayl_=Base_Sign_or_nan[30],
     _aym_=Base_Sign_or_nan[31],
     _ayn_=Base_Sign_or_nan[32],
     _ayo_=Base_Sign_or_nan[33],
     _ayp_=
      [0,
       bin_size_t$99,
       bin_write_t$100,
       bin_read_t$198,
       bin_read_t$197,
       bin_shape_t$143,
       bin_writer_t$118,
       bin_reader_t$118,
       bin_t$118],
     _ayq_=
      [0,
       Base_Sign_or_nan[2],
       Base_Sign_or_nan[3],
       Base_Sign_or_nan[4],
       Base_Sign_or_nan[5],
       Base_Sign_or_nan[6],
       Base_Sign_or_nan[7],
       Base_Sign_or_nan[8],
       Base_Sign_or_nan[9],
       Base_Sign_or_nan[10],
       Base_Sign_or_nan[11],
       Base_Sign_or_nan[12],
       Base_Sign_or_nan[13],
       Base_Sign_or_nan[14],
       Base_Sign_or_nan[15],
       Base_Sign_or_nan[16],
       Base_Sign_or_nan[17],
       Base_Sign_or_nan[18],
       Base_Sign_or_nan[19],
       Base_Sign_or_nan[20],
       Base_Sign_or_nan[21],
       Base_Sign_or_nan[22],
       Base_Sign_or_nan[23],
       Base_Sign_or_nan[24],
       Base_Sign_or_nan[25],
       Base_Sign_or_nan[26],
       Base_Sign_or_nan[27]],
     include$154=function(_aDz_){return _AL_(_ayq_,_aDz_)}(_ayp_),
     _ayr_=include$154[1],
     _ays_=include$154[2],
     _ayt_=include$154[3],
     _ayu_=include$154[4],
     _ayv_=include$154[5],
     _ayw_=include$154[6],
     _ayx_=include$154[7],
     _ayy_=include$154[8],
     _ayz_=include$154[9],
     _ayA_=include$154[10],
     _ayB_=include$154[11],
     _ayC_=include$154[12],
     _ayD_=include$154[13],
     _ayE_=include$154[14],
     _ayF_=include$154[15],
     _ayG_=include$154[16],
     _ayH_=include$154[17],
     _ayI_=include$154[18],
     _ayJ_=include$154[19],
     _ayK_=include$154[20],
     _ayL_=include$154[21],
     _ayM_=include$154[22],
     _ayN_=include$154[23],
     _ayO_=include$154[24],
     _ayP_=include$154[25],
     _ayQ_=include$154[26],
     _ayR_=include$154[27],
     _ayS_=include$154[28],
     _ayT_=include$154[29],
     _ayU_=include$154[30],
     _ayV_=include$154[31],
     _ayW_=include$154[32],
     _ayX_=include$154[33],
     _ayY_=include$154[34],
     _ayZ_=include$154[35],
     _ay0_=include$154[36],
     _ay1_=include$154[37],
     _ay2_=include$154[38],
     _ay3_=include$154[39],
     _ay4_=include$154[40],
     _ay5_=include$154[41];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$472);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Sign_or_nan$0);
    var
     Core_kernel_Sign_or_nan=
      [0,
       typerep_of_t$30,
       typename_of_t$29,
       _ayi_,
       _ayj_,
       _ayk_,
       _ayl_,
       _aym_,
       _ayn_,
       _ayo_,
       _ayr_,
       _ays_,
       _ayt_,
       _ayu_,
       _ayv_,
       _ayw_,
       _ayx_,
       _ayy_,
       _ayz_,
       _ayA_,
       _ayB_,
       _ayC_,
       _ayD_,
       _ayE_,
       _ayF_,
       _ayG_,
       _ayH_,
       _ayI_,
       _ayJ_,
       _ayK_,
       _ayL_,
       _ayM_,
       _ayN_,
       _ayO_,
       _ayP_,
       _ayQ_,
       _ayR_,
       _ayS_,
       _ayT_,
       _ayU_,
       _ayV_,
       _ayW_,
       _ayX_,
       _ayY_,
       _ayZ_,
       _ay0_,
       _ay1_,
       _ay2_,
       _ay3_,
       _ay4_,
       _ay5_,
       [0,
        [0,
         bin_size_t$99,
         bin_write_t$100,
         bin_read_t$198,
         bin_read_t$197,
         bin_shape_t$143,
         bin_writer_t$118,
         bin_reader_t$118,
         bin_t$118,
         compare$111,
         hash_fold_t$47,
         hash$54,
         t_of_sexp$122,
         sexp_of_t$138]]];
    caml_register_global
     (5165,Core_kernel_Sign_or_nan,"Core_kernel__Sign_or_nan");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Queue_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$473);
    caml_call1(Expect_test_collector[4][1],cst_src_queue_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$474,cst$256);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$475);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Queue_intf$0);
    var Core_kernel_Queue_intf=[0];
    caml_register_global
     (5166,Core_kernel_Queue_intf,"Core_kernel__Queue_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Printexc);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$476);
    caml_call1(Expect_test_collector[4][1],cst_src_printexc_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$477,cst$257);
    function to_string$35(param){return 751446320}
    function print(param){return 751446320}
    function catch$0(param,_aDy_){return -352320217}
    var
     _ay6_=Stdlib_printexc[5],
     _ay7_=Stdlib_printexc[6],
     _ay8_=Stdlib_printexc[7],
     _ay9_=Stdlib_printexc[8];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$478);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Printexc$0);
    var
     Core_kernel_Printexc=
      [0,to_string$35,print,catch$0,_ay6_,_ay7_,_ay8_,_ay9_];
    caml_register_global(5168,Core_kernel_Printexc,"Core_kernel__Printexc");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Option_array);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$479);
    caml_call1(Expect_test_collector[4][1],cst_src_option_array_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$480,cst$258);
    var
     t_of_sexp$123=include$155[1],
     sexp_of_t$139=include$155[2],
     empty$13=include$155[3],
     create$43=include$155[4],
     init_some=include$155[5],
     init$9=include$155[6],
     length$23=include$155[7],
     get$7=include$155[8],
     get_some_exn=include$155[9],
     is_none$2=include$155[10],
     is_some$1=include$155[11],
     unsafe_get$0=include$155[12],
     unsafe_get_some_exn=include$155[13],
     unsafe_get_some_assuming_some=include$155[14],
     unsafe_is_some=include$155[15],
     set$14=include$155[16],
     set_some=include$155[17],
     set_none=include$155[18],
     swap$3=include$155[19],
     clear$4=include$155[20],
     unsafe_set$0=include$155[21],
     unsafe_set_some=include$155[22],
     unsafe_set_none=include$155[23],
     blit$4=include$155[24],
     blito$3=include$155[25],
     unsafe_blit$1=include$155[26],
     sub$6=include$155[27],
     subo$3=include$155[28],
     copy$6=include$155[29];
    function to_array$12(t)
     {function _aDx_(i){return caml_call2(unsafe_get$0,t,i)}
      return caml_call2(init,caml_call1(length$23,t),_aDx_)}
    function of_array$7(a)
     {function _aDw_(i){return a[1 + i]}
      return caml_call2(init$9,caml_call1(length,a),_aDw_)}
    var
     _ay$_=caml_call1(Bin_prot_Shape[3][1],cst_a$107),
     _aza_=caml_call1(Bin_prot_Shape[4][1],cst_src_option_array_ml_9_18),
     _azb_=
      caml_call1
       (_dm_,caml_call1(_c__,caml_call2(Bin_prot_Shape[15],_aza_,_ay$_))),
     _azc_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$108),0],
     _azd_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$291),_azc_,_azb_],0],
     _aze_=caml_call1(Bin_prot_Shape[4][1],cst_src_option_array_ml_9_6),
     group$159=caml_call2(Bin_prot_Shape[6],_aze_,_azd_),
     _ay__=[0,to_array$12,of_array$7];
    function bin_shape_t$144(a)
     {var _aDv_=caml_call1(Bin_prot_Shape[2][1],cst_t$292);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$159,_aDv_),[0,a,0])}
    function bin_size_t$100(size_of_a,v)
     {return caml_call2(_bH_,caml_call1(_bD_,size_of_a),v)}
    function bin_write_t$101(write_a,buf,pos,v)
     {return caml_call3(caml_call1(_do_,caml_call1(_da_,write_a)),buf,pos,v)}
    function bin_read_t$199(of_a,buf,pos_ref,vint)
     {return caml_call3
              (caml_call1(_dr_,caml_call1(_dc_,of_a)),buf,pos_ref,vint)}
    function bin_read_t$200(of_a,buf,pos_ref)
     {return caml_call2(caml_call1(_dq_,caml_call1(_dc_,of_a)),buf,pos_ref)}
    var
     include$156=
      caml_call1
       (caml_call1
         (_TO_,
          [0,
           bin_shape_t$144,
           bin_size_t$100,
           bin_write_t$101,
           bin_read_t$200,
           bin_read_t$199]),
        _ay__),
     _azf_=include$156[1],
     _azg_=include$156[2],
     _azh_=include$156[3],
     _azi_=include$156[4],
     _azj_=include$156[5],
     _azk_=include$156[6],
     _azl_=include$156[7],
     _azm_=include$156[8];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$481);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Option_array$0);
    var
     Core_kernel_Option_array=
      [0,
       _azf_,
       _azg_,
       _azh_,
       _azi_,
       _azj_,
       _azk_,
       _azl_,
       _azm_,
       t_of_sexp$123,
       sexp_of_t$139,
       empty$13,
       create$43,
       init_some,
       init$9,
       length$23,
       get$7,
       get_some_exn,
       is_none$2,
       is_some$1,
       unsafe_get$0,
       unsafe_get_some_exn,
       unsafe_get_some_assuming_some,
       unsafe_is_some,
       set$14,
       set_some,
       set_none,
       swap$3,
       clear$4,
       unsafe_set$0,
       unsafe_set_some,
       unsafe_set_none,
       blit$4,
       blito$3,
       unsafe_blit$1,
       sub$6,
       subo$3,
       copy$6];
    caml_register_global
     (5170,Core_kernel_Option_array,"Core_kernel__Option_array");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Only_in_test);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$482);
    caml_call1(Expect_test_collector[4][1],cst_src_only_in_test_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$483,cst$259);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$484);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Only_in_test$0);
    var
     Core_kernel_Only_in_test=
      [0,
       _Lt_,
       _Lu_,
       _Lv_,
       _Lw_,
       _Lx_,
       _Ly_,
       _Lz_,
       _LA_,
       _LB_,
       _LC_,
       _LD_,
       _LG_,
       function(_aDt_)
        {var _aDu_=caml_obj_tag(_aDt_);
         return 250 === _aDu_
                 ?_aDt_[1]
                 :246 === _aDu_?caml_call1(CamlinternalLazy[2],_aDt_):_aDt_}];
    caml_register_global
     (5171,Core_kernel_Only_in_test,"Core_kernel__Only_in_test");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_No_polymorphic);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$485);
    caml_call1(Expect_test_collector[4][1],cst_src_no_polymorphic_compare);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$486,cst$260);
    function compare$112(param,_aDs_){return 723633086}
    function symbol$247(param,_aDr_){return 723633086}
    function symbol$248(param,_aDq_){return 723633086}
    function symbol$249(param,_aDp_){return 723633086}
    function symbol$250(param,_aDo_){return 723633086}
    function symbol$251(param,_aDn_){return 723633086}
    function symbol$252(param,_aDm_){return 723633086}
    function equal$43(param,_aDl_){return 723633086}
    function min$19(param,_aDk_){return 723633086}
    function max$19(param,_aDj_){return 723633086}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$487);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_No_polymorphic$0);
    var
     Core_kernel_No_polymorphic_com=
      [0,
       compare$112,
       symbol$247,
       symbol$248,
       symbol$249,
       symbol$250,
       symbol$251,
       symbol$252,
       equal$43,
       min$19,
       max$19];
    caml_register_global
     (5172,
      Core_kernel_No_polymorphic_com,
      "Core_kernel__No_polymorphic_compare");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Memo);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$488);
    caml_call1(Expect_test_collector[4][1],cst_src_memo_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$489,cst$261);
    function return$5(param)
     {if(0 === param[0]){var v=param[1];return v}var e=param[1];throw e}
    function capture(f,x)
     {try
       {var _aDi_=[0,caml_call1(f,x)];return _aDi_}
      catch(e)
       {e = caml_wrap_exception(e);
        if(e === Stdlib_sys[44])throw e;
        return [1,e]}}
    function unit$1(f)
     {var l=caml_call1(_LG_,f);
      return function(param)
       {var _aDh_=caml_obj_tag(l);
        return 250 === _aDh_
                ?l[1]
                :246 === _aDh_?caml_call1(CamlinternalLazy[2],l):l}}
    function general(hashable$1,cache_size_bound,f)
     {if(cache_size_bound)
       {var n=cache_size_bound[1];
        if(hashable$1)
         var sth$0=hashable$1[1],hashable$0=sth$0;
        else
         var hashable$0=Base_Hashable[2];
        if(caml_call2(_Nq_,n,0))caml_call3(_Pe_,_azo_,n,0);
        var
         sexp_of_t$0=hashable$0[3],
         compare$0=hashable$0[2],
         hash$0=hashable$0[1],
         Cache=caml_call1(_AK_,[0,compare$0,sexp_of_t$0,hash$0]),
         cache$0=caml_call3(Cache[18],0,0,0);
        return function(arg)
         {var match=caml_call2(Cache[29],cache$0,arg);
          if(match)
           var result=match[1],result$0=result;
          else
           {var result$1=capture(f,arg);
            caml_call3(Cache[26],cache$0,arg,result$1);
            if(caml_call2(_Ns_,caml_call1(Cache[1],cache$0),n))
             caml_call1(Cache[41],cache$0);
            var result$0=result$1}
          return return$5(result$0)}}
      if(hashable$1)
       var sth=hashable$1[1],hashable=sth;
      else
       var hashable=Base_Hashable[2];
      var
       sexp_of_t=hashable[3],
       compare=hashable[2],
       hash=hashable[1],
       A=Make_plain_and_derive_hash_fol([0,compare,sexp_of_t,hash]),
       cache=caml_call3(A[5][4],0,_azn_,0);
      function really_call_f(arg){return capture(f,arg)}
      return function(arg)
       {return return$5
                (caml_call3(Core_kernel_Hashtbl[51],cache,arg,really_call_f))}}
    function of_comparable(M,f)
     {var m=[0,M[21][5]];
      return function(x)
       {var match=caml_call2(find$3,m[1],x);
        if(match)
         var v=match[1],v$0=v;
        else
         {var v$1=capture(f,x);
          m[1] = caml_call3(set$2,m[1],x,v$1);
          var v$0=v$1}
        return return$5(v$0)}}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$490);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Memo$0);
    var Core_kernel_Memo=[0,general,unit$1,of_comparable];
    caml_register_global(5173,Core_kernel_Memo,"Core_kernel__Memo");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Linked_queue);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$491);
    caml_call1(Expect_test_collector[4][1],cst_src_linked_queue_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$492,cst$262);
    var
     _azs_=include$157[4],
     _azu_=include$157[6],
     _azT_=include$157[31],
     _az$_=include$157[49],
     _azp_=include$157[1],
     _azq_=include$157[2],
     _azr_=include$157[3],
     _azt_=include$157[5],
     _azv_=include$157[7],
     _azw_=include$157[8],
     _azx_=include$157[9],
     _azy_=include$157[10],
     _azz_=include$157[11],
     _azA_=include$157[12],
     _azB_=include$157[13],
     _azC_=include$157[14],
     _azD_=include$157[15],
     _azE_=include$157[16],
     _azF_=include$157[17],
     _azG_=include$157[18],
     _azH_=include$157[19],
     _azI_=include$157[20],
     _azJ_=include$157[21],
     _azK_=include$157[22],
     _azL_=include$157[23],
     _azM_=include$157[24],
     _azN_=include$157[25],
     _azO_=include$157[26],
     _azP_=include$157[27],
     _azQ_=include$157[28],
     _azR_=include$157[29],
     _azS_=include$157[30],
     _azU_=include$157[32],
     _azV_=include$157[33],
     _azW_=include$157[34],
     _azX_=include$157[35],
     _azY_=include$157[36],
     _azZ_=include$157[37],
     _az0_=include$157[38],
     _az1_=include$157[39],
     _az2_=include$157[40],
     _az3_=include$157[41],
     _az4_=include$157[42],
     _az5_=include$157[43],
     _az6_=include$157[44],
     _az7_=include$157[45],
     _az8_=include$157[46],
     _az9_=include$157[47],
     _az__=include$157[48],
     _aAa_=include$157[50],
     _aAb_=caml_call1(Bin_prot_Shape[3][1],cst_a$109),
     _aAc_=caml_call1(Bin_prot_Shape[4][1],cst_src_linked_queue_ml_9_17),
     _aAd_=caml_call2(Bin_prot_Shape[15],_aAc_,_aAb_),
     _aAe_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$110),0],
     _aAf_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_el$17),_aAe_,_aAd_],0],
     _aAg_=caml_call1(Bin_prot_Shape[4][1],cst_src_linked_queue_ml_9_4),
     group$160=caml_call2(Bin_prot_Shape[6],_aAg_,_aAf_);
    function bin_shape_el$4(a)
     {var _aDg_=caml_call1(Bin_prot_Shape[2][1],cst_el$18);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$160,_aDg_),[0,a,0])}
    function bin_size_el$4(size_of_a){return size_of_a}
    function bin_write_el$4(write_a){return write_a}
    function bin_read_el$4(of_a){return of_a}
    var
     caller_identity$4=
      caml_call1(Bin_prot_Shape[5][1],cst_800df9a0_4992_11e6_881d_ff);
    function init$10(len,next)
     {var t=caml_call1(_az$_,0),_aDe_=1;
      if(! (len < 1))
       {var for$0=_aDe_;
        for(;;)
         {caml_call2(_azT_,t,caml_call1(next,0));
          var _aDf_=for$0 + 1 | 0;
          if(len !== for$0){var for$0=_aDf_;continue}
          break}}
      return t}
    var
     include$158=
      caml_call1
       (Bin_prot_Utils[16],
        [0,
         caller_identity$4,
         module_name$17,
         _azs_,
         _azu_,
         init$10,
         bin_size_el$4,
         bin_write_el$4,
         bin_read_el$4,
         bin_shape_el$4]),
     _aAh_=include$158[1],
     _aAi_=include$158[2],
     _aAj_=include$158[3],
     _aAk_=include$158[4],
     _aAl_=include$158[5],
     _aAm_=include$158[6],
     _aAn_=include$158[7],
     _aAo_=include$158[8];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$493);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Linked_queue$0);
    var
     Core_kernel_Linked_queue=
      [0,
       _aAh_,
       _aAi_,
       _aAj_,
       _aAk_,
       _aAl_,
       _aAm_,
       _aAn_,
       _aAo_,
       _azp_,
       _azq_,
       _azr_,
       _azs_,
       _azt_,
       _azu_,
       _azv_,
       _azw_,
       _azx_,
       _azy_,
       _azz_,
       _azA_,
       _azB_,
       _azC_,
       _azD_,
       _azE_,
       _azF_,
       _azG_,
       _azH_,
       _azI_,
       _azJ_,
       _azK_,
       _azL_,
       _azM_,
       _azN_,
       _azO_,
       _azP_,
       _azQ_,
       _azR_,
       _azS_,
       _azT_,
       _azU_,
       _azV_,
       _azW_,
       _azX_,
       _azY_,
       _azZ_,
       _az0_,
       _az1_,
       _az2_,
       _az3_,
       _az4_,
       _az5_,
       _az6_,
       _az7_,
       _az8_,
       _az9_,
       _az__,
       _az$_,
       _aAa_];
    caml_register_global
     (5175,Core_kernel_Linked_queue,"Core_kernel__Linked_queue");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Explicit_depen);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$494);
    caml_call1(Expect_test_collector[4][1],cst_src_explicit_dependencies_);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$495,cst$263);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$496);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Explicit_depen$0);
    var Core_kernel_Explicit_dependenc=[0];
    caml_register_global
     (5176,
      Core_kernel_Explicit_dependenc,
      "Core_kernel__Explicit_dependencies");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Ephemeron);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$497);
    caml_call1(Expect_test_collector[4][1],cst_src_ephemeron_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$498,cst$264);
    var _aAp_=Stdlib_ephemeron[1][1];
    function set_key(t,param)
     {if(param){var v=param[1];return caml_call2(Stdlib_ephemeron[1][4],t,v)}
      return caml_call1(Stdlib_ephemeron[1][5],t)}
    var _aAq_=Stdlib_ephemeron[1][2];
    function set_data(t,param)
     {if(param){var v=param[1];return caml_call2(Stdlib_ephemeron[1][10],t,v)}
      return caml_call1(Stdlib_ephemeron[1][11],t)}
    var _aAr_=Stdlib_ephemeron[1][8];
    function is_key_some(t){return caml_call1(Stdlib_ephemeron[1][6],t)}
    function is_key_none(t){return 1 - is_key_some(t)}
    function is_data_some(t){return caml_call1(Stdlib_ephemeron[1][12],t)}
    function is_data_none(t){return 1 - is_data_some(t)}
    function sexp_of_t$140(sexp_of_a,sexp_of_b,t)
     {var
       v1=caml_call1(_aAr_,t),
       v0=caml_call1(_aAq_,t),
       v0$0=
        caml_call2
         (sexp_of_t$33,
          function(_aDd_){return sexp_of_t$132(sexp_of_a,_aDd_)},
          v0),
       v1$0=
        caml_call2
         (sexp_of_t$33,
          function(_aDc_){return sexp_of_t$132(sexp_of_b,_aDc_)},
          v1);
      return [1,[0,v0$0,[0,v1$0,0]]]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$499);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Ephemeron$0);
    var
     Core_kernel_Ephemeron=
      [0,
       sexp_of_t$140,
       _aAp_,
       set_key,
       _aAq_,
       set_data,
       _aAr_,
       is_key_some,
       is_key_none,
       is_data_some,
       is_data_none];
    caml_register_global(5178,Core_kernel_Ephemeron,"Core_kernel__Ephemeron");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Deriving_hash_);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$500);
    caml_call1(Expect_test_collector[4][1],cst_src_deriving_hash_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$501,cst$265);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$502);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Deriving_hash_$0);
    var Core_kernel_Deriving_hash_intf=[0];
    caml_register_global
     (5179,Core_kernel_Deriving_hash_intf,"Core_kernel__Deriving_hash_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Deriving_hash);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$503);
    caml_call1(Expect_test_collector[4][1],cst_src_deriving_hash_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$504,cst$266);
    function Of_deriving_hash(_aDa_,_aC$_)
     {function hash_fold_t(state,t)
       {var _aDb_=caml_call1(_aC$_[1],t);
        return caml_call2(_aDa_[1],state,_aDb_)}
      var hash=caml_call1(Base_Hash[12],hash_fold_t);
      return [0,hash_fold_t,hash]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$505);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Deriving_hash$0);
    var Core_kernel_Deriving_hash=[0,Of_deriving_hash];
    caml_register_global
     (5180,Core_kernel_Deriving_hash,"Core_kernel__Deriving_hash");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Deque);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$506);
    caml_call1(Expect_test_collector[4][1],cst_src_deque_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$507,cst$267);
    function create$44(initial_length,never_shrink,param)
     {if(never_shrink)
       var b=never_shrink[1],never_shrink$0=b;
      else
       var never_shrink$0=caml_call1(_x2_,initial_length);
      var initial_length$0=caml_call2(_x6_,initial_length,7);
      if(caml_call2(_Nt_,initial_length$0,0))
       caml_call3(_Pf_,_aAs_,initial_length$0,0);
      var arr_length=initial_length$0 + 1 | 0;
      return [0,
              caml_call1(create$43,arr_length),
              0,
              1,
              0,
              0,
              arr_length,
              never_shrink$0]}
    function length$24(t){return t[5]}
    function is_empty$19(t){return caml_call2(_Nr_,t[5],0)}
    function apparent_front_index_when_not_(t){return t[4]}
    function apparent_back_index_when_not_e(t)
     {return (t[4] + t[5] | 0) - 1 | 0}
    function actual_front_index_when_not_em(t)
     {return caml_call2(_Nr_,t[2],t[6] - 1 | 0)?0:t[2] + 1 | 0}
    function actual_back_index_when_not_emp(t)
     {return caml_call2(_Nr_,t[3],0)?t[6] - 1 | 0:t[3] - 1 | 0}
    function checked(t,f){return is_empty$19(t)?0:[0,caml_call1(f,t)]}
    function front_index(t){return checked(t,apparent_front_index_when_not_)}
    function back_index(t){return checked(t,apparent_back_index_when_not_e)}
    function foldi$2(t,dir,init,f)
     {if(is_empty$19(t))return init;
      var
       apparent_front=t[4],
       apparent_back=apparent_back_index_when_not_e(t),
       actual_front=actual_front_index_when_not_em(t),
       actual_back=actual_back_index_when_not_emp(t);
      function loop(acc,apparent_i,real_i,stop_pos,step)
       {var acc$0=acc,apparent_i$0=apparent_i,real_i$0=real_i;
        for(;;)
         {if(caml_call2(_Nr_,real_i$0,stop_pos))return [0,acc$0,apparent_i$0];
          var
           real_i$1=real_i$0 + step | 0,
           apparent_i$1=apparent_i$0 + step | 0,
           acc$1=
            caml_call3
             (f,apparent_i$0,acc$0,caml_call2(get_some_exn,t[1],real_i$0)),
           acc$0=acc$1,
           apparent_i$0=apparent_i$1,
           real_i$0=real_i$1;
          continue}}
      if(252818429 <= dir)
       {if(caml_call2(_Nq_,actual_front,actual_back))
         {var
           match=loop(init,apparent_back,actual_back,actual_front - 1 | 0,-1),
           acc=match[1];
          return acc}
        var
         match$0=loop(init,apparent_back,actual_back,-1,-1),
         apparent_i=match$0[2],
         acc$0=match$0[1],
         match$1=loop(acc$0,apparent_i,t[6] - 1 | 0,actual_front - 1 | 0,-1),
         acc$1=match$1[1];
        return acc$1}
      if(caml_call2(_Nq_,actual_front,actual_back))
       {var
         match$2=loop(init,apparent_front,actual_front,actual_back + 1 | 0,1),
         acc$2=match$2[1];
        return acc$2}
      var
       match$3=loop(init,apparent_front,actual_front,t[6],1),
       apparent_i$0=match$3[2],
       acc$3=match$3[1],
       match$4=loop(acc$3,apparent_i$0,0,actual_back + 1 | 0,1),
       acc$4=match$4[1];
      return acc$4}
    function fold$34(t,dir,init,f)
     {return foldi$2
              (t,dir,init,function(param,acc,v){return caml_call2(f,acc,v)})}
    function iteri$8(t,dir,f)
     {return foldi$2(t,dir,0,function(i,param,v){return caml_call2(f,i,v)})}
    function iter$40(t,dir,f)
     {return foldi$2(t,dir,0,function(param,_aC__,v){return caml_call1(f,v)})}
    function fold$35(t,init,f){return fold$34(t,250975701,init,f)}
    function foldi$3(t,init,f){return foldi$2(t,250975701,init,f)}
    function iteri$9(t,f){return iteri$8(t,250975701,f)}
    function iteri_internal(t,f)
     {var _aC8_=1 - is_empty$19(t);
      if(_aC8_)
       {var
         actual_front=actual_front_index_when_not_em(t),
         actual_back=actual_back_index_when_not_emp(t),
         loop=
          function(real_i,stop_pos)
           {var real_i$0=real_i;
            for(;;)
             {var _aC9_=caml_call2(_Nt_,real_i$0,stop_pos);
              if(_aC9_)
               {caml_call2(f,t[1],real_i$0);
                var real_i$1=real_i$0 + 1 | 0,real_i$0=real_i$1;
                continue}
              return _aC9_}};
        return caml_call2(_Nq_,actual_front,actual_back)
                ?loop(actual_front,actual_back + 1 | 0)
                :(loop(actual_front,t[6]),loop(0,actual_back + 1 | 0))}
      return _aC8_}
    function iter$41(t,f)
     {return iteri_internal
              (t,
               function(arr,i)
                {return caml_call1(f,caml_call2(get_some_exn,arr,i))})}
    function clear$5(t)
     {if(t[7])
       iteri_internal(t,unsafe_set_none);
      else
       t[1] = caml_call1(create$43,8);
      t[2] = 0;
      t[3] = 1;
      t[5] = 0;
      t[6] = caml_call1(length$23,t[1]);
      return 0}
    var
     iter$42=[0,-198771759,iter$41],
     length$25=[0,-198771759,length$24],
     C$2=caml_call1(include$7[16],[0,fold$35,iter$42,length$25]),
     _aAt_=C$2[10],
     _aAu_=C$2[11],
     _aAv_=C$2[8],
     _aAw_=C$2[1],
     _aAx_=C$2[9],
     _aAy_=C$2[13],
     _aAz_=C$2[12],
     _aAA_=C$2[14],
     _aAB_=C$2[16],
     _aAC_=C$2[17],
     _aAD_=C$2[6],
     _aAE_=C$2[7];
    function blit$5(new_arr,t)
     {if(is_empty$19(t))throw [0,Assert_failure,_aAF_];
      var
       actual_front=actual_front_index_when_not_em(t),
       actual_back=actual_back_index_when_not_emp(t),
       old_arr=t[1];
      if(caml_call2(_Nq_,actual_front,actual_back))
       caml_call5(blit$4,old_arr,actual_front,new_arr,0,t[5]);
      else
       {var break_pos=caml_call1(length$23,old_arr) - actual_front | 0;
        caml_call5(blit$4,old_arr,actual_front,new_arr,0,break_pos);
        caml_call5(blit$4,old_arr,0,new_arr,break_pos,actual_back + 1 | 0)}
      t[3] = t[5];
      t[1] = new_arr;
      t[6] = caml_call1(length$23,new_arr);
      t[2] = caml_call1(length$23,new_arr) - 1 | 0;
      if(caml_call2(_Ns_,t[2],t[3]))return 0;
      throw [0,Assert_failure,_aAG_]}
    function maybe_shrink_underlying(t)
     {var _aC5_=1 - t[7];
      if(_aC5_)
       var
        _aC6_=caml_call2(_Ns_,t[6],10),
        _aC7_=_aC6_?caml_call2(_Ns_,t[6] / 3 | 0,t[5]):_aC6_;
      else
       var _aC7_=_aC5_;
      if(_aC7_)
       {var new_arr=caml_call1(create$43,t[6] / 2 | 0);
        return blit$5(new_arr,t)}
      return _aC7_}
    function grow_underlying(t)
     {var new_arr=caml_call1(create$43,t[6] * 2 | 0);return blit$5(new_arr,t)}
    function enqueue_back(t,v)
     {if(caml_call2(_Nr_,t[2],t[3]))grow_underlying(t);
      caml_call3(set_some,t[1],t[3],v);
      var _aC4_=caml_call2(_Nr_,t[3],t[6] - 1 | 0)?0:t[3] + 1 | 0;
      t[3] = _aC4_;
      t[5] = t[5] + 1 | 0;
      return 0}
    function enqueue_front$0(t,v)
     {if(caml_call2(_Nr_,t[2],t[3]))grow_underlying(t);
      caml_call3(set_some,t[1],t[2],v);
      var _aC3_=caml_call2(_Nr_,t[2],0)?t[6] - 1 | 0:t[2] - 1 | 0;
      t[2] = _aC3_;
      t[4] = t[4] - 1 | 0;
      t[5] = t[5] + 1 | 0;
      return 0}
    function enqueue$2(t,back_or_front,v)
     {return 109975721 <= back_or_front?enqueue_front$0(t,v):enqueue_back(t,v)}
    function peek_front_nonempty(t)
     {var _aC2_=actual_front_index_when_not_em(t);
      return caml_call2(get_some_exn,t[1],_aC2_)}
    function peek_front_exn(t)
     {return is_empty$19(t)
              ?caml_call1(_Gb_,cst_Deque_peek_front_exn_passe)
              :peek_front_nonempty(t)}
    function peek_front(t){return is_empty$19(t)?0:[0,peek_front_nonempty(t)]}
    function peek_back_nonempty(t)
     {var _aC1_=actual_back_index_when_not_emp(t);
      return caml_call2(get_some_exn,t[1],_aC1_)}
    function peek_back_exn$0(t)
     {return is_empty$19(t)
              ?caml_call1(_Gb_,cst_Deque_peek_back_exn_passed)
              :peek_back_nonempty(t)}
    function peek_back$0(t){return is_empty$19(t)?0:[0,peek_back_nonempty(t)]}
    function peek$1(t,back_or_front)
     {return 109975721 <= back_or_front?peek_front(t):peek_back$0(t)}
    function dequeue_front_nonempty(t)
     {var
       i=actual_front_index_when_not_em(t),
       res=caml_call2(get_some_exn,t[1],i);
      caml_call2(set_none,t[1],i);
      t[2] = i;
      t[4] = t[4] + 1 | 0;
      t[5] = t[5] - 1 | 0;
      maybe_shrink_underlying(t);
      return res}
    function dequeue_front_exn(t)
     {return is_empty$19(t)
              ?caml_call1(_Gb_,cst_Deque_dequeue_front_exn_pa)
              :dequeue_front_nonempty(t)}
    function dequeue_front(t)
     {return is_empty$19(t)?0:[0,dequeue_front_nonempty(t)]}
    function dequeue_back_nonempty(t)
     {var
       i=actual_back_index_when_not_emp(t),
       res=caml_call2(get_some_exn,t[1],i);
      caml_call2(set_none,t[1],i);
      t[3] = i;
      t[5] = t[5] - 1 | 0;
      maybe_shrink_underlying(t);
      return res}
    function dequeue_back_exn$0(t)
     {return is_empty$19(t)
              ?caml_call1(_Gb_,cst_Deque_dequeue_back_exn_pas)
              :dequeue_back_nonempty(t)}
    function dequeue_back$0(t)
     {return is_empty$19(t)?0:[0,dequeue_back_nonempty(t)]}
    function dequeue_exn$2(t,back_or_front)
     {return 109975721 <= back_or_front
              ?dequeue_front_exn(t)
              :dequeue_back_exn$0(t)}
    function dequeue$2(t,back_or_front)
     {return 109975721 <= back_or_front?dequeue_front(t):dequeue_back$0(t)}
    function drop_gen(opt,dequeue,t)
     {if(opt)var sth=opt[1],n=sth;else var n=1;
      if(caml_call2(_Nt_,n,0))caml_call3(_Pf_,_aAH_,n,0);
      var n$0=n;
      for(;;)
       {var _aCZ_=caml_call2(_Ns_,n$0,0);
        if(_aCZ_)
         {var match=caml_call1(dequeue,t);
          if(match){var n$1=n$0 - 1 | 0,n$0=n$1;continue}
          var _aC0_=0}
        else
         var _aC0_=_aCZ_;
        return _aC0_}}
    function drop_front$0(n,t){return drop_gen(n,dequeue_front,t)}
    function drop_back$0(n,t){return drop_gen(n,dequeue_back$0,t)}
    function drop$0(n,t,back_or_front)
     {return 109975721 <= back_or_front?drop_front$0(n,t):drop_back$0(n,t)}
    function assert_not_empty(t,name)
     {var _aCY_=is_empty$19(t);
      return _aCY_?caml_call3(_Pe_,_aAI_,name,0):_aCY_}
    function true_index_exn(t,i)
     {var
       i_from_zero=i - t[4] | 0,
       _aCW_=caml_call2(_Nt_,i_from_zero,0),
       _aCX_=_aCW_ || caml_call2(_Nq_,t[5],i_from_zero);
      if(_aCX_)
       {assert_not_empty(t,cst_Deque_true_index_exn);
        var
         apparent_front=t[4],
         apparent_back=apparent_back_index_when_not_e(t);
        caml_call5(_Pf_,_aAJ_,i,apparent_front,apparent_back,0)}
      var true_i=(t[2] + 1 | 0) + i_from_zero | 0;
      return caml_call2(_Np_,true_i,t[6])?true_i - t[6] | 0:true_i}
    function get$8(t,i)
     {var _aCV_=true_index_exn(t,i);
      return caml_call2(get_some_exn,t[1],_aCV_)}
    function get_opt(t,i)
     {try {var _aCT_=[0,get$8(t,i)];return _aCT_}catch(_aCU_){return 0}}
    function set_exn$0(t,i,v)
     {var _aCS_=true_index_exn(t,i);return caml_call3(set_some,t[1],_aCS_,v)}
    function to_array$13(t)
     {var match=peek_front(t);
      if(match)
       {var front=match[1],arr=caml_call2(create,t[5],front);
        fold$35
         (t,
          0,
          function(i,v){caml_check_bound(arr,i)[1 + i] = v;return i + 1 | 0});
        return arr}
      return [0]}
    function of_array$8(arr)
     {var t=create$44([0,caml_call1(length,arr) + 1 | 0],0,0);
      caml_call2(iter,arr,function(v){return enqueue_back(t,v)});
      return t}
    var
     _aAK_=caml_call1(Bin_prot_Shape[3][1],cst_a$111),
     _aAL_=caml_call1(Bin_prot_Shape[4][1],cst_src_deque_ml_451_17),
     _aAM_=caml_call2(Bin_prot_Shape[15],_aAL_,_aAK_),
     _aAN_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$112),0],
     _aAO_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_el$19),_aAN_,_aAM_],0],
     _aAP_=caml_call1(Bin_prot_Shape[4][1],cst_src_deque_ml_451_4),
     group$161=caml_call2(Bin_prot_Shape[6],_aAP_,_aAO_);
    function bin_shape_el$5(a)
     {var _aCR_=caml_call1(Bin_prot_Shape[2][1],cst_el$20);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$161,_aCR_),[0,a,0])}
    function bin_size_el$5(size_of_a){return size_of_a}
    function bin_write_el$5(write_a){return write_a}
    function bin_read_el$5(of_a){return of_a}
    var
     caller_identity$5=
      caml_call1(Bin_prot_Shape[5][1],cst_34c1e9ca_4992_11e6_a686_8b);
    function iter$43(t,f){return iter$41(t,f)}
    function init$11(len,next)
     {var t=create$44([0,len],0,0),_aCP_=len - 1 | 0,_aCO_=0;
      if(! (_aCP_ < 0))
       {var i=_aCO_;
        for(;;)
         {var x=caml_call1(next,0);
          enqueue_back(t,x);
          var _aCQ_=i + 1 | 0;
          if(_aCP_ !== i){var i=_aCQ_;continue}
          break}}
      return t}
    var
     include$159=
      caml_call1
       (Bin_prot_Utils[16],
        [0,
         caller_identity$5,
         module_name$18,
         length$24,
         iter$43,
         init$11,
         bin_size_el$5,
         bin_write_el$5,
         bin_read_el$5,
         bin_shape_el$5]),
     bin_shape_t$145=include$159[1],
     bin_size_t$101=include$159[2],
     bin_write_t$102=include$159[3],
     bin_read_t$201=include$159[4],
     bin_read_t$202=include$159[5],
     bin_writer_t$119=include$159[6],
     bin_reader_t$119=include$159[7],
     bin_t$119=include$159[8];
    function t_of_sexp$124(f,sexp){return of_array$8(caml_call2(_k5_,f,sexp))}
    function sexp_of_t$141(f,t){return caml_call2(_k4_,f,to_array$13(t))}
    function back_index_exn(t)
     {assert_not_empty(t,cst_Deque_back_index_exn);
      return apparent_back_index_when_not_e(t)}
    function front_index_exn(t)
     {assert_not_empty(t,cst_Deque_front_index_exn);return t[4]}
    function get$9(t,i){return get$8(t,front_index_exn(t) + i | 0)}
    var
     For_test$0=[0,of_array$8],
     Binary_searchable=
      caml_call1
       (Base_for_tests_Test_binary_sea[4],[0,get$9,length$24,For_test$0]);
    function binary_search$8(pos,len,t,compare,how,v)
     {if(pos)var pos$0=pos[1],pos$1=[0,pos$0 - t[4] | 0];else var pos$1=0;
      var match=caml_call6(Binary_searchable[1],pos$1,len,t,compare,how,v);
      if(match)
       {var untranslated_i=match[1];return [0,t[4] + untranslated_i | 0]}
      return 0}
    function binary_search_segmented$8(pos,len,t,segment_of,how)
     {if(pos)var pos$0=pos[1],pos$1=[0,pos$0 - t[4] | 0];else var pos$1=0;
      var match=caml_call5(Binary_searchable[2],pos$1,len,t,segment_of,how);
      if(match)
       {var untranslated_i=match[1];return [0,t[4] + untranslated_i | 0]}
      return 0}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$508);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Deque$0);
    var
     Core_kernel_Deque=
      [0,
       bin_shape_t$145,
       bin_size_t$101,
       bin_write_t$102,
       bin_read_t$201,
       bin_read_t$202,
       bin_writer_t$119,
       bin_reader_t$119,
       bin_t$119,
       t_of_sexp$124,
       sexp_of_t$141,
       binary_search$8,
       binary_search_segmented$8,
       _aAw_,
       length$24,
       is_empty$19,
       iter$41,
       fold$35,
       _aAD_,
       _aAE_,
       _aAv_,
       _aAx_,
       _aAt_,
       _aAu_,
       _aAz_,
       _aAy_,
       _aAA_,
       to_array$13,
       _aAB_,
       _aAC_,
       create$44,
       of_array$8,
       front_index,
       front_index_exn,
       back_index,
       back_index_exn,
       get_opt,
       get$8,
       peek$1,
       peek_front,
       peek_front_exn,
       peek_back$0,
       peek_back_exn$0,
       set_exn$0,
       iter$40,
       iteri$9,
       iteri$8,
       fold$34,
       foldi$3,
       foldi$2,
       enqueue$2,
       enqueue_front$0,
       enqueue_back,
       clear$5,
       drop$0,
       drop_front$0,
       drop_back$0,
       dequeue$2,
       dequeue_exn$2,
       dequeue_front,
       dequeue_front_exn,
       dequeue_back$0,
       dequeue_back_exn$0];
    caml_register_global(5181,Core_kernel_Deque,"Core_kernel__Deque");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Debug);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$509);
    caml_call1(Expect_test_collector[4][1],cst_src_debug_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$510,cst$268);
    function eprint(message){return caml_call2(_fB_,_aAQ_,message)}
    function eprint_s(sexp){return eprint(caml_call2(to_string_hum,0,sexp))}
    function eprints(v0,v1,sexp_of_a)
     {var v0$0=caml_call1(_au_,v0),v1$0=caml_call1(sexp_of_a,v1);
      return eprint_s([1,[0,v0$0,[0,v1$0,0]]])}
    function eprintf(format){return caml_call2(_fy_,eprint,format)}
    function Make$14(symbol)
     {var check_invariant=[0,1],show_messages=[0,1];
      function debug
       (invariant,module_name,name,ts,arg,sexp_of_arg,sexp_of_result,f)
       {if(show_messages[1])
         eprints
          (caml_call2
            (include$39[50],_aAR_,[0,module_name,[0,cst$269,[0,name,0]]]),
           arg,
           sexp_of_arg);
        if(check_invariant[1])
         try
          {caml_call2(include$23[9],ts,invariant)}
         catch(exn)
          {exn = caml_wrap_exception(exn);
           failwiths
            (0,
             _aAS_,
             cst_invariant_pre_condition_fa,
             [0,name,exn],
             function(param)
              {var
                v1=param[2],
                v0=param[1],
                v0$0=caml_call1(_au_,v0),
                v1$0=caml_call1(sexp_of_t,v1);
               return [1,[0,v0$0,[0,v1$0,0]]]})}
        var result_or_exn=caml_call1(_h6_,f);
        if(check_invariant[1])
         try
          {caml_call2(include$23[9],ts,invariant)}
         catch(exn)
          {exn = caml_wrap_exception(exn);
           failwiths
            (0,
             _aAT_,
             cst_invariant_post_condition_f,
             [0,name,exn],
             function(param)
              {var
                v1=param[2],
                v0=param[1],
                v0$0=caml_call1(_au_,v0),
                v1$0=caml_call1(sexp_of_t,v1);
               return [1,[0,v0$0,[0,v1$0,0]]]})}
        if(show_messages[1])
         {var _aCN_=caml_call2(_hx_,sexp_of_result,sexp_of_t);
          eprints
           (caml_call2
             (include$39[50],_aAV_,[0,module_name,[0,cst$270,[0,name,_aAU_]]]),
            result_or_exn,
            _aCN_)}
        return caml_call1(_hR_,result_or_exn)}
      return [0,check_invariant,show_messages,debug]}
    var should_print_backtrace=[0,0];
    function am_internal(here,message)
     {caml_call2(_fB_,_aAW_,caml_call1(_mW_,here));
      if(should_print_backtrace[1])
       {var _aCM_=caml_call2(Base_Backtrace[2],0,0);
        caml_call2
         (_fB_,
          _aAX_,
          caml_call2(to_string_hum,0,caml_call1(Base_Backtrace[1],_aCM_)))}
      if(message){var message$0=message[1];caml_call2(_fB_,_aAY_,message$0)}
      return caml_call1(_fB_,_aAZ_)}
    function am(here){return am_internal(here,0)}
    function amf(here,fmt)
     {return caml_call2
              (_fy_,function(string){return am_internal(here,[0,string])},fmt)}
    function ams(here,v0,v1,sexp_of_a)
     {var v0$0=caml_call1(_au_,v0),v1$0=caml_call1(sexp_of_a,v1);
      return am_internal
              (here,[0,caml_call2(to_string_hum,0,[1,[0,v0$0,[0,v1$0,0]]])])}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$511);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Debug$0);
    var
     Core_kernel_Debug=
      [0,
       eprint,
       eprints,
       eprint_s,
       eprintf,
       Make$14,
       am,
       ams,
       amf,
       should_print_backtrace];
    caml_register_global(5183,Core_kernel_Debug,"Core_kernel__Debug");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Bag_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$512);
    caml_call1(Expect_test_collector[4][1],cst_src_bag_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$513,cst$271);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$514);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Bag_intf$0);
    var Core_kernel_Bag_intf=[0];
    caml_register_global(5184,Core_kernel_Bag_intf,"Core_kernel__Bag_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Bag);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$515);
    caml_call1(Expect_test_collector[4][1],cst_src_bag_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$516,cst$272);
    function add_unit(t,v){add$9(t,v);return 0}
    function elts(t)
     {return fold_elt(t,0,function(acc,elt){return [0,elt,acc]})}
    function until_empty$0(t,f)
     {function loop(param)
       {function _aCL_(v){caml_call1(f,v);return loop(0)}
        return caml_call2(_xC_,remove_one(t),_aCL_)}
      return loop(0)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$517);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Bag$0);
    var
     Core_kernel_Bag=
      [0,
       [0,Elt[2],Elt[4],Elt[1]],
       t_of_sexp$27,
       sexp_of_t$35,
       _yH_,
       length$13,
       is_empty$11,
       iter$14,
       _yF_,
       _yL_,
       _yM_,
       _yC_,
       _yG_,
       _yA_,
       _yB_,
       _yD_,
       _yE_,
       to_list$5,
       _yI_,
       _yJ_,
       _yK_,
       invariant$3,
       create$12,
       add$9,
       add_unit,
       mem_elt,
       remove$9,
       choose$4,
       remove_one,
       clear$1,
       filter_inplace$1,
       iter_elt,
       find_elt,
       until_empty$0,
       transfer,
       of_list$7,
       elts,
       unchecked_iter];
    caml_register_global(5185,Core_kernel_Bag,"Core_kernel__Bag");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Bigbuffer_inte);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$518);
    caml_call1(Expect_test_collector[4][1],cst_src_bigbuffer_internal_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$519,cst$273);
    function sexp_of_t$142(param)
     {var
       v_bstr=param[1],
       v_pos=param[2],
       v_len=param[3],
       v_init=param[4],
       arg=caml_call1(_Rd_,v_init),
       bnds=[0,[1,[0,_aA0_,[0,arg,0]]],0],
       arg$0=caml_call1(sexp_of_t$0,v_len),
       bnds$0=[0,[1,[0,_aA1_,[0,arg$0,0]]],bnds],
       arg$1=caml_call1(sexp_of_t$0,v_pos),
       bnds$1=[0,[1,[0,_aA2_,[0,arg$1,0]]],bnds$0],
       arg$2=caml_call1(_Rd_,v_bstr),
       bnds$2=[0,[1,[0,_aA3_,[0,arg$2,0]]],bnds$1];
      return [1,bnds$2]}
    function resize(buf,more)
     {var
       min_len=caml_call2(_aJ_,buf[3],more),
       new_len=caml_call2(_aJ_,min_len,min_len),
       new_buf=arg(0,new_len);
      caml_call6(_Rv_,buf[1],0,[0,buf[2]],new_buf,0,0);
      buf[1] = new_buf;
      buf[3] = new_len;
      return 0}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$520);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Bigbuffer_inte$0);
    var include$160=[0,sexp_of_t$142,resize];
    caml_register_global(5186,include$160,"Core_kernel__Bigbuffer_internal");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Bigbuffer);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$521);
    caml_call1(Expect_test_collector[4][1],cst_src_bigbuffer_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$522,cst$274);
    function internal(t){return t}
    function length$26(t){return t[2]}
    function create$45(n)
     {var n$0=caml_call2(_ba_,1,n),bstr=arg(0,n$0);return [0,bstr,0,n$0,bstr]}
    function contents(buf){return caml_call3(_Ro_,0,[0,buf[2]],buf[1])}
    function contents_bytes(buf){return caml_call3(_Rp_,0,[0,buf[2]],buf[1])}
    function big_contents(buf){return caml_call3(_Ry_,0,[0,buf[2]],buf[1])}
    function volatile_contents(buf){return buf[1]}
    function add_char(buf,c)
     {var pos=buf[2];
      if(caml_call2(_a7_,pos,buf[3]))resize(buf,1);
      caml_ba_set_1(buf[1],pos,c);
      buf[2] = caml_call2(_aJ_,pos,1);
      return 0}
    function create$46(len){return caml_call1(_Eq_,len)}
    function unsafe_blit$2(src,src_pos,dst,dst_pos,len)
     {return caml_call5(_RC_[3],src[1],src_pos,dst,dst_pos,len)}
    var _aA4_=[0,create$46,_Ex_,_Ey_,_Ez_,unsafe_blit$2];
    function create$47(len)
     {var t=create$45(len),_aCJ_=1;
      if(! (len < 1))
       {var for$0=_aCJ_;
        for(;;)
         {add_char(t,97);
          var _aCK_=for$0 + 1 | 0;
          if(len !== for$0){var for$0=_aCK_;continue}
          break}}
      return t}
    function set$15(t,i,c){return caml_ba_set_1(t[1],i,c)}
    function get$10(t,i){return caml_ba_get_1(t[1],i)}
    var _aA5_=[0,create$47,length$26,get$10,set$15];
    function of_bool$1(b){return b?97:98}
    var
     include$161=
      caml_call1
       (caml_call1
         (caml_call1(Base_for_tests_Test_blit[6],[0,_FD_,of_bool$1]),_aA5_),
        _aA4_),
     blit$6=include$161[1],
     blito$4=include$161[2],
     unsafe_blit$3=include$161[3],
     sub$7=include$161[4],
     subo$4=include$161[5],
     To_string=caml_call1(caml_call1(Base_Blit[3],[0]),include$161);
    function nth$7(buf,pos)
     {if(! caml_call2(_a2_,pos,0) && ! caml_call2(_a7_,pos,buf[2]))
       return caml_ba_get_1(buf[1],pos);
      return caml_call1(_bm_,cst_Bigbuffer_nth)}
    function clear$6(buf){buf[2] = 0;return 0}
    function reset(buf)
     {buf[2] = 0;buf[1] = buf[4];buf[3] = caml_call1(_Rt_,buf[1]);return 0}
    function add_substring(buf,src,src_pos,len)
     {var _aCG_=caml_call2(_a2_,src_pos,0);
      if(_aCG_)
       var _aCH_=_aCG_;
      else
       var
        _aCI_=caml_call2(_a2_,len,0),
        _aCH_=
         _aCI_
         ||
         caml_call2
          (_a6_,src_pos,caml_call2(_aK_,caml_ml_string_length(src),len));
      if(_aCH_)caml_call1(_bm_,cst_Bigbuffer_add_substring);
      var new_pos=caml_call2(_aJ_,buf[2],len);
      if(caml_call2(_a6_,new_pos,buf[3]))resize(buf,len);
      caml_call5(_RB_[1],src,src_pos,buf[1],buf[2],len);
      buf[2] = new_pos;
      return 0}
    function add_subbytes(buf,src,src_pos,len)
     {var _aCD_=caml_call2(_a2_,src_pos,0);
      if(_aCD_)
       var _aCE_=_aCD_;
      else
       var
        _aCF_=caml_call2(_a2_,len,0),
        _aCE_=
         _aCF_
         ||
         caml_call2(_a6_,src_pos,caml_call2(_aK_,caml_call1(_Ex_,src),len));
      if(_aCE_)caml_call1(_bm_,cst_Bigbuffer_add_subbytes);
      var new_pos=caml_call2(_aJ_,buf[2],len);
      if(caml_call2(_a6_,new_pos,buf[3]))resize(buf,len);
      caml_call5(_RD_[1],src,src_pos,buf[1],buf[2],len);
      buf[2] = new_pos;
      return 0}
    function add_bigstring(buf,src)
     {var len=caml_call1(_Rt_,src),new_pos=caml_call2(_aJ_,buf[2],len);
      if(caml_call2(_a6_,new_pos,buf[3]))resize(buf,len);
      caml_call6(_Rv_,src,0,[0,len],buf[1],[0,buf[2]],0);
      buf[2] = new_pos;
      return 0}
    function add_string(buf,src)
     {var len=caml_ml_string_length(src),new_pos=caml_call2(_aJ_,buf[2],len);
      if(caml_call2(_a6_,new_pos,buf[3]))resize(buf,len);
      caml_call6(_RB_[2],src,0,[0,len],buf[1],[0,buf[2]],0);
      buf[2] = new_pos;
      return 0}
    function add_bytes(buf,src)
     {var len=caml_call1(_Ex_,src),new_pos=caml_call2(_aJ_,buf[2],len);
      if(caml_call2(_a6_,new_pos,buf[3]))resize(buf,len);
      caml_call6(_RD_[2],src,0,[0,len],buf[1],[0,buf[2]],0);
      buf[2] = new_pos;
      return 0}
    function add_buffer(buf_dst,buf_src)
     {var
       len=buf_src[2],
       dst_pos=buf_dst[2],
       new_pos=caml_call2(_aJ_,dst_pos,len);
      if(caml_call2(_a6_,new_pos,buf_dst[3]))resize(buf_dst,len);
      caml_call6(_Rv_,buf_src[1],0,[0,len],buf_dst[1],[0,dst_pos],0);
      buf_dst[2] = new_pos;
      return 0}
    function add_bin_prot(t,writer,x)
     {try
       {var pos=caml_call3(writer[2],t[1],t[2],x),new_pos=pos}
      catch(_aCC_)
       {var size=caml_call1(writer[1],x),_aCB_=t[3];
        if(caml_call2(_a6_,caml_call2(_aJ_,t[2],size),_aCB_))resize(t,size);
        var new_pos=caml_call3(writer[2],t[1],t[2],x)}
      t[2] = new_pos;
      return 0}
    function add_substitute(buf,f,s)
     {var lim$1=caml_ml_string_length(s),previous=32,i$6=0;
      for(;;)
       {var _aCA_=caml_call2(_a2_,i$6,lim$1);
        if(_aCA_)
         {var previous$0=caml_string_get(s,i$6);
          if(36 === previous$0)
           {if(caml_call2(_FD_,previous,92))
             {add_char(buf,previous$0);
              var i$7=caml_call2(_aJ_,i$6,1),previous=previous$0,i$6=i$7;
              continue}
            var
             start$0=caml_call2(_aJ_,i$6,1),
             opening=caml_string_get(s,start$0),
             switch$0=0;
            if(40 !== opening && 123 !== opening)
             {var
               i$5=caml_call2(_aJ_,start$0,1),
               lim$0=caml_ml_string_length(s),
               i$3=i$5;
              for(;;)
               {if(caml_call2(_a7_,i$3,lim$0))
                 var stop=lim$0;
                else
                 {var match=caml_string_get(s,i$3),switch$1=0;
                  if(95 <= match)
                   {if(123 <= match)
                     {if(192 <= match)
                       switch(match - 192 | 0)
                        {case 0:
                         case 1:
                         case 2:
                         case 7:
                         case 8:
                         case 9:
                         case 10:
                         case 11:
                         case 14:
                         case 15:
                         case 20:
                         case 25:
                         case 27:
                         case 28:
                         case 32:
                         case 33:
                         case 34:
                         case 39:
                         case 40:
                         case 41:
                         case 42:
                         case 43:
                         case 46:
                         case 47:
                         case 52:
                         case 57:
                         case 59:
                         case 60:switch$1 = 1;break
                         }}
                    else
                     if(96 !== match)switch$1 = 1}
                  else
                   if(58 <= match)
                    {if(! (25 < (match - 65 | 0) >>> 0))switch$1 = 1}
                   else
                    if(48 <= match)switch$1 = 1;
                  if(switch$1)
                   {var i$4=caml_call2(_aJ_,i$3,1),i$3=i$4;continue}
                  var stop=i$3}
                var
                 match$0=
                  [0,
                   caml_call3(_BR_,s,start$0,caml_call2(_aK_,stop,start$0)),
                   stop];
                switch$0 = 1;
                break}}
            if(! switch$0)
             {var start=caml_call2(_aJ_,start$0,1),k$2=0;
              if(40 === opening)
               var _aCy_=41;
              else
               {if(123 !== opening)throw [0,Assert_failure,_aA6_];
                var _aCy_=125}
              var lim=caml_ml_string_length(s),k=k$2,i=start;
              for(;;)
               {if(caml_call2(_a7_,i,lim))
                 {var
                   _aCu_=[0,caml_call1(Sexplib0_Sexp_conv[7],s),0],
                   _aCv_=
                    [0,[1,[0,_aA7_,[0,caml_call1(sexp_of_t$0,start),0]]],_aCu_],
                   _aCw_=[0,[1,[0,_aA8_,[0,caml_call1(_t_,_aCy_),0]]],_aCv_],
                   _aCx_=[0,[1,[0,_aA9_,[0,caml_call1(_t_,opening),0]]],_aCw_];
                  throw [0,
                         _fl_,
                         [1,
                          [0,
                           caml_call1
                            (Sexplib0_Sexp_conv[7],cst_Bigbuffer_add_substitute_c),
                           _aCx_]]]}
                if(caml_call2(_FD_,caml_string_get(s,i),opening))
                 {var
                   i$0=caml_call2(_aJ_,i,1),
                   k$0=caml_call2(_aJ_,k,1),
                   k=k$0,
                   i=i$0;
                  continue}
                if(! caml_call2(_FD_,caml_string_get(s,i),_aCy_))
                 {var i$2=caml_call2(_aJ_,i,1),i=i$2;continue}
                if(! caml_call2(_a5_,k,0))
                 {var
                   i$1=caml_call2(_aJ_,i,1),
                   k$1=caml_call2(_aK_,k,1),
                   k=k$1,
                   i=i$1;
                  continue}
                var
                 _aCz_=caml_call2(_aJ_,i,1),
                 match$0=
                  [0,
                   caml_call3
                    (_BR_,s,start,caml_call2(_aK_,caml_call2(_aK_,i,start$0),1)),
                   _aCz_];
                break}}
            var next_i=match$0[2],ident=match$0[1];
            add_string(buf,caml_call1(f,ident));
            var previous=32,i$6=next_i;
            continue}
          if(caml_call2(_FD_,previous,92))
           {add_char(buf,92);
            add_char(buf,previous$0);
            var i$8=caml_call2(_aJ_,i$6,1),previous=previous$0,i$6=i$8;
            continue}
          if(92 === previous$0)
           {var i$9=caml_call2(_aJ_,i$6,1),previous=previous$0,i$6=i$9;
            continue}
          add_char(buf,previous$0);
          var i$10=caml_call2(_aJ_,i$6,1),previous=previous$0,i$6=i$10;
          continue}
        return _aCA_}}
    function formatter_of_buffer(buf)
     {function _aCr_(_aCt_){return 0}
      function _aCs_(s,pos,len){return add_substring(buf,s,pos,len)}
      return caml_call2(Stdlib_format[113],_aCs_,_aCr_)}
    function bprintf(buf)
     {var _aCo_=formatter_of_buffer(buf);
      function _aCp_(_aCq_){return 0}
      return caml_call2(Stdlib_format[133],_aCp_,_aCo_)}
    var Format=[0,formatter_of_buffer,bprintf];
    function bprintf$0(buf)
     {return caml_call1(_fy_,function(_aCn_){return add_string(buf,_aCn_)})}
    var Printf=[0,bprintf$0];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$523);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Bigbuffer$0);
    var
     Core_kernel_Bigbuffer=
      [0,
       sexp_of_t$142,
       create$45,
       contents,
       contents_bytes,
       blit$6,
       blito$4,
       unsafe_blit$3,
       sub$7,
       subo$4,
       To_string,
       nth$7,
       length$26,
       clear$6,
       reset,
       add_char,
       add_string,
       add_substring,
       add_bytes,
       add_subbytes,
       add_buffer,
       big_contents,
       volatile_contents,
       add_bigstring,
       add_bin_prot,
       add_substitute,
       Format,
       Printf,
       internal];
    caml_register_global(5189,Core_kernel_Bigbuffer,"Core_kernel__Bigbuffer");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Bigsubstring);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$524);
    caml_call1(Expect_test_collector[4][1],cst_src_bigsubstring_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$525,cst$275);
    var _aA__=0;
    function create$48(_aCm_){return arg(_aA__,_aCm_)}
    var
     get$11=caml_ba_get_1,
     blit$7=Blit[8],
     blit_to_string$0=Blit[5],
     blit_to_bytes$0=Blit[5],
     blit_to_bigstring$0=Blit[8],
     blit_from_string$0=Blit[6],
     blit_from_bigstring$0=Blit[8],
     include$162=
      F
       ([0,
         create$48,
         _Rt_,
         blit$7,
         blit_to_bytes$0,
         blit_to_bigstring$0,
         blit_from_string$0,
         blit_from_bigstring$0,
         blit_to_string$0,
         get$11]),
     _aA$_=include$162[1],
     _aBa_=include$162[2],
     _aBb_=include$162[3],
     _aBc_=include$162[4],
     _aBd_=include$162[5],
     _aBe_=include$162[6],
     _aBf_=include$162[7],
     _aBg_=include$162[8],
     _aBh_=include$162[9],
     _aBi_=include$162[10],
     _aBj_=include$162[11],
     _aBk_=include$162[12],
     _aBl_=include$162[13],
     _aBm_=include$162[14],
     _aBn_=include$162[15],
     _aBo_=include$162[16],
     _aBp_=include$162[17],
     _aBq_=include$162[18],
     _aBr_=include$162[19],
     _aBs_=include$162[20],
     _aBt_=include$162[21],
     _aBu_=include$162[22],
     _aBv_=include$162[23],
     _aBw_=include$162[24],
     _aBx_=include$162[25],
     _aBy_=include$162[26],
     _aBz_=include$162[27],
     _aBA_=include$162[28],
     _aBB_=include$162[29],
     _aBC_=include$162[30],
     _aBD_=include$162[31],
     _aBE_=include$162[32],
     _aBF_=include$162[33],
     _aBG_=include$162[34],
     _aBH_=include$162[35],
     _aBI_=include$162[36],
     _aBJ_=include$162[37],
     _aBK_=include$162[38];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$526);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Bigsubstring$0);
    var
     Core_kernel_Bigsubstring=
      [0,
       _aA$_,
       _aBa_,
       _aBb_,
       _aBc_,
       _aBd_,
       _aBe_,
       _aBf_,
       _aBg_,
       _aBh_,
       _aBi_,
       _aBj_,
       _aBk_,
       _aBl_,
       _aBm_,
       _aBn_,
       _aBo_,
       _aBp_,
       _aBq_,
       _aBr_,
       _aBs_,
       _aBt_,
       _aBu_,
       _aBv_,
       _aBw_,
       _aBx_,
       _aBy_,
       _aBz_,
       _aBA_,
       _aBB_,
       _aBC_,
       _aBD_,
       _aBE_,
       _aBF_,
       _aBG_,
       _aBH_,
       _aBI_,
       _aBJ_,
       _aBK_];
    caml_register_global
     (5190,Core_kernel_Bigsubstring,"Core_kernel__Bigsubstring");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Bounded_index_);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$527);
    caml_call1(Expect_test_collector[4][1],cst_src_bounded_index_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$528,cst$276);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$529);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Bounded_index_$0);
    var Core_kernel_Bounded_index_intf=[0];
    caml_register_global
     (5191,Core_kernel_Bounded_index_intf,"Core_kernel__Bounded_index_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel_Bounded_index);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$530);
    caml_call1(Expect_test_collector[4][1],cst_src_bounded_index_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$531,cst$277);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$532);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel_Bounded_index$0);
    var
     Core_kernel_Bounded_index=
      [0,
       function(M)
        {var
          _aB1_=M[1],
          _aBU_=
           caml_call1
            (Bin_prot_Shape[8],
             [0,
              [0,cst_index,_YO_],
              [0,[0,cst_min_index,_YO_],[0,[0,cst_max_index,_YO_],0]]]),
          _aBV_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$293),0,_aBU_],0],
          _aBW_=caml_call1(Bin_prot_Shape[4][1],cst_src_bounded_index_ml_10_6),
          group=caml_call2(Bin_prot_Shape[6],_aBW_,_aBV_),
          _aBX_=caml_call1(Bin_prot_Shape[2][1],cst_t$294),
          bin_shape_t=caml_call1(caml_call2(Bin_prot_Shape[14],group,_aBX_),0);
         function bin_size_t(param)
          {var
            v3=param[3],
            v2=param[2],
            v1=param[1],
            _aCj_=caml_call1(_XE_,v1),
            size=caml_call2(Bin_prot_Common[23],0,_aCj_),
            _aCk_=caml_call1(_XE_,v2),
            size$0=caml_call2(Bin_prot_Common[23],size,_aCk_),
            _aCl_=caml_call1(_XE_,v3);
           return caml_call2(Bin_prot_Common[23],size$0,_aCl_)}
         function bin_write_t(buf,pos,param)
          {var
            v3=param[3],
            v2=param[2],
            v1=param[1],
            pos$0=caml_call3(_YQ_,buf,pos,v1),
            pos$1=caml_call3(_YQ_,buf,pos$0,v2);
           return caml_call3(_YQ_,buf,pos$1,v3)}
         var bin_writer_t=[0,bin_size_t,bin_write_t];
         function bin_read_t(buf,pos_ref,vint)
          {return caml_call2
                   (Bin_prot_Common[19],
                    cst_src_bounded_index_ml_Stabl,
                    pos_ref[1])}
         function bin_read_t$0(buf,pos_ref)
          {var
            v_index=caml_call2(_YS_,buf,pos_ref),
            v_min_index=caml_call2(_YS_,buf,pos_ref),
            v_max_index=caml_call2(_YS_,buf,pos_ref);
           return [0,v_index,v_min_index,v_max_index]}
         var
          bin_reader_t=[0,bin_read_t$0,bin_read_t],
          bin_t=[0,bin_shape_t,bin_writer_t,bin_reader_t];
         function compare$0(a_001,b_002)
          {if(caml_call2(Ppx_compare_lib[1],a_001,b_002))return 0;
           var n=caml_call2(compare,a_001[1],b_002[1]);
           if(0 === n)
            {var n$0=caml_call2(compare,a_001[2],b_002[2]);
             return 0 === n$0?caml_call2(compare,a_001[3],b_002[3]):n$0}
           return n}
         function hash_fold_t(hsv,arg)
          {var
            hsv$0=caml_call2(__4_,hsv,arg[1]),
            hsv$1=caml_call2(__4_,hsv$0,arg[2]);
           return caml_call2(__4_,hsv$1,arg[3])}
         function create(index,min,max)
          {if(! caml_call2(_a2_,index,min) && ! caml_call2(_a6_,index,max))
            return [0,index,min,max];
           var
            _aCg_=[0,[1,[0,_aBL_,[0,caml_call1(_$N_,max),0]]],0],
            _aCh_=[0,[1,[0,_aBM_,[0,caml_call1(_$N_,min),0]]],_aCg_],
            _aCi_=[0,[1,[0,_aBN_,[0,caml_call1(_$N_,index),0]]],_aCh_];
           return caml_call1
                   (_od_,
                    [1,
                     [0,
                      caml_call1(Sexplib0_Sexp_conv[7],cst_index_out_of_bounds$0),
                      _aCi_]])}
         function t_of_sexp(sexp)
          {if(1 === sexp[0])
            {var _aCa_=sexp[1];
             if(_aCa_)
              {var _aCb_=_aCa_[2];
               if(_aCb_)
                {var _aCc_=_aCb_[2];
                 if(_aCc_)
                  {var _aCd_=_aCc_[2];
                   if(_aCd_)
                    {var _aCe_=_aCd_[2];
                     if(_aCe_)
                      {var _aCf_=_aCe_[2];
                       if(_aCf_ && ! _aCf_[2])
                        {var
                          v5=_aCf_[1],
                          v4=_aCe_[1],
                          v3=_aCd_[1],
                          v2=_aCc_[1],
                          v1=_aCb_[1],
                          v0=_aCa_[1],
                          v0$0=caml_call1(_$r_,v0),
                          v1$0=caml_call1(_$M_,v1),
                          v2$0=caml_call1(_$r_,v2),
                          v3$0=caml_call1(_$M_,v3),
                          v4$0=caml_call1(_$r_,v4),
                          v5$0=caml_call1(_$M_,v5);
                         return [0,v0$0,v1$0,v2$0,v3$0,v4$0,v5$0]}}}}}}}
           return caml_call3(Sexplib0_Sexp_conv_error[2],tp_loc$57,6,sexp)}
         function sexp_of_t(param)
          {var
            v5=param[6],
            v4=param[5],
            v3=param[4],
            v2=param[3],
            v1=param[2],
            v0=param[1],
            v0$0=caml_call1(_$s_,v0),
            v1$0=caml_call1(_$N_,v1),
            v2$0=caml_call1(_$s_,v2),
            v3$0=caml_call1(_$N_,v3),
            v4$0=caml_call1(_$s_,v4),
            v5$0=caml_call1(_$N_,v5);
           return [1,[0,v0$0,[0,v1$0,[0,v2$0,[0,v3$0,[0,v4$0,[0,v5$0,0]]]]]]]}
         var For_sexpable=[0,t_of_sexp,sexp_of_t];
         function to_sexpable(t)
          {return [0,_aB1_,t[1],cst_of,t[2],cst_to,t[3]]}
         function of_sexpable(param)
          {var
            max=param[6],
            to=param[5],
            min=param[4],
            of=param[3],
            index=param[2],
            label=param[1];
           if
            (caml_call2(equal$18,label,_aB1_)
             &&
             caml_call2(equal$18,of,cst_of$0)
             &&
             caml_call2(equal$18,to,cst_to$0))
            return create(index,min,max);
           var
            _aB$_=
             [0,[1,[0,_aBO_,[0,caml_call1(Sexplib0_Sexp_conv[7],_aB1_),0]]],0];
           return caml_call1
                   (_od_,
                    [1,
                     [0,
                      caml_call1(Sexplib0_Sexp_conv[7],cst_invalid_sexp_for_index),
                      _aB$_]])}
         var
          include=
           caml_call1
            (caml_call1(Stable[1][1],For_sexpable),
             [0,to_sexpable,of_sexpable]),
          t_of_sexp$0=include[1],
          sexp_of_t$0=include[2],
          include$0=caml_call1(_hc_[1][2],[0,compare$0,sexp_of_t$0]),
          comparator=include$0[1],
          _aBY_=
           [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$295),0,bin_shape_t],0],
          _aBZ_=
           caml_call1(Bin_prot_Shape[4][1],cst_src_bounded_index_ml_52_10),
          group$0=caml_call2(Bin_prot_Shape[6],_aBZ_,_aBY_),
          _aB0_=caml_call1(Bin_prot_Shape[2][1],cst_t$296),
          bin_shape_t$0=
           caml_call1(caml_call2(Bin_prot_Shape[14],group$0,_aB0_),0),
          bin_writer_t$0=[0,bin_size_t,bin_write_t],
          bin_reader_t$0=[0,bin_read_t$0,bin_read_t],
          bin_t$0=[0,bin_shape_t$0,bin_writer_t$0,bin_reader_t$0],
          include$1=
           caml_call1
            (Stable$2[1][1],
             [0,
              bin_size_t,
              bin_write_t,
              bin_read_t$0,
              bin_read_t,
              bin_shape_t$0,
              bin_writer_t$0,
              bin_reader_t$0,
              bin_t$0,
              compare$0,
              t_of_sexp$0,
              sexp_of_t$0,
              comparator]),
          Map=include$1[1],
          Set=include$1[2],
          _aB2_=
           [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$297),0,bin_shape_t],0],
          _aB3_=caml_call1(Bin_prot_Shape[4][1],cst_src_bounded_index_ml_76_2),
          group$1=caml_call2(Bin_prot_Shape[6],_aB3_,_aB2_),
          _aB4_=caml_call1(Bin_prot_Shape[2][1],cst_t$298),
          bin_shape_t$1=
           caml_call1(caml_call2(Bin_prot_Shape[14],group$1,_aB4_),0);
         function create_all(min,max)
          {return caml_call1
                   (_iL_,
                    caml_call2
                     (_i8_,
                      min,
                      function(index)
                       {if
                         (!
                          caml_call2(_Nt_,index,min)
                          &&
                          !
                          caml_call2(_Ns_,index,max))
                         return [0,[0,create(index,min,max),index + 1 | 0]];
                        return 0}))}
         function index(t){return t[1]}
         function max_index(t){return t[3]}
         function min_index(t){return t[2]}
         var
          include$2=caml_call1(_fm_,[0,t_of_sexp$0,sexp_of_t$0]),
          _aB5_=include$2[1],
          _aB6_=include$2[2],
          _aB7_=
           [0,
            [0,caml_call1(Bin_prot_Shape[2][1],cst_t$299),0,bin_shape_t$1],
            0],
          _aB8_=caml_call1(Bin_prot_Shape[4][1],cst_src_bounded_index_ml_98_6),
          group$2=caml_call2(Bin_prot_Shape[6],_aB8_,_aB7_),
          _aB9_=caml_call1(Bin_prot_Shape[2][1],cst_t$300),
          bin_shape_t$2=
           caml_call1(caml_call2(Bin_prot_Shape[14],group$2,_aB9_),0),
          bin_writer_t$1=[0,bin_size_t,bin_write_t],
          bin_reader_t$1=[0,bin_read_t$0,bin_read_t],
          bin_t$1=[0,bin_shape_t$2,bin_writer_t$1,bin_reader_t$1];
         function hash(x)
          {var hsv=caml_call2(Base_Hash[11],0,0),_aB__=hash_fold_t(hsv,x);
           return caml_call1(Base_Hash[9],_aB__)}
         var
          module_name=M[2],
          include$3=
           _AN_
            ([0,
              bin_size_t,
              bin_write_t,
              bin_read_t$0,
              bin_read_t,
              bin_shape_t$2,
              bin_writer_t$1,
              bin_reader_t$1,
              bin_t$1,
              compare$0,
              hash_fold_t,
              hash,
              t_of_sexp$0,
              sexp_of_t$0,
              comparator,
              _aB5_,
              _aB6_,
              module_name]),
          bin_size_t$0=include$3[1],
          bin_write_t$0=include$3[2],
          bin_read_t$1=include$3[3],
          bin_read_t$2=include$3[4],
          bin_shape_t$3=include$3[5],
          bin_writer_t$2=include$3[6],
          bin_reader_t$2=include$3[7],
          bin_t$2=include$3[8],
          t_of_sexp$1=include$3[9],
          sexp_of_t$1=include$3[10],
          of_string=include$3[11],
          to_string=include$3[12],
          pp=include$3[13],
          symbol=include$3[14],
          symbol$0=include$3[15],
          symbol$1=include$3[16],
          symbol$2=include$3[17],
          symbol$3=include$3[18],
          symbol$4=include$3[19],
          equal=include$3[20],
          compare$1=include$3[21],
          min=include$3[22],
          max=include$3[23],
          ascending=include$3[24],
          descending=include$3[25],
          between=include$3[26],
          clamp_exn=include$3[27],
          clamp=include$3[28],
          validate_lbound=include$3[29],
          validate_ubound=include$3[30],
          validate_bound=include$3[31],
          Replace_polymorphic_compare=include$3[32],
          comparator$0=include$3[33],
          Map$0=include$3[34],
          Set$0=include$3[35],
          hash_fold_t$0=include$3[36],
          hash$0=include$3[37],
          hashable=include$3[38],
          Table=include$3[39],
          Hash_set=include$3[40],
          Hash_queue=include$3[41];
         return [0,
                 bin_size_t$0,
                 bin_write_t$0,
                 bin_read_t$1,
                 bin_read_t$2,
                 bin_shape_t$3,
                 bin_writer_t$2,
                 bin_reader_t$2,
                 bin_t$2,
                 t_of_sexp$1,
                 sexp_of_t$1,
                 of_string,
                 to_string,
                 pp,
                 symbol,
                 symbol$0,
                 symbol$1,
                 symbol$2,
                 symbol$3,
                 symbol$4,
                 equal,
                 compare$1,
                 min,
                 max,
                 ascending,
                 descending,
                 between,
                 clamp_exn,
                 clamp,
                 validate_lbound,
                 validate_ubound,
                 validate_bound,
                 Replace_polymorphic_compare,
                 comparator$0,
                 Map$0,
                 Set$0,
                 hash_fold_t$0,
                 hash$0,
                 hashable,
                 Table,
                 Hash_set,
                 Hash_queue,
                 create,
                 create_all,
                 index,
                 min_index,
                 max_index,
                 [0,
                  [0,
                   bin_size_t,
                   bin_write_t,
                   bin_read_t$0,
                   bin_read_t,
                   bin_shape_t,
                   bin_writer_t,
                   bin_reader_t,
                   bin_t,
                   compare$0,
                   t_of_sexp$0,
                   sexp_of_t$0,
                   comparator,
                   Map,
                   Set]]]}];
    caml_register_global
     (5192,Core_kernel_Bounded_index,"Core_kernel__Bounded_index");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_kernel);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core_kernel$533);
    caml_call1(Expect_test_collector[4][1],cst_src_core_kernel_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$534,cst$278);
    var
     Unix=[0],
     _aBP_=include$1[1],
     _aBQ_=include$1[2],
     _aBR_=Base_Exn[16],
     _aBS_=_acs_[80];
    caml_call1(Base_Exn[17],0);
    var Core_kernel_private=[0];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$535);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_kernel$0);
    var
     Core_kernel$0=
      [0,
       Unix,
       _Ga_,
       _Gb_,
       _Gc_,
       _Gf_,
       _Gg_,
       _Gh_,
       _Gi_,
       _Gj_,
       _Gk_,
       _Gl_,
       _Gm_,
       _Gn_,
       _Go_,
       _Gp_,
       _Gq_,
       _Gr_,
       _Gs_,
       _Gt_,
       _Gu_,
       _Gw_,
       _Gx_,
       _Gy_,
       _Gz_,
       _GA_,
       _GB_,
       _GC_,
       _GD_,
       _GE_,
       _GF_,
       _GG_,
       _GH_,
       _GI_,
       _GJ_,
       _GK_,
       _GL_,
       _GM_,
       _GN_,
       _GO_,
       _GP_,
       _GQ_,
       _GR_,
       _GS_,
       _GT_,
       _GU_,
       _GV_,
       _GW_,
       _GX_,
       _GY_,
       _GZ_,
       _G0_,
       _G1_,
       _G2_,
       _G3_,
       _G4_,
       _G5_,
       _G6_,
       _G7_,
       _G8_,
       _G9_,
       _G__,
       _G$_,
       _Ha_,
       _Hb_,
       _Hc_,
       _Hd_,
       _He_,
       _Hf_,
       _Hg_,
       _Hh_,
       _Hi_,
       _Hj_,
       _Hk_,
       _Hl_,
       _Hm_,
       _Hn_,
       _Ho_,
       _Hp_,
       _Hq_,
       _Hr_,
       _Hs_,
       _Ht_,
       _Hu_,
       _Hv_,
       _Np_,
       _Nq_,
       _Nr_,
       _Ns_,
       _Nt_,
       _Nu_,
       _Nv_,
       _Nw_,
       _Nx_,
       _Ny_,
       _Nz_,
       _NA_,
       _NB_,
       _NC_,
       _ND_,
       _NE_,
       _NF_,
       _NG_,
       _NH_,
       _NI_,
       _NJ_,
       _NK_,
       _NL_,
       _NM_,
       _NN_,
       _NO_,
       _NP_,
       quickcheck_observer$8,
       _NQ_,
       _NR_,
       _NS_,
       _NT_,
       _NU_,
       _NV_,
       _NW_,
       _NX_,
       quickcheck_shrinker$8,
       _NY_,
       _NZ_,
       _N0_,
       _N1_,
       _N2_,
       _N3_,
       symbol,
       _N4_,
       _N5_,
       _N6_,
       _N7_,
       _N8_,
       _N9_,
       _N__,
       _N$_,
       _Oa_,
       _Ob_,
       _Oc_,
       _Od_,
       _Oe_,
       _Of_,
       sexp_of_never_returns,
       _L8_,
       _Og_,
       _Oh_,
       _Oi_,
       _Oj_,
       _Ok_,
       _Ol_,
       _Om_,
       _On_,
       _Oo_,
       _Op_,
       _Oq_,
       _Or_,
       _Os_,
       _Ot_,
       _Ou_,
       _Ov_,
       _Ow_,
       _Ox_,
       _Oy_,
       _Oz_,
       _OA_,
       _OB_,
       _OC_,
       _OD_,
       _OE_,
       _OF_,
       _OG_,
       _OH_,
       _OI_,
       _OJ_,
       _OK_,
       _OL_,
       _OM_,
       _ON_,
       _OO_,
       _OP_,
       _OQ_,
       _OR_,
       _OS_,
       _OT_,
       _OU_,
       _OV_,
       _OW_,
       _OX_,
       _OY_,
       _OZ_,
       _O0_,
       _O1_,
       _O2_,
       _O3_,
       _O4_,
       _O5_,
       _O6_,
       _O7_,
       _O8_,
       _O9_,
       _O__,
       _O$_,
       Bug,
       C_malloc_exn,
       _Pd_,
       fst3,
       snd3,
       trd3,
       uw,
       symbol$66,
       symbol$65,
       symbol$68,
       symbol$135,
       _fx_,
       _im_,
       _fB_,
       _tV_,
       _tW_,
       _Pe_,
       failwithp,
       failwiths,
       force,
       _fC_,
       ident,
       _Pf_,
       _fv_,
       _x1_,
       _x2_,
       _fy_,
       _tS_,
       _Pg_,
       phys_same,
       _Ph_,
       _Pi_,
       _fE_,
       _Pj_,
       _Pk_,
       _od_,
       _IZ_,
       _Pl_,
       _fw_,
       _Pm_,
       _Pn_,
       _Po_,
       _Pp_,
       _Pq_,
       _Pr_,
       _Ps_,
       _Pt_,
       _Pu_,
       _Pv_,
       _Pw_,
       _Px_,
       _Py_,
       _Pz_,
       _PA_,
       _PB_,
       _PC_,
       _PD_,
       _PE_,
       _PF_,
       bin_shape_array,
       bin_size_array,
       bin_write_array,
       bin_writer_array,
       bin_read_array$0,
       bin_read_array,
       bin_reader_array,
       bin_array,
       compare_array,
       equal_array,
       _k4_,
       _k5_,
       array_sexp_grammar,
       typerep_of_array,
       typename_of_array,
       bin_shape_bool,
       bin_size_t$47,
       bin_write_t$47,
       bin_writer_bool,
       bin_read_t$96,
       bin_read_t$97,
       bin_reader_bool,
       bin_bool,
       compare$34,
       _Bl_,
       _Bv_,
       hash_bool,
       sexp_of_t$40,
       t_of_sexp$32,
       bool_sexp_grammar,
       typerep_of_bool,
       typename_of_bool,
       bin_shape_char,
       _EV_,
       _EW_,
       bin_writer_char,
       _EX_,
       _EY_,
       bin_reader_char,
       bin_char,
       _FC_,
       _FD_,
       _FP_,
       hash_char,
       _FM_,
       _FN_,
       char_sexp_grammar,
       typerep_of_char,
       typename_of_char,
       bin_shape_float,
       bin_size_t$5,
       bin_write_t$5,
       bin_writer_float,
       bin_read_t$11,
       bin_read_t$12,
       bin_reader_float,
       bin_float,
       compare$40,
       equal$20,
       hash_fold_t$17,
       hash_float,
       sexp_of_t$46,
       _Iw_,
       float_sexp_grammar,
       typerep_of_float,
       typename_of_float,
       bin_shape_int,
       bin_size_t$50,
       bin_write_t$50,
       bin_writer_int,
       bin_read_t$102,
       bin_read_t$103,
       bin_reader_int,
       bin_int,
       compare$42,
       equal$21,
       hash_fold_t$18,
       hash_int,
       sexp_of_t$48,
       t_of_sexp$39,
       int_sexp_grammar,
       typerep_of_int,
       typename_of_int,
       bin_shape_int32,
       bin_size_t$51,
       bin_write_t$51,
       bin_writer_int32,
       bin_read_t$104,
       bin_read_t$105,
       bin_reader_int32,
       bin_int32,
       compare$44,
       equal$22,
       hash_fold_t$20,
       hash_int32,
       sexp_of_t$50,
       t_of_sexp$41,
       int32_sexp_grammar,
       typerep_of_int32,
       typename_of_int32,
       bin_shape_int64,
       bin_size_t$52,
       bin_write_t$52,
       bin_writer_int64,
       bin_read_t$106,
       bin_read_t$107,
       bin_reader_int64,
       bin_int64,
       compare$46,
       equal$23,
       hash_fold_t$22,
       hash_int64,
       sexp_of_t$52,
       t_of_sexp$43,
       int64_sexp_grammar,
       typerep_of_int64,
       typename_of_int64,
       bin_shape_lazy_t,
       bin_size_lazy_t,
       bin_write_lazy_t,
       bin_writer_lazy_t,
       bin_read_lazy_t$0,
       bin_read_lazy_t,
       bin_reader_lazy_t,
       bin_lazy_t,
       compare_lazy_t,
       _Lq_,
       _Ls_,
       _Lr_,
       lazy_t_sexp_grammar,
       typerep_of_lazy_t,
       typename_of_lazy_t,
       bin_shape_list,
       bin_size_list,
       bin_write_list,
       bin_writer_list,
       bin_read_list$0,
       bin_read_list,
       bin_reader_list,
       bin_list,
       compare_list,
       equal_list,
       hash_fold_sexp_list,
       sexp_of_t$17,
       t_of_sexp$18,
       list_sexp_grammar,
       typerep_of_list,
       typename_of_list,
       bin_shape_nativeint,
       bin_size_t$59,
       bin_write_t$59,
       bin_writer_nativeint,
       bin_read_t$120,
       bin_read_t$121,
       bin_reader_nativeint,
       bin_nativeint,
       compare$54,
       equal$26,
       hash_fold_t$27,
       hash_nativeint,
       sexp_of_t$59,
       t_of_sexp$50,
       nativeint_sexp_grammar,
       typerep_of_nativeint,
       typename_of_nativeint,
       bin_shape_option,
       bin_size_option,
       bin_write_option,
       bin_writer_option,
       bin_read_option$0,
       bin_read_option,
       bin_reader_option,
       bin_option,
       compare_option,
       equal_option,
       hash_fold_sexp_option,
       sexp_of_t$33,
       t_of_sexp$26,
       option_sexp_grammar,
       typerep_of_option,
       typename_of_option,
       bin_shape_string,
       bin_size_t$48,
       bin_write_t$48,
       bin_writer_string,
       bin_read_t$98,
       bin_read_t$99,
       bin_reader_string,
       bin_string,
       compare$37,
       equal$18,
       hash_fold_t$14,
       hash_string,
       sexp_of_t$43,
       t_of_sexp$35,
       string_sexp_grammar,
       typerep_of_string,
       typename_of_string,
       bin_shape_bytes,
       bin_size_t$2,
       bin_write_t$2,
       bin_writer_bytes,
       bin_read_t$5,
       bin_read_t$6,
       bin_reader_bytes,
       bin_bytes,
       _Ea_,
       _D$_,
       _DY_,
       _DX_,
       bytes_sexp_grammar,
       typerep_of_bytes,
       typename_of_bytes,
       bin_shape_ref,
       bin_size_ref,
       bin_write_ref,
       bin_writer_ref,
       bin_read_ref$0,
       bin_read_ref,
       bin_reader_ref,
       bin_ref,
       compare_ref,
       equal_ref,
       _M6_,
       _M5_,
       ref_sexp_grammar,
       typerep_of_ref,
       typename_of_ref,
       bin_shape_unit,
       bin_size_t$57,
       bin_write_t$57,
       bin_writer_unit,
       bin_read_t$116,
       bin_read_t$117,
       bin_reader_unit,
       bin_unit,
       compare$52,
       equal$25,
       hash_fold_t$26,
       hash_unit,
       sexp_of_t$57,
       t_of_sexp$48,
       unit_sexp_grammar,
       typerep_of_unit,
       typename_of_unit,
       bin_shape_float_array,
       bin_size_float_array,
       bin_write_float_array,
       bin_writer_float_array,
       bin_read_float_array$0,
       bin_read_float_array,
       bin_reader_float_array,
       bin_float_array,
       compare_float_array,
       sexp_of_float_array,
       float_array_of_sexp,
       float_array_sexp_grammar,
       typerep_of_float_array,
       typename_of_float_array,
       _QG_,
       bin_shape_sexp_array,
       bin_size_sexp_array,
       bin_write_sexp_array,
       bin_writer_sexp_array,
       bin_read_sexp_array,
       bin_read_sexp_array$0,
       bin_reader_sexp_array,
       bin_sexp_array,
       compare_sexp_array,
       Typename_of_sexp_array,
       typename_of_sexp_array,
       typerep_of_sexp_array,
       bin_shape_sexp_bool,
       bin_size_t$47,
       bin_write_t$47,
       bin_writer_sexp_bool,
       bin_read_t$97,
       bin_read_t$96,
       bin_reader_sexp_bool,
       bin_sexp_bool,
       compare$34,
       _Bv_,
       hash_sexp_bool,
       Typename_of_sexp_bool,
       typename_of_sexp_bool,
       typerep_of_sexp_bool,
       bin_shape_sexp_list,
       bin_size_sexp_list,
       bin_write_sexp_list,
       bin_writer_sexp_list,
       bin_read_sexp_list,
       bin_read_sexp_list$0,
       bin_reader_sexp_list,
       bin_sexp_list,
       compare_sexp_list,
       hash_fold_sexp_list,
       Typename_of_sexp_list,
       typename_of_sexp_list,
       typerep_of_sexp_list,
       bin_shape_sexp_option,
       bin_size_sexp_option,
       bin_write_sexp_option,
       bin_writer_sexp_option,
       bin_read_sexp_option,
       bin_read_sexp_option$0,
       bin_reader_sexp_option,
       bin_sexp_option,
       compare_sexp_option,
       hash_fold_sexp_option,
       Typename_of_sexp_option,
       typename_of_sexp_option,
       typerep_of_sexp_option,
       bin_shape_sexp_opaque$0,
       bin_size_sexp_opaque$0,
       bin_write_sexp_opaque$0,
       bin_writer_sexp_opaque$0,
       bin_read_sexp_opaque$1,
       bin_read_sexp_opaque$2,
       bin_reader_sexp_opaque$0,
       bin_sexp_opaque$0,
       compare_sexp_opaque$0,
       hash_fold_sexp_opaque$0,
       Typename_of_sexp_opaque$0,
       typename_of_sexp_opaque$0,
       typerep_of_sexp_opaque$0,
       _aBP_,
       _aBQ_,
       _fj_,
       am_running_test,
       _aBR_,
       _aBS_,
       Core_kernel_private];
    caml_register_global(5193,Core_kernel$0,"Core_kernel");
    return}
  (function(){return this}()));

//# sourceMappingURL=data:application/json;base64,
